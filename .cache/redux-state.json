{
  "nodes": {
    "SitePage /dev-404-page/": {
      "layout": "index",
      "jsonName": "dev-404-page.json",
      "internalComponentName": "ComponentDev404Page",
      "path": "/dev-404-page/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/.cache/dev-404-page.js",
      "componentChunkName": "component---cache-dev-404-page-js",
      "context": {},
      "pluginCreator___NODE": "Plugin dev-404-page",
      "pluginCreatorId": "Plugin dev-404-page",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/.cache/dev-404-page.js",
      "id": "SitePage /dev-404-page/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "e0ea1ac3e7e87c8dd1392a432c2c23dc",
        "description": "Plugin dev-404-page",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin dev-404-page": {
      "resolve": "/Users/robinclark/iohk-sites/cardanodocs.com/node_modules/gatsby/dist/internal-plugins/dev-404-page",
      "id": "Plugin dev-404-page",
      "name": "dev-404-page",
      "version": "1.0.0",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "createPagesStatefully"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/Users/robinclark/iohk-sites/cardanodocs.com/node_modules/gatsby/dist/internal-plugins/dev-404-page",
      "packageJson": {
        "name": "dev-404-page",
        "description": "Internal plugin to add a 404 page in development with helpful information",
        "version": "1.0.0",
        "main": "index.js",
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [],
        "devDependencies": [],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "8149fabdc24152999c86f9afefda0d91",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin component-layout-creator": {
      "resolve": "/Users/robinclark/iohk-sites/cardanodocs.com/node_modules/gatsby/dist/internal-plugins/component-layout-creator",
      "id": "Plugin component-layout-creator",
      "name": "component-layout-creator",
      "version": "1.0.0",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "createLayouts"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/Users/robinclark/iohk-sites/cardanodocs.com/node_modules/gatsby/dist/internal-plugins/component-layout-creator",
      "packageJson": {
        "name": "component-layout-creator",
        "description": "An internal Gatsby plugin that creates pages from component files in src/layouts",
        "version": "1.0.0",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin"
        ],
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [],
        "devDependencies": [],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "f655af9f7b76258b127e71ba1d9a2e49",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin internal-data-bridge": {
      "resolve": "/Users/robinclark/iohk-sites/cardanodocs.com/node_modules/gatsby/dist/internal-plugins/internal-data-bridge",
      "id": "Plugin internal-data-bridge",
      "name": "internal-data-bridge",
      "version": "1.0.0",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "sourceNodes",
        "onCreatePage"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/Users/robinclark/iohk-sites/cardanodocs.com/node_modules/gatsby/dist/internal-plugins/internal-data-bridge",
      "packageJson": {
        "name": "internal-data-bridge",
        "description": "An internal Gatsby plugin which creates data nodes from internal data",
        "version": "1.0.0",
        "main": "index.js",
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [],
        "devDependencies": [],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "e7f94fa85d63e6ade505744cca86b55f",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin prod-404": {
      "resolve": "/Users/robinclark/iohk-sites/cardanodocs.com/node_modules/gatsby/dist/internal-plugins/prod-404",
      "id": "Plugin prod-404",
      "name": "prod-404",
      "version": "1.0.0",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "onCreatePage"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/Users/robinclark/iohk-sites/cardanodocs.com/node_modules/gatsby/dist/internal-plugins/prod-404",
      "packageJson": {
        "name": "prod-404",
        "description": "Internal plugin to detect various flavors of 404 pages and ensure there's a 404.html path created as well to ensure compatability with static hosts",
        "version": "1.0.0",
        "main": "index.js",
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [],
        "devDependencies": [],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "ba4ab23a3c11dbfa202e60b347328f76",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin query-runner": {
      "resolve": "/Users/robinclark/iohk-sites/cardanodocs.com/node_modules/gatsby/dist/internal-plugins/query-runner",
      "id": "Plugin query-runner",
      "name": "query-runner",
      "version": "1.0.0",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "onCreatePage",
        "onCreateLayout"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/Users/robinclark/iohk-sites/cardanodocs.com/node_modules/gatsby/dist/internal-plugins/query-runner",
      "packageJson": {
        "name": "query-runner",
        "description": "Internal plugin for running queries",
        "version": "1.0.0",
        "main": "index.js",
        "author": "",
        "license": "MIT",
        "dependencies": [],
        "devDependencies": [],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "b0e89a6a7fc8ae74dfc35a05f61bf546",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-plugin-react-helmet": {
      "resolve": "/Users/robinclark/iohk-sites/cardanodocs.com/node_modules/gatsby-plugin-react-helmet",
      "id": "Plugin gatsby-plugin-react-helmet",
      "name": "gatsby-plugin-react-helmet",
      "version": "2.0.11",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [],
      "browserAPIs": [],
      "ssrAPIs": [
        "onRenderBody"
      ],
      "pluginFilepath": "/Users/robinclark/iohk-sites/cardanodocs.com/node_modules/gatsby-plugin-react-helmet",
      "packageJson": {
        "name": "gatsby-plugin-react-helmet",
        "description": "Manage document head data with react-helmet. Provides drop-in server rendering support for Gatsby.",
        "version": "2.0.11",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "favicon",
          "react-helmet",
          "seo",
          "document",
          "head",
          "title",
          "meta",
          "link",
          "script",
          "base",
          "noscript",
          "style"
        ],
        "author": "Kyle Mathews <matthews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          },
          {
            "name": "cross-env",
            "version": "^5.0.5"
          }
        ],
        "peerDependencies": [
          {
            "name": "gatsby",
            "version": "^1.0.0"
          },
          {
            "name": "react-helmet",
            "version": ">=5.1.3"
          }
        ],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "8fcbc7a073fe7c07fcbe83c92fa8ad75",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-plugin-catch-links": {
      "resolve": "/Users/robinclark/iohk-sites/cardanodocs.com/node_modules/gatsby-plugin-catch-links",
      "id": "Plugin gatsby-plugin-catch-links",
      "name": "gatsby-plugin-catch-links",
      "version": "1.0.26",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [],
      "browserAPIs": [
        "onClientEntry"
      ],
      "ssrAPIs": [],
      "pluginFilepath": "/Users/robinclark/iohk-sites/cardanodocs.com/node_modules/gatsby-plugin-catch-links",
      "packageJson": {
        "name": "gatsby-plugin-catch-links",
        "description": "Intercepts local links from markdown and other non-react pages and does a client-side pushState to avoid the browser having to refresh the page.",
        "version": "1.0.26",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin"
        ],
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          },
          {
            "name": "escape-string-regexp",
            "version": "^1.0.5"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          },
          {
            "name": "cross-env",
            "version": "^5.0.5"
          }
        ],
        "peerDependencies": [
          {
            "name": "gatsby",
            "version": "^1.0.0"
          }
        ],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "a20ef2d432a0a142add1c73196bb59d4",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-plugin-page-transitions": {
      "resolve": "/Users/robinclark/iohk-sites/cardanodocs.com/node_modules/gatsby-plugin-page-transitions",
      "id": "Plugin gatsby-plugin-page-transitions",
      "name": "gatsby-plugin-page-transitions",
      "version": "1.0.7",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [],
      "browserAPIs": [
        "onClientEntry",
        "replaceHistory"
      ],
      "ssrAPIs": [],
      "pluginFilepath": "/Users/robinclark/iohk-sites/cardanodocs.com/node_modules/gatsby-plugin-page-transitions",
      "packageJson": {
        "name": "gatsby-plugin-page-transitions",
        "description": "Gatsby plugin to set page transitions",
        "version": "1.0.7",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "page",
          "transitions",
          "page-transitions"
        ],
        "author": "Mong-Kuen Sun <mongkuen.sun@gmail.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "history",
            "version": "^4.7.2"
          },
          {
            "name": "prop-types",
            "version": "^15.6.2"
          },
          {
            "name": "react-transition-group",
            "version": "^2.4.0"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          },
          {
            "name": "babel-plugin-transform-object-rest-spread",
            "version": "^6.26.0"
          },
          {
            "name": "babel-preset-es2015",
            "version": "^6.24.1"
          },
          {
            "name": "babel-preset-react",
            "version": "^6.24.1"
          },
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          },
          {
            "name": "concurrently",
            "version": "^3.6.0"
          },
          {
            "name": "onchange",
            "version": "^4.0.0"
          },
          {
            "name": "prettier",
            "version": "^1.13.7"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "df50604b3b5129c3e6d1e79996d95faa",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-plugin-styled-components": {
      "resolve": "/Users/robinclark/iohk-sites/cardanodocs.com/node_modules/gatsby-plugin-styled-components",
      "id": "Plugin gatsby-plugin-styled-components",
      "name": "gatsby-plugin-styled-components",
      "version": "2.0.11",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "modifyBabelrc"
      ],
      "browserAPIs": [],
      "ssrAPIs": [
        "replaceRenderer"
      ],
      "pluginFilepath": "/Users/robinclark/iohk-sites/cardanodocs.com/node_modules/gatsby-plugin-styled-components",
      "packageJson": {
        "name": "gatsby-plugin-styled-components",
        "description": "Gatsby plugin to add support for styled components",
        "version": "2.0.11",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "styled-components"
        ],
        "author": "Guten Ye <ywzhaifei@gmail.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          }
        ],
        "peerDependencies": [
          {
            "name": "babel-plugin-styled-components",
            "version": ">1.5.0"
          },
          {
            "name": "gatsby",
            "version": "^1.0.0"
          },
          {
            "name": "styled-components",
            "version": ">= 2.0.0"
          }
        ],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "32b39dfe9cf53f0b0adaed9206222131",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-plugin-sass": {
      "resolve": "/Users/robinclark/iohk-sites/cardanodocs.com/node_modules/gatsby-plugin-sass",
      "id": "Plugin gatsby-plugin-sass",
      "name": "gatsby-plugin-sass",
      "version": "1.0.26",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "modifyWebpackConfig"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/Users/robinclark/iohk-sites/cardanodocs.com/node_modules/gatsby-plugin-sass",
      "packageJson": {
        "name": "gatsby-plugin-sass",
        "description": "Gatsby plugin to handle scss/sass files",
        "version": "1.0.26",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "sass",
          "scss"
        ],
        "author": "Daniel Farrell <daniel@mobelux.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          },
          {
            "name": "gatsby-1-config-css-modules",
            "version": "^1.0.11"
          },
          {
            "name": "gatsby-1-config-extract-plugin",
            "version": "^1.0.3"
          },
          {
            "name": "node-sass",
            "version": "^4.5.2"
          },
          {
            "name": "sass-loader",
            "version": "^4.1.1"
          },
          {
            "name": "webpack",
            "version": "^1.13.3"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          },
          {
            "name": "cross-env",
            "version": "^5.0.5"
          }
        ],
        "peerDependencies": [
          {
            "name": "gatsby",
            "version": "^1.0.0"
          }
        ],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "31affae0ef20564833d2607fae5b1d86",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-plugin-no-sourcemaps": {
      "resolve": "/Users/robinclark/iohk-sites/cardanodocs.com/node_modules/gatsby-plugin-no-sourcemaps",
      "id": "Plugin gatsby-plugin-no-sourcemaps",
      "name": "gatsby-plugin-no-sourcemaps",
      "version": "2.0.1",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/Users/robinclark/iohk-sites/cardanodocs.com/node_modules/gatsby-plugin-no-sourcemaps",
      "packageJson": {
        "name": "gatsby-plugin-no-sourcemaps",
        "description": "Disable sourcemaps when building JavaScript",
        "version": "2.0.1",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "sourcemaps",
          "webpack"
        ],
        "author": "Stuart Taylor <stuart@freecodecamp.org>",
        "license": "MIT",
        "peerDependencies": [
          {
            "name": "gatsby",
            "version": ">2.0.0-alpha"
          }
        ],
        "dependencies": [],
        "devDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "cfc056abd964d6cad20ca511ad8677b7",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-transformer-remark": {
      "resolve": "/Users/robinclark/iohk-sites/cardanodocs.com/node_modules/gatsby-transformer-remark",
      "id": "Plugin gatsby-transformer-remark",
      "name": "gatsby-transformer-remark",
      "version": "1.7.44",
      "pluginOptions": {
        "plugins": [],
        "excerpt_separator": "<!-- end -->"
      },
      "nodeAPIs": [
        "onCreateNode",
        "setFieldsOnGraphQLNodeType"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/Users/robinclark/iohk-sites/cardanodocs.com/node_modules/gatsby-transformer-remark",
      "packageJson": {
        "name": "gatsby-transformer-remark",
        "description": "Gatsby transformer plugin for Markdown using the Remark library and ecosystem",
        "version": "1.7.44",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "markdown",
          "remark"
        ],
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          },
          {
            "name": "bluebird",
            "version": "^3.5.0"
          },
          {
            "name": "graphql-type-json",
            "version": "^0.1.4"
          },
          {
            "name": "gray-matter",
            "version": "^3.0.0"
          },
          {
            "name": "hast-util-raw",
            "version": "^2.0.2"
          },
          {
            "name": "hast-util-to-html",
            "version": "^3.0.0"
          },
          {
            "name": "lodash",
            "version": "^4.17.4"
          },
          {
            "name": "mdast-util-to-hast",
            "version": "^2.4.0"
          },
          {
            "name": "mdast-util-toc",
            "version": "^2.0.1"
          },
          {
            "name": "remark",
            "version": "^7.0.1"
          },
          {
            "name": "remark-parse",
            "version": "^4.0.0"
          },
          {
            "name": "remark-retext",
            "version": "^3.1.0"
          },
          {
            "name": "remark-stringify",
            "version": "^4.0.0"
          },
          {
            "name": "retext-english",
            "version": "^3.0.0"
          },
          {
            "name": "sanitize-html",
            "version": "^1.14.1"
          },
          {
            "name": "underscore.string",
            "version": "^3.3.4"
          },
          {
            "name": "unified",
            "version": "^6.1.5"
          },
          {
            "name": "unist-util-remove-position",
            "version": "^1.1.1"
          },
          {
            "name": "unist-util-select",
            "version": "^1.5.0"
          },
          {
            "name": "unist-util-visit",
            "version": "^1.1.1"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          },
          {
            "name": "babel-plugin-transform-object-rest-spread",
            "version": "^6.20.2"
          },
          {
            "name": "cross-env",
            "version": "^5.0.5"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "4163edf1af14daccddfe5f2f6d3e7747",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-source-filesystem": {
      "resolve": "/Users/robinclark/iohk-sites/cardanodocs.com/node_modules/gatsby-source-filesystem",
      "id": "Plugin gatsby-source-filesystem",
      "name": "gatsby-source-filesystem",
      "version": "1.5.39",
      "pluginOptions": {
        "plugins": [],
        "path": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/",
        "name": "docs"
      },
      "nodeAPIs": [
        "sourceNodes",
        "setFieldsOnGraphQLNodeType"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/Users/robinclark/iohk-sites/cardanodocs.com/node_modules/gatsby-source-filesystem",
      "packageJson": {
        "name": "gatsby-source-filesystem",
        "description": "Gatsby plugin which parses files within a directory for further parsing by other plugins",
        "version": "1.5.39",
        "keywords": [
          "gatsby",
          "gatsby-plugin"
        ],
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          },
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          },
          {
            "name": "better-queue",
            "version": "^3.8.7"
          },
          {
            "name": "bluebird",
            "version": "^3.5.0"
          },
          {
            "name": "chokidar",
            "version": "^1.7.0"
          },
          {
            "name": "fs-extra",
            "version": "^4.0.1"
          },
          {
            "name": "got",
            "version": "^7.1.0"
          },
          {
            "name": "md5-file",
            "version": "^3.1.1"
          },
          {
            "name": "mime",
            "version": "^1.3.6"
          },
          {
            "name": "pretty-bytes",
            "version": "^4.0.2"
          },
          {
            "name": "slash",
            "version": "^1.0.0"
          },
          {
            "name": "valid-url",
            "version": "^1.0.9"
          }
        ],
        "devDependencies": [
          {
            "name": "cross-env",
            "version": "^5.0.5"
          }
        ],
        "peerDependencies": [
          {
            "name": "gatsby",
            "version": "^1.9.250"
          }
        ],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "e5cdbb78cf4d57086845a0be08fd6b8c",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin @andrew-codes/gatsby-plugin-elasticlunr-search": {
      "resolve": "/Users/robinclark/iohk-sites/cardanodocs.com/node_modules/@andrew-codes/gatsby-plugin-elasticlunr-search",
      "id": "Plugin @andrew-codes/gatsby-plugin-elasticlunr-search",
      "name": "@andrew-codes/gatsby-plugin-elasticlunr-search",
      "version": "1.0.4",
      "pluginOptions": {
        "plugins": [],
        "fields": [
          "doc_title",
          "keywords",
          "excerpt",
          "html",
          "path"
        ],
        "resolvers": {
          "MarkdownRemark": {}
        }
      },
      "nodeAPIs": [
        "sourceNodes",
        "onCreateNode",
        "setFieldsOnGraphQLNodeType"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/Users/robinclark/iohk-sites/cardanodocs.com/node_modules/@andrew-codes/gatsby-plugin-elasticlunr-search",
      "packageJson": {
        "name": "@andrew-codes/gatsby-plugin-elasticlunr-search",
        "description": "Search for gatsby; implemented via elastic lunr.",
        "version": "1.0.4",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "lunr",
          "search",
          "elastic lunr"
        ],
        "author": "Andrew Smith <andrew@andrew.codes>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "elasticlunr",
            "version": "^0.9.5"
          },
          {
            "name": "graphql",
            "version": "^0.11.7"
          }
        ],
        "devDependencies": [
          {
            "name": "@babel/cli",
            "version": "^7.0.0-beta.32"
          },
          {
            "name": "@babel/core",
            "version": "^7.0.0-beta.32"
          },
          {
            "name": "@babel/plugin-proposal-object-rest-spread",
            "version": "^7.0.0-beta.32"
          },
          {
            "name": "@babel/preset-env",
            "version": "^7.0.0-beta.32"
          },
          {
            "name": "eslint",
            "version": "^4.12.1"
          },
          {
            "name": "nps",
            "version": "^5.7.1"
          },
          {
            "name": "nps-utils",
            "version": "^1.5.0"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "5ede4a121d60b08bb22176d5ac402f9e",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin default-site-plugin": {
      "resolve": "/Users/robinclark/iohk-sites/cardanodocs.com",
      "id": "Plugin default-site-plugin",
      "name": "default-site-plugin",
      "version": "d9bad5f73b5368e465f2a6a151127ea9",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "createPages"
      ],
      "browserAPIs": [
        "onInitialClientRender",
        "onRouteUpdate"
      ],
      "ssrAPIs": [],
      "pluginFilepath": "/Users/robinclark/iohk-sites/cardanodocs.com",
      "packageJson": {
        "name": "gatsby-starter-default",
        "description": "Gatsby default starter",
        "version": "1.0.0",
        "keywords": [
          "gatsby"
        ],
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "detect-browser",
            "version": "^3.0.1"
          },
          {
            "name": "elasticlunr",
            "version": "^0.9.5"
          },
          {
            "name": "gatsby",
            "version": "^1.9.277"
          },
          {
            "name": "gatsby-link",
            "version": "^1.6.46"
          },
          {
            "name": "gatsby-plugin-catch-links",
            "version": "^1.0.24"
          },
          {
            "name": "gatsby-plugin-page-transitions",
            "version": "^1.0.7"
          },
          {
            "name": "gatsby-plugin-react-helmet",
            "version": "^2.0.11"
          },
          {
            "name": "gatsby-source-filesystem",
            "version": "^1.5.39"
          },
          {
            "name": "gatsby-transformer-remark",
            "version": "^1.7.44"
          },
          {
            "name": "jquery",
            "version": "^3.3.1"
          },
          {
            "name": "markdown-to-jsx",
            "version": "^6.7.2"
          },
          {
            "name": "popper.js",
            "version": "^1.14.4"
          },
          {
            "name": "react-helmet",
            "version": "^5.2.0"
          },
          {
            "name": "script-loader",
            "version": "^0.7.2"
          }
        ],
        "devDependencies": [
          {
            "name": "@andrew-codes/gatsby-plugin-elasticlunr-search",
            "version": "^1.0.4"
          },
          {
            "name": "bootstrap-scss",
            "version": "4.1.3"
          },
          {
            "name": "gatsby-plugin-no-sourcemaps",
            "version": "^2.0.1"
          },
          {
            "name": "gatsby-plugin-sass",
            "version": "^1.0.26"
          },
          {
            "name": "gatsby-plugin-styled-components",
            "version": "^2.0.2"
          },
          {
            "name": "gatsby-plugin-typography",
            "version": "^1.7.19"
          },
          {
            "name": "node-sass",
            "version": "^4.9.3"
          },
          {
            "name": "prettier",
            "version": "^1.13.7"
          },
          {
            "name": "react-icons",
            "version": "^3.1.0"
          },
          {
            "name": "react-media",
            "version": "^1.8.0"
          },
          {
            "name": "styled-components",
            "version": "^2.2.3"
          },
          {
            "name": "typeface-montserrat",
            "version": "^0.0.54"
          },
          {
            "name": "wowjs",
            "version": "^1.1.3"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "0e75014a6ddc1424990903c5fe6cea74",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-plugin-page-creator": {
      "resolve": "/Users/robinclark/iohk-sites/cardanodocs.com/node_modules/gatsby-plugin-page-creator",
      "id": "Plugin gatsby-plugin-page-creator",
      "name": "gatsby-plugin-page-creator",
      "version": "1.0.1",
      "pluginOptions": {
        "plugins": [],
        "path": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages",
        "pathCheck": false
      },
      "nodeAPIs": [
        "createPagesStatefully"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/Users/robinclark/iohk-sites/cardanodocs.com/node_modules/gatsby-plugin-page-creator",
      "packageJson": {
        "name": "gatsby-plugin-page-creator",
        "description": "Gatsby plugin that automatically creates pages from React components in specified directories",
        "version": "1.0.1",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin"
        ],
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          },
          {
            "name": "bluebird",
            "version": "^3.5.0"
          },
          {
            "name": "chokidar",
            "version": "^1.7.0"
          },
          {
            "name": "glob",
            "version": "^7.1.1"
          },
          {
            "name": "lodash",
            "version": "^4.17.4"
          },
          {
            "name": "parse-filepath",
            "version": "^1.0.1"
          },
          {
            "name": "slash",
            "version": "^1.0.0"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          },
          {
            "name": "cross-env",
            "version": "^5.0.5"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "f2c6c7b4962bed597cb583b275f9d487",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Site": {
      "siteMetadata": {
        "site_title": "Cardano Docs"
      },
      "port": "8000",
      "host": "localhost",
      "pathPrefix": "",
      "polyfill": true,
      "buildTime": "2018-10-31T17:51:19.328Z",
      "id": "Site",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "049a22a10becceb9ae2cfb62f4a7f609",
        "type": "Site",
        "owner": "internal-data-bridge"
      }
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/ absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/ absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "36314832794b197f3f3016e2cfaa58aa",
        "type": "Directory",
        "description": "Directory \"src/pages\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/",
      "relativePath": "",
      "extension": "",
      "size": 224,
      "prettySize": "224 B",
      "modifiedTime": "2018-10-31T17:31:28.126Z",
      "accessTime": "2018-10-31T17:51:22.082Z",
      "changeTime": "2018-10-31T17:31:28.126Z",
      "birthTime": "2018-09-06T16:31:48.369Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src",
      "base": "pages",
      "ext": "",
      "name": "pages",
      "relativeDirectory": "..",
      "dev": 16777221,
      "mode": 16877,
      "nlink": 7,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 13264855,
      "blocks": 0,
      "atimeMs": 1541008282082.213,
      "mtimeMs": 1541007088125.5305,
      "ctimeMs": 1541007088125.5305,
      "birthtimeMs": 1536251508369.3958,
      "atime": "2018-10-31T17:51:22.082Z",
      "mtime": "2018-10-31T17:31:28.126Z",
      "ctime": "2018-10-31T17:31:28.126Z",
      "birthtime": "2018-09-06T16:31:48.369Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "16f46eae82665c71c79d7ff6c6b847c2",
        "type": "Directory",
        "description": "Directory \"src/pages/cn\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn",
      "relativePath": "cn",
      "extension": "",
      "size": 192,
      "prettySize": "192 B",
      "modifiedTime": "2018-10-11T13:59:01.188Z",
      "accessTime": "2018-10-31T17:51:22.084Z",
      "changeTime": "2018-10-11T13:59:01.188Z",
      "birthTime": "2018-10-10T11:47:30.555Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages",
      "base": "cn",
      "ext": "",
      "name": "cn",
      "relativeDirectory": "",
      "dev": 16777221,
      "mode": 16877,
      "nlink": 6,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 16367741,
      "blocks": 0,
      "atimeMs": 1541008282084.3945,
      "mtimeMs": 1539266341187.7883,
      "ctimeMs": 1539266341187.7883,
      "birthtimeMs": 1539172050554.7725,
      "atime": "2018-10-31T17:51:22.084Z",
      "mtime": "2018-10-11T13:59:01.188Z",
      "ctime": "2018-10-11T13:59:01.188Z",
      "birthtime": "2018-10-10T11:47:30.555Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "37f94e009f057819a16107b2e46f0b9b",
        "type": "Directory",
        "description": "Directory \"src/pages/en\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en",
      "relativePath": "en",
      "extension": "",
      "size": 192,
      "prettySize": "192 B",
      "modifiedTime": "2018-10-31T17:31:28.129Z",
      "accessTime": "2018-10-31T17:51:22.084Z",
      "changeTime": "2018-10-31T17:31:28.129Z",
      "birthTime": "2018-09-06T17:41:44.104Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages",
      "base": "en",
      "ext": "",
      "name": "en",
      "relativeDirectory": "",
      "dev": 16777221,
      "mode": 16877,
      "nlink": 6,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 13264868,
      "blocks": 0,
      "atimeMs": 1541008282084.4304,
      "mtimeMs": 1541007088128.8433,
      "ctimeMs": 1541007088128.8433,
      "birthtimeMs": 1536255704104.3481,
      "atime": "2018-10-31T17:51:22.084Z",
      "mtime": "2018-10-31T17:31:28.129Z",
      "ctime": "2018-10-31T17:31:28.129Z",
      "birthtime": "2018-09-06T17:41:44.104Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/content absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/content absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "e27f94a77ff6f1c351d53d22a9a3d016",
        "type": "Directory",
        "description": "Directory \"src/pages/cn/content\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/content",
      "relativePath": "cn/content",
      "extension": "",
      "size": 128,
      "prettySize": "128 B",
      "modifiedTime": "2018-10-31T17:31:28.127Z",
      "accessTime": "2018-10-31T17:51:22.086Z",
      "changeTime": "2018-10-31T17:31:28.127Z",
      "birthTime": "2018-10-11T13:59:01.180Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn",
      "base": "content",
      "ext": "",
      "name": "content",
      "relativeDirectory": "cn",
      "dev": 16777221,
      "mode": 16877,
      "nlink": 4,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 16659066,
      "blocks": 0,
      "atimeMs": 1541008282085.8735,
      "mtimeMs": 1541007088126.536,
      "ctimeMs": 1541007088126.536,
      "birthtimeMs": 1539266341179.615,
      "atime": "2018-10-31T17:51:22.086Z",
      "mtime": "2018-10-31T17:31:28.127Z",
      "ctime": "2018-10-31T17:31:28.127Z",
      "birthtime": "2018-10-11T13:59:01.180Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "ee5f1d285492d1731d654048470e48be",
        "type": "Directory",
        "description": "Directory \"src/pages/cn/docs\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs",
      "relativePath": "cn/docs",
      "extension": "",
      "size": 384,
      "prettySize": "384 B",
      "modifiedTime": "2018-10-17T14:26:20.076Z",
      "accessTime": "2018-10-31T17:51:22.086Z",
      "changeTime": "2018-10-17T14:26:20.076Z",
      "birthTime": "2018-10-10T11:47:30.571Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn",
      "base": "docs",
      "ext": "",
      "name": "docs",
      "relativeDirectory": "cn",
      "dev": 16777221,
      "mode": 16877,
      "nlink": 12,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 16367746,
      "blocks": 0,
      "atimeMs": 1541008282085.9207,
      "mtimeMs": 1539786380075.939,
      "ctimeMs": 1539786380075.939,
      "birthtimeMs": 1539172050571.095,
      "atime": "2018-10-31T17:51:22.086Z",
      "mtime": "2018-10-17T14:26:20.076Z",
      "ctime": "2018-10-17T14:26:20.076Z",
      "birthtime": "2018-10-10T11:47:30.571Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/content absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/content absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "b1dea44166159359a42258b2b20ca467",
        "type": "Directory",
        "description": "Directory \"src/pages/en/content\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/content",
      "relativePath": "en/content",
      "extension": "",
      "size": 128,
      "prettySize": "128 B",
      "modifiedTime": "2018-10-31T17:31:28.128Z",
      "accessTime": "2018-10-31T17:51:22.086Z",
      "changeTime": "2018-10-31T17:31:28.128Z",
      "birthTime": "2018-10-11T13:59:01.190Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en",
      "base": "content",
      "ext": "",
      "name": "content",
      "relativeDirectory": "en",
      "dev": 16777221,
      "mode": 16877,
      "nlink": 4,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 16659075,
      "blocks": 0,
      "atimeMs": 1541008282085.8938,
      "mtimeMs": 1541007088127.8435,
      "ctimeMs": 1541007088127.8435,
      "birthtimeMs": 1539266341189.5027,
      "atime": "2018-10-31T17:51:22.086Z",
      "mtime": "2018-10-31T17:31:28.128Z",
      "ctime": "2018-10-31T17:31:28.128Z",
      "birthtime": "2018-10-11T13:59:01.190Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "ae26272dd570d8373415998b5e0fb355",
        "type": "Directory",
        "description": "Directory \"src/pages/en/docs\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs",
      "relativePath": "en/docs",
      "extension": "",
      "size": 416,
      "prettySize": "416 B",
      "modifiedTime": "2018-10-16T10:58:08.324Z",
      "accessTime": "2018-10-31T17:51:22.086Z",
      "changeTime": "2018-10-16T10:58:08.324Z",
      "birthTime": "2018-09-07T13:22:39.911Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en",
      "base": "docs",
      "ext": "",
      "name": "docs",
      "relativeDirectory": "en",
      "dev": 16777221,
      "mode": 16877,
      "nlink": 13,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 13264873,
      "blocks": 0,
      "atimeMs": 1541008282085.9165,
      "mtimeMs": 1539687488324.3406,
      "ctimeMs": 1539687488324.3406,
      "birthtimeMs": 1536326559910.9746,
      "atime": "2018-10-31T17:51:22.086Z",
      "mtime": "2018-10-16T10:58:08.324Z",
      "ctime": "2018-10-16T10:58:08.324Z",
      "birthtime": "2018-09-07T13:22:39.911Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "d64d984c43bad599757c59a6fbf04bc9",
        "type": "Directory",
        "description": "Directory \"src/pages/en/docs/cardano\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano",
      "relativePath": "en/docs/cardano",
      "extension": "",
      "size": 416,
      "prettySize": "416 B",
      "modifiedTime": "2018-10-11T14:13:36.094Z",
      "accessTime": "2018-10-31T17:51:22.090Z",
      "changeTime": "2018-10-11T14:13:48.059Z",
      "birthTime": "2018-10-11T13:57:21.380Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs",
      "base": "cardano",
      "ext": "",
      "name": "cardano",
      "relativeDirectory": "en/docs",
      "dev": 16777221,
      "mode": 16877,
      "nlink": 13,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 16663290,
      "blocks": 0,
      "atimeMs": 1541008282089.7659,
      "mtimeMs": 1539267216094.1262,
      "ctimeMs": 1539267228059.2236,
      "birthtimeMs": 1539266241379.8086,
      "atime": "2018-10-31T17:51:22.090Z",
      "mtime": "2018-10-11T14:13:36.094Z",
      "ctime": "2018-10-11T14:13:48.059Z",
      "birthtime": "2018-10-11T13:57:21.380Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/for-contributors absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/for-contributors absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "fdbbf91abe140c560a3346648729fa8d",
        "type": "Directory",
        "description": "Directory \"src/pages/en/docs/for-contributors\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/for-contributors",
      "relativePath": "en/docs/for-contributors",
      "extension": "",
      "size": 128,
      "prettySize": "128 B",
      "modifiedTime": "2018-10-11T13:57:21.448Z",
      "accessTime": "2018-10-31T17:51:22.090Z",
      "changeTime": "2018-10-16T10:58:08.433Z",
      "birthTime": "2018-10-11T13:57:21.447Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs",
      "base": "for-contributors",
      "ext": "",
      "name": "for-contributors",
      "relativeDirectory": "en/docs",
      "dev": 16777221,
      "mode": 16877,
      "nlink": 4,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17283488,
      "blocks": 0,
      "atimeMs": 1541008282089.7822,
      "mtimeMs": 1539266241448.082,
      "ctimeMs": 1539687488433.4824,
      "birthtimeMs": 1539266241446.889,
      "atime": "2018-10-31T17:51:22.090Z",
      "mtime": "2018-10-11T13:57:21.448Z",
      "ctime": "2018-10-16T10:58:08.433Z",
      "birthtime": "2018-10-11T13:57:21.447Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "0476b9167421cb51c4db7b454f78fe35",
        "type": "Directory",
        "description": "Directory \"src/pages/en/docs/technical\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical",
      "relativePath": "en/docs/technical",
      "extension": "",
      "size": 544,
      "prettySize": "544 B",
      "modifiedTime": "2018-10-16T10:54:17.721Z",
      "accessTime": "2018-10-31T17:51:22.090Z",
      "changeTime": "2018-10-16T10:54:17.721Z",
      "birthTime": "2018-10-11T13:57:21.449Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs",
      "base": "technical",
      "ext": "",
      "name": "technical",
      "relativeDirectory": "en/docs",
      "dev": 16777221,
      "mode": 16877,
      "nlink": 17,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17279613,
      "blocks": 0,
      "atimeMs": 1541008282089.814,
      "mtimeMs": 1539687257720.9065,
      "ctimeMs": 1539687257720.9065,
      "birthtimeMs": 1539266241448.969,
      "atime": "2018-10-31T17:51:22.090Z",
      "mtime": "2018-10-16T10:54:17.721Z",
      "ctime": "2018-10-16T10:54:17.721Z",
      "birthtime": "2018-10-11T13:57:21.449Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "0cb08683e4aa43a131b3c13a3b56250a",
        "type": "Directory",
        "description": "Directory \"src/pages/en/docs/timeline\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline",
      "relativePath": "en/docs/timeline",
      "extension": "",
      "size": 160,
      "prettySize": "160 B",
      "modifiedTime": "2018-10-11T13:57:21.488Z",
      "accessTime": "2018-10-31T17:51:22.090Z",
      "changeTime": "2018-10-16T10:36:33.500Z",
      "birthTime": "2018-10-11T13:57:21.486Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs",
      "base": "timeline",
      "ext": "",
      "name": "timeline",
      "relativeDirectory": "en/docs",
      "dev": 16777221,
      "mode": 16877,
      "nlink": 5,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17277431,
      "blocks": 0,
      "atimeMs": 1541008282089.818,
      "mtimeMs": 1539266241487.7026,
      "ctimeMs": 1539686193499.9014,
      "birthtimeMs": 1539266241485.5842,
      "atime": "2018-10-31T17:51:22.090Z",
      "mtime": "2018-10-11T13:57:21.488Z",
      "ctime": "2018-10-16T10:36:33.500Z",
      "birthtime": "2018-10-11T13:57:21.486Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "85a73231d6eed149459011ceb0c1a1fe",
        "type": "Directory",
        "description": "Directory \"src/pages/cn/docs/cardano\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano",
      "relativePath": "cn/docs/cardano",
      "extension": "",
      "size": 416,
      "prettySize": "416 B",
      "modifiedTime": "2018-10-17T13:12:17.055Z",
      "accessTime": "2018-10-31T17:51:22.090Z",
      "changeTime": "2018-10-17T13:12:17.055Z",
      "birthTime": "2018-10-17T13:12:11.232Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs",
      "base": "cardano",
      "ext": "",
      "name": "cardano",
      "relativeDirectory": "cn/docs",
      "dev": 16777221,
      "mode": 16877,
      "nlink": 13,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17555554,
      "blocks": 0,
      "atimeMs": 1541008282089.8293,
      "mtimeMs": 1539781937054.8677,
      "ctimeMs": 1539781937054.8677,
      "birthtimeMs": 1539781931232.2976,
      "atime": "2018-10-31T17:51:22.090Z",
      "mtime": "2018-10-17T13:12:17.055Z",
      "ctime": "2018-10-17T13:12:17.055Z",
      "birthtime": "2018-10-17T13:12:11.232Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/contributors absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/contributors absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "7950d3a12833fb48c3a97dbff38299ac",
        "type": "Directory",
        "description": "Directory \"src/pages/cn/docs/contributors\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/contributors",
      "relativePath": "cn/docs/contributors",
      "extension": "",
      "size": 128,
      "prettySize": "128 B",
      "modifiedTime": "2018-10-17T14:26:23.610Z",
      "accessTime": "2018-10-31T17:51:22.090Z",
      "changeTime": "2018-10-17T14:26:23.610Z",
      "birthTime": "2018-10-17T14:26:09.906Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs",
      "base": "contributors",
      "ext": "",
      "name": "contributors",
      "relativeDirectory": "cn/docs",
      "dev": 16777221,
      "mode": 16877,
      "nlink": 4,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17568708,
      "blocks": 0,
      "atimeMs": 1541008282089.866,
      "mtimeMs": 1539786383610.0393,
      "ctimeMs": 1539786383610.0393,
      "birthtimeMs": 1539786369905.736,
      "atime": "2018-10-31T17:51:22.090Z",
      "mtime": "2018-10-17T14:26:23.610Z",
      "ctime": "2018-10-17T14:26:23.610Z",
      "birthtime": "2018-10-17T14:26:09.906Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "163753c2eeb4461b41b7ea7f1cc33356",
        "type": "Directory",
        "description": "Directory \"src/pages/cn/docs/technical\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical",
      "relativePath": "cn/docs/technical",
      "extension": "",
      "size": 512,
      "prettySize": "512 B",
      "modifiedTime": "2018-10-17T14:17:44.526Z",
      "accessTime": "2018-10-31T17:51:22.090Z",
      "changeTime": "2018-10-17T14:17:44.526Z",
      "birthTime": "2018-10-17T13:27:09.382Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs",
      "base": "technical",
      "ext": "",
      "name": "technical",
      "relativeDirectory": "cn/docs",
      "dev": 16777221,
      "mode": 16877,
      "nlink": 16,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17560790,
      "blocks": 0,
      "atimeMs": 1541008282089.8508,
      "mtimeMs": 1539785864526.4866,
      "ctimeMs": 1539785864526.4866,
      "birthtimeMs": 1539782829381.8923,
      "atime": "2018-10-31T17:51:22.090Z",
      "mtime": "2018-10-17T14:17:44.526Z",
      "ctime": "2018-10-17T14:17:44.526Z",
      "birthtime": "2018-10-17T13:27:09.382Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "0e08ad05d2918863e8b66c462bb3debf",
        "type": "Directory",
        "description": "Directory \"src/pages/cn/docs/timeline\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline",
      "relativePath": "cn/docs/timeline",
      "extension": "",
      "size": 160,
      "prettySize": "160 B",
      "modifiedTime": "2018-10-17T13:22:15.756Z",
      "accessTime": "2018-10-31T17:51:22.090Z",
      "changeTime": "2018-10-17T13:22:15.756Z",
      "birthTime": "2018-10-17T13:22:10.631Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs",
      "base": "timeline",
      "ext": "",
      "name": "timeline",
      "relativeDirectory": "cn/docs",
      "dev": 16777221,
      "mode": 16877,
      "nlink": 5,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17559144,
      "blocks": 0,
      "atimeMs": 1541008282089.9014,
      "mtimeMs": 1539782535755.7751,
      "ctimeMs": 1539782535755.7751,
      "birthtimeMs": 1539782530630.9138,
      "atime": "2018-10-31T17:51:22.090Z",
      "mtime": "2018-10-17T13:22:15.756Z",
      "ctime": "2018-10-17T13:22:15.756Z",
      "birthtime": "2018-10-17T13:22:10.631Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "c2ac5be97e0404d7daf47c8c72bf73ed",
        "type": "Directory",
        "description": "Directory \"src/pages/en/docs/technical/plutus\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus",
      "relativePath": "en/docs/technical/plutus",
      "extension": "",
      "size": 160,
      "prettySize": "160 B",
      "modifiedTime": "2018-10-11T13:57:21.471Z",
      "accessTime": "2018-10-31T17:51:22.096Z",
      "changeTime": "2018-10-16T10:43:09.260Z",
      "birthTime": "2018-10-11T13:57:21.469Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical",
      "base": "plutus",
      "ext": "",
      "name": "plutus",
      "relativeDirectory": "en/docs/technical",
      "dev": 16777221,
      "mode": 16877,
      "nlink": 5,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17279636,
      "blocks": 0,
      "atimeMs": 1541008282095.9753,
      "mtimeMs": 1539266241471.3838,
      "ctimeMs": 1539686589260.2195,
      "birthtimeMs": 1539266241468.8298,
      "atime": "2018-10-31T17:51:22.096Z",
      "mtime": "2018-10-11T13:57:21.471Z",
      "ctime": "2018-10-16T10:43:09.260Z",
      "birthtime": "2018-10-11T13:57:21.469Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "feb192ca68e53e97b2acde3077e1d797",
        "type": "Directory",
        "description": "Directory \"src/pages/en/docs/technical/protocols\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols",
      "relativePath": "en/docs/technical/protocols",
      "extension": "",
      "size": 224,
      "prettySize": "224 B",
      "modifiedTime": "2018-10-11T13:57:21.481Z",
      "accessTime": "2018-10-31T17:51:22.096Z",
      "changeTime": "2018-10-16T10:43:09.256Z",
      "birthTime": "2018-10-11T13:57:21.473Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical",
      "base": "protocols",
      "ext": "",
      "name": "protocols",
      "relativeDirectory": "en/docs/technical",
      "dev": 16777221,
      "mode": 16877,
      "nlink": 7,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17279630,
      "blocks": 0,
      "atimeMs": 1541008282095.9893,
      "mtimeMs": 1539266241480.6794,
      "ctimeMs": 1539686589255.8123,
      "birthtimeMs": 1539266241472.5596,
      "atime": "2018-10-31T17:51:22.096Z",
      "mtime": "2018-10-11T13:57:21.481Z",
      "ctime": "2018-10-16T10:43:09.256Z",
      "birthtime": "2018-10-11T13:57:21.473Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/wallet absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/wallet absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "69b6f9192b48402dea5a52123bb85d31",
        "type": "Directory",
        "description": "Directory \"src/pages/en/docs/technical/wallet\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/wallet",
      "relativePath": "en/docs/technical/wallet",
      "extension": "",
      "size": 96,
      "prettySize": "96 B",
      "modifiedTime": "2018-10-11T13:57:21.485Z",
      "accessTime": "2018-10-31T17:51:22.096Z",
      "changeTime": "2018-10-16T10:43:09.239Z",
      "birthTime": "2018-10-11T13:57:21.485Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical",
      "base": "wallet",
      "ext": "",
      "name": "wallet",
      "relativeDirectory": "en/docs/technical",
      "dev": 16777221,
      "mode": 16877,
      "nlink": 3,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17279627,
      "blocks": 0,
      "atimeMs": 1541008282096.0208,
      "mtimeMs": 1539266241484.7632,
      "ctimeMs": 1539686589239.1409,
      "birthtimeMs": 1539266241484.6409,
      "atime": "2018-10-31T17:51:22.096Z",
      "mtime": "2018-10-11T13:57:21.485Z",
      "ctime": "2018-10-16T10:43:09.239Z",
      "birthtime": "2018-10-11T13:57:21.485Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "51a5c6e1f62903cf2d11042187e006b7",
        "type": "Directory",
        "description": "Directory \"src/pages/cn/docs/technical/plutus\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus",
      "relativePath": "cn/docs/technical/plutus",
      "extension": "",
      "size": 160,
      "prettySize": "160 B",
      "modifiedTime": "2018-10-17T14:17:13.491Z",
      "accessTime": "2018-10-31T17:51:22.096Z",
      "changeTime": "2018-10-17T14:17:13.491Z",
      "birthTime": "2018-10-17T14:17:09.020Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical",
      "base": "plutus",
      "ext": "",
      "name": "plutus",
      "relativeDirectory": "cn/docs/technical",
      "dev": 16777221,
      "mode": 16877,
      "nlink": 5,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17566378,
      "blocks": 0,
      "atimeMs": 1541008282096.0327,
      "mtimeMs": 1539785833490.936,
      "ctimeMs": 1539785833490.936,
      "birthtimeMs": 1539785829020.123,
      "atime": "2018-10-31T17:51:22.096Z",
      "mtime": "2018-10-17T14:17:13.491Z",
      "ctime": "2018-10-17T14:17:13.491Z",
      "birthtime": "2018-10-17T14:17:09.020Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "eb60effc53cd2cae3a9659bb76ae2b64",
        "type": "Directory",
        "description": "Directory \"src/pages/cn/docs/technical/protocols\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols",
      "relativePath": "cn/docs/technical/protocols",
      "extension": "",
      "size": 224,
      "prettySize": "224 B",
      "modifiedTime": "2018-10-17T14:17:49.122Z",
      "accessTime": "2018-10-31T17:51:22.096Z",
      "changeTime": "2018-10-17T14:17:49.122Z",
      "birthTime": "2018-10-17T14:17:42.015Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical",
      "base": "protocols",
      "ext": "",
      "name": "protocols",
      "relativeDirectory": "cn/docs/technical",
      "dev": 16777221,
      "mode": 16877,
      "nlink": 7,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17566397,
      "blocks": 0,
      "atimeMs": 1541008282096.0764,
      "mtimeMs": 1539785869122.1443,
      "ctimeMs": 1539785869122.1443,
      "birthtimeMs": 1539785862014.6104,
      "atime": "2018-10-31T17:51:22.096Z",
      "mtime": "2018-10-17T14:17:49.122Z",
      "ctime": "2018-10-17T14:17:49.122Z",
      "birthtime": "2018-10-17T14:17:42.015Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/.DS_Store absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/.DS_Store absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "194577a7e20bdcc7afbb718f502c134c",
        "mediaType": "application/octet-stream",
        "type": "File",
        "description": "File \"src/pages/.DS_Store\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/.DS_Store",
      "relativePath": ".DS_Store",
      "extension": "",
      "size": 6148,
      "prettySize": "6.15 kB",
      "modifiedTime": "2018-09-07T13:21:54.650Z",
      "accessTime": "2018-10-31T17:49:05.681Z",
      "changeTime": "2018-09-14T14:53:42.949Z",
      "birthTime": "2018-09-07T13:21:54.649Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages",
      "base": ".DS_Store",
      "ext": "",
      "name": ".DS_Store",
      "relativeDirectory": "",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 13264856,
      "blocks": 16,
      "atimeMs": 1541008145681.2024,
      "mtimeMs": 1536326514649.5483,
      "ctimeMs": 1536936822949.1753,
      "birthtimeMs": 1536326514648.902,
      "atime": "2018-10-31T17:49:05.681Z",
      "mtime": "2018-09-07T13:21:54.650Z",
      "ctime": "2018-09-14T14:53:42.949Z",
      "birthtime": "2018-09-07T13:21:54.649Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "cba002d859a9b9de766030c01d249cb5",
        "mediaType": "application/javascript",
        "type": "File",
        "description": "File \"src/pages/Document.js\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "relativePath": "Document.js",
      "extension": "js",
      "size": 3009,
      "prettySize": "3.01 kB",
      "modifiedTime": "2018-10-31T17:31:28.126Z",
      "accessTime": "2018-10-31T17:51:09.358Z",
      "changeTime": "2018-10-31T17:31:28.126Z",
      "birthTime": "2018-10-31T17:31:28.126Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages",
      "base": "Document.js",
      "ext": ".js",
      "name": "Document",
      "relativeDirectory": "",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 19475520,
      "blocks": 8,
      "atimeMs": 1541008269358.26,
      "mtimeMs": 1541007088125.6895,
      "ctimeMs": 1541007088125.6895,
      "birthtimeMs": 1541007088125.5222,
      "atime": "2018-10-31T17:51:09.358Z",
      "mtime": "2018-10-31T17:31:28.126Z",
      "ctime": "2018-10-31T17:31:28.126Z",
      "birthtime": "2018-10-31T17:31:28.126Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/index.js absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/index.js absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "5fc37cc491374599ae833d08119e4303",
        "mediaType": "application/javascript",
        "type": "File",
        "description": "File \"src/pages/index.js\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/index.js",
      "relativePath": "index.js",
      "extension": "js",
      "size": 1017,
      "prettySize": "1.02 kB",
      "modifiedTime": "2018-10-11T13:59:01.199Z",
      "accessTime": "2018-10-31T17:49:12.269Z",
      "changeTime": "2018-10-11T13:59:01.199Z",
      "birthTime": "2018-10-11T13:59:01.198Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages",
      "base": "index.js",
      "ext": ".js",
      "name": "index",
      "relativeDirectory": "",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 16659083,
      "blocks": 8,
      "atimeMs": 1541008152269.2646,
      "mtimeMs": 1539266341198.7886,
      "ctimeMs": 1539266341198.7886,
      "birthtimeMs": 1539266341198.465,
      "atime": "2018-10-31T17:49:12.269Z",
      "mtime": "2018-10-11T13:59:01.199Z",
      "ctime": "2018-10-11T13:59:01.199Z",
      "birthtime": "2018-10-11T13:59:01.198Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/404.js absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/404.js absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "a23bf9321e6efe59d790d01d437de223",
        "mediaType": "application/javascript",
        "type": "File",
        "description": "File \"src/pages/cn/404.js\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/404.js",
      "relativePath": "cn/404.js",
      "extension": "js",
      "size": 272,
      "prettySize": "272 B",
      "modifiedTime": "2018-10-24T16:34:48.560Z",
      "accessTime": "2018-10-31T17:49:12.269Z",
      "changeTime": "2018-10-24T16:34:48.560Z",
      "birthTime": "2018-10-11T13:59:01.178Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn",
      "base": "404.js",
      "ext": ".js",
      "name": "404",
      "relativeDirectory": "cn",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 16659065,
      "blocks": 8,
      "atimeMs": 1541008152268.8384,
      "mtimeMs": 1540398888560.0613,
      "ctimeMs": 1540398888560.0613,
      "birthtimeMs": 1539266341178.3962,
      "atime": "2018-10-31T17:49:12.269Z",
      "mtime": "2018-10-24T16:34:48.560Z",
      "ctime": "2018-10-24T16:34:48.560Z",
      "birthtime": "2018-10-11T13:59:01.178Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/index.js absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/index.js absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "77689c781f192b00c985d1105c558a89",
        "mediaType": "application/javascript",
        "type": "File",
        "description": "File \"src/pages/cn/index.js\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/index.js",
      "relativePath": "cn/index.js",
      "extension": "js",
      "size": 1368,
      "prettySize": "1.37 kB",
      "modifiedTime": "2018-10-30T12:03:46.151Z",
      "accessTime": "2018-10-31T17:49:12.269Z",
      "changeTime": "2018-10-30T12:03:46.151Z",
      "birthTime": "2018-10-11T13:59:01.188Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn",
      "base": "index.js",
      "ext": ".js",
      "name": "index",
      "relativeDirectory": "cn",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 16659073,
      "blocks": 8,
      "atimeMs": 1541008152269.0237,
      "mtimeMs": 1540901026150.6038,
      "ctimeMs": 1540901026150.6038,
      "birthtimeMs": 1539266341187.7795,
      "atime": "2018-10-31T17:49:12.269Z",
      "mtime": "2018-10-30T12:03:46.151Z",
      "ctime": "2018-10-30T12:03:46.151Z",
      "birthtime": "2018-10-11T13:59:01.188Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/404.js absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/404.js absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "a23bf9321e6efe59d790d01d437de223",
        "mediaType": "application/javascript",
        "type": "File",
        "description": "File \"src/pages/en/404.js\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/404.js",
      "relativePath": "en/404.js",
      "extension": "js",
      "size": 272,
      "prettySize": "272 B",
      "modifiedTime": "2018-10-24T16:34:48.498Z",
      "accessTime": "2018-10-31T17:49:12.269Z",
      "changeTime": "2018-10-24T16:34:48.498Z",
      "birthTime": "2018-10-11T13:59:01.189Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en",
      "base": "404.js",
      "ext": ".js",
      "name": "404",
      "relativeDirectory": "en",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 16659074,
      "blocks": 8,
      "atimeMs": 1541008152269.0308,
      "mtimeMs": 1540398888497.66,
      "ctimeMs": 1540398888497.66,
      "birthtimeMs": 1539266341188.7463,
      "atime": "2018-10-31T17:49:12.269Z",
      "mtime": "2018-10-24T16:34:48.498Z",
      "ctime": "2018-10-24T16:34:48.498Z",
      "birthtime": "2018-10-11T13:59:01.189Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/index.js absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/index.js absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "f037cdef30d736926ed5db7f52304ba2",
        "mediaType": "application/javascript",
        "type": "File",
        "description": "File \"src/pages/en/index.js\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/index.js",
      "relativePath": "en/index.js",
      "extension": "js",
      "size": 2915,
      "prettySize": "2.92 kB",
      "modifiedTime": "2018-10-31T17:31:28.129Z",
      "accessTime": "2018-10-31T17:49:12.269Z",
      "changeTime": "2018-10-31T17:31:28.129Z",
      "birthTime": "2018-10-31T17:31:28.129Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en",
      "base": "index.js",
      "ext": ".js",
      "name": "index",
      "relativeDirectory": "en",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 19475523,
      "blocks": 8,
      "atimeMs": 1541008152269.2607,
      "mtimeMs": 1541007088128.9893,
      "ctimeMs": 1541007088128.9893,
      "birthtimeMs": 1541007088128.8352,
      "atime": "2018-10-31T17:49:12.269Z",
      "mtime": "2018-10-31T17:31:28.129Z",
      "ctime": "2018-10-31T17:31:28.129Z",
      "birthtime": "2018-10-31T17:31:28.129Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/content/welcome-text.en.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/content/welcome-text.en.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/content/welcome-text.en.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "07e8d69a6c11f6c586888bc5adfc6c91",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/content/welcome-text.en.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/content/welcome-text.en.md",
      "relativePath": "cn/content/welcome-text.en.md",
      "extension": "md",
      "size": 563,
      "prettySize": "563 B",
      "modifiedTime": "2018-10-11T14:10:05.577Z",
      "accessTime": "2018-10-31T17:49:05.659Z",
      "changeTime": "2018-10-11T14:10:05.577Z",
      "birthTime": "2018-10-11T13:59:01.181Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/content",
      "base": "welcome-text.en.md",
      "ext": ".md",
      "name": "welcome-text.en",
      "relativeDirectory": "cn/content",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 16659068,
      "blocks": 8,
      "atimeMs": 1541008145659.232,
      "mtimeMs": 1539267005576.6104,
      "ctimeMs": 1539267005576.6104,
      "birthtimeMs": 1539266341181.4395,
      "atime": "2018-10-31T17:49:05.659Z",
      "mtime": "2018-10-11T14:10:05.577Z",
      "ctime": "2018-10-11T14:10:05.577Z",
      "birthtime": "2018-10-11T13:59:01.181Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/content/welcome-text.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/content/welcome-text.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/content/welcome-text.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "68ec27adbb33b80ce749b57a4b0e08f7",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/content/welcome-text.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/content/welcome-text.cn.md",
      "relativePath": "en/content/welcome-text.cn.md",
      "extension": "md",
      "size": 782,
      "prettySize": "782 B",
      "modifiedTime": "2018-10-11T14:10:05.578Z",
      "accessTime": "2018-10-31T17:49:05.659Z",
      "changeTime": "2018-10-11T14:10:05.578Z",
      "birthTime": "2018-10-11T13:59:01.191Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/content",
      "base": "welcome-text.cn.md",
      "ext": ".md",
      "name": "welcome-text.cn",
      "relativeDirectory": "en/content",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 16659077,
      "blocks": 8,
      "atimeMs": 1541008145659.414,
      "mtimeMs": 1539267005577.759,
      "ctimeMs": 1539267005577.759,
      "birthtimeMs": 1539266341191.1855,
      "atime": "2018-10-31T17:49:05.659Z",
      "mtime": "2018-10-11T14:10:05.578Z",
      "ctime": "2018-10-11T14:10:05.578Z",
      "birthtime": "2018-10-11T13:59:01.191Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/.DS_Store absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/.DS_Store absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "194577a7e20bdcc7afbb718f502c134c",
        "mediaType": "application/octet-stream",
        "type": "File",
        "description": "File \"src/pages/en/docs/.DS_Store\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/.DS_Store",
      "relativePath": "en/docs/.DS_Store",
      "extension": "",
      "size": 6148,
      "prettySize": "6.15 kB",
      "modifiedTime": "2018-09-11T14:41:10.815Z",
      "accessTime": "2018-10-31T17:49:05.684Z",
      "changeTime": "2018-09-14T14:53:42.959Z",
      "birthTime": "2018-09-11T14:31:24.753Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs",
      "base": ".DS_Store",
      "ext": "",
      "name": ".DS_Store",
      "relativeDirectory": "en/docs",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 13264875,
      "blocks": 16,
      "atimeMs": 1541008145684.1738,
      "mtimeMs": 1536676870815.4758,
      "ctimeMs": 1536936822959.2058,
      "birthtimeMs": 1536676284753.0945,
      "atime": "2018-10-31T17:49:05.684Z",
      "mtime": "2018-09-11T14:41:10.815Z",
      "ctime": "2018-09-14T14:53:42.959Z",
      "birthtime": "2018-09-11T14:31:24.753Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-01-index.en.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-01-index.en.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-01-index.en.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "4664ce2cd3571c7bed08b61b12c25b84",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/2017-01-01-index.en.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-01-index.en.md",
      "relativePath": "en/docs/2017-01-01-index.en.md",
      "extension": "md",
      "size": 8076,
      "prettySize": "8.08 kB",
      "modifiedTime": "2018-10-30T11:55:18.610Z",
      "accessTime": "2018-10-31T17:49:05.660Z",
      "changeTime": "2018-10-30T11:55:18.610Z",
      "birthTime": "2018-10-11T13:57:21.372Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs",
      "base": "2017-01-01-index.en.md",
      "ext": ".md",
      "name": "2017-01-01-index.en",
      "relativeDirectory": "en/docs",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 16660227,
      "blocks": 16,
      "atimeMs": 1541008145660.0916,
      "mtimeMs": 1540900518609.5952,
      "ctimeMs": 1540900518609.5952,
      "birthtimeMs": 1539266241372.4827,
      "atime": "2018-10-31T17:49:05.660Z",
      "mtime": "2018-10-30T11:55:18.610Z",
      "ctime": "2018-10-30T11:55:18.610Z",
      "birthtime": "2018-10-11T13:57:21.372Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-04-installation.en.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-04-installation.en.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-04-installation.en.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "18cbd4468351c0648f1b404ecc1768b7",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/2017-01-04-installation.en.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-04-installation.en.md",
      "relativePath": "en/docs/2017-01-04-installation.en.md",
      "extension": "md",
      "size": 1028,
      "prettySize": "1.03 kB",
      "modifiedTime": "2018-10-30T11:55:54.049Z",
      "accessTime": "2018-10-31T17:49:05.660Z",
      "changeTime": "2018-10-30T11:55:54.049Z",
      "birthTime": "2018-10-11T13:57:21.374Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs",
      "base": "2017-01-04-installation.en.md",
      "ext": ".md",
      "name": "2017-01-04-installation.en",
      "relativeDirectory": "en/docs",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 16660228,
      "blocks": 8,
      "atimeMs": 1541008145660.1355,
      "mtimeMs": 1540900554048.9958,
      "ctimeMs": 1540900554048.9958,
      "birthtimeMs": 1539266241374.1995,
      "atime": "2018-10-31T17:49:05.660Z",
      "mtime": "2018-10-30T11:55:54.049Z",
      "ctime": "2018-10-30T11:55:54.049Z",
      "birthtime": "2018-10-11T13:57:21.374Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-10-technical.en.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-10-technical.en.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-10-technical.en.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "fec2998082ff708a2cbbf31a9af41925",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/2017-01-10-technical.en.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-10-technical.en.md",
      "relativePath": "en/docs/2017-01-10-technical.en.md",
      "extension": "md",
      "size": 12618,
      "prettySize": "12.6 kB",
      "modifiedTime": "2018-10-30T13:32:05.655Z",
      "accessTime": "2018-10-31T17:49:05.660Z",
      "changeTime": "2018-10-30T13:32:05.655Z",
      "birthTime": "2018-10-11T13:57:21.376Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs",
      "base": "2017-01-10-technical.en.md",
      "ext": ".md",
      "name": "2017-01-10-technical.en",
      "relativeDirectory": "en/docs",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 16660231,
      "blocks": 32,
      "atimeMs": 1541008145660.162,
      "mtimeMs": 1540906325654.885,
      "ctimeMs": 1540906325654.885,
      "birthtimeMs": 1539266241376.4285,
      "atime": "2018-10-31T17:49:05.660Z",
      "mtime": "2018-10-30T13:32:05.655Z",
      "ctime": "2018-10-30T13:32:05.655Z",
      "birthtime": "2018-10-11T13:57:21.376Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-13-for-contributors.en.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-13-for-contributors.en.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-13-for-contributors.en.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "8cd4408d3e0df60020f1ececf4b3bc7b",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/2017-01-13-for-contributors.en.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-13-for-contributors.en.md",
      "relativePath": "en/docs/2017-01-13-for-contributors.en.md",
      "extension": "md",
      "size": 384,
      "prettySize": "384 B",
      "modifiedTime": "2018-10-30T11:56:19.747Z",
      "accessTime": "2018-10-31T17:49:05.660Z",
      "changeTime": "2018-10-30T11:56:19.747Z",
      "birthTime": "2018-10-11T13:57:21.378Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs",
      "base": "2017-01-13-for-contributors.en.md",
      "ext": ".md",
      "name": "2017-01-13-for-contributors.en",
      "relativeDirectory": "en/docs",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 16660232,
      "blocks": 8,
      "atimeMs": 1541008145660.2183,
      "mtimeMs": 1540900579746.773,
      "ctimeMs": 1540900579746.773,
      "birthtimeMs": 1539266241378.0876,
      "atime": "2018-10-31T17:49:05.660Z",
      "mtime": "2018-10-30T11:56:19.747Z",
      "ctime": "2018-10-30T11:56:19.747Z",
      "birthtime": "2018-10-11T13:57:21.378Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/content/intro.en.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/content/intro.en.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/content/intro.en.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "39571018cc451086db9c322309545f4d",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/content/intro.en.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/content/intro.en.md",
      "relativePath": "en/content/intro.en.md",
      "extension": "md",
      "size": 6284,
      "prettySize": "6.28 kB",
      "modifiedTime": "2018-10-31T17:31:28.128Z",
      "accessTime": "2018-10-31T17:49:05.659Z",
      "changeTime": "2018-10-31T17:31:28.128Z",
      "birthTime": "2018-10-31T17:31:28.128Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/content",
      "base": "intro.en.md",
      "ext": ".md",
      "name": "intro.en",
      "relativeDirectory": "en/content",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 19475522,
      "blocks": 16,
      "atimeMs": 1541008145659.359,
      "mtimeMs": 1541007088128.0247,
      "ctimeMs": 1541007088128.0247,
      "birthtimeMs": 1541007088127.8333,
      "atime": "2018-10-31T17:49:05.659Z",
      "mtime": "2018-10-31T17:31:28.128Z",
      "ctime": "2018-10-31T17:31:28.128Z",
      "birthtime": "2018-10-31T17:31:28.128Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-19-glossary.en.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-19-glossary.en.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-19-glossary.en.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "59e58834131d8ec1f9e83499391ebf7f",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/2017-01-19-glossary.en.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-19-glossary.en.md",
      "relativePath": "en/docs/2017-01-19-glossary.en.md",
      "extension": "md",
      "size": 6793,
      "prettySize": "6.79 kB",
      "modifiedTime": "2018-10-30T11:56:24.741Z",
      "accessTime": "2018-10-31T17:49:05.660Z",
      "changeTime": "2018-10-30T11:56:24.741Z",
      "birthTime": "2018-10-11T13:57:21.379Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs",
      "base": "2017-01-19-glossary.en.md",
      "ext": ".md",
      "name": "2017-01-19-glossary.en",
      "relativeDirectory": "en/docs",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 16660233,
      "blocks": 16,
      "atimeMs": 1541008145660.2705,
      "mtimeMs": 1540900584740.7146,
      "ctimeMs": 1540900584740.7146,
      "birthtimeMs": 1539266241378.7864,
      "atime": "2018-10-31T17:49:05.660Z",
      "mtime": "2018-10-30T11:56:24.741Z",
      "ctime": "2018-10-30T11:56:24.741Z",
      "birthtime": "2018-10-11T13:57:21.379Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/AAA.en.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/AAA.en.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/AAA.en.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "798932d5e66ff6a18dfe4407556518ad",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/AAA.en.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/AAA.en.md",
      "relativePath": "en/docs/AAA.en.md",
      "extension": "md",
      "size": 686,
      "prettySize": "686 B",
      "modifiedTime": "2018-10-11T14:12:08.102Z",
      "accessTime": "2018-10-31T17:49:05.660Z",
      "changeTime": "2018-10-11T14:12:08.102Z",
      "birthTime": "2018-10-11T13:59:01.196Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs",
      "base": "AAA.en.md",
      "ext": ".md",
      "name": "AAA.en",
      "relativeDirectory": "en/docs",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 16659080,
      "blocks": 8,
      "atimeMs": 1541008145660.3252,
      "mtimeMs": 1539267128102.1826,
      "ctimeMs": 1539267128102.1826,
      "birthtimeMs": 1539266341195.5945,
      "atime": "2018-10-31T17:49:05.660Z",
      "mtime": "2018-10-11T14:12:08.102Z",
      "ctime": "2018-10-11T14:12:08.102Z",
      "birthtime": "2018-10-11T13:59:01.196Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/.DS_Store absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/.DS_Store absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "5d5145547cc00bf0a06fb4dd645db09b",
        "mediaType": "application/octet-stream",
        "type": "File",
        "description": "File \"src/pages/cn/docs/.DS_Store\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/.DS_Store",
      "relativePath": "cn/docs/.DS_Store",
      "extension": "",
      "size": 6148,
      "prettySize": "6.15 kB",
      "modifiedTime": "2018-10-17T14:26:23.505Z",
      "accessTime": "2018-10-31T17:49:05.684Z",
      "changeTime": "2018-10-17T14:26:23.505Z",
      "birthTime": "2018-10-10T11:47:30.572Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs",
      "base": ".DS_Store",
      "ext": "",
      "name": ".DS_Store",
      "relativeDirectory": "cn/docs",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 16367747,
      "blocks": 16,
      "atimeMs": 1541008145683.9185,
      "mtimeMs": 1539786383504.9026,
      "ctimeMs": 1539786383504.9026,
      "birthtimeMs": 1539172050571.8223,
      "atime": "2018-10-31T17:49:05.684Z",
      "mtime": "2018-10-17T14:26:23.505Z",
      "ctime": "2018-10-17T14:26:23.505Z",
      "birthtime": "2018-10-10T11:47:30.572Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-01-index.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-01-index.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-01-index.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "71803e46da9a508824d0ea4390ce3698",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/2017-01-01-index.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-01-index.cn.md",
      "relativePath": "cn/docs/2017-01-01-index.cn.md",
      "extension": "md",
      "size": 7554,
      "prettySize": "7.55 kB",
      "modifiedTime": "2018-10-25T17:51:07.351Z",
      "accessTime": "2018-10-31T17:49:05.660Z",
      "changeTime": "2018-10-25T17:51:07.351Z",
      "birthTime": "2018-10-11T13:57:21.393Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs",
      "base": "2017-01-01-index.cn.md",
      "ext": ".md",
      "name": "2017-01-01-index.cn",
      "relativeDirectory": "cn/docs",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17497468,
      "blocks": 16,
      "atimeMs": 1541008145659.555,
      "mtimeMs": 1540489867351.2039,
      "ctimeMs": 1540489867351.2039,
      "birthtimeMs": 1539266241393.4644,
      "atime": "2018-10-31T17:49:05.660Z",
      "mtime": "2018-10-25T17:51:07.351Z",
      "ctime": "2018-10-25T17:51:07.351Z",
      "birthtime": "2018-10-11T13:57:21.393Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-04-installation.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-04-installation.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-04-installation.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "127124427343f0b13e58a06c8d16892f",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/2017-01-04-installation.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-04-installation.cn.md",
      "relativePath": "cn/docs/2017-01-04-installation.cn.md",
      "extension": "md",
      "size": 1108,
      "prettySize": "1.11 kB",
      "modifiedTime": "2018-10-17T10:52:43.842Z",
      "accessTime": "2018-10-31T17:49:05.660Z",
      "changeTime": "2018-10-17T10:52:43.842Z",
      "birthTime": "2018-10-11T13:57:21.395Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs",
      "base": "2017-01-04-installation.cn.md",
      "ext": ".md",
      "name": "2017-01-04-installation.cn",
      "relativeDirectory": "cn/docs",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17497469,
      "blocks": 8,
      "atimeMs": 1541008145659.6003,
      "mtimeMs": 1539773563841.8828,
      "ctimeMs": 1539773563841.8828,
      "birthtimeMs": 1539266241394.6333,
      "atime": "2018-10-31T17:49:05.660Z",
      "mtime": "2018-10-17T10:52:43.842Z",
      "ctime": "2018-10-17T10:52:43.842Z",
      "birthtime": "2018-10-11T13:57:21.395Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/content/intro.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/content/intro.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/content/intro.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "b7b2afb3dd692f4f09165973b55dd698",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/content/intro.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/content/intro.cn.md",
      "relativePath": "cn/content/intro.cn.md",
      "extension": "md",
      "size": 7329,
      "prettySize": "7.33 kB",
      "modifiedTime": "2018-10-31T17:31:28.127Z",
      "accessTime": "2018-10-31T17:49:05.659Z",
      "changeTime": "2018-10-31T17:31:28.127Z",
      "birthTime": "2018-10-31T17:31:28.127Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/content",
      "base": "intro.cn.md",
      "ext": ".md",
      "name": "intro.cn",
      "relativeDirectory": "cn/content",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 19475521,
      "blocks": 16,
      "atimeMs": 1541008145659.187,
      "mtimeMs": 1541007088126.6965,
      "ctimeMs": 1541007088126.6965,
      "birthtimeMs": 1541007088126.5276,
      "atime": "2018-10-31T17:49:05.659Z",
      "mtime": "2018-10-31T17:31:28.127Z",
      "ctime": "2018-10-31T17:31:28.127Z",
      "birthtime": "2018-10-31T17:31:28.127Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-10-technical.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-10-technical.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-10-technical.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "bd7ae47895312762e538a3e7fbafa67a",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/2017-01-10-technical.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-10-technical.cn.md",
      "relativePath": "cn/docs/2017-01-10-technical.cn.md",
      "extension": "md",
      "size": 11402,
      "prettySize": "11.4 kB",
      "modifiedTime": "2018-10-17T10:52:52.628Z",
      "accessTime": "2018-10-31T17:49:05.660Z",
      "changeTime": "2018-10-17T10:52:52.628Z",
      "birthTime": "2018-10-11T13:57:21.397Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs",
      "base": "2017-01-10-technical.cn.md",
      "ext": ".md",
      "name": "2017-01-10-technical.cn",
      "relativeDirectory": "cn/docs",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17497472,
      "blocks": 24,
      "atimeMs": 1541008145659.6443,
      "mtimeMs": 1539773572627.852,
      "ctimeMs": 1539773572627.852,
      "birthtimeMs": 1539266241397.4116,
      "atime": "2018-10-31T17:49:05.660Z",
      "mtime": "2018-10-17T10:52:52.628Z",
      "ctime": "2018-10-17T10:52:52.628Z",
      "birthtime": "2018-10-11T13:57:21.397Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-13-for-contributors.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-13-for-contributors.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-13-for-contributors.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "3d36c21dd83389a344a88313ff208efc",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/2017-01-13-for-contributors.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-13-for-contributors.cn.md",
      "relativePath": "cn/docs/2017-01-13-for-contributors.cn.md",
      "extension": "md",
      "size": 296,
      "prettySize": "296 B",
      "modifiedTime": "2018-10-17T10:53:00.588Z",
      "accessTime": "2018-10-31T17:49:05.660Z",
      "changeTime": "2018-10-17T10:53:00.588Z",
      "birthTime": "2018-10-11T13:57:21.399Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs",
      "base": "2017-01-13-for-contributors.cn.md",
      "ext": ".md",
      "name": "2017-01-13-for-contributors.cn",
      "relativeDirectory": "cn/docs",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17497473,
      "blocks": 8,
      "atimeMs": 1541008145659.6958,
      "mtimeMs": 1539773580587.6462,
      "ctimeMs": 1539773580587.6462,
      "birthtimeMs": 1539266241398.5222,
      "atime": "2018-10-31T17:49:05.660Z",
      "mtime": "2018-10-17T10:53:00.588Z",
      "ctime": "2018-10-17T10:53:00.588Z",
      "birthtime": "2018-10-11T13:57:21.399Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-19-glossary.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-19-glossary.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-19-glossary.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "b1f8fd18555975ea5899b420e2e4d038",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/2017-01-19-glossary.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-19-glossary.cn.md",
      "relativePath": "cn/docs/2017-01-19-glossary.cn.md",
      "extension": "md",
      "size": 6054,
      "prettySize": "6.05 kB",
      "modifiedTime": "2018-10-17T10:53:17.572Z",
      "accessTime": "2018-10-31T17:49:05.660Z",
      "changeTime": "2018-10-17T10:53:17.572Z",
      "birthTime": "2018-10-11T13:57:21.399Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs",
      "base": "2017-01-19-glossary.cn.md",
      "ext": ".md",
      "name": "2017-01-19-glossary.cn",
      "relativeDirectory": "cn/docs",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17497474,
      "blocks": 16,
      "atimeMs": 1541008145659.7192,
      "mtimeMs": 1539773597571.7078,
      "ctimeMs": 1539773597571.7078,
      "birthtimeMs": 1539266241399.24,
      "atime": "2018-10-31T17:49:05.660Z",
      "mtime": "2018-10-17T10:53:17.572Z",
      "ctime": "2018-10-17T10:53:17.572Z",
      "birthtime": "2018-10-11T13:57:21.399Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-01-proof-of-stake.en.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-01-proof-of-stake.en.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-01-proof-of-stake.en.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "1fd489cb80946494b7f298978257e646",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/cardano/2017-01-01-proof-of-stake.en.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-01-proof-of-stake.en.md",
      "relativePath": "en/docs/cardano/2017-01-01-proof-of-stake.en.md",
      "extension": "md",
      "size": 9137,
      "prettySize": "9.14 kB",
      "modifiedTime": "2018-10-25T11:53:47.148Z",
      "accessTime": "2018-10-31T17:49:05.663Z",
      "changeTime": "2018-10-25T11:53:47.148Z",
      "birthTime": "2018-10-11T13:57:21.380Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano",
      "base": "2017-01-01-proof-of-stake.en.md",
      "ext": ".md",
      "name": "2017-01-01-proof-of-stake.en",
      "relativeDirectory": "en/docs/cardano",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 16663296,
      "blocks": 24,
      "atimeMs": 1541008145662.8318,
      "mtimeMs": 1540468427148.4268,
      "ctimeMs": 1540468427148.4268,
      "birthtimeMs": 1539266241379.8706,
      "atime": "2018-10-31T17:49:05.663Z",
      "mtime": "2018-10-25T11:53:47.148Z",
      "ctime": "2018-10-25T11:53:47.148Z",
      "birthtime": "2018-10-11T13:57:21.380Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-04-differences.en.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-04-differences.en.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-04-differences.en.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "c8f723a19e24bc79030f16e6e98c1de3",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/cardano/2017-01-04-differences.en.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-04-differences.en.md",
      "relativePath": "en/docs/cardano/2017-01-04-differences.en.md",
      "extension": "md",
      "size": 7449,
      "prettySize": "7.45 kB",
      "modifiedTime": "2018-10-25T11:56:50.959Z",
      "accessTime": "2018-10-31T17:49:05.663Z",
      "changeTime": "2018-10-25T11:56:50.959Z",
      "birthTime": "2018-10-11T13:57:21.381Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano",
      "base": "2017-01-04-differences.en.md",
      "ext": ".md",
      "name": "2017-01-04-differences.en",
      "relativeDirectory": "en/docs/cardano",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 16663299,
      "blocks": 16,
      "atimeMs": 1541008145662.885,
      "mtimeMs": 1540468610959.3848,
      "ctimeMs": 1540468610959.3848,
      "birthtimeMs": 1539266241381.1555,
      "atime": "2018-10-31T17:49:05.663Z",
      "mtime": "2018-10-25T11:56:50.959Z",
      "ctime": "2018-10-25T11:56:50.959Z",
      "birthtime": "2018-10-11T13:57:21.381Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-07-addresses.en.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-07-addresses.en.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-07-addresses.en.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "7af304d6e7a46a2fd6413ecbf4ffc002",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/cardano/2017-01-07-addresses.en.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-07-addresses.en.md",
      "relativePath": "en/docs/cardano/2017-01-07-addresses.en.md",
      "extension": "md",
      "size": 5738,
      "prettySize": "5.74 kB",
      "modifiedTime": "2018-10-24T17:10:33.634Z",
      "accessTime": "2018-10-31T17:49:05.663Z",
      "changeTime": "2018-10-24T17:10:33.634Z",
      "birthTime": "2018-10-11T13:57:21.382Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano",
      "base": "2017-01-07-addresses.en.md",
      "ext": ".md",
      "name": "2017-01-07-addresses.en",
      "relativeDirectory": "en/docs/cardano",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 16663294,
      "blocks": 16,
      "atimeMs": 1541008145662.9436,
      "mtimeMs": 1540401033633.5608,
      "ctimeMs": 1540401033633.5608,
      "birthtimeMs": 1539266241382.3352,
      "atime": "2018-10-31T17:49:05.663Z",
      "mtime": "2018-10-24T17:10:33.634Z",
      "ctime": "2018-10-24T17:10:33.634Z",
      "birthtime": "2018-10-11T13:57:21.382Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-10-transactions.en.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-10-transactions.en.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-10-transactions.en.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "1c001907888f17ee00aed045b508979e",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/cardano/2017-01-10-transactions.en.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-10-transactions.en.md",
      "relativePath": "en/docs/cardano/2017-01-10-transactions.en.md",
      "extension": "md",
      "size": 9324,
      "prettySize": "9.32 kB",
      "modifiedTime": "2018-10-24T17:10:33.634Z",
      "accessTime": "2018-10-31T17:49:05.663Z",
      "changeTime": "2018-10-24T17:10:33.634Z",
      "birthTime": "2018-10-11T13:57:21.384Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano",
      "base": "2017-01-10-transactions.en.md",
      "ext": ".md",
      "name": "2017-01-10-transactions.en",
      "relativeDirectory": "en/docs/cardano",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 16663295,
      "blocks": 24,
      "atimeMs": 1541008145663.0051,
      "mtimeMs": 1540401033633.5996,
      "ctimeMs": 1540401033633.5996,
      "birthtimeMs": 1539266241383.6191,
      "atime": "2018-10-31T17:49:05.663Z",
      "mtime": "2018-10-24T17:10:33.634Z",
      "ctime": "2018-10-24T17:10:33.634Z",
      "birthtime": "2018-10-11T13:57:21.384Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-13-balance-and-stake.en.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-13-balance-and-stake.en.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-13-balance-and-stake.en.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "aad264a4eab82eaf96f7eb1646a4a938",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/cardano/2017-01-13-balance-and-stake.en.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-13-balance-and-stake.en.md",
      "relativePath": "en/docs/cardano/2017-01-13-balance-and-stake.en.md",
      "extension": "md",
      "size": 2086,
      "prettySize": "2.09 kB",
      "modifiedTime": "2018-10-24T17:10:33.634Z",
      "accessTime": "2018-10-31T17:49:05.663Z",
      "changeTime": "2018-10-24T17:10:33.634Z",
      "birthTime": "2018-10-11T13:57:21.385Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano",
      "base": "2017-01-13-balance-and-stake.en.md",
      "ext": ".md",
      "name": "2017-01-13-balance-and-stake.en",
      "relativeDirectory": "en/docs/cardano",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 16663292,
      "blocks": 8,
      "atimeMs": 1541008145663.0754,
      "mtimeMs": 1540401033633.8455,
      "ctimeMs": 1540401033633.8455,
      "birthtimeMs": 1539266241385.0532,
      "atime": "2018-10-31T17:49:05.663Z",
      "mtime": "2018-10-24T17:10:33.634Z",
      "ctime": "2018-10-24T17:10:33.634Z",
      "birthtime": "2018-10-11T13:57:21.385Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-16-updating.en.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-16-updating.en.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-16-updating.en.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "747e387cc6c10c7e1b0f1147b74823cd",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/cardano/2017-01-16-updating.en.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-16-updating.en.md",
      "relativePath": "en/docs/cardano/2017-01-16-updating.en.md",
      "extension": "md",
      "size": 14008,
      "prettySize": "14 kB",
      "modifiedTime": "2018-10-24T17:10:33.634Z",
      "accessTime": "2018-10-31T17:49:05.663Z",
      "changeTime": "2018-10-24T17:10:33.634Z",
      "birthTime": "2018-10-11T13:57:21.386Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano",
      "base": "2017-01-16-updating.en.md",
      "ext": ".md",
      "name": "2017-01-16-updating.en",
      "relativeDirectory": "en/docs/cardano",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 16663298,
      "blocks": 32,
      "atimeMs": 1541008145663.11,
      "mtimeMs": 1540401033634.0012,
      "ctimeMs": 1540401033634.0012,
      "birthtimeMs": 1539266241385.9272,
      "atime": "2018-10-31T17:49:05.663Z",
      "mtime": "2018-10-24T17:10:33.634Z",
      "ctime": "2018-10-24T17:10:33.634Z",
      "birthtime": "2018-10-11T13:57:21.386Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-19-topology.en.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-19-topology.en.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-19-topology.en.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "558e1f4f86f69f35aeae82cb397be98d",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/cardano/2017-01-19-topology.en.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-19-topology.en.md",
      "relativePath": "en/docs/cardano/2017-01-19-topology.en.md",
      "extension": "md",
      "size": 2375,
      "prettySize": "2.38 kB",
      "modifiedTime": "2018-10-24T17:10:33.634Z",
      "accessTime": "2018-10-31T17:49:05.663Z",
      "changeTime": "2018-10-24T17:10:33.634Z",
      "birthTime": "2018-10-11T13:57:21.388Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano",
      "base": "2017-01-19-topology.en.md",
      "ext": ".md",
      "name": "2017-01-19-topology.en",
      "relativeDirectory": "en/docs/cardano",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 16663293,
      "blocks": 8,
      "atimeMs": 1541008145663.1418,
      "mtimeMs": 1540401033634.1316,
      "ctimeMs": 1540401033634.1316,
      "birthtimeMs": 1539266241387.7178,
      "atime": "2018-10-31T17:49:05.663Z",
      "mtime": "2018-10-24T17:10:33.634Z",
      "ctime": "2018-10-24T17:10:33.634Z",
      "birthtime": "2018-10-11T13:57:21.388Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-01-monetary-policy.en.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-01-monetary-policy.en.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-01-monetary-policy.en.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "7ceaa4afa6a0628d779cf32067944b0d",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/cardano/2017-02-01-monetary-policy.en.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-01-monetary-policy.en.md",
      "relativePath": "en/docs/cardano/2017-02-01-monetary-policy.en.md",
      "extension": "md",
      "size": 2676,
      "prettySize": "2.68 kB",
      "modifiedTime": "2018-10-29T16:14:58.506Z",
      "accessTime": "2018-10-31T17:49:05.663Z",
      "changeTime": "2018-10-29T16:14:58.506Z",
      "birthTime": "2018-10-11T13:57:21.389Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano",
      "base": "2017-02-01-monetary-policy.en.md",
      "ext": ".md",
      "name": "2017-02-01-monetary-policy.en",
      "relativeDirectory": "en/docs/cardano",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 16663297,
      "blocks": 8,
      "atimeMs": 1541008145663.1748,
      "mtimeMs": 1540829698506.173,
      "ctimeMs": 1540829698506.173,
      "birthtimeMs": 1539266241388.709,
      "atime": "2018-10-31T17:49:05.663Z",
      "mtime": "2018-10-29T16:14:58.506Z",
      "ctime": "2018-10-29T16:14:58.506Z",
      "birthtime": "2018-10-11T13:57:21.389Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-02-transaction-fees.en.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-02-transaction-fees.en.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-02-transaction-fees.en.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "a8386ee50f1d7beb02f18a34de1e5425",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/cardano/2017-02-02-transaction-fees.en.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-02-transaction-fees.en.md",
      "relativePath": "en/docs/cardano/2017-02-02-transaction-fees.en.md",
      "extension": "md",
      "size": 3192,
      "prettySize": "3.19 kB",
      "modifiedTime": "2018-10-24T17:10:33.634Z",
      "accessTime": "2018-10-31T17:49:05.663Z",
      "changeTime": "2018-10-24T17:10:33.634Z",
      "birthTime": "2018-10-11T13:57:21.390Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano",
      "base": "2017-02-02-transaction-fees.en.md",
      "ext": ".md",
      "name": "2017-02-02-transaction-fees.en",
      "relativeDirectory": "en/docs/cardano",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 16663300,
      "blocks": 8,
      "atimeMs": 1541008145663.205,
      "mtimeMs": 1540401033634.2275,
      "ctimeMs": 1540401033634.2275,
      "birthtimeMs": 1539266241389.8477,
      "atime": "2018-10-31T17:49:05.663Z",
      "mtime": "2018-10-24T17:10:33.634Z",
      "ctime": "2018-10-24T17:10:33.634Z",
      "birthtime": "2018-10-11T13:57:21.390Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-03-transaction-assurance.en.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-03-transaction-assurance.en.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-03-transaction-assurance.en.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "b5e3ebf5240053f5b859fff83a101ca3",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/cardano/2017-02-03-transaction-assurance.en.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-03-transaction-assurance.en.md",
      "relativePath": "en/docs/cardano/2017-02-03-transaction-assurance.en.md",
      "extension": "md",
      "size": 10566,
      "prettySize": "10.6 kB",
      "modifiedTime": "2018-10-25T11:56:17.520Z",
      "accessTime": "2018-10-31T17:49:05.663Z",
      "changeTime": "2018-10-25T11:56:17.520Z",
      "birthTime": "2018-10-11T13:57:21.391Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano",
      "base": "2017-02-03-transaction-assurance.en.md",
      "ext": ".md",
      "name": "2017-02-03-transaction-assurance.en",
      "relativeDirectory": "en/docs/cardano",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 16663301,
      "blocks": 24,
      "atimeMs": 1541008145663.2444,
      "mtimeMs": 1540468577520.48,
      "ctimeMs": 1540468577520.48,
      "birthtimeMs": 1539266241391.1128,
      "atime": "2018-10-31T17:49:05.663Z",
      "mtime": "2018-10-25T11:56:17.520Z",
      "ctime": "2018-10-25T11:56:17.520Z",
      "birthtime": "2018-10-11T13:57:21.391Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-05-explorer.en.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-05-explorer.en.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-05-explorer.en.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "c712929ebf3c93537c3074c61a090b13",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/cardano/2017-02-05-explorer.en.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-05-explorer.en.md",
      "relativePath": "en/docs/cardano/2017-02-05-explorer.en.md",
      "extension": "md",
      "size": 2001,
      "prettySize": "2 kB",
      "modifiedTime": "2018-10-24T17:10:33.634Z",
      "accessTime": "2018-10-31T17:49:05.663Z",
      "changeTime": "2018-10-24T17:10:33.634Z",
      "birthTime": "2018-10-11T13:57:21.392Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano",
      "base": "2017-02-05-explorer.en.md",
      "ext": ".md",
      "name": "2017-02-05-explorer.en",
      "relativeDirectory": "en/docs/cardano",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 16663302,
      "blocks": 8,
      "atimeMs": 1541008145663.2698,
      "mtimeMs": 1540401033634.388,
      "ctimeMs": 1540401033634.388,
      "birthtimeMs": 1539266241392.4346,
      "atime": "2018-10-31T17:49:05.663Z",
      "mtime": "2018-10-24T17:10:33.634Z",
      "ctime": "2018-10-24T17:10:33.634Z",
      "birthtime": "2018-10-11T13:57:21.392Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/for-contributors/2017-01-01-building-from-source.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/for-contributors/2017-01-01-building-from-source.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/for-contributors/2017-01-01-building-from-source.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "4ddbe75812a0c60cb04c1471b3f9166d",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/for-contributors/2017-01-01-building-from-source.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/for-contributors/2017-01-01-building-from-source.md",
      "relativePath": "en/docs/for-contributors/2017-01-01-building-from-source.md",
      "extension": "md",
      "size": 382,
      "prettySize": "382 B",
      "modifiedTime": "2018-10-25T11:57:30.534Z",
      "accessTime": "2018-10-31T17:49:05.664Z",
      "changeTime": "2018-10-25T11:57:30.534Z",
      "birthTime": "2018-10-11T13:57:21.447Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/for-contributors",
      "base": "2017-01-01-building-from-source.md",
      "ext": ".md",
      "name": "2017-01-01-building-from-source",
      "relativeDirectory": "en/docs/for-contributors",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17283489,
      "blocks": 8,
      "atimeMs": 1541008145663.5647,
      "mtimeMs": 1540468650534.044,
      "ctimeMs": 1540468650534.044,
      "birthtimeMs": 1539266241447.0005,
      "atime": "2018-10-31T17:49:05.664Z",
      "mtime": "2018-10-25T11:57:30.534Z",
      "ctime": "2018-10-25T11:57:30.534Z",
      "birthtime": "2018-10-11T13:57:21.447Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/for-contributors/2017-01-03-haddock.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/for-contributors/2017-01-03-haddock.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/for-contributors/2017-01-03-haddock.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "a748b52f468a39740f8fecc53ae6ca02",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/for-contributors/2017-01-03-haddock.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/for-contributors/2017-01-03-haddock.md",
      "relativePath": "en/docs/for-contributors/2017-01-03-haddock.md",
      "extension": "md",
      "size": 484,
      "prettySize": "484 B",
      "modifiedTime": "2018-10-29T16:33:06.967Z",
      "accessTime": "2018-10-31T17:49:05.664Z",
      "changeTime": "2018-10-29T16:33:06.967Z",
      "birthTime": "2018-10-11T13:57:21.448Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/for-contributors",
      "base": "2017-01-03-haddock.md",
      "ext": ".md",
      "name": "2017-01-03-haddock",
      "relativeDirectory": "en/docs/for-contributors",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17283490,
      "blocks": 8,
      "atimeMs": 1541008145663.6013,
      "mtimeMs": 1540830786967.34,
      "ctimeMs": 1540830786967.34,
      "birthtimeMs": 1539266241448.0708,
      "atime": "2018-10-31T17:49:05.664Z",
      "mtime": "2018-10-29T16:33:06.967Z",
      "ctime": "2018-10-29T16:33:06.967Z",
      "birthtime": "2018-10-11T13:57:21.448Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-02-launcher.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-02-launcher.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-02-launcher.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "2889b9e4013f15ee095a2bd3aa65d5a0",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/technical/2017-01-02-launcher.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-02-launcher.md",
      "relativePath": "en/docs/technical/2017-01-02-launcher.md",
      "extension": "md",
      "size": 6070,
      "prettySize": "6.07 kB",
      "modifiedTime": "2018-10-25T11:58:04.651Z",
      "accessTime": "2018-10-31T17:49:05.664Z",
      "changeTime": "2018-10-25T11:58:04.651Z",
      "birthTime": "2018-10-11T13:57:21.452Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical",
      "base": "2017-01-02-launcher.md",
      "ext": ".md",
      "name": "2017-01-02-launcher",
      "relativeDirectory": "en/docs/technical",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17279624,
      "blocks": 16,
      "atimeMs": 1541008145663.7803,
      "mtimeMs": 1540468684651.0286,
      "ctimeMs": 1540468684651.0286,
      "birthtimeMs": 1539266241451.9092,
      "atime": "2018-10-31T17:49:05.664Z",
      "mtime": "2018-10-25T11:58:04.651Z",
      "ctime": "2018-10-25T11:58:04.651Z",
      "birthtime": "2018-10-11T13:57:21.452Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-06-explorer.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-06-explorer.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-06-explorer.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "6fa48f8648109f285c686839759f2596",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/technical/2017-01-06-explorer.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-06-explorer.md",
      "relativePath": "en/docs/technical/2017-01-06-explorer.md",
      "extension": "md",
      "size": 3348,
      "prettySize": "3.35 kB",
      "modifiedTime": "2018-10-25T11:58:22.077Z",
      "accessTime": "2018-10-31T17:49:05.664Z",
      "changeTime": "2018-10-25T11:58:22.077Z",
      "birthTime": "2018-10-11T13:57:21.455Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical",
      "base": "2017-01-06-explorer.md",
      "ext": ".md",
      "name": "2017-01-06-explorer",
      "relativeDirectory": "en/docs/technical",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17279617,
      "blocks": 8,
      "atimeMs": 1541008145663.8499,
      "mtimeMs": 1540468702076.514,
      "ctimeMs": 1540468702076.514,
      "birthtimeMs": 1539266241454.927,
      "atime": "2018-10-31T17:49:05.664Z",
      "mtime": "2018-10-25T11:58:22.077Z",
      "ctime": "2018-10-25T11:58:22.077Z",
      "birthtime": "2018-10-11T13:57:21.455Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-04-updater.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-04-updater.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-04-updater.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "7e4fd8464daf3388cbd6e8ee113b27ce",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/technical/2017-01-04-updater.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-04-updater.md",
      "relativePath": "en/docs/technical/2017-01-04-updater.md",
      "extension": "md",
      "size": 13215,
      "prettySize": "13.2 kB",
      "modifiedTime": "2018-10-25T11:58:12.214Z",
      "accessTime": "2018-10-31T17:49:05.664Z",
      "changeTime": "2018-10-25T11:58:12.214Z",
      "birthTime": "2018-10-11T13:57:21.453Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical",
      "base": "2017-01-04-updater.md",
      "ext": ".md",
      "name": "2017-01-04-updater",
      "relativeDirectory": "en/docs/technical",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17279621,
      "blocks": 32,
      "atimeMs": 1541008145663.8206,
      "mtimeMs": 1540468692214.0374,
      "ctimeMs": 1540468692214.0374,
      "birthtimeMs": 1539266241453.4048,
      "atime": "2018-10-31T17:49:05.664Z",
      "mtime": "2018-10-25T11:58:12.214Z",
      "ctime": "2018-10-25T11:58:12.214Z",
      "birthtime": "2018-10-11T13:57:21.453Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-07-blocks.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-07-blocks.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-07-blocks.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "064e34add4730faf686f260e8159b6fc",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/technical/2017-01-07-blocks.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-07-blocks.md",
      "relativePath": "en/docs/technical/2017-01-07-blocks.md",
      "extension": "md",
      "size": 13509,
      "prettySize": "13.5 kB",
      "modifiedTime": "2018-10-25T11:58:33.570Z",
      "accessTime": "2018-10-31T17:49:05.664Z",
      "changeTime": "2018-10-25T11:58:33.570Z",
      "birthTime": "2018-10-11T13:57:21.456Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical",
      "base": "2017-01-07-blocks.md",
      "ext": ".md",
      "name": "2017-01-07-blocks",
      "relativeDirectory": "en/docs/technical",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17279619,
      "blocks": 32,
      "atimeMs": 1541008145663.8923,
      "mtimeMs": 1540468713570.4595,
      "ctimeMs": 1540468713570.4595,
      "birthtimeMs": 1539266241455.7808,
      "atime": "2018-10-31T17:49:05.664Z",
      "mtime": "2018-10-25T11:58:33.570Z",
      "ctime": "2018-10-25T11:58:33.570Z",
      "birthtime": "2018-10-11T13:57:21.456Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-14-leader-selection.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-14-leader-selection.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-14-leader-selection.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "c1e2b32350a0b90eb2cd685068177622",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/technical/2017-02-14-leader-selection.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-14-leader-selection.md",
      "relativePath": "en/docs/technical/2017-02-14-leader-selection.md",
      "extension": "md",
      "size": 3573,
      "prettySize": "3.57 kB",
      "modifiedTime": "2018-10-25T11:58:46.938Z",
      "accessTime": "2018-10-31T17:49:05.664Z",
      "changeTime": "2018-10-25T11:58:46.938Z",
      "birthTime": "2018-10-11T13:57:21.458Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical",
      "base": "2017-02-14-leader-selection.md",
      "ext": ".md",
      "name": "2017-02-14-leader-selection",
      "relativeDirectory": "en/docs/technical",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17279614,
      "blocks": 8,
      "atimeMs": 1541008145663.9282,
      "mtimeMs": 1540468726937.8308,
      "ctimeMs": 1540468726937.8308,
      "birthtimeMs": 1539266241457.505,
      "atime": "2018-10-31T17:49:05.664Z",
      "mtime": "2018-10-25T11:58:46.938Z",
      "ctime": "2018-10-25T11:58:46.938Z",
      "birthtime": "2018-10-11T13:57:21.458Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-01-cli-options.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-01-cli-options.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-01-cli-options.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "4eb96763d558acd22ec0d60de7b29cfc",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/technical/2017-01-01-cli-options.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-01-cli-options.md",
      "relativePath": "en/docs/technical/2017-01-01-cli-options.md",
      "extension": "md",
      "size": 37825,
      "prettySize": "37.8 kB",
      "modifiedTime": "2018-10-25T11:57:54.597Z",
      "accessTime": "2018-10-31T17:49:05.664Z",
      "changeTime": "2018-10-25T11:57:54.597Z",
      "birthTime": "2018-10-11T13:57:21.449Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical",
      "base": "2017-01-01-cli-options.md",
      "ext": ".md",
      "name": "2017-01-01-cli-options",
      "relativeDirectory": "en/docs/technical",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17279615,
      "blocks": 80,
      "atimeMs": 1541008145663.7449,
      "mtimeMs": 1540468674596.5962,
      "ctimeMs": 1540468674596.5962,
      "birthtimeMs": 1539266241449.0483,
      "atime": "2018-10-31T17:49:05.664Z",
      "mtime": "2018-10-25T11:57:54.597Z",
      "ctime": "2018-10-25T11:57:54.597Z",
      "birthtime": "2018-10-11T13:57:21.449Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-16-delegation.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-16-delegation.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-16-delegation.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "b64e2cc14b56b5208a7fc60fec8794bd",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/technical/2017-02-16-delegation.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-16-delegation.md",
      "relativePath": "en/docs/technical/2017-02-16-delegation.md",
      "extension": "md",
      "size": 8470,
      "prettySize": "8.47 kB",
      "modifiedTime": "2018-10-25T11:59:09.817Z",
      "accessTime": "2018-10-31T17:49:05.664Z",
      "changeTime": "2018-10-25T11:59:09.817Z",
      "birthTime": "2018-10-11T13:57:21.460Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical",
      "base": "2017-02-16-delegation.md",
      "ext": ".md",
      "name": "2017-02-16-delegation",
      "relativeDirectory": "en/docs/technical",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17279629,
      "blocks": 24,
      "atimeMs": 1541008145664.0059,
      "mtimeMs": 1540468749817.3203,
      "ctimeMs": 1540468749817.3203,
      "birthtimeMs": 1539266241460.1526,
      "atime": "2018-10-31T17:49:05.664Z",
      "mtime": "2018-10-25T11:59:09.817Z",
      "ctime": "2018-10-25T11:59:09.817Z",
      "birthtime": "2018-10-11T13:57:21.460Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-16-specification-wallet-backend.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-16-specification-wallet-backend.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-16-specification-wallet-backend.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "82073d3479569b8743a5539b2e014d08",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/technical/2017-05-16-specification-wallet-backend.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-16-specification-wallet-backend.md",
      "relativePath": "en/docs/technical/2017-05-16-specification-wallet-backend.md",
      "extension": "md",
      "size": 1179,
      "prettySize": "1.18 kB",
      "modifiedTime": "2018-10-16T17:04:28.994Z",
      "accessTime": "2018-10-31T17:49:05.664Z",
      "changeTime": "2018-10-16T17:04:28.994Z",
      "birthTime": "2018-10-11T13:57:21.464Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical",
      "base": "2017-05-16-specification-wallet-backend.md",
      "ext": ".md",
      "name": "2017-05-16-specification-wallet-backend",
      "relativeDirectory": "en/docs/technical",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17279618,
      "blocks": 8,
      "atimeMs": 1541008145664.1345,
      "mtimeMs": 1539709468994.0867,
      "ctimeMs": 1539709468994.0867,
      "birthtimeMs": 1539266241463.6895,
      "atime": "2018-10-31T17:49:05.664Z",
      "mtime": "2018-10-16T17:04:28.994Z",
      "ctime": "2018-10-16T17:04:28.994Z",
      "birthtime": "2018-10-11T13:57:21.464Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-15-pvss.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-15-pvss.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-15-pvss.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "f43cbbdf26cb5fa77b05992604727b78",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/technical/2017-02-15-pvss.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-15-pvss.md",
      "relativePath": "en/docs/technical/2017-02-15-pvss.md",
      "extension": "md",
      "size": 10943,
      "prettySize": "10.9 kB",
      "modifiedTime": "2018-10-25T11:58:55.478Z",
      "accessTime": "2018-10-31T17:49:05.664Z",
      "changeTime": "2018-10-25T11:58:55.478Z",
      "birthTime": "2018-10-11T13:57:21.459Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical",
      "base": "2017-02-15-pvss.md",
      "ext": ".md",
      "name": "2017-02-15-pvss",
      "relativeDirectory": "en/docs/technical",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17279622,
      "blocks": 24,
      "atimeMs": 1541008145663.97,
      "mtimeMs": 1540468735478.1724,
      "ctimeMs": 1540468735478.1724,
      "birthtimeMs": 1539266241458.8752,
      "atime": "2018-10-31T17:49:05.664Z",
      "mtime": "2018-10-25T11:58:55.478Z",
      "ctime": "2018-10-25T11:58:55.478Z",
      "birthtime": "2018-10-11T13:57:21.459Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-01-testnet.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-01-testnet.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-01-testnet.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "e5c5c4257934a8ea73a0407114115989",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/timeline/2017-01-01-testnet.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-01-testnet.md",
      "relativePath": "en/docs/timeline/2017-01-01-testnet.md",
      "extension": "md",
      "size": 869,
      "prettySize": "869 B",
      "modifiedTime": "2018-10-29T11:43:38.291Z",
      "accessTime": "2018-10-31T17:49:05.665Z",
      "changeTime": "2018-10-29T11:43:38.291Z",
      "birthTime": "2018-10-11T13:57:21.486Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline",
      "base": "2017-01-01-testnet.md",
      "ext": ".md",
      "name": "2017-01-01-testnet",
      "relativeDirectory": "en/docs/timeline",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17277432,
      "blocks": 8,
      "atimeMs": 1541008145664.6777,
      "mtimeMs": 1540813418290.9885,
      "ctimeMs": 1540813418290.9885,
      "birthtimeMs": 1539266241485.6492,
      "atime": "2018-10-31T17:49:05.665Z",
      "mtime": "2018-10-29T11:43:38.291Z",
      "ctime": "2018-10-29T11:43:38.291Z",
      "birthtime": "2018-10-11T13:57:21.486Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-02-bootstrap.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-02-bootstrap.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-02-bootstrap.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "088b1097b3cc3f70287786047ac3b8d3",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/timeline/2017-01-02-bootstrap.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-02-bootstrap.md",
      "relativePath": "en/docs/timeline/2017-01-02-bootstrap.md",
      "extension": "md",
      "size": 4397,
      "prettySize": "4.4 kB",
      "modifiedTime": "2018-10-25T11:42:44.234Z",
      "accessTime": "2018-10-31T17:49:05.665Z",
      "changeTime": "2018-10-25T11:42:44.234Z",
      "birthTime": "2018-10-11T13:57:21.486Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline",
      "base": "2017-01-02-bootstrap.md",
      "ext": ".md",
      "name": "2017-01-02-bootstrap",
      "relativeDirectory": "en/docs/timeline",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17277433,
      "blocks": 16,
      "atimeMs": 1541008145664.7422,
      "mtimeMs": 1540467764234.259,
      "ctimeMs": 1540467764234.259,
      "birthtimeMs": 1539266241486.4575,
      "atime": "2018-10-31T17:49:05.665Z",
      "mtime": "2018-10-25T11:42:44.234Z",
      "ctime": "2018-10-25T11:42:44.234Z",
      "birthtime": "2018-10-11T13:57:21.486Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-15-wallet-backend.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-15-wallet-backend.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-15-wallet-backend.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "7f60c4518d9172f2f6de4dfc67dda18e",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/technical/2017-05-15-wallet-backend.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-15-wallet-backend.md",
      "relativePath": "en/docs/technical/2017-05-15-wallet-backend.md",
      "extension": "md",
      "size": 3370,
      "prettySize": "3.37 kB",
      "modifiedTime": "2018-10-25T11:59:20.557Z",
      "accessTime": "2018-10-31T17:49:05.664Z",
      "changeTime": "2018-10-25T11:59:20.557Z",
      "birthTime": "2018-10-11T13:57:21.463Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical",
      "base": "2017-05-15-wallet-backend.md",
      "ext": ".md",
      "name": "2017-05-15-wallet-backend",
      "relativeDirectory": "en/docs/technical",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17279626,
      "blocks": 8,
      "atimeMs": 1541008145664.0752,
      "mtimeMs": 1540468760557.1873,
      "ctimeMs": 1540468760557.1873,
      "birthtimeMs": 1539266241462.765,
      "atime": "2018-10-31T17:49:05.664Z",
      "mtime": "2018-10-25T11:59:20.557Z",
      "ctime": "2018-10-25T11:59:20.557Z",
      "birthtime": "2018-10-11T13:57:21.463Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-14-hd-wallets.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-14-hd-wallets.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-14-hd-wallets.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "2866297c57b9fcb1f1da8d40f6054060",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/technical/2017-05-14-hd-wallets.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-14-hd-wallets.md",
      "relativePath": "en/docs/technical/2017-05-14-hd-wallets.md",
      "extension": "md",
      "size": 7386,
      "prettySize": "7.39 kB",
      "modifiedTime": "2018-10-16T17:04:29.110Z",
      "accessTime": "2018-10-31T17:49:05.664Z",
      "changeTime": "2018-10-16T17:04:29.110Z",
      "birthTime": "2018-10-11T13:57:21.461Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical",
      "base": "2017-05-14-hd-wallets.md",
      "ext": ".md",
      "name": "2017-05-14-hd-wallets",
      "relativeDirectory": "en/docs/technical",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17279620,
      "blocks": 16,
      "atimeMs": 1541008145664.0366,
      "mtimeMs": 1539709469110.064,
      "ctimeMs": 1539709469110.064,
      "birthtimeMs": 1539266241461.3772,
      "atime": "2018-10-31T17:49:05.664Z",
      "mtime": "2018-10-16T17:04:29.110Z",
      "ctime": "2018-10-16T17:04:29.110Z",
      "birthtime": "2018-10-11T13:57:21.461Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-04-differences.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-04-differences.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-04-differences.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "f1dc3b3ed358c147e15c51850ff79b64",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/cardano/2017-01-04-differences.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-04-differences.cn.md",
      "relativePath": "cn/docs/cardano/2017-01-04-differences.cn.md",
      "extension": "md",
      "size": 6307,
      "prettySize": "6.31 kB",
      "modifiedTime": "2018-10-17T13:18:38.990Z",
      "accessTime": "2018-10-31T17:49:05.661Z",
      "changeTime": "2018-10-17T13:18:38.990Z",
      "birthTime": "2018-10-11T13:57:21.401Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano",
      "base": "2017-01-04-differences.cn.md",
      "ext": ".md",
      "name": "2017-01-04-differences.cn",
      "relativeDirectory": "cn/docs/cardano",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17555583,
      "blocks": 16,
      "atimeMs": 1541008145661.2632,
      "mtimeMs": 1539782318990.4534,
      "ctimeMs": 1539782318990.4534,
      "birthtimeMs": 1539266241401.3958,
      "atime": "2018-10-31T17:49:05.661Z",
      "mtime": "2018-10-17T13:18:38.990Z",
      "ctime": "2018-10-17T13:18:38.990Z",
      "birthtime": "2018-10-11T13:57:21.401Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-07-addresses.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-07-addresses.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-07-addresses.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "728ce0b2822f87243cef6110c90f5c99",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/cardano/2017-01-07-addresses.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-07-addresses.cn.md",
      "relativePath": "cn/docs/cardano/2017-01-07-addresses.cn.md",
      "extension": "md",
      "size": 5236,
      "prettySize": "5.24 kB",
      "modifiedTime": "2018-10-17T13:18:42.795Z",
      "accessTime": "2018-10-31T17:49:05.661Z",
      "changeTime": "2018-10-17T13:18:42.795Z",
      "birthTime": "2018-10-11T13:57:21.402Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano",
      "base": "2017-01-07-addresses.cn.md",
      "ext": ".md",
      "name": "2017-01-07-addresses.cn",
      "relativeDirectory": "cn/docs/cardano",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17555585,
      "blocks": 16,
      "atimeMs": 1541008145661.2976,
      "mtimeMs": 1539782322794.7742,
      "ctimeMs": 1539782322794.7742,
      "birthtimeMs": 1539266241402.2573,
      "atime": "2018-10-31T17:49:05.661Z",
      "mtime": "2018-10-17T13:18:42.795Z",
      "ctime": "2018-10-17T13:18:42.795Z",
      "birthtime": "2018-10-11T13:57:21.402Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-10-transactions.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-10-transactions.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-10-transactions.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "b4108cb7479496dc8796af8c826913fd",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/cardano/2017-01-10-transactions.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-10-transactions.cn.md",
      "relativePath": "cn/docs/cardano/2017-01-10-transactions.cn.md",
      "extension": "md",
      "size": 8745,
      "prettySize": "8.74 kB",
      "modifiedTime": "2018-10-17T13:18:46.998Z",
      "accessTime": "2018-10-31T17:49:05.661Z",
      "changeTime": "2018-10-17T13:18:46.998Z",
      "birthTime": "2018-10-11T13:57:21.403Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano",
      "base": "2017-01-10-transactions.cn.md",
      "ext": ".md",
      "name": "2017-01-10-transactions.cn",
      "relativeDirectory": "cn/docs/cardano",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17555586,
      "blocks": 24,
      "atimeMs": 1541008145661.3325,
      "mtimeMs": 1539782326997.5708,
      "ctimeMs": 1539782326997.5708,
      "birthtimeMs": 1539266241403.4246,
      "atime": "2018-10-31T17:49:05.661Z",
      "mtime": "2018-10-17T13:18:46.998Z",
      "ctime": "2018-10-17T13:18:46.998Z",
      "birthtime": "2018-10-11T13:57:21.403Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-13-balance-and-stake.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-13-balance-and-stake.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-13-balance-and-stake.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "e25e7b92f2e46f823775e00db81cb65d",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/cardano/2017-01-13-balance-and-stake.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-13-balance-and-stake.cn.md",
      "relativePath": "cn/docs/cardano/2017-01-13-balance-and-stake.cn.md",
      "extension": "md",
      "size": 1705,
      "prettySize": "1.71 kB",
      "modifiedTime": "2018-10-17T13:18:53.069Z",
      "accessTime": "2018-10-31T17:49:05.661Z",
      "changeTime": "2018-10-17T13:18:53.069Z",
      "birthTime": "2018-10-11T13:57:21.404Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano",
      "base": "2017-01-13-balance-and-stake.cn.md",
      "ext": ".md",
      "name": "2017-01-13-balance-and-stake.cn",
      "relativeDirectory": "cn/docs/cardano",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17555587,
      "blocks": 8,
      "atimeMs": 1541008145661.3765,
      "mtimeMs": 1539782333068.8809,
      "ctimeMs": 1539782333068.8809,
      "birthtimeMs": 1539266241404.336,
      "atime": "2018-10-31T17:49:05.661Z",
      "mtime": "2018-10-17T13:18:53.069Z",
      "ctime": "2018-10-17T13:18:53.069Z",
      "birthtime": "2018-10-11T13:57:21.404Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-16-updating.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-16-updating.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-16-updating.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "a666dd28d45322db30d8399dc010604c",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/cardano/2017-01-16-updating.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-16-updating.cn.md",
      "relativePath": "cn/docs/cardano/2017-01-16-updating.cn.md",
      "extension": "md",
      "size": 11701,
      "prettySize": "11.7 kB",
      "modifiedTime": "2018-10-17T13:18:57.290Z",
      "accessTime": "2018-10-31T17:49:05.661Z",
      "changeTime": "2018-10-17T13:18:57.290Z",
      "birthTime": "2018-10-11T13:57:21.405Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano",
      "base": "2017-01-16-updating.cn.md",
      "ext": ".md",
      "name": "2017-01-16-updating.cn",
      "relativeDirectory": "cn/docs/cardano",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17555588,
      "blocks": 24,
      "atimeMs": 1541008145661.4106,
      "mtimeMs": 1539782337289.6953,
      "ctimeMs": 1539782337289.6953,
      "birthtimeMs": 1539266241405.02,
      "atime": "2018-10-31T17:49:05.661Z",
      "mtime": "2018-10-17T13:18:57.290Z",
      "ctime": "2018-10-17T13:18:57.290Z",
      "birthtime": "2018-10-11T13:57:21.405Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-19-topology.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-19-topology.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-19-topology.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "5918544645b8a379e9e136029643be9b",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/cardano/2017-01-19-topology.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-19-topology.cn.md",
      "relativePath": "cn/docs/cardano/2017-01-19-topology.cn.md",
      "extension": "md",
      "size": 2284,
      "prettySize": "2.28 kB",
      "modifiedTime": "2018-10-17T13:19:01.882Z",
      "accessTime": "2018-10-31T17:49:05.661Z",
      "changeTime": "2018-10-17T13:19:01.882Z",
      "birthTime": "2018-10-11T13:57:21.406Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano",
      "base": "2017-01-19-topology.cn.md",
      "ext": ".md",
      "name": "2017-01-19-topology.cn",
      "relativeDirectory": "cn/docs/cardano",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17555590,
      "blocks": 8,
      "atimeMs": 1541008145661.4438,
      "mtimeMs": 1539782341882.2205,
      "ctimeMs": 1539782341882.2205,
      "birthtimeMs": 1539266241405.957,
      "atime": "2018-10-31T17:49:05.661Z",
      "mtime": "2018-10-17T13:19:01.882Z",
      "ctime": "2018-10-17T13:19:01.882Z",
      "birthtime": "2018-10-11T13:57:21.406Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-01-monetary-policy.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-01-monetary-policy.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-01-monetary-policy.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "741a5d0c0fa7eb1adc0521964175e4f9",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/cardano/2017-02-01-monetary-policy.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-01-monetary-policy.cn.md",
      "relativePath": "cn/docs/cardano/2017-02-01-monetary-policy.cn.md",
      "extension": "md",
      "size": 2048,
      "prettySize": "2.05 kB",
      "modifiedTime": "2018-10-29T16:14:56.278Z",
      "accessTime": "2018-10-31T17:49:05.661Z",
      "changeTime": "2018-10-29T16:14:56.278Z",
      "birthTime": "2018-10-11T13:57:21.407Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano",
      "base": "2017-02-01-monetary-policy.cn.md",
      "ext": ".md",
      "name": "2017-02-01-monetary-policy.cn",
      "relativeDirectory": "cn/docs/cardano",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17555591,
      "blocks": 8,
      "atimeMs": 1541008145661.4753,
      "mtimeMs": 1540829696277.5327,
      "ctimeMs": 1540829696277.5327,
      "birthtimeMs": 1539266241406.7263,
      "atime": "2018-10-31T17:49:05.661Z",
      "mtime": "2018-10-29T16:14:56.278Z",
      "ctime": "2018-10-29T16:14:56.278Z",
      "birthtime": "2018-10-11T13:57:21.407Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-02-transaction-fees.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-02-transaction-fees.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-02-transaction-fees.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "6776c06620c1300f9da3f58349291760",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/cardano/2017-02-02-transaction-fees.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-02-transaction-fees.cn.md",
      "relativePath": "cn/docs/cardano/2017-02-02-transaction-fees.cn.md",
      "extension": "md",
      "size": 2846,
      "prettySize": "2.85 kB",
      "modifiedTime": "2018-10-17T13:19:10.776Z",
      "accessTime": "2018-10-31T17:49:05.662Z",
      "changeTime": "2018-10-17T13:19:10.776Z",
      "birthTime": "2018-10-11T13:57:21.407Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano",
      "base": "2017-02-02-transaction-fees.cn.md",
      "ext": ".md",
      "name": "2017-02-02-transaction-fees.cn",
      "relativeDirectory": "cn/docs/cardano",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17555592,
      "blocks": 8,
      "atimeMs": 1541008145661.5112,
      "mtimeMs": 1539782350776.1782,
      "ctimeMs": 1539782350776.1782,
      "birthtimeMs": 1539266241407.4578,
      "atime": "2018-10-31T17:49:05.662Z",
      "mtime": "2018-10-17T13:19:10.776Z",
      "ctime": "2018-10-17T13:19:10.776Z",
      "birthtime": "2018-10-11T13:57:21.407Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-16-wallet-frontend.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-16-wallet-frontend.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-16-wallet-frontend.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "085f21fad996ad4a2b7d527f6c8b75cc",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/technical/2017-05-16-wallet-frontend.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-16-wallet-frontend.md",
      "relativePath": "en/docs/technical/2017-05-16-wallet-frontend.md",
      "extension": "md",
      "size": 3289,
      "prettySize": "3.29 kB",
      "modifiedTime": "2018-10-25T11:59:34.176Z",
      "accessTime": "2018-10-31T17:49:05.664Z",
      "changeTime": "2018-10-25T11:59:34.176Z",
      "birthTime": "2018-10-11T13:57:21.465Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical",
      "base": "2017-05-16-wallet-frontend.md",
      "ext": ".md",
      "name": "2017-05-16-wallet-frontend",
      "relativeDirectory": "en/docs/technical",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17279623,
      "blocks": 8,
      "atimeMs": 1541008145664.184,
      "mtimeMs": 1540468774175.5808,
      "ctimeMs": 1540468774175.5808,
      "birthtimeMs": 1539266241465.1824,
      "atime": "2018-10-31T17:49:05.664Z",
      "mtime": "2018-10-25T11:59:34.176Z",
      "ctime": "2018-10-25T11:59:34.176Z",
      "birthtime": "2018-10-11T13:57:21.465Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-03-transaction-assurance.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-03-transaction-assurance.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-03-transaction-assurance.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "6d4aac53ce073d6f3208331401e73cc6",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/cardano/2017-02-03-transaction-assurance.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-03-transaction-assurance.cn.md",
      "relativePath": "cn/docs/cardano/2017-02-03-transaction-assurance.cn.md",
      "extension": "md",
      "size": 10323,
      "prettySize": "10.3 kB",
      "modifiedTime": "2018-10-17T13:21:20.685Z",
      "accessTime": "2018-10-31T17:49:05.662Z",
      "changeTime": "2018-10-17T13:21:20.685Z",
      "birthTime": "2018-10-11T13:57:21.408Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano",
      "base": "2017-02-03-transaction-assurance.cn.md",
      "ext": ".md",
      "name": "2017-02-03-transaction-assurance.cn",
      "relativeDirectory": "cn/docs/cardano",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17555593,
      "blocks": 24,
      "atimeMs": 1541008145661.531,
      "mtimeMs": 1539782480684.7615,
      "ctimeMs": 1539782480684.7615,
      "birthtimeMs": 1539266241408.24,
      "atime": "2018-10-31T17:49:05.662Z",
      "mtime": "2018-10-17T13:21:20.685Z",
      "ctime": "2018-10-17T13:21:20.685Z",
      "birthtime": "2018-10-11T13:57:21.408Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-05-explorer.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-05-explorer.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-05-explorer.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "2aa6c9e72d5b7f997a3ce6313987a392",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/cardano/2017-02-05-explorer.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-05-explorer.cn.md",
      "relativePath": "cn/docs/cardano/2017-02-05-explorer.cn.md",
      "extension": "md",
      "size": 1765,
      "prettySize": "1.76 kB",
      "modifiedTime": "2018-10-17T13:19:19.884Z",
      "accessTime": "2018-10-31T17:49:05.662Z",
      "changeTime": "2018-10-17T13:19:19.884Z",
      "birthTime": "2018-10-11T13:57:21.409Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano",
      "base": "2017-02-05-explorer.cn.md",
      "ext": ".md",
      "name": "2017-02-05-explorer.cn",
      "relativeDirectory": "cn/docs/cardano",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17555594,
      "blocks": 8,
      "atimeMs": 1541008145661.5696,
      "mtimeMs": 1539782359884.338,
      "ctimeMs": 1539782359884.338,
      "birthtimeMs": 1539266241409.2124,
      "atime": "2018-10-31T17:49:05.662Z",
      "mtime": "2018-10-17T13:19:19.884Z",
      "ctime": "2018-10-17T13:19:19.884Z",
      "birthtime": "2018-10-11T13:57:21.409Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/.DS_Store absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/.DS_Store absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "4a414697be23afe77e966d727f62eff4",
        "mediaType": "application/octet-stream",
        "type": "File",
        "description": "File \"src/pages/cn/docs/technical/.DS_Store\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/.DS_Store",
      "relativePath": "cn/docs/technical/.DS_Store",
      "extension": "",
      "size": 6148,
      "prettySize": "6.15 kB",
      "modifiedTime": "2018-10-17T14:17:47.020Z",
      "accessTime": "2018-10-31T17:49:05.687Z",
      "changeTime": "2018-10-17T14:17:47.020Z",
      "birthTime": "2018-10-17T14:17:13.398Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical",
      "base": ".DS_Store",
      "ext": "",
      "name": ".DS_Store",
      "relativeDirectory": "cn/docs/technical",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17566380,
      "blocks": 16,
      "atimeMs": 1541008145686.6116,
      "mtimeMs": 1539785867020.2466,
      "ctimeMs": 1539785867020.2466,
      "birthtimeMs": 1539785833397.7996,
      "atime": "2018-10-31T17:49:05.687Z",
      "mtime": "2018-10-17T14:17:47.020Z",
      "ctime": "2018-10-17T14:17:47.020Z",
      "birthtime": "2018-10-17T14:17:13.398Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-03-reward.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-03-reward.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-03-reward.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "075abd84212427bbc481c475706d5c7a",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/timeline/2017-01-03-reward.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-03-reward.md",
      "relativePath": "en/docs/timeline/2017-01-03-reward.md",
      "extension": "md",
      "size": 720,
      "prettySize": "720 B",
      "modifiedTime": "2018-10-25T17:22:41.700Z",
      "accessTime": "2018-10-31T17:49:05.665Z",
      "changeTime": "2018-10-25T17:22:41.700Z",
      "birthTime": "2018-10-11T13:57:21.488Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline",
      "base": "2017-01-03-reward.md",
      "ext": ".md",
      "name": "2017-01-03-reward",
      "relativeDirectory": "en/docs/timeline",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17277434,
      "blocks": 8,
      "atimeMs": 1541008145664.802,
      "mtimeMs": 1540488161700.1626,
      "ctimeMs": 1540488161700.1626,
      "birthtimeMs": 1539266241487.69,
      "atime": "2018-10-31T17:49:05.665Z",
      "mtime": "2018-10-25T17:22:41.700Z",
      "ctime": "2018-10-25T17:22:41.700Z",
      "birthtime": "2018-10-11T13:57:21.488Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-01-proof-of-stake.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-01-proof-of-stake.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-01-proof-of-stake.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "6cbf721708071686435faaa45cc8cdad",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/cardano/2017-01-01-proof-of-stake.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-01-proof-of-stake.cn.md",
      "relativePath": "cn/docs/cardano/2017-01-01-proof-of-stake.cn.md",
      "extension": "md",
      "size": 8133,
      "prettySize": "8.13 kB",
      "modifiedTime": "2018-10-17T13:18:35.766Z",
      "accessTime": "2018-10-31T17:49:05.661Z",
      "changeTime": "2018-10-17T13:18:35.766Z",
      "birthTime": "2018-10-11T13:57:21.400Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano",
      "base": "2017-01-01-proof-of-stake.cn.md",
      "ext": ".md",
      "name": "2017-01-01-proof-of-stake.cn",
      "relativeDirectory": "cn/docs/cardano",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17555582,
      "blocks": 16,
      "atimeMs": 1541008145661.2207,
      "mtimeMs": 1539782315765.512,
      "ctimeMs": 1539782315765.512,
      "birthtimeMs": 1539266241400.353,
      "atime": "2018-10-31T17:49:05.661Z",
      "mtime": "2018-10-17T13:18:35.766Z",
      "ctime": "2018-10-17T13:18:35.766Z",
      "birthtime": "2018-10-11T13:57:21.400Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-02-launcher.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-02-launcher.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-02-launcher.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "e10bf1d53a03ad0d0bf8c11c54a8efeb",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/technical/2017-01-02-launcher.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-02-launcher.cn.md",
      "relativePath": "cn/docs/technical/2017-01-02-launcher.cn.md",
      "extension": "md",
      "size": 5880,
      "prettySize": "5.88 kB",
      "modifiedTime": "2018-10-17T13:30:52.320Z",
      "accessTime": "2018-10-31T17:49:05.662Z",
      "changeTime": "2018-10-17T13:30:52.320Z",
      "birthTime": "2018-10-11T13:57:21.414Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical",
      "base": "2017-01-02-launcher.cn.md",
      "ext": ".md",
      "name": "2017-01-02-launcher.cn",
      "relativeDirectory": "cn/docs/technical",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17560816,
      "blocks": 16,
      "atimeMs": 1541008145661.9143,
      "mtimeMs": 1539783052319.8684,
      "ctimeMs": 1539783052319.8684,
      "birthtimeMs": 1539266241414.3196,
      "atime": "2018-10-31T17:49:05.662Z",
      "mtime": "2018-10-17T13:30:52.320Z",
      "ctime": "2018-10-17T13:30:52.320Z",
      "birthtime": "2018-10-11T13:57:21.414Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-04-updater.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-04-updater.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-04-updater.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "7bc8fbda24ccc9b2678a9bf36bd0313b",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/technical/2017-01-04-updater.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-04-updater.cn.md",
      "relativePath": "cn/docs/technical/2017-01-04-updater.cn.md",
      "extension": "md",
      "size": 12057,
      "prettySize": "12.1 kB",
      "modifiedTime": "2018-10-17T13:31:01.481Z",
      "accessTime": "2018-10-31T17:49:05.662Z",
      "changeTime": "2018-10-17T13:31:01.481Z",
      "birthTime": "2018-10-11T13:57:21.415Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical",
      "base": "2017-01-04-updater.cn.md",
      "ext": ".md",
      "name": "2017-01-04-updater.cn",
      "relativeDirectory": "cn/docs/technical",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17560817,
      "blocks": 24,
      "atimeMs": 1541008145661.9517,
      "mtimeMs": 1539783061481.1094,
      "ctimeMs": 1539783061481.1094,
      "birthtimeMs": 1539266241415.1584,
      "atime": "2018-10-31T17:49:05.662Z",
      "mtime": "2018-10-17T13:31:01.481Z",
      "ctime": "2018-10-17T13:31:01.481Z",
      "birthtime": "2018-10-11T13:57:21.415Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-06-explorer.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-06-explorer.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-06-explorer.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "54986a5eb68af1d08c1d73050c30f01f",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/technical/2017-01-06-explorer.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-06-explorer.cn.md",
      "relativePath": "cn/docs/technical/2017-01-06-explorer.cn.md",
      "extension": "md",
      "size": 3488,
      "prettySize": "3.49 kB",
      "modifiedTime": "2018-10-17T13:31:09.906Z",
      "accessTime": "2018-10-31T17:49:05.662Z",
      "changeTime": "2018-10-17T13:31:09.906Z",
      "birthTime": "2018-10-11T13:57:21.416Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical",
      "base": "2017-01-06-explorer.cn.md",
      "ext": ".md",
      "name": "2017-01-06-explorer.cn",
      "relativeDirectory": "cn/docs/technical",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17560818,
      "blocks": 8,
      "atimeMs": 1541008145661.9834,
      "mtimeMs": 1539783069906.073,
      "ctimeMs": 1539783069906.073,
      "birthtimeMs": 1539266241416.104,
      "atime": "2018-10-31T17:49:05.662Z",
      "mtime": "2018-10-17T13:31:09.906Z",
      "ctime": "2018-10-17T13:31:09.906Z",
      "birthtime": "2018-10-11T13:57:21.416Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-07-blocks.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-07-blocks.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-07-blocks.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "52df6ea6f1f874d0dcb6d39214be759d",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/technical/2017-01-07-blocks.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-07-blocks.cn.md",
      "relativePath": "cn/docs/technical/2017-01-07-blocks.cn.md",
      "extension": "md",
      "size": 12226,
      "prettySize": "12.2 kB",
      "modifiedTime": "2018-10-17T13:31:19.219Z",
      "accessTime": "2018-10-31T17:49:05.662Z",
      "changeTime": "2018-10-17T13:31:19.219Z",
      "birthTime": "2018-10-11T13:57:21.417Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical",
      "base": "2017-01-07-blocks.cn.md",
      "ext": ".md",
      "name": "2017-01-07-blocks.cn",
      "relativeDirectory": "cn/docs/technical",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17560819,
      "blocks": 24,
      "atimeMs": 1541008145662.031,
      "mtimeMs": 1539783079218.6162,
      "ctimeMs": 1539783079218.6162,
      "birthtimeMs": 1539266241417.0107,
      "atime": "2018-10-31T17:49:05.662Z",
      "mtime": "2018-10-17T13:31:19.219Z",
      "ctime": "2018-10-17T13:31:19.219Z",
      "birthtime": "2018-10-11T13:57:21.417Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-14-leader-selection.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-14-leader-selection.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-14-leader-selection.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "8310951ac45eee5cd421d267bc515acf",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/technical/2017-02-14-leader-selection.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-14-leader-selection.cn.md",
      "relativePath": "cn/docs/technical/2017-02-14-leader-selection.cn.md",
      "extension": "md",
      "size": 3474,
      "prettySize": "3.47 kB",
      "modifiedTime": "2018-10-17T13:31:28.059Z",
      "accessTime": "2018-10-31T17:49:05.662Z",
      "changeTime": "2018-10-17T13:31:28.059Z",
      "birthTime": "2018-10-11T13:57:21.418Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical",
      "base": "2017-02-14-leader-selection.cn.md",
      "ext": ".md",
      "name": "2017-02-14-leader-selection.cn",
      "relativeDirectory": "cn/docs/technical",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17560820,
      "blocks": 8,
      "atimeMs": 1541008145662.0815,
      "mtimeMs": 1539783088059.4233,
      "ctimeMs": 1539783088059.4233,
      "birthtimeMs": 1539266241418.1868,
      "atime": "2018-10-31T17:49:05.662Z",
      "mtime": "2018-10-17T13:31:28.059Z",
      "ctime": "2018-10-17T13:31:28.059Z",
      "birthtime": "2018-10-11T13:57:21.418Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-01-cli-options.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-01-cli-options.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-01-cli-options.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "9b639bbb92eae987666a5a408fb86758",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/technical/2017-01-01-cli-options.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-01-cli-options.cn.md",
      "relativePath": "cn/docs/technical/2017-01-01-cli-options.cn.md",
      "extension": "md",
      "size": 37832,
      "prettySize": "37.8 kB",
      "modifiedTime": "2018-10-17T13:30:42.980Z",
      "accessTime": "2018-10-31T17:49:05.662Z",
      "changeTime": "2018-10-17T13:30:42.980Z",
      "birthTime": "2018-10-11T13:57:21.412Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical",
      "base": "2017-01-01-cli-options.cn.md",
      "ext": ".md",
      "name": "2017-01-01-cli-options.cn",
      "relativeDirectory": "cn/docs/technical",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17560815,
      "blocks": 80,
      "atimeMs": 1541008145661.854,
      "mtimeMs": 1539783042980.185,
      "ctimeMs": 1539783042980.185,
      "birthtimeMs": 1539266241411.8528,
      "atime": "2018-10-31T17:49:05.662Z",
      "mtime": "2018-10-17T13:30:42.980Z",
      "ctime": "2018-10-17T13:30:42.980Z",
      "birthtime": "2018-10-11T13:57:21.412Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-16-delegation.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-16-delegation.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-16-delegation.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "6f27b51d2d2250d442382830f5ac97c3",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/technical/2017-02-16-delegation.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-16-delegation.cn.md",
      "relativePath": "cn/docs/technical/2017-02-16-delegation.cn.md",
      "extension": "md",
      "size": 7486,
      "prettySize": "7.49 kB",
      "modifiedTime": "2018-10-17T13:31:43.017Z",
      "accessTime": "2018-10-31T17:49:05.662Z",
      "changeTime": "2018-10-17T13:31:43.017Z",
      "birthTime": "2018-10-11T13:57:21.420Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical",
      "base": "2017-02-16-delegation.cn.md",
      "ext": ".md",
      "name": "2017-02-16-delegation.cn",
      "relativeDirectory": "cn/docs/technical",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17560822,
      "blocks": 16,
      "atimeMs": 1541008145662.146,
      "mtimeMs": 1539783103016.9116,
      "ctimeMs": 1539783103016.9116,
      "birthtimeMs": 1539266241419.8467,
      "atime": "2018-10-31T17:49:05.662Z",
      "mtime": "2018-10-17T13:31:43.017Z",
      "ctime": "2018-10-17T13:31:43.017Z",
      "birthtime": "2018-10-11T13:57:21.420Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/contributors/2017-01-03-haddock.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/contributors/2017-01-03-haddock.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/contributors/2017-01-03-haddock.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "555d735ca22426fff7b43a499dc6feca",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/contributors/2017-01-03-haddock.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/contributors/2017-01-03-haddock.cn.md",
      "relativePath": "cn/docs/contributors/2017-01-03-haddock.cn.md",
      "extension": "md",
      "size": 404,
      "prettySize": "404 B",
      "modifiedTime": "2018-10-17T14:30:55.543Z",
      "accessTime": "2018-10-31T17:49:05.661Z",
      "changeTime": "2018-10-17T14:30:55.543Z",
      "birthTime": "2018-10-11T13:57:21.411Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/contributors",
      "base": "2017-01-03-haddock.cn.md",
      "ext": ".md",
      "name": "2017-01-03-haddock.cn",
      "relativeDirectory": "cn/docs/contributors",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17568730,
      "blocks": 8,
      "atimeMs": 1541008145661.0513,
      "mtimeMs": 1539786655542.5586,
      "ctimeMs": 1539786655542.5586,
      "birthtimeMs": 1539266241410.8772,
      "atime": "2018-10-31T17:49:05.661Z",
      "mtime": "2018-10-17T14:30:55.543Z",
      "ctime": "2018-10-17T14:30:55.543Z",
      "birthtime": "2018-10-11T13:57:21.411Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-15-pvss.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-15-pvss.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-15-pvss.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "df8dd36ee4d7a066276412c5edf5e92f",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/technical/2017-02-15-pvss.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-15-pvss.cn.md",
      "relativePath": "cn/docs/technical/2017-02-15-pvss.cn.md",
      "extension": "md",
      "size": 10279,
      "prettySize": "10.3 kB",
      "modifiedTime": "2018-10-17T13:31:35.659Z",
      "accessTime": "2018-10-31T17:49:05.662Z",
      "changeTime": "2018-10-17T13:31:35.659Z",
      "birthTime": "2018-10-11T13:57:21.419Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical",
      "base": "2017-02-15-pvss.cn.md",
      "ext": ".md",
      "name": "2017-02-15-pvss.cn",
      "relativeDirectory": "cn/docs/technical",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17560821,
      "blocks": 24,
      "atimeMs": 1541008145662.116,
      "mtimeMs": 1539783095659.0066,
      "ctimeMs": 1539783095659.0066,
      "birthtimeMs": 1539266241418.901,
      "atime": "2018-10-31T17:49:05.662Z",
      "mtime": "2018-10-17T13:31:35.659Z",
      "ctime": "2018-10-17T13:31:35.659Z",
      "birthtime": "2018-10-11T13:57:21.419Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-14-hd-wallets.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-14-hd-wallets.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-14-hd-wallets.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "2e98f92316e10c0339dfc2e9167fa7bb",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/technical/2017-05-14-hd-wallets.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-14-hd-wallets.cn.md",
      "relativePath": "cn/docs/technical/2017-05-14-hd-wallets.cn.md",
      "extension": "md",
      "size": 6332,
      "prettySize": "6.33 kB",
      "modifiedTime": "2018-10-17T13:31:50.701Z",
      "accessTime": "2018-10-31T17:49:05.662Z",
      "changeTime": "2018-10-17T13:31:50.701Z",
      "birthTime": "2018-10-11T13:57:21.421Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical",
      "base": "2017-05-14-hd-wallets.cn.md",
      "ext": ".md",
      "name": "2017-05-14-hd-wallets.cn",
      "relativeDirectory": "cn/docs/technical",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17560823,
      "blocks": 16,
      "atimeMs": 1541008145662.196,
      "mtimeMs": 1539783110700.9587,
      "ctimeMs": 1539783110700.9587,
      "birthtimeMs": 1539266241420.633,
      "atime": "2018-10-31T17:49:05.662Z",
      "mtime": "2018-10-17T13:31:50.701Z",
      "ctime": "2018-10-17T13:31:50.701Z",
      "birthtime": "2018-10-11T13:57:21.421Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-16-wallet-frontend.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-16-wallet-frontend.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-16-wallet-frontend.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "729d1b165f76b5b17fe7f7db1d5818e9",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/technical/2017-05-16-wallet-frontend.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-16-wallet-frontend.cn.md",
      "relativePath": "cn/docs/technical/2017-05-16-wallet-frontend.cn.md",
      "extension": "md",
      "size": 3133,
      "prettySize": "3.13 kB",
      "modifiedTime": "2018-10-17T13:32:08.402Z",
      "accessTime": "2018-10-31T17:49:05.662Z",
      "changeTime": "2018-10-17T13:32:08.402Z",
      "birthTime": "2018-10-11T13:57:21.422Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical",
      "base": "2017-05-16-wallet-frontend.cn.md",
      "ext": ".md",
      "name": "2017-05-16-wallet-frontend.cn",
      "relativeDirectory": "cn/docs/technical",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17560825,
      "blocks": 8,
      "atimeMs": 1541008145662.2595,
      "mtimeMs": 1539783128401.7766,
      "ctimeMs": 1539783128401.7766,
      "birthtimeMs": 1539266241422.1934,
      "atime": "2018-10-31T17:49:05.662Z",
      "mtime": "2018-10-17T13:32:08.402Z",
      "ctime": "2018-10-17T13:32:08.402Z",
      "birthtime": "2018-10-11T13:57:21.422Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-15-wallet-backend.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-15-wallet-backend.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-15-wallet-backend.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "1f7b53061b68556a3930934e08a405be",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/technical/2017-05-15-wallet-backend.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-15-wallet-backend.cn.md",
      "relativePath": "cn/docs/technical/2017-05-15-wallet-backend.cn.md",
      "extension": "md",
      "size": 3031,
      "prettySize": "3.03 kB",
      "modifiedTime": "2018-10-17T13:32:00.138Z",
      "accessTime": "2018-10-31T17:49:05.662Z",
      "changeTime": "2018-10-17T13:32:00.138Z",
      "birthTime": "2018-10-11T13:57:21.421Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical",
      "base": "2017-05-15-wallet-backend.cn.md",
      "ext": ".md",
      "name": "2017-05-15-wallet-backend.cn",
      "relativeDirectory": "cn/docs/technical",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17560824,
      "blocks": 8,
      "atimeMs": 1541008145662.2366,
      "mtimeMs": 1539783120137.6313,
      "ctimeMs": 1539783120137.6313,
      "birthtimeMs": 1539266241421.4414,
      "atime": "2018-10-31T17:49:05.662Z",
      "mtime": "2018-10-17T13:32:00.138Z",
      "ctime": "2018-10-17T13:32:00.138Z",
      "birthtime": "2018-10-11T13:57:21.421Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/contributors/2017-01-01-building-from-source.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/contributors/2017-01-01-building-from-source.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/contributors/2017-01-01-building-from-source.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "f154412f993f468d83a8f3ee823a9928",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/contributors/2017-01-01-building-from-source.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/contributors/2017-01-01-building-from-source.cn.md",
      "relativePath": "cn/docs/contributors/2017-01-01-building-from-source.cn.md",
      "extension": "md",
      "size": 368,
      "prettySize": "368 B",
      "modifiedTime": "2018-10-17T14:30:48.861Z",
      "accessTime": "2018-10-31T17:49:05.661Z",
      "changeTime": "2018-10-17T14:30:48.861Z",
      "birthTime": "2018-10-11T13:57:21.410Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/contributors",
      "base": "2017-01-01-building-from-source.cn.md",
      "ext": ".md",
      "name": "2017-01-01-building-from-source.cn",
      "relativeDirectory": "cn/docs/contributors",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17568729,
      "blocks": 8,
      "atimeMs": 1541008145661.015,
      "mtimeMs": 1539786648860.7485,
      "ctimeMs": 1539786648860.7485,
      "birthtimeMs": 1539266241410.0527,
      "atime": "2018-10-31T17:49:05.661Z",
      "mtime": "2018-10-17T14:30:48.861Z",
      "ctime": "2018-10-17T14:30:48.861Z",
      "birthtime": "2018-10-11T13:57:21.410Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-01-testnet.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-01-testnet.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-01-testnet.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "67ad6ca3e524c472b53dba0d284abc37",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/timeline/2017-01-01-testnet.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-01-testnet.cn.md",
      "relativePath": "cn/docs/timeline/2017-01-01-testnet.cn.md",
      "extension": "md",
      "size": 786,
      "prettySize": "786 B",
      "modifiedTime": "2018-10-17T13:25:54.660Z",
      "accessTime": "2018-10-31T17:49:05.663Z",
      "changeTime": "2018-10-17T13:25:54.660Z",
      "birthTime": "2018-10-11T13:57:21.444Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline",
      "base": "2017-01-01-testnet.cn.md",
      "ext": ".md",
      "name": "2017-01-01-testnet.cn",
      "relativeDirectory": "cn/docs/timeline",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17559167,
      "blocks": 8,
      "atimeMs": 1541008145662.63,
      "mtimeMs": 1539782754659.6936,
      "ctimeMs": 1539782754659.6936,
      "birthtimeMs": 1539266241443.737,
      "atime": "2018-10-31T17:49:05.663Z",
      "mtime": "2018-10-17T13:25:54.660Z",
      "ctime": "2018-10-17T13:25:54.660Z",
      "birthtime": "2018-10-11T13:57:21.444Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-02-bootstrap.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-02-bootstrap.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-02-bootstrap.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "b4a9229671181ace6fade1615283e618",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/timeline/2017-01-02-bootstrap.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-02-bootstrap.cn.md",
      "relativePath": "cn/docs/timeline/2017-01-02-bootstrap.cn.md",
      "extension": "md",
      "size": 3605,
      "prettySize": "3.6 kB",
      "modifiedTime": "2018-10-17T13:25:58.963Z",
      "accessTime": "2018-10-31T17:49:05.663Z",
      "changeTime": "2018-10-17T13:25:58.963Z",
      "birthTime": "2018-10-11T13:57:21.445Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline",
      "base": "2017-01-02-bootstrap.cn.md",
      "ext": ".md",
      "name": "2017-01-02-bootstrap.cn",
      "relativeDirectory": "cn/docs/timeline",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17559168,
      "blocks": 8,
      "atimeMs": 1541008145662.6633,
      "mtimeMs": 1539782758963.3728,
      "ctimeMs": 1539782758963.3728,
      "birthtimeMs": 1539266241444.7427,
      "atime": "2018-10-31T17:49:05.663Z",
      "mtime": "2018-10-17T13:25:58.963Z",
      "ctime": "2018-10-17T13:25:58.963Z",
      "birthtime": "2018-10-11T13:57:21.445Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-03-reward.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-03-reward.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-03-reward.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "bae7847ac6a284862fc24245bf582167",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/timeline/2017-01-03-reward.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-03-reward.cn.md",
      "relativePath": "cn/docs/timeline/2017-01-03-reward.cn.md",
      "extension": "md",
      "size": 600,
      "prettySize": "600 B",
      "modifiedTime": "2018-10-17T13:26:03.760Z",
      "accessTime": "2018-10-31T17:49:05.663Z",
      "changeTime": "2018-10-17T13:26:03.760Z",
      "birthTime": "2018-10-11T13:57:21.446Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline",
      "base": "2017-01-03-reward.cn.md",
      "ext": ".md",
      "name": "2017-01-03-reward.cn",
      "relativeDirectory": "cn/docs/timeline",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17559169,
      "blocks": 8,
      "atimeMs": 1541008145662.6965,
      "mtimeMs": 1539782763760.4924,
      "ctimeMs": 1539782763760.4924,
      "birthtimeMs": 1539266241445.7341,
      "atime": "2018-10-31T17:49:05.663Z",
      "mtime": "2018-10-17T13:26:03.760Z",
      "ctime": "2018-10-17T13:26:03.760Z",
      "birthtime": "2018-10-11T13:57:21.446Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-01-application-level.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-01-application-level.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-01-application-level.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "cb82adbcccaddc3e37f6754e0ec7dc6d",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/technical/protocols/2017-01-01-application-level.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-01-application-level.md",
      "relativePath": "en/docs/technical/protocols/2017-01-01-application-level.md",
      "extension": "md",
      "size": 20615,
      "prettySize": "20.6 kB",
      "modifiedTime": "2018-10-29T16:33:48.425Z",
      "accessTime": "2018-10-31T17:49:05.668Z",
      "changeTime": "2018-10-29T16:33:48.425Z",
      "birthTime": "2018-10-11T13:57:21.473Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols",
      "base": "2017-01-01-application-level.md",
      "ext": ".md",
      "name": "2017-01-01-application-level",
      "relativeDirectory": "en/docs/technical/protocols",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17279631,
      "blocks": 48,
      "atimeMs": 1541008145667.5874,
      "mtimeMs": 1540830828425.333,
      "ctimeMs": 1540830828425.333,
      "birthtimeMs": 1539266241472.6929,
      "atime": "2018-10-31T17:49:05.668Z",
      "mtime": "2018-10-29T16:33:48.425Z",
      "ctime": "2018-10-29T16:33:48.425Z",
      "birthtime": "2018-10-11T13:57:21.473Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-01-introduction.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-01-introduction.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-01-introduction.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "daa7e4df15579f929622cee2b7d806e9",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/technical/plutus/2017-01-01-introduction.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-01-introduction.md",
      "relativePath": "en/docs/technical/plutus/2017-01-01-introduction.md",
      "extension": "md",
      "size": 3707,
      "prettySize": "3.71 kB",
      "modifiedTime": "2018-10-16T17:04:29.112Z",
      "accessTime": "2018-10-31T17:49:05.667Z",
      "changeTime": "2018-10-16T17:04:29.112Z",
      "birthTime": "2018-10-11T13:57:21.469Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus",
      "base": "2017-01-01-introduction.md",
      "ext": ".md",
      "name": "2017-01-01-introduction",
      "relativeDirectory": "en/docs/technical/plutus",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17279639,
      "blocks": 8,
      "atimeMs": 1541008145667.0217,
      "mtimeMs": 1539709469111.9116,
      "ctimeMs": 1539709469111.9116,
      "birthtimeMs": 1539266241468.8987,
      "atime": "2018-10-31T17:49:05.667Z",
      "mtime": "2018-10-16T17:04:29.112Z",
      "ctime": "2018-10-16T17:04:29.112Z",
      "birthtime": "2018-10-11T13:57:21.469Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-02-types.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-02-types.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-02-types.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "ef38ac19f82eda2677301f357293c546",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/technical/plutus/2017-01-02-types.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-02-types.md",
      "relativePath": "en/docs/technical/plutus/2017-01-02-types.md",
      "extension": "md",
      "size": 6138,
      "prettySize": "6.14 kB",
      "modifiedTime": "2018-10-16T17:04:29.112Z",
      "accessTime": "2018-10-31T17:49:05.667Z",
      "changeTime": "2018-10-16T17:04:29.112Z",
      "birthTime": "2018-10-11T13:57:21.470Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus",
      "base": "2017-01-02-types.md",
      "ext": ".md",
      "name": "2017-01-02-types",
      "relativeDirectory": "en/docs/technical/plutus",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17279637,
      "blocks": 16,
      "atimeMs": 1541008145667.0896,
      "mtimeMs": 1539709469112.068,
      "ctimeMs": 1539709469112.068,
      "birthtimeMs": 1539266241470.1252,
      "atime": "2018-10-31T17:49:05.667Z",
      "mtime": "2018-10-16T17:04:29.112Z",
      "ctime": "2018-10-16T17:04:29.112Z",
      "birthtime": "2018-10-11T13:57:21.470Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-03-examples.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-03-examples.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-03-examples.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "7edb241ee74308afb53f516229b578e5",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/technical/plutus/2017-01-03-examples.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-03-examples.md",
      "relativePath": "en/docs/technical/plutus/2017-01-03-examples.md",
      "extension": "md",
      "size": 4196,
      "prettySize": "4.2 kB",
      "modifiedTime": "2018-10-16T17:04:29.112Z",
      "accessTime": "2018-10-31T17:49:05.667Z",
      "changeTime": "2018-10-16T17:04:29.112Z",
      "birthTime": "2018-10-11T13:57:21.471Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus",
      "base": "2017-01-03-examples.md",
      "ext": ".md",
      "name": "2017-01-03-examples",
      "relativeDirectory": "en/docs/technical/plutus",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17279638,
      "blocks": 16,
      "atimeMs": 1541008145667.1511,
      "mtimeMs": 1539709469112.1526,
      "ctimeMs": 1539709469112.1526,
      "birthtimeMs": 1539266241471.3684,
      "atime": "2018-10-31T17:49:05.667Z",
      "mtime": "2018-10-16T17:04:29.112Z",
      "ctime": "2018-10-16T17:04:29.112Z",
      "birthtime": "2018-10-11T13:57:21.471Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-07-time-warp-nt.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-07-time-warp-nt.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-07-time-warp-nt.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "dd12558aba3ba9f6b062c5434ee82b98",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/technical/protocols/2017-01-07-time-warp-nt.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-07-time-warp-nt.md",
      "relativePath": "en/docs/technical/protocols/2017-01-07-time-warp-nt.md",
      "extension": "md",
      "size": 9808,
      "prettySize": "9.81 kB",
      "modifiedTime": "2018-10-16T17:04:29.112Z",
      "accessTime": "2018-10-31T17:49:05.668Z",
      "changeTime": "2018-10-16T17:04:29.112Z",
      "birthTime": "2018-10-11T13:57:21.477Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols",
      "base": "2017-01-07-time-warp-nt.md",
      "ext": ".md",
      "name": "2017-01-07-time-warp-nt",
      "relativeDirectory": "en/docs/technical/protocols",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17279634,
      "blocks": 24,
      "atimeMs": 1541008145667.6995,
      "mtimeMs": 1539709469111.831,
      "ctimeMs": 1539709469111.831,
      "birthtimeMs": 1539266241476.9116,
      "atime": "2018-10-31T17:49:05.668Z",
      "mtime": "2018-10-16T17:04:29.112Z",
      "ctime": "2018-10-16T17:04:29.112Z",
      "birthtime": "2018-10-11T13:57:21.477Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/wallet/2018-03-14-api-docs.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/wallet/2018-03-14-api-docs.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/wallet/2018-03-14-api-docs.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "8a091def699357103d400247162806f3",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/technical/wallet/2018-03-14-api-docs.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/wallet/2018-03-14-api-docs.md",
      "relativePath": "en/docs/technical/wallet/2018-03-14-api-docs.md",
      "extension": "md",
      "size": 388,
      "prettySize": "388 B",
      "modifiedTime": "2018-10-16T17:04:29.111Z",
      "accessTime": "2018-10-31T17:49:05.667Z",
      "changeTime": "2018-10-16T17:04:29.111Z",
      "birthTime": "2018-10-11T13:57:21.485Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/wallet",
      "base": "2018-03-14-api-docs.md",
      "ext": ".md",
      "name": "2018-03-14-api-docs",
      "relativeDirectory": "en/docs/technical/wallet",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17279628,
      "blocks": 8,
      "atimeMs": 1541008145667.4336,
      "mtimeMs": 1539709469110.6438,
      "ctimeMs": 1539709469110.6438,
      "birthtimeMs": 1539266241484.7505,
      "atime": "2018-10-31T17:49:05.667Z",
      "mtime": "2018-10-16T17:04:29.111Z",
      "ctime": "2018-10-16T17:04:29.111Z",
      "birthtime": "2018-10-11T13:57:21.485Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-02-types.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-02-types.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-02-types.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "46cead7586d38dfd681f8fce0c53071f",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/technical/plutus/2017-01-02-types.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-02-types.cn.md",
      "relativePath": "cn/docs/technical/plutus/2017-01-02-types.cn.md",
      "extension": "md",
      "size": 5795,
      "prettySize": "5.79 kB",
      "modifiedTime": "2018-10-17T14:19:58.428Z",
      "accessTime": "2018-10-31T17:49:05.666Z",
      "changeTime": "2018-10-17T14:19:58.428Z",
      "birthTime": "2018-10-11T13:57:21.426Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus",
      "base": "2017-01-02-types.cn.md",
      "ext": ".md",
      "name": "2017-01-02-types.cn",
      "relativeDirectory": "cn/docs/technical/plutus",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17566382,
      "blocks": 16,
      "atimeMs": 1541008145665.9507,
      "mtimeMs": 1539785998428.1296,
      "ctimeMs": 1539785998428.1296,
      "birthtimeMs": 1539266241425.7695,
      "atime": "2018-10-31T17:49:05.666Z",
      "mtime": "2018-10-17T14:19:58.428Z",
      "ctime": "2018-10-17T14:19:58.428Z",
      "birthtime": "2018-10-11T13:57:21.426Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-01-introduction.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-01-introduction.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-01-introduction.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "85346ebc03c90c5fd75bc274f22bb813",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/technical/plutus/2017-01-01-introduction.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-01-introduction.cn.md",
      "relativePath": "cn/docs/technical/plutus/2017-01-01-introduction.cn.md",
      "extension": "md",
      "size": 3242,
      "prettySize": "3.24 kB",
      "modifiedTime": "2018-10-17T14:19:49.548Z",
      "accessTime": "2018-10-31T17:49:05.666Z",
      "changeTime": "2018-10-17T14:19:49.548Z",
      "birthTime": "2018-10-11T13:57:21.425Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus",
      "base": "2017-01-01-introduction.cn.md",
      "ext": ".md",
      "name": "2017-01-01-introduction.cn",
      "relativeDirectory": "cn/docs/technical/plutus",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17566381,
      "blocks": 8,
      "atimeMs": 1541008145665.897,
      "mtimeMs": 1539785989548.2476,
      "ctimeMs": 1539785989548.2476,
      "birthtimeMs": 1539266241424.9023,
      "atime": "2018-10-31T17:49:05.666Z",
      "mtime": "2018-10-17T14:19:49.548Z",
      "ctime": "2018-10-17T14:19:49.548Z",
      "birthtime": "2018-10-11T13:57:21.425Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-03-examples.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-03-examples.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-03-examples.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "7aa6672240bffdf9c3ebfe4d9ac815ae",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/technical/plutus/2017-01-03-examples.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-03-examples.cn.md",
      "relativePath": "cn/docs/technical/plutus/2017-01-03-examples.cn.md",
      "extension": "md",
      "size": 3919,
      "prettySize": "3.92 kB",
      "modifiedTime": "2018-10-17T14:20:10.116Z",
      "accessTime": "2018-10-31T17:49:05.666Z",
      "changeTime": "2018-10-17T14:20:10.116Z",
      "birthTime": "2018-10-11T13:57:21.427Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus",
      "base": "2017-01-03-examples.cn.md",
      "ext": ".md",
      "name": "2017-01-03-examples.cn",
      "relativeDirectory": "cn/docs/technical/plutus",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17566383,
      "blocks": 8,
      "atimeMs": 1541008145666.0176,
      "mtimeMs": 1539786010115.5503,
      "ctimeMs": 1539786010115.5503,
      "birthtimeMs": 1539266241426.7808,
      "atime": "2018-10-31T17:49:05.666Z",
      "mtime": "2018-10-17T14:20:10.116Z",
      "ctime": "2018-10-17T14:20:10.116Z",
      "birthtime": "2018-10-11T13:57:21.427Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-01-application-level.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-01-application-level.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-01-application-level.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "661b75077745c69cb8462d0f72c314d8",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/technical/protocols/2017-01-01-application-level.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-01-application-level.cn.md",
      "relativePath": "cn/docs/technical/protocols/2017-01-01-application-level.cn.md",
      "extension": "md",
      "size": 19537,
      "prettySize": "19.5 kB",
      "modifiedTime": "2018-10-17T14:22:27.242Z",
      "accessTime": "2018-10-31T17:49:05.666Z",
      "changeTime": "2018-10-17T14:22:27.242Z",
      "birthTime": "2018-10-11T13:57:21.428Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols",
      "base": "2017-01-01-application-level.cn.md",
      "ext": ".md",
      "name": "2017-01-01-application-level.cn",
      "relativeDirectory": "cn/docs/technical/protocols",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17566399,
      "blocks": 40,
      "atimeMs": 1541008145666.3184,
      "mtimeMs": 1539786147241.657,
      "ctimeMs": 1539786147241.657,
      "birthtimeMs": 1539266241428.084,
      "atime": "2018-10-31T17:49:05.666Z",
      "mtime": "2018-10-17T14:22:27.242Z",
      "ctime": "2018-10-17T14:22:27.242Z",
      "birthtime": "2018-10-11T13:57:21.428Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-04-p2p.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-04-p2p.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-04-p2p.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "f7c460aba79a2f24c7c3a540a3bb0b26",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/technical/protocols/2017-01-04-p2p.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-04-p2p.cn.md",
      "relativePath": "cn/docs/technical/protocols/2017-01-04-p2p.cn.md",
      "extension": "md",
      "size": 16087,
      "prettySize": "16.1 kB",
      "modifiedTime": "2018-10-17T14:22:49.761Z",
      "accessTime": "2018-10-31T17:49:05.666Z",
      "changeTime": "2018-10-17T14:22:49.761Z",
      "birthTime": "2018-10-11T13:57:21.430Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols",
      "base": "2017-01-04-p2p.cn.md",
      "ext": ".md",
      "name": "2017-01-04-p2p.cn",
      "relativeDirectory": "cn/docs/technical/protocols",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17566400,
      "blocks": 32,
      "atimeMs": 1541008145666.4,
      "mtimeMs": 1539786169761.1904,
      "ctimeMs": 1539786169761.1904,
      "birthtimeMs": 1539266241429.7312,
      "atime": "2018-10-31T17:49:05.666Z",
      "mtime": "2018-10-17T14:22:49.761Z",
      "ctime": "2018-10-17T14:22:49.761Z",
      "birthtime": "2018-10-11T13:57:21.430Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-04-p2p.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-04-p2p.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-04-p2p.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "91c8036f1ef91173641dc8a8a2206952",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/technical/protocols/2017-01-04-p2p.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-04-p2p.md",
      "relativePath": "en/docs/technical/protocols/2017-01-04-p2p.md",
      "extension": "md",
      "size": 17137,
      "prettySize": "17.1 kB",
      "modifiedTime": "2018-10-16T17:04:29.113Z",
      "accessTime": "2018-10-31T17:49:05.668Z",
      "changeTime": "2018-10-16T17:04:29.113Z",
      "birthTime": "2018-10-11T13:57:21.475Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols",
      "base": "2017-01-04-p2p.md",
      "ext": ".md",
      "name": "2017-01-04-p2p",
      "relativeDirectory": "en/docs/technical/protocols",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17279632,
      "blocks": 40,
      "atimeMs": 1541008145667.6338,
      "mtimeMs": 1539709469112.9065,
      "ctimeMs": 1539709469112.9065,
      "birthtimeMs": 1539266241474.9438,
      "atime": "2018-10-31T17:49:05.668Z",
      "mtime": "2018-10-16T17:04:29.113Z",
      "ctime": "2018-10-16T17:04:29.113Z",
      "birthtime": "2018-10-11T13:57:21.475Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-10-network-transport.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-10-network-transport.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-10-network-transport.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "9dd732bfc948e24a9c859d4c25f854d6",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/technical/protocols/2017-01-10-network-transport.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-10-network-transport.cn.md",
      "relativePath": "cn/docs/technical/protocols/2017-01-10-network-transport.cn.md",
      "extension": "md",
      "size": 16138,
      "prettySize": "16.1 kB",
      "modifiedTime": "2018-10-17T14:23:16.166Z",
      "accessTime": "2018-10-31T17:49:05.667Z",
      "changeTime": "2018-10-17T14:23:16.166Z",
      "birthTime": "2018-10-11T13:57:21.432Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols",
      "base": "2017-01-10-network-transport.cn.md",
      "ext": ".md",
      "name": "2017-01-10-network-transport.cn",
      "relativeDirectory": "cn/docs/technical/protocols",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17566402,
      "blocks": 32,
      "atimeMs": 1541008145666.5383,
      "mtimeMs": 1539786196165.5417,
      "ctimeMs": 1539786196165.5417,
      "birthtimeMs": 1539266241431.781,
      "atime": "2018-10-31T17:49:05.667Z",
      "mtime": "2018-10-17T14:23:16.166Z",
      "ctime": "2018-10-17T14:23:16.166Z",
      "birthtime": "2018-10-11T13:57:21.432Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-07-time-warp-nt.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-07-time-warp-nt.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-07-time-warp-nt.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "8dc98ce3170620f7ce3adda075d77d0f",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/technical/protocols/2017-01-07-time-warp-nt.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-07-time-warp-nt.cn.md",
      "relativePath": "cn/docs/technical/protocols/2017-01-07-time-warp-nt.cn.md",
      "extension": "md",
      "size": 8920,
      "prettySize": "8.92 kB",
      "modifiedTime": "2018-10-17T14:23:03.827Z",
      "accessTime": "2018-10-31T17:49:05.666Z",
      "changeTime": "2018-10-17T14:23:03.827Z",
      "birthTime": "2018-10-11T13:57:21.431Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols",
      "base": "2017-01-07-time-warp-nt.cn.md",
      "ext": ".md",
      "name": "2017-01-07-time-warp-nt.cn",
      "relativeDirectory": "cn/docs/technical/protocols",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17566401,
      "blocks": 24,
      "atimeMs": 1541008145666.4717,
      "mtimeMs": 1539786183826.767,
      "ctimeMs": 1539786183826.767,
      "birthtimeMs": 1539266241430.7869,
      "atime": "2018-10-31T17:49:05.666Z",
      "mtime": "2018-10-17T14:23:03.827Z",
      "ctime": "2018-10-17T14:23:03.827Z",
      "birthtime": "2018-10-11T13:57:21.431Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-10-network-transport.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-10-network-transport.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-10-network-transport.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "22c5de26e7ea7faa9248d36ab6006c7f",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/technical/protocols/2017-01-10-network-transport.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-10-network-transport.md",
      "relativePath": "en/docs/technical/protocols/2017-01-10-network-transport.md",
      "extension": "md",
      "size": 20300,
      "prettySize": "20.3 kB",
      "modifiedTime": "2018-10-16T17:04:29.113Z",
      "accessTime": "2018-10-31T17:49:05.668Z",
      "changeTime": "2018-10-16T17:04:29.113Z",
      "birthTime": "2018-10-11T13:57:21.478Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols",
      "base": "2017-01-10-network-transport.md",
      "ext": ".md",
      "name": "2017-01-10-network-transport",
      "relativeDirectory": "en/docs/technical/protocols",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17279633,
      "blocks": 40,
      "atimeMs": 1541008145667.7727,
      "mtimeMs": 1539709469112.5972,
      "ctimeMs": 1539709469112.5972,
      "birthtimeMs": 1539266241478.4397,
      "atime": "2018-10-31T17:49:05.668Z",
      "mtime": "2018-10-16T17:04:29.113Z",
      "ctime": "2018-10-16T17:04:29.113Z",
      "birthtime": "2018-10-11T13:57:21.478Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-13-binary.cn.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-13-binary.cn.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-13-binary.cn.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "210775188f8cc42c2f59d1b3e69e8001",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/cn/docs/technical/protocols/2017-01-13-binary.cn.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-13-binary.cn.md",
      "relativePath": "cn/docs/technical/protocols/2017-01-13-binary.cn.md",
      "extension": "md",
      "size": 92215,
      "prettySize": "92.2 kB",
      "modifiedTime": "2018-10-17T14:23:26.224Z",
      "accessTime": "2018-10-31T17:49:05.667Z",
      "changeTime": "2018-10-17T14:23:26.224Z",
      "birthTime": "2018-10-11T13:57:21.433Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols",
      "base": "2017-01-13-binary.cn.md",
      "ext": ".md",
      "name": "2017-01-13-binary.cn",
      "relativeDirectory": "cn/docs/technical/protocols",
      "dev": 16777221,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17566403,
      "blocks": 184,
      "atimeMs": 1541008145666.613,
      "mtimeMs": 1539786206224.0356,
      "ctimeMs": 1539786206224.0356,
      "birthtimeMs": 1539266241433.4421,
      "atime": "2018-10-31T17:49:05.667Z",
      "mtime": "2018-10-17T14:23:26.224Z",
      "ctime": "2018-10-17T14:23:26.224Z",
      "birthtime": "2018-10-11T13:57:21.433Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-13-binary.md absPath of file": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-13-binary.md absPath of file",
      "children": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-13-binary.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "ab7879185ef67c200245aa7962063d42",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/en/docs/technical/protocols/2017-01-13-binary.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "docs",
      "absolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-13-binary.md",
      "relativePath": "en/docs/technical/protocols/2017-01-13-binary.md",
      "extension": "md",
      "size": 93087,
      "prettySize": "93.1 kB",
      "modifiedTime": "2018-10-16T17:04:29.116Z",
      "accessTime": "2018-10-31T17:49:05.668Z",
      "changeTime": "2018-10-16T17:04:29.116Z",
      "birthTime": "2018-10-11T13:57:21.481Z",
      "root": "/",
      "dir": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols",
      "base": "2017-01-13-binary.md",
      "ext": ".md",
      "name": "2017-01-13-binary",
      "relativeDirectory": "en/docs/technical/protocols",
      "dev": 16777221,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4194304,
      "ino": 17279635,
      "blocks": 184,
      "atimeMs": 1541008145667.8455,
      "mtimeMs": 1539709469115.5122,
      "ctimeMs": 1539709469115.5122,
      "birthtimeMs": 1539266241480.6716,
      "atime": "2018-10-31T17:49:05.668Z",
      "mtime": "2018-10-16T17:04:29.116Z",
      "ctime": "2018-10-16T17:04:29.116Z",
      "birthtime": "2018-10-11T13:57:21.481Z"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/content/welcome-text.en.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/content/welcome-text.en.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/content/welcome-text.en.md absPath of file",
      "internal": {
        "content": "---\ndoc_doc_title: Welcome\npermalink: /welcome-text/\npath: '/cn/welcome-text/'\nlanguage: 'cn'\nkeywords: 'welcome'\nlabel: content\n---\n\n亲爱的读者，本文档的目的是让您对于 Cardano 平台技术栈第一层即结算层有所了解。如果您理解了结算层是什么，我们建议您先阅读论文和实现的差异，然后再阅读协议和实现的文档。\n\n本文档目标读者是 IOHK 的开发人员，第三方软件开发人员，审计和致力于实现卡尔达诺结算层或使用卡尔达诺结算层参考实现的咨询人员。\n",
        "type": "MarkdownRemark",
        "contentDigest": "f5b5038a6befe3b9d86b6c015a6f7177",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "doc_doc_title": "Welcome",
        "permalink": "/welcome-text/",
        "path": "/cn/welcome-text/",
        "language": "cn",
        "keywords": "welcome",
        "label": "content",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/content/welcome-text.en.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/content/welcome-text.en.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n亲爱的读者，本文档的目的是让您对于 Cardano 平台技术栈第一层即结算层有所了解。如果您理解了结算层是什么，我们建议您先阅读论文和实现的差异，然后再阅读协议和实现的文档。\n\n本文档目标读者是 IOHK 的开发人员，第三方软件开发人员，审计和致力于实现卡尔达诺结算层或使用卡尔达诺结算层参考实现的咨询人员。\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/content/welcome-text.en.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/content/welcome-text.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/content/welcome-text.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/content/welcome-text.cn.md absPath of file",
      "internal": {
        "content": "---\ndoc_doc_title: Welcome\npermalink: /welcome-text/\npath: '/en/welcome-text/'\nlanguage: 'en'\nkeywords: 'welcome'\nlabel: content\n---\n\nDear reader, the purpose of this documentation is to provide you with understanding of the first layer of Cardano Platform stack, the Settlement Layer. If you have an understanding of what Settlement Layer is, we suggest you first read [Differences Between the Paper and the Implementation](/cardano/differences/), and then move on to documentation on [protocols and implementation](/technical/protocols/csl-application-level/).\n\nThis documentation targets IOHK developers, third party software developers, auditors, and consultants who collaborate on implementing Cardano Settlement Layer or use Cardano Settlement Layer reference implementation.\n",
        "type": "MarkdownRemark",
        "contentDigest": "d35e441777d6a0701c525623c6eb7a57",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "doc_doc_title": "Welcome",
        "permalink": "/welcome-text/",
        "path": "/en/welcome-text/",
        "language": "en",
        "keywords": "welcome",
        "label": "content",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/content/welcome-text.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/content/welcome-text.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\nDear reader, the purpose of this documentation is to provide you with understanding of the first layer of Cardano Platform stack, the Settlement Layer. If you have an understanding of what Settlement Layer is, we suggest you first read [Differences Between the Paper and the Implementation](/cardano/differences/), and then move on to documentation on [protocols and implementation](/technical/protocols/csl-application-level/).\n\nThis documentation targets IOHK developers, third party software developers, auditors, and consultants who collaborate on implementing Cardano Settlement Layer or use Cardano Settlement Layer reference implementation.\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/content/welcome-text.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-01-index.en.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-01-index.en.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-01-index.en.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: Introduction\npermalink: /en/introduction/\npath: /en/introduction/\ngroup: base\nlanguage: en\nlabel: docs\nanchors:\n  Cryptocurrency Basics: cryptocurrency-basics\n  What Makes Cardano SL Special?: what-makes-cardano-sl-special\n  Beyond Settlement Layer: beyond-settlement-layer\n---\n\n## What is Cardano SL?\n\nCardano SL (or Cardano Settlement Layer) is a cryptographic currency designed\nand developed by [IOHK](https://iohk.io/team) in conjunction with the University\nof Edinburgh, the University of Athens and the University of Connecticut. Cardano\nSL is based on the Haskell implementation of the white paper\n[\"Ouroboros: A Provably Secure Proof of Stake Blockchain Protocol\"](https://iohk.io/research/papers/#9BKRHCSI)\nby Aggelos Kiayias, Alexander Russell, Bernardo David and Roman Oliynykov.\n\nYou can think of Cardano SL as Bitcoin reimagined with a freedom to fix Bitcoin’s\ndesign flaws. Please read [\"What Makes Cardano SL Special?\"](https://en/cardanodocs.com/introduction/#what-makes-cardano-sl-special)\nfor more information about similarities and differences between Cardano SL and Bitcoin.\n<!-- CARDANO_SL_README_END_1 -->\n\n## Cryptocurrency Basics\n\nBefore giving a definition of a cryptocurrency, let's talk about why we care\nabout digital currencies in general and cryptographic currencies in particular.\n\n### Why Do We Care?\n\n#### Speed\n\nAs opposed to conventional (also known as fiat), centrally banked currencies,\nsuch as the Yen or the American Dollar, digital currencies do not require a\nbanking system to move value. With this restriction lifted, working with digital\ncurrencies is much faster than working with banking, especially on a global\nscale. Transferring 10 USD from Osaka to Denver no longer takes days when a\ndigital currency is used. All transactions are made rapidly regardless of the\ndistance.\n\n#### You Own Your Money\n\nAll that a commercial bank account owner is given is a promise of being paid a\ncertain amount of money within a reasonable amount of time after receiving a\npayout request. Banking systems also have limits to any volume of value being\nmoved, rendering an individual unable to withdraw or transfer large amounts\nquickly. In case of cryptocurrencies, the person who holds a special kind of\ninformation called *a secret key* can spend the money at will. No other entity\nhas a power to manipulate the value that a user owns.\n\n#### Pseudonymity\n\nOne can have as many cryptocurrency addresses as they wish, receiving and\nspending money from different addresses as per their purpose. A merchant running\nan E-Commerce shop can have a set of addresses for receiving money and issuing\nrefunds, and a separate personal \"wallet\" for their own needs. A single interface is used\nto control all of these wallets, and there is no need to log in to several\npayment platforms, which makes the process very time-efficient.\n\n#### Security\n\nYour money is as secure as the *secret key* that allows spending it. This means\nthat storing your secret key on a USB flash drive in a safe is equivalent to\nhaving banknotes in a safe. Absolutely nobody can steal this money even by\ncarrying out a successful cyberattack.\n\n#### Extensibility\n\nUsing an approach known as [*side\nchains*](https://www.blockstream.com/sidechains.pdf), general purpose\ncryptocurrencies such as Cardano SL or Bitcoin can enable domain specific\ncryptocurrencies, such as Ethereum Classic. This way, any innovation developed\nvia domain specific cryptocurrency can have participants who hold value in a\ngeneral purpose cryptocurrency. Examples of such applications are identity\nmanagement, gaming and gambling, and verifiable computations.\n\n### What is a Cryptocurrency?\n\nCryptocurrency is a form of digital currency that uses cryptography to\nmanipulate value. Cryptography provides a way to generate proof of genuine\nauthenticity of any kind of information. This is called *digital signing*. In\ncryptocurrencies we generate a ledger (a database which provides information on\nhow much money each address has) by signing and sending transactions to the\nnetwork and receiving blocks of confirmed transactions. Cryptocurrencies are\nnormally decentralized, meaning that many people from all over the globe\nparticipate in ledger generation by running cryptocurrency nodes. Thus, a\nconsensus about the state of the ledger has to be achieved. Two most significant\napproaches for achieving such consensus are discussed in the next section.\n\n## What Makes Cardano SL Special?\n\n<!-- v0.1.0.0 -->\n\nWhile there are similarities between Bitcoin and Cardano SL, there are also many\ndifferences between these two cryptocurrencies. The most significant difference\nis that Bitcoin is a proof of work type cryptocurrency, while Cardano SL makes\nuse of a proof of stake approach to reach consensus. This encourages honesty and\nlong term participation.\n\n### Purpose of a Consensus Algorithm\n\nConsensus algorithms are used to produce new transaction blocks, resulting in an\nupdated state of the ledger. Whenever someone publishes a block of transactions,\nthey — or rather, their node that runs the cryptocurrency protocol — have to\nattach a proof that they have merited it. Below two types of such proofs are\ndiscussed.\n\n### Proof of Work and Mining\n\nProof of work is the most common consensus algorithm type for cryptocurrencies.\nIt originated in Bitcoin, and this is how this cryptocurrency works. To generate\nproof of work, a computer has to solve a challenge. The challenge is a\ncomputationally heavy problem which is hard to solve, but the solution is easy\nto verify. When a computer on a proof of work based network finds a solution, it\npublishes it along with the transactions that the computer has been observing while\ncracking the problem. The owner of this computer collects the transaction fees\nand a reward for generating a block. The entire process is called *mining*.\nMining is very energy consuming, and the amount of energy needed is constantly increasing,\nwhich can lead to unsound competition.\n\n### Proof of Stake and Minting\n\nProof of stake is a novel approach to block generation. IOHK scientists led by\n[Prof. Aggelos Kiayias](https://iohk.io/team/aggelos-kiayias/) have designed the\nfirst provably secure proof of stake algorithm called Ouroboros. Ouroboros lies\nat the heart of Cardano SL. Research team has published a\n[white paper](https://iohk.io/research/papers/a-provably-secure-proof-of-stake-blockchain-protocol/)\nthat is a worthy read for anyone with a background in cryptocurrency theory. The\ncore idea of proof of stake is that instead of wasting electricity on cracking\ncomputationally heavy problems, a node is selected to mint a new block, with a\nprobability proportional to the amount of coins this node has. If a node\nhas positive (&gt; 0) [stake](/en/cardano/proof-of-stake/#stake), it is called *a\nstakeholder*. If a node eventually becomes chosen to mint a block, it is called *a\nslot leader*. You can read more about this process in [Proof of Stake in Cardano\nSL](/en/cardano/proof-of-stake/).\n\n<!-- CARDANO_SL_README_BEGIN_2 -->\n## Beyond Settlement Layer\n\nCardano SL is called \"Layer\" for a reason. It is the first component of\nthe Cardano Platform. Eventually, it will be expanded with a Control Layer,\nserving as a trusted computation framework to evaluate a special\nkind of proofs to ensure that a certain computation was carried out\ncorrectly. In gaming and gambling, such systems are used for\nverifying honesty of random number generation and game\noutcomes. Accompanied with side chains, it will make possible to accomplish\nsuch tasks as provably fair distribution of winnings in games. But the\napplication of Control Layer lies well beyond gaming and gambling. Identity\nmanagement, credit system and more will be a part of Cardano Platform.\nWe are also aiming to evolve Daedalus, the Cardano SL [wallet application](https://github.com/input-output-hk/daedalus),\ninto a universal cryptocurrency wallet featuring automated\ncryptocurrency trading and cryptocurrency-to-fiat transactions.\n<!-- CARDANO_SL_README_END_2 -->\n",
        "type": "MarkdownRemark",
        "contentDigest": "212381403dbf7aabb2788faa9256d9af",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "Introduction",
        "permalink": "/en/introduction/",
        "path": "/en/introduction/",
        "group": "base",
        "language": "en",
        "label": "docs",
        "anchors": {
          "Cryptocurrency Basics": "cryptocurrency-basics",
          "What Makes Cardano SL Special?": "what-makes-cardano-sl-special",
          "Beyond Settlement Layer": "beyond-settlement-layer"
        },
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-01-index.en.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-01-index.en.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n## What is Cardano SL?\n\nCardano SL (or Cardano Settlement Layer) is a cryptographic currency designed\nand developed by [IOHK](https://iohk.io/team) in conjunction with the University\nof Edinburgh, the University of Athens and the University of Connecticut. Cardano\nSL is based on the Haskell implementation of the white paper\n[\"Ouroboros: A Provably Secure Proof of Stake Blockchain Protocol\"](https://iohk.io/research/papers/#9BKRHCSI)\nby Aggelos Kiayias, Alexander Russell, Bernardo David and Roman Oliynykov.\n\nYou can think of Cardano SL as Bitcoin reimagined with a freedom to fix Bitcoin’s\ndesign flaws. Please read [\"What Makes Cardano SL Special?\"](https://en/cardanodocs.com/introduction/#what-makes-cardano-sl-special)\nfor more information about similarities and differences between Cardano SL and Bitcoin.\n<!-- CARDANO_SL_README_END_1 -->\n\n## Cryptocurrency Basics\n\nBefore giving a definition of a cryptocurrency, let's talk about why we care\nabout digital currencies in general and cryptographic currencies in particular.\n\n### Why Do We Care?\n\n#### Speed\n\nAs opposed to conventional (also known as fiat), centrally banked currencies,\nsuch as the Yen or the American Dollar, digital currencies do not require a\nbanking system to move value. With this restriction lifted, working with digital\ncurrencies is much faster than working with banking, especially on a global\nscale. Transferring 10 USD from Osaka to Denver no longer takes days when a\ndigital currency is used. All transactions are made rapidly regardless of the\ndistance.\n\n#### You Own Your Money\n\nAll that a commercial bank account owner is given is a promise of being paid a\ncertain amount of money within a reasonable amount of time after receiving a\npayout request. Banking systems also have limits to any volume of value being\nmoved, rendering an individual unable to withdraw or transfer large amounts\nquickly. In case of cryptocurrencies, the person who holds a special kind of\ninformation called *a secret key* can spend the money at will. No other entity\nhas a power to manipulate the value that a user owns.\n\n#### Pseudonymity\n\nOne can have as many cryptocurrency addresses as they wish, receiving and\nspending money from different addresses as per their purpose. A merchant running\nan E-Commerce shop can have a set of addresses for receiving money and issuing\nrefunds, and a separate personal \"wallet\" for their own needs. A single interface is used\nto control all of these wallets, and there is no need to log in to several\npayment platforms, which makes the process very time-efficient.\n\n#### Security\n\nYour money is as secure as the *secret key* that allows spending it. This means\nthat storing your secret key on a USB flash drive in a safe is equivalent to\nhaving banknotes in a safe. Absolutely nobody can steal this money even by\ncarrying out a successful cyberattack.\n\n#### Extensibility\n\nUsing an approach known as [*side\nchains*](https://www.blockstream.com/sidechains.pdf), general purpose\ncryptocurrencies such as Cardano SL or Bitcoin can enable domain specific\ncryptocurrencies, such as Ethereum Classic. This way, any innovation developed\nvia domain specific cryptocurrency can have participants who hold value in a\ngeneral purpose cryptocurrency. Examples of such applications are identity\nmanagement, gaming and gambling, and verifiable computations.\n\n### What is a Cryptocurrency?\n\nCryptocurrency is a form of digital currency that uses cryptography to\nmanipulate value. Cryptography provides a way to generate proof of genuine\nauthenticity of any kind of information. This is called *digital signing*. In\ncryptocurrencies we generate a ledger (a database which provides information on\nhow much money each address has) by signing and sending transactions to the\nnetwork and receiving blocks of confirmed transactions. Cryptocurrencies are\nnormally decentralized, meaning that many people from all over the globe\nparticipate in ledger generation by running cryptocurrency nodes. Thus, a\nconsensus about the state of the ledger has to be achieved. Two most significant\napproaches for achieving such consensus are discussed in the next section.\n\n## What Makes Cardano SL Special?\n\n<!-- v0.1.0.0 -->\n\nWhile there are similarities between Bitcoin and Cardano SL, there are also many\ndifferences between these two cryptocurrencies. The most significant difference\nis that Bitcoin is a proof of work type cryptocurrency, while Cardano SL makes\nuse of a proof of stake approach to reach consensus. This encourages honesty and\nlong term participation.\n\n### Purpose of a Consensus Algorithm\n\nConsensus algorithms are used to produce new transaction blocks, resulting in an\nupdated state of the ledger. Whenever someone publishes a block of transactions,\nthey — or rather, their node that runs the cryptocurrency protocol — have to\nattach a proof that they have merited it. Below two types of such proofs are\ndiscussed.\n\n### Proof of Work and Mining\n\nProof of work is the most common consensus algorithm type for cryptocurrencies.\nIt originated in Bitcoin, and this is how this cryptocurrency works. To generate\nproof of work, a computer has to solve a challenge. The challenge is a\ncomputationally heavy problem which is hard to solve, but the solution is easy\nto verify. When a computer on a proof of work based network finds a solution, it\npublishes it along with the transactions that the computer has been observing while\ncracking the problem. The owner of this computer collects the transaction fees\nand a reward for generating a block. The entire process is called *mining*.\nMining is very energy consuming, and the amount of energy needed is constantly increasing,\nwhich can lead to unsound competition.\n\n### Proof of Stake and Minting\n\nProof of stake is a novel approach to block generation. IOHK scientists led by\n[Prof. Aggelos Kiayias](https://iohk.io/team/aggelos-kiayias/) have designed the\nfirst provably secure proof of stake algorithm called Ouroboros. Ouroboros lies\nat the heart of Cardano SL. Research team has published a\n[white paper](https://iohk.io/research/papers/a-provably-secure-proof-of-stake-blockchain-protocol/)\nthat is a worthy read for anyone with a background in cryptocurrency theory. The\ncore idea of proof of stake is that instead of wasting electricity on cracking\ncomputationally heavy problems, a node is selected to mint a new block, with a\nprobability proportional to the amount of coins this node has. If a node\nhas positive (&gt; 0) [stake](/en/cardano/proof-of-stake/#stake), it is called *a\nstakeholder*. If a node eventually becomes chosen to mint a block, it is called *a\nslot leader*. You can read more about this process in [Proof of Stake in Cardano\nSL](/en/cardano/proof-of-stake/).\n\n<!-- CARDANO_SL_README_BEGIN_2 -->\n## Beyond Settlement Layer\n\nCardano SL is called \"Layer\" for a reason. It is the first component of\nthe Cardano Platform. Eventually, it will be expanded with a Control Layer,\nserving as a trusted computation framework to evaluate a special\nkind of proofs to ensure that a certain computation was carried out\ncorrectly. In gaming and gambling, such systems are used for\nverifying honesty of random number generation and game\noutcomes. Accompanied with side chains, it will make possible to accomplish\nsuch tasks as provably fair distribution of winnings in games. But the\napplication of Control Layer lies well beyond gaming and gambling. Identity\nmanagement, credit system and more will be a part of Cardano Platform.\nWe are also aiming to evolve Daedalus, the Cardano SL [wallet application](https://github.com/input-output-hk/daedalus),\ninto a universal cryptocurrency wallet featuring automated\ncryptocurrency trading and cryptocurrency-to-fiat transactions.\n<!-- CARDANO_SL_README_END_2 -->\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-01-index.en.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-04-installation.en.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-04-installation.en.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-04-installation.en.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-03'\ndoc_title: Installation\npermalink: /en/installation/\npath: /en/installation/\ngroup: base\nlanguage: en\nlabel: docs\n---\n\n# Installation\n\n## Supported Platforms\n\nSupported platforms are Windows, macOS and Linux. There are\n[installers for Windows and macOS](https://daedaluswallet.io/#download),\nwhich include a main node and [Daedalus wallet](https://github.com/input-output-hk/daedalus).\n\nLinux installer is going to be released soon. Currently, there are two options to\nget Cardano SL on Linux:\n<!-- end -->\n1. Build from the source code (recommended). Please refer to [How to Build Cardano SL and Daedalus from\nSource Code](https://github.com/input-output-hk/cardano-sl/blob/develop/docs/how-to/build-cardano-sl-and-daedalus-from-source-code.md) manual.\n2. Use **unofficial** packages for Arch Linux:\n   * [cardano-sl](https://aur.archlinux.org/packages/cardano-sl/)\n   * [daedalus-bridge](https://aur.archlinux.org/packages/daedalus-bridge/)\n   * [daedalus](https://aur.archlinux.org/packages/daedalus/)\n",
        "type": "MarkdownRemark",
        "contentDigest": "1bd437081434504e8ea5fa282709e44d",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-03",
        "doc_title": "Installation",
        "permalink": "/en/installation/",
        "path": "/en/installation/",
        "group": "base",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-04-installation.en.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-04-installation.en.md absPath of file"
      },
      "excerpt": "\n# Installation\n\n## Supported Platforms\n\nSupported platforms are Windows, macOS and Linux. There are\n[installers for Windows and macOS](https://daedaluswallet.io/#download),\nwhich include a main node and [Daedalus wallet](https://github.com/input-output-hk/daedalus).\n\nLinux installer is going to be released soon. Currently, there are two options to\nget Cardano SL on Linux:\n",
      "rawMarkdownBody": "\n# Installation\n\n## Supported Platforms\n\nSupported platforms are Windows, macOS and Linux. There are\n[installers for Windows and macOS](https://daedaluswallet.io/#download),\nwhich include a main node and [Daedalus wallet](https://github.com/input-output-hk/daedalus).\n\nLinux installer is going to be released soon. Currently, there are two options to\nget Cardano SL on Linux:\n<!-- end -->\n1. Build from the source code (recommended). Please refer to [How to Build Cardano SL and Daedalus from\nSource Code](https://github.com/input-output-hk/cardano-sl/blob/develop/docs/how-to/build-cardano-sl-and-daedalus-from-source-code.md) manual.\n2. Use **unofficial** packages for Arch Linux:\n   * [cardano-sl](https://aur.archlinux.org/packages/cardano-sl/)\n   * [daedalus-bridge](https://aur.archlinux.org/packages/daedalus-bridge/)\n   * [daedalus](https://aur.archlinux.org/packages/daedalus/)\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-04-installation.en.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-13-for-contributors.en.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-13-for-contributors.en.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-13-for-contributors.en.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-04'\ndoc_title: For Contributors\ngroup: base\npermalink: /en/for-contributors/\npath: /en/for-contributors/\nchildren: for-contributors\nlanguage: en\nlabel: docs\n---\n\n## Cardano contributing guide:\nCan be found here [https://github.com/input-output-hk/cardano-sl/blob/develop/CONTRIBUTING.md](https://github.com/input-output-hk/cardano-sl/blob/develop/CONTRIBUTING.md)\n\n",
        "type": "MarkdownRemark",
        "contentDigest": "ec7d9243cd4599c301b65019f4804ab2",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-04",
        "doc_title": "For Contributors",
        "group": "base",
        "permalink": "/en/for-contributors/",
        "path": "/en/for-contributors/",
        "children": "for-contributors",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-13-for-contributors.en.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-13-for-contributors.en.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n## Cardano contributing guide:\nCan be found here [https://github.com/input-output-hk/cardano-sl/blob/develop/CONTRIBUTING.md](https://github.com/input-output-hk/cardano-sl/blob/develop/CONTRIBUTING.md)\n\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-13-for-contributors.en.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/content/intro.en.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/content/intro.en.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/content/intro.en.md absPath of file",
      "internal": {
        "content": "---\ndoc_doc_title: Intro\npermalink: /intro-text/\npath: '/cn/intro-text/'\nlanguage: 'cn'\nkeywords: 'intro'\nlabel: content\n---\n\n### Cardano SL\n(或卡尔达诺运算层）是由 IOHK 联合爱丁堡大学，雅典大学和康涅狄格大学共同设计开发的一种加密货币。卡尔达诺运算层是基于 Aggelos Kiayias，Alexander Russell，Bernardo David 和 Roman Oliynykov 的白皮书 『乌洛波罗斯：可证明安全的权益证明协议』的 Haskell 实现。\n\n您可以将卡尔达诺结算层视为基于比特币重新设计的针对比特币缺陷的自由修复。 有关卡尔达诺结算层和比特币之间的相似之处和差异的更多信息，请阅读『卡尔达诺结算层为什么特别?』。\n\n### 加密货币基础\n在给出加密货币的定义之前，我们先来谈谈为什么我们在意数字货币，特别是加密货币。\n\n### 我们为什么在意?\n- #### 速度\n与传统（也称为法定）中心银行货币，与日元或美元相反，电子货币不需要一个银行系统来转移价值。这一限制的解除，使用数字货币的速度要快于银行业务，尤其是在全球范围内。使用数字货币从大阪转移10美元到丹佛不再需要数天的时间。无论距离如何，所有交易都能迅速完成。\n\n- #### 你掌控你自己的钱\n所有的商业银行账户所有者在收到支付请求后在合理的时间内只能支付一定的金额。银行体系对任何价值量都有限制，使个人无法迅速撤出或转移大量资金。有加密货币的情况下，持有一种称为密钥这一特殊信息的人就可以随意花钱。没有其他实体有权操纵用户拥有的价值。\n\n- #### 匿名\n人们可以根据需要，拥有任意多的加密货币地址，从不同的地址接收，消费资产。经营电子商务商店的商家可以拥有一组收款和退款的地址，以及一个用于他们自身需要的单独的个人『钱包』。通过统一的接口控制所有这些钱包，并且不需要登录到多个支付平台，这使得该过程非常节省时间。\n\n- #### 安全\n你的钱就像可用于消费的密钥一样安全。这意味着将密钥存储在保险箱中的 USB 闪存上相当于让纸币处于安全状态。即使进行了成功的网络攻击，也绝对没有人能够窃取这笔钱。\n\n- #### 扩展性\n使用一种称为侧链的方法，以及通用加密货币，如卡尔达诺结算层和比特币，就可以启用特定领域的加密货币，例如以太经典。这样一来，通过特定领域的加密货币开发的任何创新产品都可以让参与者在通用的加密货币中保持价值。这样的应用程序的例子有身份管理，游戏和赌博，以及可验证计算。\n\n### 什么是加密货币?\n加密货币是一种数字货币形式，使用密码来控制价值。密码学提供了一种生成任何类型信息的真实真实性证据的方法。这就是所谓的数字签名。在加密货币中，我们通过签署和发送交易到网络并接收已确认的交易块，生成一个总账（一个提供每个地址有多少钱的信息的数据库）。加密货币通常是分散的，这意味着来自全球各地的许多人通过运行加密货币节点参与总账的生成。因此，必须达成关于总账状况的共识。下一节讨论实现这种共识的两个最重要的方法。\n\n### 卡尔达诺结算层为什么特别\n虽然比特币和卡尔达诺结算层之间有相似之处，但这两个加密货币之间也有很多不同之处。最显着的区别是，比特币是工作量证明类型的加密货币，而卡尔达诺结算层使用权益证明的方法达成共识。这鼓励诚信和长期的参与。\n\n### 共识算法的目的\n共识算法被用来产生新的交易区块，使账本更新状态。每当有人发布一个交易区块时，他们（或者说他们的运行加密货币协议的节点）就必须附上他们已经证明的证据。下面讨论两种类型的证明。\n\n### 工作量证明和挖矿\n工作量证明是加密货币最普遍的共识算法类型。它起源于比特币，加密货币就是这么工作的。为了生成工作证明，计算机必须解决一个挑战。这是难以解决的计算繁重的问题，但解决方案很容易验证。当一台基于网络的工作量证明的计算机找到一个解决方案时，它会将交易发布于同它一起计算的其他计算机。这台计算机会因为产生区块得到交易费和奖励。整个过程被称为挖矿。挖矿是非常耗能的，所需的能源数量在不断增加，这可能导致不健康的竞争。\n\n### 权益证明和铸币\n权益证明是一种生成区块的新方法。由 Aggelos Kiayias 教授领导的 IOHK 科学家们设计了第一个可证明的，称为乌洛波罗斯的权益证明算法。乌洛波罗斯是卡尔达诺结算层的核心。研究小组已经发表了一篇白皮书 ，这封白皮书对于那些拥有加密货币理论背景的人来说是值得一读的。权益证明的核心思想是，不要浪费电力来解决计算繁重的问题，而是选择一个节点来铸造一个新的区块，其概率与这个节点的硬币数量成正相关。如果一个节点有整数个(> 0)的 slot，它被称为 slot 所有人。如果一个节点最终被选中来铸造一个区块，那么这个节点被称为 slot 领导者。您可以在卡尔达诺结算层的股权证明中了解更多关于该流程的信息。\n\n### 卡尔达诺结算层之上\n卡尔达诺结算层被称为『层』是有原因的。这是卡尔达诺平台的第一个组件。最终，它将被扩展到一个控制层，作为一个可信的计算框架来评估一种特殊的证明，以确保一定的计算正确执行。在游戏和赌博中，这样的系统被用于验证随机数生成和游戏结果的真实性。伴随着侧链，它将有可能完成诸如在游戏中公平分配奖金的任务。但是控制层的应用远远超出了游戏和赌博。身份管理，信用系统等将成为卡尔达诺平台的一部分。我们将迭代卡尔达诺钱包应用程序 Daedalus，使其变成一个具有自动加密货币交易功能和合法加密货币交易功能的通用加密货币钱包。",
        "type": "MarkdownRemark",
        "contentDigest": "37cb6b0cc1df9959ff1a611c7cb5f8e2",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "doc_doc_title": "Intro",
        "permalink": "/intro-text/",
        "path": "/cn/intro-text/",
        "language": "cn",
        "keywords": "intro",
        "label": "content",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/content/intro.en.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/content/intro.en.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n### Cardano SL\n(或卡尔达诺运算层）是由 IOHK 联合爱丁堡大学，雅典大学和康涅狄格大学共同设计开发的一种加密货币。卡尔达诺运算层是基于 Aggelos Kiayias，Alexander Russell，Bernardo David 和 Roman Oliynykov 的白皮书 『乌洛波罗斯：可证明安全的权益证明协议』的 Haskell 实现。\n\n您可以将卡尔达诺结算层视为基于比特币重新设计的针对比特币缺陷的自由修复。 有关卡尔达诺结算层和比特币之间的相似之处和差异的更多信息，请阅读『卡尔达诺结算层为什么特别?』。\n\n### 加密货币基础\n在给出加密货币的定义之前，我们先来谈谈为什么我们在意数字货币，特别是加密货币。\n\n### 我们为什么在意?\n- #### 速度\n与传统（也称为法定）中心银行货币，与日元或美元相反，电子货币不需要一个银行系统来转移价值。这一限制的解除，使用数字货币的速度要快于银行业务，尤其是在全球范围内。使用数字货币从大阪转移10美元到丹佛不再需要数天的时间。无论距离如何，所有交易都能迅速完成。\n\n- #### 你掌控你自己的钱\n所有的商业银行账户所有者在收到支付请求后在合理的时间内只能支付一定的金额。银行体系对任何价值量都有限制，使个人无法迅速撤出或转移大量资金。有加密货币的情况下，持有一种称为密钥这一特殊信息的人就可以随意花钱。没有其他实体有权操纵用户拥有的价值。\n\n- #### 匿名\n人们可以根据需要，拥有任意多的加密货币地址，从不同的地址接收，消费资产。经营电子商务商店的商家可以拥有一组收款和退款的地址，以及一个用于他们自身需要的单独的个人『钱包』。通过统一的接口控制所有这些钱包，并且不需要登录到多个支付平台，这使得该过程非常节省时间。\n\n- #### 安全\n你的钱就像可用于消费的密钥一样安全。这意味着将密钥存储在保险箱中的 USB 闪存上相当于让纸币处于安全状态。即使进行了成功的网络攻击，也绝对没有人能够窃取这笔钱。\n\n- #### 扩展性\n使用一种称为侧链的方法，以及通用加密货币，如卡尔达诺结算层和比特币，就可以启用特定领域的加密货币，例如以太经典。这样一来，通过特定领域的加密货币开发的任何创新产品都可以让参与者在通用的加密货币中保持价值。这样的应用程序的例子有身份管理，游戏和赌博，以及可验证计算。\n\n### 什么是加密货币?\n加密货币是一种数字货币形式，使用密码来控制价值。密码学提供了一种生成任何类型信息的真实真实性证据的方法。这就是所谓的数字签名。在加密货币中，我们通过签署和发送交易到网络并接收已确认的交易块，生成一个总账（一个提供每个地址有多少钱的信息的数据库）。加密货币通常是分散的，这意味着来自全球各地的许多人通过运行加密货币节点参与总账的生成。因此，必须达成关于总账状况的共识。下一节讨论实现这种共识的两个最重要的方法。\n\n### 卡尔达诺结算层为什么特别\n虽然比特币和卡尔达诺结算层之间有相似之处，但这两个加密货币之间也有很多不同之处。最显着的区别是，比特币是工作量证明类型的加密货币，而卡尔达诺结算层使用权益证明的方法达成共识。这鼓励诚信和长期的参与。\n\n### 共识算法的目的\n共识算法被用来产生新的交易区块，使账本更新状态。每当有人发布一个交易区块时，他们（或者说他们的运行加密货币协议的节点）就必须附上他们已经证明的证据。下面讨论两种类型的证明。\n\n### 工作量证明和挖矿\n工作量证明是加密货币最普遍的共识算法类型。它起源于比特币，加密货币就是这么工作的。为了生成工作证明，计算机必须解决一个挑战。这是难以解决的计算繁重的问题，但解决方案很容易验证。当一台基于网络的工作量证明的计算机找到一个解决方案时，它会将交易发布于同它一起计算的其他计算机。这台计算机会因为产生区块得到交易费和奖励。整个过程被称为挖矿。挖矿是非常耗能的，所需的能源数量在不断增加，这可能导致不健康的竞争。\n\n### 权益证明和铸币\n权益证明是一种生成区块的新方法。由 Aggelos Kiayias 教授领导的 IOHK 科学家们设计了第一个可证明的，称为乌洛波罗斯的权益证明算法。乌洛波罗斯是卡尔达诺结算层的核心。研究小组已经发表了一篇白皮书 ，这封白皮书对于那些拥有加密货币理论背景的人来说是值得一读的。权益证明的核心思想是，不要浪费电力来解决计算繁重的问题，而是选择一个节点来铸造一个新的区块，其概率与这个节点的硬币数量成正相关。如果一个节点有整数个(> 0)的 slot，它被称为 slot 所有人。如果一个节点最终被选中来铸造一个区块，那么这个节点被称为 slot 领导者。您可以在卡尔达诺结算层的股权证明中了解更多关于该流程的信息。\n\n### 卡尔达诺结算层之上\n卡尔达诺结算层被称为『层』是有原因的。这是卡尔达诺平台的第一个组件。最终，它将被扩展到一个控制层，作为一个可信的计算框架来评估一种特殊的证明，以确保一定的计算正确执行。在游戏和赌博中，这样的系统被用于验证随机数生成和游戏结果的真实性。伴随着侧链，它将有可能完成诸如在游戏中公平分配奖金的任务。但是控制层的应用远远超出了游戏和赌博。身份管理，信用系统等将成为卡尔达诺平台的一部分。我们将迭代卡尔达诺钱包应用程序 Daedalus，使其变成一个具有自动加密货币交易功能和合法加密货币交易功能的通用加密货币钱包。",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/content/intro.en.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-19-glossary.en.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-19-glossary.en.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-19-glossary.en.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-05'\ndoc_title: Glossary\npermalink: /en/glossary/\npath: /en/glossary/\ngroup: base\nlanguage: en\nlabel: docs\n---\n\n<!-- Reviewed at d0d6c2fedefb642744a24b4b0a6d8d7ad11532f6 -->\n\n# Glossary\n\n## Ada\n\nThe name of our currency, named in honor of [Ada\nLovelace](https://en.wikipedia.org/wiki/Ada_Lovelace).\n\n## Address\n\nThe unique identifier of a [node](#node). Please read about [Addresses in\nCardano SL](/en/cardano/addresses/) for more details.\n\n## Balance\n\nPlease read about [Balance and Stake in Cardano SL](/en/cardano/balance-and-stake/)\nfor explanation.\n\n## Block\n\nA fundamental part of a [Ledger](#ledger). Please read about [Blocks in Cardano\nSL](/en/technical/blocks/) for technical details.\n\n## Blockchain\n\nPlease see [Ledger](#ledger).\n\n## Cardano SL\n\nCardano SL (or Cardano Settlement Layer) is a decentralized cryptographic\ncurrency designed and developed by [IOHK](https://iohk.io/team). Named in honor\nof [Gerolamo Cardano](https://en.wikipedia.org/wiki/Gerolamo_Cardano).\n\n## Coin Tossing\n\nA Coin Tossing is a protocol that allows two or more parties to obtain\na uniformly random value. We use Coin Tossing protocol as a base of [SSC](#ssc).\nPlease read [paper](#paper) (page 36) for more details about Coin Tossing.\n\n## Consensus Algorithm\n\nA way for a decentralized system to reach a consistent view on shared\ncollections of data. Cardano SL uses the [Ouroboros Consensus\nAlgorithm](/en/cardano/proof-of-stake/), which is an algorithm based on\n[Proof of Stake](#proof-of-stake).\n\n## Cryptocurrency\n\nA computer system which uses cryptographic protocols to generate a ledger.\nPlease read about [Cryptocurrency Basics](/introduction/#cryptocurrency-basics)\nfor more details.\n\n## Daedalus\n\nCardano SL wallet application. It provides a GUI for users, so they can access\ntheir funds, send and receive transactions, etc. Please read about [Cardano SL\nWallet Frontend](/en/technical/wallet-frontend/) for more details.\n\n## Decentralization\n\nA notion of a computer system operating through interaction of independent\nnodes. In case of maintaining a shared data collection such as a ledger, a\nconsensus is required for consistency and reliability of data.\n\n## Epoch\n\nA bigger period of time for which we know in advance who will have the right to\ngenerate a block in each slot. Please read [paper](#paper) (page 3) for\ntechnical details.\n\n## Follow The Satoshi\n\nA mechanism whereby stakeholders are selected at random to forge a new block in\nthe blockchain, with a proportional chance to get elected depending on their\namount of stake in the protocol.\n\n## Guaranteed Output Delivery\n\nGuaranteed output delivery is a mechanism that proves that the honest parties\nare guaranteed to successfully complete the multiparty computation (MPC). We\nuse G.O.D. in [SSC](#ssc).\n\n## Honest Majority\n\nHonest majority is a situation when the number of honest participants is strictly\ngreater than the number of adversaries, i.e. at least 50% + 1. Honest majority \nis assumed by default.\n\n## Kademlia\n\nPlease see [Peer Discovery](#peer-discovery).\n\n## Leader Election\n\nA process of picking who will generate blocks during the next epoch. Leaders are\nelected with a probability proportional to their stake (see [Proof of\nStake](#proof-of-stake), [Follow the Satoshi](#follow-the-satoshi)).\n\n## Ledger\n\nA collection of data that keeps track of value assigned to individuals. Please\nread [paper](#paper) (page 32) for technical details.\n\n## Lovelace\n\nName of a smallest unit of our currency. Named in honor of [Ada\nLovelace](https://en.wikipedia.org/wiki/Ada_Lovelace).\n\n## Minting\n\nA process of a new block creation in [Proof of\nStake](/introduction/#proof-of-stake-and-minting) systems.\n\n## Node\n\nA computer program that participates in a decentralized protocol system. Please\nread [High-level technical overview](/en/technical/#high-level-overview) for more\ndetails.\n\n## Paper\n\nOfficial protocol report [Ouroboros: A Provably Secure Proof-of-Stake Blockchain\nProtocol](https://eprint.iacr.org/2016/889). Please notice that Cardano SL\nimplementation differs from the paper, [read about\ndifferences](/en/cardano/differences/) for more details.\n\n## Peer Discovery\n\nA way how a node can find other nodes after running. Peer discovery we use is\nbased on Kademlia DHT. Please read [a Kademlia\npaper](https://pdos.csail.mit.edu/~petar/papers/maymounkov-kademlia-lncs.pdf)\nfor technical details.\n\n## Plutus\n\nStrictly typed pure functional programming language used for defining smart\ncontracts in Cardano. Please read about\n[Plutus](/en/en/technical/plutus/introduction/) for more details.\n\n## Proof of Stake\n\nOuroboros Proof of Stake algorithm is the most important part of the [protocol](#paper).\nIt defines the way [nodes](#node) reach consensus about the state of [ledger](#ledger).\nPlease read about [Ouroboros Proof of Stake Algorithm](/en/cardano/proof-of-stake/)\nfor more details.\n\n## PVSS\n\nPVSS (Publicly Verifiable Secret Sharing) is a cryptographic scheme we use in [SSC](#ssc).\nPlease read about [PVSS implementation in Cardano SL](/en/technical/pvss/) for more details.\n\n## Richman\n\nStakeholder with stake enough for participation in some action. Particularly,\nthere are three kinds of such actions: randomness generation (for [slot leaders\nelections process](/en/technical/leader-selection/)),\n[heavyweight stake delegation](/en/technical/delegation/#heavyweight-delegation)\nand voting for [update proposals](/en/cardano/update-mechanism/#application-update-sign-and-announce).\n\n## Signing\n\nA way to generate a proof of genuine authenticity of any kind of information we\nuse in [cryptocurrency](#cryptocurrency).\n\n## Slot\n\nA small period of physical time that is significantly larger than the expected\ndifference in clocks on different nodes. Please read [paper](#paper) (page 4) for\ntechnical details.\n\n## Slot Leader\n\nA slot leader is a node which was elected to have a right to create a block in\nthe current slot. Please read [paper](#paper) (page 7) for technical details.\n\n## SSC\n\nSSC (Shared Seed Computation) is a part of [slot leader election](#leader-election)\nprocess. This part is implemented as a [Coin Tossing](#coin-tossing) protocol with\n[Guaranteed Output Delivery](#guaranteed-output-delivery). As a result of SSC we get\na randomness which will be used in [Follow The Satoshi](#follow-the-satoshi) mechanism.\n\n## Stake\n\nPlease read about [Balance and Stake in Cardano SL](/en/cardano/balance-and-stake/)\nfor explanation.\n\n## Stakeholder\n\nA node with a positive stake.\n\n## Transaction\n\nThe data that represents the act of transferring value. Please read about\n[Transactions in Cardano SL](/en/cardano/transactions/) for more details.\n\n## Transaction Fees\n\nPlease read about [Transaction Fees in Cardano SL](/en/cardano/transaction-fees/)\nfor explanation.\n<!-- end -->",
        "type": "MarkdownRemark",
        "contentDigest": "0f98f5d3e271112a4b32d7daea3fb77b",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-05",
        "doc_title": "Glossary",
        "permalink": "/en/glossary/",
        "path": "/en/glossary/",
        "group": "base",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-19-glossary.en.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-19-glossary.en.md absPath of file"
      },
      "excerpt": "\n<!-- Reviewed at d0d6c2fedefb642744a24b4b0a6d8d7ad11532f6 -->\n\n# Glossary\n\n## Ada\n\nThe name of our currency, named in honor of [Ada\nLovelace](https://en.wikipedia.org/wiki/Ada_Lovelace).\n\n## Address\n\nThe unique identifier of a [node](#node). Please read about [Addresses in\nCardano SL](/en/cardano/addresses/) for more details.\n\n## Balance\n\nPlease read about [Balance and Stake in Cardano SL](/en/cardano/balance-and-stake/)\nfor explanation.\n\n## Block\n\nA fundamental part of a [Ledger](#ledger). Please read about [Blocks in Cardano\nSL](/en/technical/blocks/) for technical details.\n\n## Blockchain\n\nPlease see [Ledger](#ledger).\n\n## Cardano SL\n\nCardano SL (or Cardano Settlement Layer) is a decentralized cryptographic\ncurrency designed and developed by [IOHK](https://iohk.io/team). Named in honor\nof [Gerolamo Cardano](https://en.wikipedia.org/wiki/Gerolamo_Cardano).\n\n## Coin Tossing\n\nA Coin Tossing is a protocol that allows two or more parties to obtain\na uniformly random value. We use Coin Tossing protocol as a base of [SSC](#ssc).\nPlease read [paper](#paper) (page 36) for more details about Coin Tossing.\n\n## Consensus Algorithm\n\nA way for a decentralized system to reach a consistent view on shared\ncollections of data. Cardano SL uses the [Ouroboros Consensus\nAlgorithm](/en/cardano/proof-of-stake/), which is an algorithm based on\n[Proof of Stake](#proof-of-stake).\n\n## Cryptocurrency\n\nA computer system which uses cryptographic protocols to generate a ledger.\nPlease read about [Cryptocurrency Basics](/introduction/#cryptocurrency-basics)\nfor more details.\n\n## Daedalus\n\nCardano SL wallet application. It provides a GUI for users, so they can access\ntheir funds, send and receive transactions, etc. Please read about [Cardano SL\nWallet Frontend](/en/technical/wallet-frontend/) for more details.\n\n## Decentralization\n\nA notion of a computer system operating through interaction of independent\nnodes. In case of maintaining a shared data collection such as a ledger, a\nconsensus is required for consistency and reliability of data.\n\n## Epoch\n\nA bigger period of time for which we know in advance who will have the right to\ngenerate a block in each slot. Please read [paper](#paper) (page 3) for\ntechnical details.\n\n## Follow The Satoshi\n\nA mechanism whereby stakeholders are selected at random to forge a new block in\nthe blockchain, with a proportional chance to get elected depending on their\namount of stake in the protocol.\n\n## Guaranteed Output Delivery\n\nGuaranteed output delivery is a mechanism that proves that the honest parties\nare guaranteed to successfully complete the multiparty computation (MPC). We\nuse G.O.D. in [SSC](#ssc).\n\n## Honest Majority\n\nHonest majority is a situation when the number of honest participants is strictly\ngreater than the number of adversaries, i.e. at least 50% + 1. Honest majority \nis assumed by default.\n\n## Kademlia\n\nPlease see [Peer Discovery](#peer-discovery).\n\n## Leader Election\n\nA process of picking who will generate blocks during the next epoch. Leaders are\nelected with a probability proportional to their stake (see [Proof of\nStake](#proof-of-stake), [Follow the Satoshi](#follow-the-satoshi)).\n\n## Ledger\n\nA collection of data that keeps track of value assigned to individuals. Please\nread [paper](#paper) (page 32) for technical details.\n\n## Lovelace\n\nName of a smallest unit of our currency. Named in honor of [Ada\nLovelace](https://en.wikipedia.org/wiki/Ada_Lovelace).\n\n## Minting\n\nA process of a new block creation in [Proof of\nStake](/introduction/#proof-of-stake-and-minting) systems.\n\n## Node\n\nA computer program that participates in a decentralized protocol system. Please\nread [High-level technical overview](/en/technical/#high-level-overview) for more\ndetails.\n\n## Paper\n\nOfficial protocol report [Ouroboros: A Provably Secure Proof-of-Stake Blockchain\nProtocol](https://eprint.iacr.org/2016/889). Please notice that Cardano SL\nimplementation differs from the paper, [read about\ndifferences](/en/cardano/differences/) for more details.\n\n## Peer Discovery\n\nA way how a node can find other nodes after running. Peer discovery we use is\nbased on Kademlia DHT. Please read [a Kademlia\npaper](https://pdos.csail.mit.edu/~petar/papers/maymounkov-kademlia-lncs.pdf)\nfor technical details.\n\n## Plutus\n\nStrictly typed pure functional programming language used for defining smart\ncontracts in Cardano. Please read about\n[Plutus](/en/en/technical/plutus/introduction/) for more details.\n\n## Proof of Stake\n\nOuroboros Proof of Stake algorithm is the most important part of the [protocol](#paper).\nIt defines the way [nodes](#node) reach consensus about the state of [ledger](#ledger).\nPlease read about [Ouroboros Proof of Stake Algorithm](/en/cardano/proof-of-stake/)\nfor more details.\n\n## PVSS\n\nPVSS (Publicly Verifiable Secret Sharing) is a cryptographic scheme we use in [SSC](#ssc).\nPlease read about [PVSS implementation in Cardano SL](/en/technical/pvss/) for more details.\n\n## Richman\n\nStakeholder with stake enough for participation in some action. Particularly,\nthere are three kinds of such actions: randomness generation (for [slot leaders\nelections process](/en/technical/leader-selection/)),\n[heavyweight stake delegation](/en/technical/delegation/#heavyweight-delegation)\nand voting for [update proposals](/en/cardano/update-mechanism/#application-update-sign-and-announce).\n\n## Signing\n\nA way to generate a proof of genuine authenticity of any kind of information we\nuse in [cryptocurrency](#cryptocurrency).\n\n## Slot\n\nA small period of physical time that is significantly larger than the expected\ndifference in clocks on different nodes. Please read [paper](#paper) (page 4) for\ntechnical details.\n\n## Slot Leader\n\nA slot leader is a node which was elected to have a right to create a block in\nthe current slot. Please read [paper](#paper) (page 7) for technical details.\n\n## SSC\n\nSSC (Shared Seed Computation) is a part of [slot leader election](#leader-election)\nprocess. This part is implemented as a [Coin Tossing](#coin-tossing) protocol with\n[Guaranteed Output Delivery](#guaranteed-output-delivery). As a result of SSC we get\na randomness which will be used in [Follow The Satoshi](#follow-the-satoshi) mechanism.\n\n## Stake\n\nPlease read about [Balance and Stake in Cardano SL](/en/cardano/balance-and-stake/)\nfor explanation.\n\n## Stakeholder\n\nA node with a positive stake.\n\n## Transaction\n\nThe data that represents the act of transferring value. Please read about\n[Transactions in Cardano SL](/en/cardano/transactions/) for more details.\n\n## Transaction Fees\n\nPlease read about [Transaction Fees in Cardano SL](/en/cardano/transaction-fees/)\nfor explanation.\n",
      "rawMarkdownBody": "\n<!-- Reviewed at d0d6c2fedefb642744a24b4b0a6d8d7ad11532f6 -->\n\n# Glossary\n\n## Ada\n\nThe name of our currency, named in honor of [Ada\nLovelace](https://en.wikipedia.org/wiki/Ada_Lovelace).\n\n## Address\n\nThe unique identifier of a [node](#node). Please read about [Addresses in\nCardano SL](/en/cardano/addresses/) for more details.\n\n## Balance\n\nPlease read about [Balance and Stake in Cardano SL](/en/cardano/balance-and-stake/)\nfor explanation.\n\n## Block\n\nA fundamental part of a [Ledger](#ledger). Please read about [Blocks in Cardano\nSL](/en/technical/blocks/) for technical details.\n\n## Blockchain\n\nPlease see [Ledger](#ledger).\n\n## Cardano SL\n\nCardano SL (or Cardano Settlement Layer) is a decentralized cryptographic\ncurrency designed and developed by [IOHK](https://iohk.io/team). Named in honor\nof [Gerolamo Cardano](https://en.wikipedia.org/wiki/Gerolamo_Cardano).\n\n## Coin Tossing\n\nA Coin Tossing is a protocol that allows two or more parties to obtain\na uniformly random value. We use Coin Tossing protocol as a base of [SSC](#ssc).\nPlease read [paper](#paper) (page 36) for more details about Coin Tossing.\n\n## Consensus Algorithm\n\nA way for a decentralized system to reach a consistent view on shared\ncollections of data. Cardano SL uses the [Ouroboros Consensus\nAlgorithm](/en/cardano/proof-of-stake/), which is an algorithm based on\n[Proof of Stake](#proof-of-stake).\n\n## Cryptocurrency\n\nA computer system which uses cryptographic protocols to generate a ledger.\nPlease read about [Cryptocurrency Basics](/introduction/#cryptocurrency-basics)\nfor more details.\n\n## Daedalus\n\nCardano SL wallet application. It provides a GUI for users, so they can access\ntheir funds, send and receive transactions, etc. Please read about [Cardano SL\nWallet Frontend](/en/technical/wallet-frontend/) for more details.\n\n## Decentralization\n\nA notion of a computer system operating through interaction of independent\nnodes. In case of maintaining a shared data collection such as a ledger, a\nconsensus is required for consistency and reliability of data.\n\n## Epoch\n\nA bigger period of time for which we know in advance who will have the right to\ngenerate a block in each slot. Please read [paper](#paper) (page 3) for\ntechnical details.\n\n## Follow The Satoshi\n\nA mechanism whereby stakeholders are selected at random to forge a new block in\nthe blockchain, with a proportional chance to get elected depending on their\namount of stake in the protocol.\n\n## Guaranteed Output Delivery\n\nGuaranteed output delivery is a mechanism that proves that the honest parties\nare guaranteed to successfully complete the multiparty computation (MPC). We\nuse G.O.D. in [SSC](#ssc).\n\n## Honest Majority\n\nHonest majority is a situation when the number of honest participants is strictly\ngreater than the number of adversaries, i.e. at least 50% + 1. Honest majority \nis assumed by default.\n\n## Kademlia\n\nPlease see [Peer Discovery](#peer-discovery).\n\n## Leader Election\n\nA process of picking who will generate blocks during the next epoch. Leaders are\nelected with a probability proportional to their stake (see [Proof of\nStake](#proof-of-stake), [Follow the Satoshi](#follow-the-satoshi)).\n\n## Ledger\n\nA collection of data that keeps track of value assigned to individuals. Please\nread [paper](#paper) (page 32) for technical details.\n\n## Lovelace\n\nName of a smallest unit of our currency. Named in honor of [Ada\nLovelace](https://en.wikipedia.org/wiki/Ada_Lovelace).\n\n## Minting\n\nA process of a new block creation in [Proof of\nStake](/introduction/#proof-of-stake-and-minting) systems.\n\n## Node\n\nA computer program that participates in a decentralized protocol system. Please\nread [High-level technical overview](/en/technical/#high-level-overview) for more\ndetails.\n\n## Paper\n\nOfficial protocol report [Ouroboros: A Provably Secure Proof-of-Stake Blockchain\nProtocol](https://eprint.iacr.org/2016/889). Please notice that Cardano SL\nimplementation differs from the paper, [read about\ndifferences](/en/cardano/differences/) for more details.\n\n## Peer Discovery\n\nA way how a node can find other nodes after running. Peer discovery we use is\nbased on Kademlia DHT. Please read [a Kademlia\npaper](https://pdos.csail.mit.edu/~petar/papers/maymounkov-kademlia-lncs.pdf)\nfor technical details.\n\n## Plutus\n\nStrictly typed pure functional programming language used for defining smart\ncontracts in Cardano. Please read about\n[Plutus](/en/en/technical/plutus/introduction/) for more details.\n\n## Proof of Stake\n\nOuroboros Proof of Stake algorithm is the most important part of the [protocol](#paper).\nIt defines the way [nodes](#node) reach consensus about the state of [ledger](#ledger).\nPlease read about [Ouroboros Proof of Stake Algorithm](/en/cardano/proof-of-stake/)\nfor more details.\n\n## PVSS\n\nPVSS (Publicly Verifiable Secret Sharing) is a cryptographic scheme we use in [SSC](#ssc).\nPlease read about [PVSS implementation in Cardano SL](/en/technical/pvss/) for more details.\n\n## Richman\n\nStakeholder with stake enough for participation in some action. Particularly,\nthere are three kinds of such actions: randomness generation (for [slot leaders\nelections process](/en/technical/leader-selection/)),\n[heavyweight stake delegation](/en/technical/delegation/#heavyweight-delegation)\nand voting for [update proposals](/en/cardano/update-mechanism/#application-update-sign-and-announce).\n\n## Signing\n\nA way to generate a proof of genuine authenticity of any kind of information we\nuse in [cryptocurrency](#cryptocurrency).\n\n## Slot\n\nA small period of physical time that is significantly larger than the expected\ndifference in clocks on different nodes. Please read [paper](#paper) (page 4) for\ntechnical details.\n\n## Slot Leader\n\nA slot leader is a node which was elected to have a right to create a block in\nthe current slot. Please read [paper](#paper) (page 7) for technical details.\n\n## SSC\n\nSSC (Shared Seed Computation) is a part of [slot leader election](#leader-election)\nprocess. This part is implemented as a [Coin Tossing](#coin-tossing) protocol with\n[Guaranteed Output Delivery](#guaranteed-output-delivery). As a result of SSC we get\na randomness which will be used in [Follow The Satoshi](#follow-the-satoshi) mechanism.\n\n## Stake\n\nPlease read about [Balance and Stake in Cardano SL](/en/cardano/balance-and-stake/)\nfor explanation.\n\n## Stakeholder\n\nA node with a positive stake.\n\n## Transaction\n\nThe data that represents the act of transferring value. Please read about\n[Transactions in Cardano SL](/en/cardano/transactions/) for more details.\n\n## Transaction Fees\n\nPlease read about [Transaction Fees in Cardano SL](/en/cardano/transaction-fees/)\nfor explanation.\n<!-- end -->",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-19-glossary.en.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/AAA.en.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/AAA.en.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/AAA.en.md absPath of file",
      "internal": {
        "content": "---\npath: '/en/post-1'\ndoc_title: 'Post 1'\ndate: '06-09-2018'\nauthor: 'Charles Hoskinson'\nlanguage: 'en'\nkeywords: 'post1 one'\nlabel: docs\n---\n\n##This is Post 1\n\npost1 one Cillum enim sint excepteur laborum mollit nulla dolore dolore id pariatur. Ea ullamco ex aute aliquip deserunt. Quis deserunt fugiat adipisicing ea cupidatat. Duis anim nisi officia sit irure. Esse Lorem exercitation ex ut.\n<!-- end -->\n\nTempor duis nisi ipsum deserunt Lorem duis voluptate aliqua deserunt ipsum occaecat consectetur velit ipsum. Minim eu eu culpa deserunt sit quis reprehenderit velit sunt esse non irure quis velit. Incididunt magna ipsum anim cillum excepteur proident excepteur aliquip tempor.",
        "type": "MarkdownRemark",
        "contentDigest": "2498ff5fb9fc6723ead7c087f9e935ff",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "path": "/en/post-1",
        "doc_title": "Post 1",
        "date": "06-09-2018",
        "author": "Charles Hoskinson",
        "language": "en",
        "keywords": "post1 one",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/AAA.en.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/AAA.en.md absPath of file"
      },
      "excerpt": "\n##This is Post 1\n\npost1 one Cillum enim sint excepteur laborum mollit nulla dolore dolore id pariatur. Ea ullamco ex aute aliquip deserunt. Quis deserunt fugiat adipisicing ea cupidatat. Duis anim nisi officia sit irure. Esse Lorem exercitation ex ut.\n",
      "rawMarkdownBody": "\n##This is Post 1\n\npost1 one Cillum enim sint excepteur laborum mollit nulla dolore dolore id pariatur. Ea ullamco ex aute aliquip deserunt. Quis deserunt fugiat adipisicing ea cupidatat. Duis anim nisi officia sit irure. Esse Lorem exercitation ex ut.\n<!-- end -->\n\nTempor duis nisi ipsum deserunt Lorem duis voluptate aliqua deserunt ipsum occaecat consectetur velit ipsum. Minim eu eu culpa deserunt sit quis reprehenderit velit sunt esse non irure quis velit. Incididunt magna ipsum anim cillum excepteur proident excepteur aliquip tempor.",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/AAA.en.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-01-index.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-01-index.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-01-index.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 介绍\npath: /cn/introduction/\ngroup: base\nlanguage: cn\nlabel: docs\n---\n\n<!-- Reviewed at d0868afac50ba6ffcbd95054e65cbf77fa513082 -->\n\n亲爱的读者，本文档的目的是让您对于 Cardano 平台技术栈第一层即结算层有所了解。如果您理解了结算层是什么，我们建议您先阅读[论文和实现的差异](/cardano/differences/)，然后再阅读[协议和实现的文档](/technical/protocols/csl-application-level/)。\n\n本文档目标读者是 IOHK 的开发人员，第三方软件开发人员，审计和致力于实现卡尔达诺结算层或使用卡尔达诺结算层参考实现的咨询人员。\n\n<!-- CARDANO_SL_README_BEGIN_1 -->\n## 什么是卡尔达诺结算层?\n\nCardano SL（或卡尔达诺运算层）是由 [IOHK](https://iohk.io/team) 联合爱丁堡大学，雅典大学和康涅狄格大学共同设计开发的一种加密货币。卡尔达诺运算层是基于 Aggelos Kiayias，Alexander Russell，Bernardo David 和 Roman Oliynykov 的白皮书 [『乌洛波罗斯：可证明安全的权益证明协议』](https://iohk.io/research/papers/#9BKRHCSI)的 Haskell 实现。\n\n您可以将卡尔达诺结算层视为基于比特币重新设计的针对比特币缺陷的自由修复。 有关卡尔达诺结算层和比特币之间的相似之处和差异的更多信息，请阅读[『卡尔达诺结算层为什么特别?』](http://cardanodocs.com/introduction/cn/#%E5%8D%A1%E5%B0%94%E8%BE%BE%E8%AF%BA%E8%BF%90%E7%AE%97%E5%B1%82%E4%B8%BA%E4%BB%80%E4%B9%88%E7%89%B9%E5%88%AB)。\n\n\n<!-- CARDANO_SL_README_END_1 -->\n\n## 加密货币基础\n\n\n在给出加密货币的定义之前，我们先来谈谈为什么我们在意数字货币，特别是加密货币。\n\n### 我们为什么在意?\n\n#### 速度\n\n与传统（也称为法定）中心银行货币，与日元或美元相反，电子货币不需要一个银行系统来转移价值。这一限制的解除，使用数字货币的速度要快于银行业务，尤其是在全球范围内。使用数字货币从大阪转移10美元到丹佛不再需要数天的时间。无论距离如何，所有交易都能迅速完成。\n\n\n#### 你掌控你自己的钱\n\n所有的商业银行账户所有者在收到支付请求后在合理的时间内只能支付一定的金额。银行体系对任何价值量都有限制，使个人无法迅速撤出或转移大量资金。有加密货币的情况下，持有一种称为**密钥**这一特殊信息的人就可以随意花钱。没有其他实体有权操纵用户拥有的价值。\n\n\n#### 匿名\n\n人们可以根据需要，拥有任意多的加密货币地址，从不同的地址接收，消费资产。经营电子商务商店的商家可以拥有一组收款和退款的地址，以及一个用于他们自身需要的单独的个人『钱包』。通过统一的接口控制所有这些钱包，并且不需要登录到多个支付平台，这使得该过程非常节省时间。\n\n#### 安全\n\n你的钱就像可用于消费的**密钥**一样安全。这意味着将密钥存储在保险箱中的 USB 闪存上相当于让纸币处于安全状态。即使进行了成功的网络攻击，也绝对没有人能够窃取这笔钱。\n\n#### 扩展性\n\n使用一种称为[侧链](https://www.blockstream.com/sidechains.pdf)的方法，以及通用加密货币，如卡尔达诺结算层和比特币，就可以启用特定领域的加密货币，例如以太经典。这样一来，通过特定领域的加密货币开发的任何创新产品都可以让参与者在通用的加密货币中保持价值。这样的应用程序的例子有身份管理，游戏和赌博，以及可验证计算。\n\n\n### 什么是加密货币?\n\n加密货币是一种数字货币形式，使用密码来控制价值。密码学提供了一种生成任何类型信息的真实真实性证据的方法。这就是所谓的*数字签名*。在加密货币中，我们通过签署和发送交易到网络并接收已确认的交易块，生成一个总账（一个提供每个地址有多少钱的信息的数据库）。加密货币通常是分散的，这意味着来自全球各地的许多人通过运行加密货币节点参与总账的生成。因此，必须达成关于总账状况的共识。下一节讨论实现这种共识的两个最重要的方法。\n\n\n## 卡尔达诺结算层为什么特别\n\n<!-- v0.1.0.0 -->\n\n虽然比特币和卡尔达诺结算层之间有相似之处，但这两个加密货币之间也有很多不同之处。最显着的区别是，比特币是工作量证明类型的加密货币，而卡尔达诺结算层使用权益证明的方法达成共识。这鼓励诚信和长期的参与。\n\n\n### 共识算法的目的\n\n\n共识算法被用来产生新的交易区块，使账本更新状态。每当有人发布一个交易区块时，他们（或者说他们的运行加密货币协议的节点）就必须附上他们已经证明的证据。下面讨论两种类型的证明。\n\n\n### 工作量证明和挖矿\n\n工作量证明是加密货币最普遍的共识算法类型。它起源于比特币，加密货币就是这么工作的。为了生成工作证明，计算机必须解决一个挑战。这是难以解决的计算繁重的问题，但解决方案很容易验证。当一台基于网络的工作量证明的计算机找到一个解决方案时，它会将交易发布于同它一起计算的其他计算机。这台计算机会因为产生区块得到交易费和奖励。整个过程被称为*挖矿*。挖矿是非常耗能的，所需的能源数量在不断增加，这可能导致不健康的竞争。\n\n### 权益证明和铸币\n\n权益证明是一种生成区块的新方法。由 [Aggelos Kiayias 教授](https://iohk.io/team/aggelos-kiayias/)领导的 IOHK 科学家们设计了第一个可证明的，称为乌洛波罗斯的权益证明算法。乌洛波罗斯是卡尔达诺结算层的核心。研究小组已经发表了一篇[白皮书](https://iohk.io/research/papers/a-provably-secure-proof-of-stake-blockchain-protocol/) ，这封白皮书对于那些拥有加密货币理论背景的人来说是值得一读的。权益证明的核心思想是，不要浪费电力来解决计算繁重的问题，而是选择一个节点来铸造一个新的区块，其概率与这个节点的硬币数量成正相关。如果一个节点有整数个(&gt; 0)的 [slot](/cardano/proof-of-stake/#stake)，它被称为 slot 所有人。如果一个节点最终被选中来铸造一个区块，那么这个节点被称为 slot 领导者。您可以在[卡尔达诺结算层的股权证明](/cardano/proof-of-stake/)中了解更多关于该流程的信息。\n\n\n<!-- CARDANO_SL_README_BEGIN_2 -->\n## 卡尔达诺结算层之上\n\n\n卡尔达诺结算层被称为『层』是有原因的。这是卡尔达诺平台的第一个组件。最终，它将被扩展到一个控制层，作为一个可信的计算框架来评估一种特殊的证明，以确保一定的计算正确执行。在游戏和赌博中，这样的系统被用于验证随机数生成和游戏结果的真实性。伴随着侧链，它将有可能完成诸如在游戏中公平分配奖金的任务。但是控制层的应用远远超出了游戏和赌博。身份管理，信用系统等将成为卡尔达诺平台的一部分。我们将迭代卡尔达诺[钱包应用程序 Daedalus](https://github.com/input-output-hk/daedalus)，使其变成一个具有自动加密货币交易功能和合法加密货币交易功能的通用加密货币钱包。\n\n\n<!-- CARDANO_SL_README_END_2 -->\n",
        "type": "MarkdownRemark",
        "contentDigest": "32dfda44086ed7bbfb67a5a7ae80649d",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "介绍",
        "path": "/cn/introduction/",
        "group": "base",
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-01-index.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-01-index.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n<!-- Reviewed at d0868afac50ba6ffcbd95054e65cbf77fa513082 -->\n\n亲爱的读者，本文档的目的是让您对于 Cardano 平台技术栈第一层即结算层有所了解。如果您理解了结算层是什么，我们建议您先阅读[论文和实现的差异](/cardano/differences/)，然后再阅读[协议和实现的文档](/technical/protocols/csl-application-level/)。\n\n本文档目标读者是 IOHK 的开发人员，第三方软件开发人员，审计和致力于实现卡尔达诺结算层或使用卡尔达诺结算层参考实现的咨询人员。\n\n<!-- CARDANO_SL_README_BEGIN_1 -->\n## 什么是卡尔达诺结算层?\n\nCardano SL（或卡尔达诺运算层）是由 [IOHK](https://iohk.io/team) 联合爱丁堡大学，雅典大学和康涅狄格大学共同设计开发的一种加密货币。卡尔达诺运算层是基于 Aggelos Kiayias，Alexander Russell，Bernardo David 和 Roman Oliynykov 的白皮书 [『乌洛波罗斯：可证明安全的权益证明协议』](https://iohk.io/research/papers/#9BKRHCSI)的 Haskell 实现。\n\n您可以将卡尔达诺结算层视为基于比特币重新设计的针对比特币缺陷的自由修复。 有关卡尔达诺结算层和比特币之间的相似之处和差异的更多信息，请阅读[『卡尔达诺结算层为什么特别?』](http://cardanodocs.com/introduction/cn/#%E5%8D%A1%E5%B0%94%E8%BE%BE%E8%AF%BA%E8%BF%90%E7%AE%97%E5%B1%82%E4%B8%BA%E4%BB%80%E4%B9%88%E7%89%B9%E5%88%AB)。\n\n\n<!-- CARDANO_SL_README_END_1 -->\n\n## 加密货币基础\n\n\n在给出加密货币的定义之前，我们先来谈谈为什么我们在意数字货币，特别是加密货币。\n\n### 我们为什么在意?\n\n#### 速度\n\n与传统（也称为法定）中心银行货币，与日元或美元相反，电子货币不需要一个银行系统来转移价值。这一限制的解除，使用数字货币的速度要快于银行业务，尤其是在全球范围内。使用数字货币从大阪转移10美元到丹佛不再需要数天的时间。无论距离如何，所有交易都能迅速完成。\n\n\n#### 你掌控你自己的钱\n\n所有的商业银行账户所有者在收到支付请求后在合理的时间内只能支付一定的金额。银行体系对任何价值量都有限制，使个人无法迅速撤出或转移大量资金。有加密货币的情况下，持有一种称为**密钥**这一特殊信息的人就可以随意花钱。没有其他实体有权操纵用户拥有的价值。\n\n\n#### 匿名\n\n人们可以根据需要，拥有任意多的加密货币地址，从不同的地址接收，消费资产。经营电子商务商店的商家可以拥有一组收款和退款的地址，以及一个用于他们自身需要的单独的个人『钱包』。通过统一的接口控制所有这些钱包，并且不需要登录到多个支付平台，这使得该过程非常节省时间。\n\n#### 安全\n\n你的钱就像可用于消费的**密钥**一样安全。这意味着将密钥存储在保险箱中的 USB 闪存上相当于让纸币处于安全状态。即使进行了成功的网络攻击，也绝对没有人能够窃取这笔钱。\n\n#### 扩展性\n\n使用一种称为[侧链](https://www.blockstream.com/sidechains.pdf)的方法，以及通用加密货币，如卡尔达诺结算层和比特币，就可以启用特定领域的加密货币，例如以太经典。这样一来，通过特定领域的加密货币开发的任何创新产品都可以让参与者在通用的加密货币中保持价值。这样的应用程序的例子有身份管理，游戏和赌博，以及可验证计算。\n\n\n### 什么是加密货币?\n\n加密货币是一种数字货币形式，使用密码来控制价值。密码学提供了一种生成任何类型信息的真实真实性证据的方法。这就是所谓的*数字签名*。在加密货币中，我们通过签署和发送交易到网络并接收已确认的交易块，生成一个总账（一个提供每个地址有多少钱的信息的数据库）。加密货币通常是分散的，这意味着来自全球各地的许多人通过运行加密货币节点参与总账的生成。因此，必须达成关于总账状况的共识。下一节讨论实现这种共识的两个最重要的方法。\n\n\n## 卡尔达诺结算层为什么特别\n\n<!-- v0.1.0.0 -->\n\n虽然比特币和卡尔达诺结算层之间有相似之处，但这两个加密货币之间也有很多不同之处。最显着的区别是，比特币是工作量证明类型的加密货币，而卡尔达诺结算层使用权益证明的方法达成共识。这鼓励诚信和长期的参与。\n\n\n### 共识算法的目的\n\n\n共识算法被用来产生新的交易区块，使账本更新状态。每当有人发布一个交易区块时，他们（或者说他们的运行加密货币协议的节点）就必须附上他们已经证明的证据。下面讨论两种类型的证明。\n\n\n### 工作量证明和挖矿\n\n工作量证明是加密货币最普遍的共识算法类型。它起源于比特币，加密货币就是这么工作的。为了生成工作证明，计算机必须解决一个挑战。这是难以解决的计算繁重的问题，但解决方案很容易验证。当一台基于网络的工作量证明的计算机找到一个解决方案时，它会将交易发布于同它一起计算的其他计算机。这台计算机会因为产生区块得到交易费和奖励。整个过程被称为*挖矿*。挖矿是非常耗能的，所需的能源数量在不断增加，这可能导致不健康的竞争。\n\n### 权益证明和铸币\n\n权益证明是一种生成区块的新方法。由 [Aggelos Kiayias 教授](https://iohk.io/team/aggelos-kiayias/)领导的 IOHK 科学家们设计了第一个可证明的，称为乌洛波罗斯的权益证明算法。乌洛波罗斯是卡尔达诺结算层的核心。研究小组已经发表了一篇[白皮书](https://iohk.io/research/papers/a-provably-secure-proof-of-stake-blockchain-protocol/) ，这封白皮书对于那些拥有加密货币理论背景的人来说是值得一读的。权益证明的核心思想是，不要浪费电力来解决计算繁重的问题，而是选择一个节点来铸造一个新的区块，其概率与这个节点的硬币数量成正相关。如果一个节点有整数个(&gt; 0)的 [slot](/cardano/proof-of-stake/#stake)，它被称为 slot 所有人。如果一个节点最终被选中来铸造一个区块，那么这个节点被称为 slot 领导者。您可以在[卡尔达诺结算层的股权证明](/cardano/proof-of-stake/)中了解更多关于该流程的信息。\n\n\n<!-- CARDANO_SL_README_BEGIN_2 -->\n## 卡尔达诺结算层之上\n\n\n卡尔达诺结算层被称为『层』是有原因的。这是卡尔达诺平台的第一个组件。最终，它将被扩展到一个控制层，作为一个可信的计算框架来评估一种特殊的证明，以确保一定的计算正确执行。在游戏和赌博中，这样的系统被用于验证随机数生成和游戏结果的真实性。伴随着侧链，它将有可能完成诸如在游戏中公平分配奖金的任务。但是控制层的应用远远超出了游戏和赌博。身份管理，信用系统等将成为卡尔达诺平台的一部分。我们将迭代卡尔达诺[钱包应用程序 Daedalus](https://github.com/input-output-hk/daedalus)，使其变成一个具有自动加密货币交易功能和合法加密货币交易功能的通用加密货币钱包。\n\n\n<!-- CARDANO_SL_README_END_2 -->\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-01-index.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-04-installation.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-04-installation.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-04-installation.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 安装\npath: /cn/installation\ngroup: base\nchildren: dsa\nlanguage: cn\nlabel: docs\n---\n\n<!-- Reviewed at d0868afac50ba6ffcbd95054e65cbf77fa513082 -->\n\n# 安装\n\n<!-- CARDANO_SL_README_BEGIN_3 -->\n## 支持的平台\n\n支持的平台包括 Windows, macOS 和 Linux。这是[代达罗斯钱包](https://github.com/input-output-hk/daedalus)的 [Windows 和 macOS 平台安装器](https://daedaluswallet.io/#download)。\n\nLinux 平台的安装器将在不久发布。目前来说，有两种方式在 Linux 上运行卡尔达诺结算层：\n\n1. 从源码构建（推荐方式）。请参考[如何通过源代码构建卡尔达诺结算层以及代达罗斯钱包](https://github.com/input-output-hk/cardano-sl/blob/develop/docs/how-to/build-cardano-sl-and-daedalus-from-source-code.md)文档。\n2. 使用**非官方** Arch Linux 安装包：\n   * [cardano-sl](https://aur.archlinux.org/packages/cardano-sl/)\n   * [daedalus-bridge](https://aur.archlinux.org/packages/daedalus-bridge/)\n   * [daedalus](https://aur.archlinux.org/packages/daedalus/)\n\n<!-- CARDANO_SL_README_END_3 -->\n",
        "type": "MarkdownRemark",
        "contentDigest": "73c33090494f519cc713d10be8a2193a",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "安装",
        "path": "/cn/installation",
        "group": "base",
        "children": "dsa",
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-04-installation.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-04-installation.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n<!-- Reviewed at d0868afac50ba6ffcbd95054e65cbf77fa513082 -->\n\n# 安装\n\n<!-- CARDANO_SL_README_BEGIN_3 -->\n## 支持的平台\n\n支持的平台包括 Windows, macOS 和 Linux。这是[代达罗斯钱包](https://github.com/input-output-hk/daedalus)的 [Windows 和 macOS 平台安装器](https://daedaluswallet.io/#download)。\n\nLinux 平台的安装器将在不久发布。目前来说，有两种方式在 Linux 上运行卡尔达诺结算层：\n\n1. 从源码构建（推荐方式）。请参考[如何通过源代码构建卡尔达诺结算层以及代达罗斯钱包](https://github.com/input-output-hk/cardano-sl/blob/develop/docs/how-to/build-cardano-sl-and-daedalus-from-source-code.md)文档。\n2. 使用**非官方** Arch Linux 安装包：\n   * [cardano-sl](https://aur.archlinux.org/packages/cardano-sl/)\n   * [daedalus-bridge](https://aur.archlinux.org/packages/daedalus-bridge/)\n   * [daedalus](https://aur.archlinux.org/packages/daedalus/)\n\n<!-- CARDANO_SL_README_END_3 -->\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-04-installation.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/content/intro.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/content/intro.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/content/intro.cn.md absPath of file",
      "internal": {
        "content": "---\ndoc_doc_title: Intro\npermalink: /intro-text/\npath: '/en/intro-text/'\nlanguage: 'en'\nkeywords: 'intro'\nlabel: content\n---\n\n### WHAT IS CARDANO SL?\nCardano SL (or Cardano Settlement Layer) is a cryptographic currency designed and developed by IOHK in conjunction with the University of Edinburgh, the University of Athens and the University of Connecticut. Cardano SL is based on the Haskell implementation of the white paper “Ouroboros: A Provably Secure Proof of Stake Blockchain Protocol” by Aggelos Kiayias, Alexander Russell, Bernardo David and Roman Oliynykov.\n\nYou can think of Cardano SL as Bitcoin reimagined with a freedom to fix Bitcoin’s design flaws. Please read “What Makes Cardano SL Special?” for more information about similarities and differences between Cardano SL and Bitcoin.\nCRYPTOCURRENCY BASICS\nBefore giving a definition of a cryptocurrency, let’s talk about why we care about digital currencies in general and cryptographic currencies in particular.\n\n### WHY DO WE CARE?\n\n- ##### SPEED\nAs opposed to conventional (also known as fiat), centrally banked currencies, such as the Yen or the American Dollar, digital currencies do not require a banking system to move value. With this restriction lifted, working with digital currencies is much faster than working with banking, especially on a global scale. Transferring 10 USD from Osaka to Denver no longer takes days when a digital currency is used. All transactions are made rapidly regardless of the distance.\n- ##### YOU OWN YOUR MONEY\nAll that a commercial bank account owner is given is a promise of being paid a certain amount of money within a reasonable amount of time after receiving a payout request. Banking systems also have limits to any volume of value being moved, rendering an individual unable to withdraw or transfer large amounts quickly. In case of cryptocurrencies, the person who holds a special kind of information called a secret key can spend the money at will. No other entity has a power to manipulate the value that a user owns.\n- ##### PSEUDONYMITY\nOne can have as many cryptocurrency addresses as they wish, receiving and spending money from different addresses as per their purpose. A merchant running an E-Commerce shop can have a set of addresses for receiving money and issuing refunds, and a separate personal “wallet” for their own needs. A single interface is used to control all of these wallets, and there is no need to log in to several payment platforms, which makes the process very time-efficient.\n- ##### SECURITY\nYour money is as secure as the secret key that allows spending it. This means that storing your secret key on a USB flash drive in a safe is equivalent to having banknotes in a safe. Absolutely nobody can steal this money even by carrying out a successful cyberattack.\n\n### EXTENSIBILITY\nUsing an approach known as side chains, general purpose cryptocurrencies such as Cardano SL or Bitcoin can enable domain specific cryptocurrencies, such as Ethereum Classic. This way, any innovation developed via domain specific cryptocurrency can have participants who hold value in a general purpose cryptocurrency. Examples of such applications are identity management, gaming and gambling, and verifiable computations.\n\n### WHAT IS A CRYPTOCURRENCY?\nCryptocurrency is a form of digital currency that uses cryptography to manipulate value. Cryptography provides a way to generate proof of genuine authenticity of any kind of information. This is called digital signing. In cryptocurrencies we generate a ledger (a database which provides information on how much money each address has) by signing and sending transactions to the network and receiving blocks of confirmed transactions. Cryptocurrencies are normally decentralized, meaning that many people from all over the globe participate in ledger generation by running cryptocurrency nodes. Thus, a consensus about the state of the ledger has to be achieved. Two most significant approaches for achieving such consensus are discussed in the next section.\n\n### WHAT MAKES CARDANO SL SPECIAL?\nWhile there are similarities between Bitcoin and Cardano SL, there are also many differences between these two cryptocurrencies. The most significant difference is that Bitcoin is a proof of work type cryptocurrency, while Cardano SL makes use of a proof of stake approach to reach consensus. This encourages honesty and long term participation.\n\n### PURPOSE OF A CONSENSUS ALGORITHM\nConsensus algorithms are used to produce new transaction blocks, resulting in an updated state of the ledger. Whenever someone publishes a block of transactions, they — or rather, their node that runs the cryptocurrency protocol — have to attach a proof that they have merited it. Below two types of such proofs are discussed.\n\n### PROOF OF WORK AND MINING\nProof of work is the most common consensus algorithm type for cryptocurrencies. It originated in Bitcoin, and this is how this cryptocurrency works. To generate proof of work, a computer has to solve a challenge. The challenge is a computationally heavy problem which is hard to solve, but the solution is easy to verify. When a computer on a proof of work based network finds a solution, it publishes it along with the transactions that the computer has been observing while cracking the problem. The owner of this computer collects the transaction fees and a reward for generating a block. The entire process is called mining. Mining is very energy consuming, and the amount of energy needed is constantly increasing, which can lead to unsound competition.\n\n### PROOF OF STAKE AND MINTING\nProof of stake is a novel approach to block generation. IOHK scientists led by Prof. Aggelos Kiayias have designed the first provably secure proof of stake algorithm called Ouroboros. Ouroboros lies at the heart of Cardano SL. Research team has published a white paper that is a worthy read for anyone with a background in cryptocurrency theory. The core idea of proof of stake is that instead of wasting electricity on cracking computationally heavy problems, a node is selected to mint a new block, with a probability proportional to the amount of coins this node has. If a node has positive (> 0) stake, it is called a stakeholder. If a node eventually becomes chosen to mint a block, it is called a slot leader. You can read more about this process in Proof of Stake in Cardano SL.\n\n### BEYOND SETTLEMENT LAYER\nCardano SL is called “Layer” for a reason. It is the first component of the Cardano Platform. Eventually, it will be expanded with a Control Layer, serving as a trusted computation framework to evaluate a special kind of proofs to ensure that a certain computation was carried out correctly. In gaming and gambling, such systems are used for verifying honesty of random number generation and game outcomes. Accompanied with side chains, it will make possible to accomplish such tasks as provably fair distribution of winnings in games. But the application of Control Layer lies well beyond gaming and gambling. Identity management, credit system and more will be a part of Cardano Platform. We are also aiming to evolve Daedalus, the Cardano SL wallet application, into a universal cryptocurrency wallet featuring automated cryptocurrency trading and cryptocurrency-to-fiat transactions.",
        "type": "MarkdownRemark",
        "contentDigest": "1383e7987293d3151ab2a2dc17be4ca7",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "doc_doc_title": "Intro",
        "permalink": "/intro-text/",
        "path": "/en/intro-text/",
        "language": "en",
        "keywords": "intro",
        "label": "content",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/content/intro.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/content/intro.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n### WHAT IS CARDANO SL?\nCardano SL (or Cardano Settlement Layer) is a cryptographic currency designed and developed by IOHK in conjunction with the University of Edinburgh, the University of Athens and the University of Connecticut. Cardano SL is based on the Haskell implementation of the white paper “Ouroboros: A Provably Secure Proof of Stake Blockchain Protocol” by Aggelos Kiayias, Alexander Russell, Bernardo David and Roman Oliynykov.\n\nYou can think of Cardano SL as Bitcoin reimagined with a freedom to fix Bitcoin’s design flaws. Please read “What Makes Cardano SL Special?” for more information about similarities and differences between Cardano SL and Bitcoin.\nCRYPTOCURRENCY BASICS\nBefore giving a definition of a cryptocurrency, let’s talk about why we care about digital currencies in general and cryptographic currencies in particular.\n\n### WHY DO WE CARE?\n\n- ##### SPEED\nAs opposed to conventional (also known as fiat), centrally banked currencies, such as the Yen or the American Dollar, digital currencies do not require a banking system to move value. With this restriction lifted, working with digital currencies is much faster than working with banking, especially on a global scale. Transferring 10 USD from Osaka to Denver no longer takes days when a digital currency is used. All transactions are made rapidly regardless of the distance.\n- ##### YOU OWN YOUR MONEY\nAll that a commercial bank account owner is given is a promise of being paid a certain amount of money within a reasonable amount of time after receiving a payout request. Banking systems also have limits to any volume of value being moved, rendering an individual unable to withdraw or transfer large amounts quickly. In case of cryptocurrencies, the person who holds a special kind of information called a secret key can spend the money at will. No other entity has a power to manipulate the value that a user owns.\n- ##### PSEUDONYMITY\nOne can have as many cryptocurrency addresses as they wish, receiving and spending money from different addresses as per their purpose. A merchant running an E-Commerce shop can have a set of addresses for receiving money and issuing refunds, and a separate personal “wallet” for their own needs. A single interface is used to control all of these wallets, and there is no need to log in to several payment platforms, which makes the process very time-efficient.\n- ##### SECURITY\nYour money is as secure as the secret key that allows spending it. This means that storing your secret key on a USB flash drive in a safe is equivalent to having banknotes in a safe. Absolutely nobody can steal this money even by carrying out a successful cyberattack.\n\n### EXTENSIBILITY\nUsing an approach known as side chains, general purpose cryptocurrencies such as Cardano SL or Bitcoin can enable domain specific cryptocurrencies, such as Ethereum Classic. This way, any innovation developed via domain specific cryptocurrency can have participants who hold value in a general purpose cryptocurrency. Examples of such applications are identity management, gaming and gambling, and verifiable computations.\n\n### WHAT IS A CRYPTOCURRENCY?\nCryptocurrency is a form of digital currency that uses cryptography to manipulate value. Cryptography provides a way to generate proof of genuine authenticity of any kind of information. This is called digital signing. In cryptocurrencies we generate a ledger (a database which provides information on how much money each address has) by signing and sending transactions to the network and receiving blocks of confirmed transactions. Cryptocurrencies are normally decentralized, meaning that many people from all over the globe participate in ledger generation by running cryptocurrency nodes. Thus, a consensus about the state of the ledger has to be achieved. Two most significant approaches for achieving such consensus are discussed in the next section.\n\n### WHAT MAKES CARDANO SL SPECIAL?\nWhile there are similarities between Bitcoin and Cardano SL, there are also many differences between these two cryptocurrencies. The most significant difference is that Bitcoin is a proof of work type cryptocurrency, while Cardano SL makes use of a proof of stake approach to reach consensus. This encourages honesty and long term participation.\n\n### PURPOSE OF A CONSENSUS ALGORITHM\nConsensus algorithms are used to produce new transaction blocks, resulting in an updated state of the ledger. Whenever someone publishes a block of transactions, they — or rather, their node that runs the cryptocurrency protocol — have to attach a proof that they have merited it. Below two types of such proofs are discussed.\n\n### PROOF OF WORK AND MINING\nProof of work is the most common consensus algorithm type for cryptocurrencies. It originated in Bitcoin, and this is how this cryptocurrency works. To generate proof of work, a computer has to solve a challenge. The challenge is a computationally heavy problem which is hard to solve, but the solution is easy to verify. When a computer on a proof of work based network finds a solution, it publishes it along with the transactions that the computer has been observing while cracking the problem. The owner of this computer collects the transaction fees and a reward for generating a block. The entire process is called mining. Mining is very energy consuming, and the amount of energy needed is constantly increasing, which can lead to unsound competition.\n\n### PROOF OF STAKE AND MINTING\nProof of stake is a novel approach to block generation. IOHK scientists led by Prof. Aggelos Kiayias have designed the first provably secure proof of stake algorithm called Ouroboros. Ouroboros lies at the heart of Cardano SL. Research team has published a white paper that is a worthy read for anyone with a background in cryptocurrency theory. The core idea of proof of stake is that instead of wasting electricity on cracking computationally heavy problems, a node is selected to mint a new block, with a probability proportional to the amount of coins this node has. If a node has positive (> 0) stake, it is called a stakeholder. If a node eventually becomes chosen to mint a block, it is called a slot leader. You can read more about this process in Proof of Stake in Cardano SL.\n\n### BEYOND SETTLEMENT LAYER\nCardano SL is called “Layer” for a reason. It is the first component of the Cardano Platform. Eventually, it will be expanded with a Control Layer, serving as a trusted computation framework to evaluate a special kind of proofs to ensure that a certain computation was carried out correctly. In gaming and gambling, such systems are used for verifying honesty of random number generation and game outcomes. Accompanied with side chains, it will make possible to accomplish such tasks as provably fair distribution of winnings in games. But the application of Control Layer lies well beyond gaming and gambling. Identity management, credit system and more will be a part of Cardano Platform. We are also aiming to evolve Daedalus, the Cardano SL wallet application, into a universal cryptocurrency wallet featuring automated cryptocurrency trading and cryptocurrency-to-fiat transactions.",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/content/intro.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-13-for-contributors.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-13-for-contributors.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-13-for-contributors.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 对于贡献者\ngroup: base\npath: /cn/for-contributors/\nchildren: cn-for-contributors\nlanguage: cn\nlabel: docs\n---\n\n# Redirecting...\n\n<script>\n    //window.location.replace(\"https://github.com/input-output-hk/cardano-sl/blob/develop/CONTRIBUTING.md\");\n</script>\n",
        "type": "MarkdownRemark",
        "contentDigest": "832557d4ca6ce12a259dc4dfe2c3bd54",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "对于贡献者",
        "group": "base",
        "path": "/cn/for-contributors/",
        "children": "cn-for-contributors",
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-13-for-contributors.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-13-for-contributors.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n# Redirecting...\n\n<script>\n    //window.location.replace(\"https://github.com/input-output-hk/cardano-sl/blob/develop/CONTRIBUTING.md\");\n</script>\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-13-for-contributors.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-19-glossary.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-19-glossary.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-19-glossary.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 术语表\npath: /cn/glossary\ngroup: base\nlanguage: cn\nlabel: docs\n---\n\n<!-- Reviewed at d0d6c2fedefb642744a24b4b0a6d8d7ad11532f6 -->\n\n# 术语表\n\n## Ada\n\n我们的货币的名字，为纪念 [Ada\nLovelace](https://en.wikipedia.org/wiki/Ada_Lovelace) 而命名。\n\n## 地址\n\n[节点](#节点)的唯一标示符。请阅读[卡尔达诺结算层的地址](/cardano/addresses/)获得更多信息。\n\n## 余额\n\n请阅读[卡尔达诺结算层的余额和权益](/cardano/balance-and-stake/) 获得解释。\n\n## 区块\n\n[账本](#账本)的基础元素。请阅读[卡尔达诺区块](/technical/blocks/)获取技术细节。\n\n## 区块链\n\n请阅读[账本](#账本)。\n\n## 卡尔达诺结算层\n\n卡尔达诺 SL (或者说卡尔达诺结算层) 是由 [IOHK](https://iohk.io/team) 设计和开发的去中心化加密货币。为纪念 [Gerolamo Cardano](https://en.wikipedia.org/wiki/Gerolamo_Cardano) 而命名。\n\n## 掷币\n\n掷币协议是允许两方或多方获得均匀随机值的协议。我们使用掷币协议作为 [SSC](#ssc) 的基础。请阅读[论文](#论文)（第36页）以了解掷币协议的更多详情。\n\n## 一致性算法\n\n分布式系统对于共享数据集合达成一致观点的一种方式。卡尔达诺结算层使用[乌洛波罗斯一致性算法](/cardano/proof-of-stake/)，这是一个基于[权益证明](#权益证明)的算法。\n\n## 加密货币\n\n使用加密协议来生成账本的计算机系统，请阅读[加密货币基础](/introduction/#cryptocurrency-basics)了解更多信息。\n\n## 代达罗斯\n\n卡尔达诺结算层钱包应用。 它为用户提供一个用户界面, 用户可以管理，发送，收取资金等等。请阅读[卡尔达诺结算层钱包应用前端](/technical/wallet-frontend/)获取更多信息。\n\n## 去中心化\n\n通过独立节点进行交互操作的计算机系统的概念。在维护共享数据集合，如账本的情况下，需要对数据的一致性和可靠性达成共识。\n\n## Epoch\n\n我们将知道谁有权利在每个 slot 中生成一个区块的更长的时间段。请阅读[论文](#论文)（第3页）了解技术细节。\n\n## 追随中本聪\n\n一种随机选择权益所有者在区块链中建立一个新区块的机制，根据协议中的股份数量，按比例获得选举机会。\n\n## 保证输出交付\n\n保证输出交付是一种机制，能证明诚实方能保证成功完成多方计算（MPC）。我们在 [SSC](#ssc) 中使用 G.O.D.\n\n## 诚实的大多数\n\n诚实的大多数是指诚实的参与者数量严格大于攻击者数量的情况，即至少 50% + 1 是诚实的大多数。\n\n## Kademlia\n\n请阅读[对等点发现](#对等点发现)。\n\n## 领导者选举\n\n挑选谁将在下一个 epoch 生成区块的过程。将依据领导者的股权比例选出（参见[权益证明](#权益证明), [追随中本聪算法](#追随中本聪算法))。\n\n## 账本\n\n个人所拥有的价值的数据集合。请阅读[论文](#论文)了解技术细节。\n\n## Lovelace\n\n我们的货币的最小单位的名称。为纪念 [Ada\nLovelace](https://en.wikipedia.org/wiki/Ada_Lovelace) 而命名。\n\n## 铸币\n\n在[权益证明和铸币](/introduction/#权益证明和铸币)系统中生成新区块的过程。\n\n## 节点\n\n参与分布式协议系统的计算机程序。请阅读[高层次概述](/technical/#高层次概述)获取更多细节。\n\n## 论文\n\n官方协议论文：[乌洛波罗斯：一个可证安全的权益证明区块链协议](https://eprint.iacr.org/2016/889)。请注意，卡尔达诺结算层的实现与论文的实现不同，[请阅读差异](/cardano/differences/)以了解详情。\n\n## 节点发现\n\n节点运行后找到其他节点的方法。我们使用的节点发现基于 Kademlia DHT。请阅读 [ Kademlia \n论文](https://pdos.csail.mit.edu/~petar/papers/maymounkov-kademlia-lncs.pdf)获得技术细节。\n\n\n## Plutus\n\n在卡尔达诺中定义智能协议的强类型纯函数式语言。请阅读 [Plutus](/technical/plutus/introduction/) 获取更多细节。\n\n## 权益证明\n\n乌洛波罗斯权益证明算法是[协议](#论文)中最重要的部分。它定义了[节点](#节点)对[账本](#账本)状态达成共识的方式。请阅读[乌洛波罗斯权益证明算法](/cardano/proof-of-stake/)获取更多细节。\n\n## PVSS\n\n公开验证密钥共享模式 (Publicly Verifiable Secret Sharing)是我们在 [SSC](#ssc) 中使用的密码方案。请阅读[卡尔达诺结算层 PVSS](/technical/pvss/) 获取更多细节。\n\n## 富人\n\n有足够股权参与一些行动的权益所有人。具体来说，有三种类型的动作：随机性生成（[slot 领导者选举过程](/technical/leader-selection/)），[重量级权益委派](/technical/delegation/#重量级权益委派)，[更新提案的投票](/cardano/update-mechanism/#应用程序更新：签署和宣布)。\n\n## 签名\n\n一种用来生成我们在[加密货币](#加密货币)中使用的保证任何类型信息真实性证据的方法。\n\n## Slot\n\n在不同节点上显著大于预期的不同时钟数的一小段物理时间。请阅读[论文](#论文)(第4页)获取更多技术细节。\n\n## Slot 领导者\n\nslot 领导者是一个被选举为有权在当前 slot 创建区块的节点。请阅读[论文](#论文)(第7页)获取更多技术细节。\n\n## SSC\n\nSSC (Shared Seed Computation) 是 [Slot 领导者选举](#领导者选举)的一部分。这部分被实现为[保证输出交付](#保证输出交付)的[掷币](#掷币)协议。作为 SSC 的结果，我们得到一个将用于[追随中本聪](#追随中本聪)机制的随机算法。\n\n## 权益\n\n请阅读 [卡尔达诺结算层的余额和权益](/cardano/balance-and-stake/) 章节获取解释。\n\n## 权益所有人\n\n一个拥有正数股权的节点。\n\n## 转账\n\n表示价值转移的数据。请阅读[卡尔达诺结算层的转账](/cardano/transactions/)获取更多细节。\n\n## 转账费用\n\n请阅读[卡尔达诺结算层转账费用](/cardano/transaction-fees/)章节获取解释。\n",
        "type": "MarkdownRemark",
        "contentDigest": "47586aef17dd37c1bab92de4a33c8786",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "术语表",
        "path": "/cn/glossary",
        "group": "base",
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-19-glossary.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-19-glossary.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n<!-- Reviewed at d0d6c2fedefb642744a24b4b0a6d8d7ad11532f6 -->\n\n# 术语表\n\n## Ada\n\n我们的货币的名字，为纪念 [Ada\nLovelace](https://en.wikipedia.org/wiki/Ada_Lovelace) 而命名。\n\n## 地址\n\n[节点](#节点)的唯一标示符。请阅读[卡尔达诺结算层的地址](/cardano/addresses/)获得更多信息。\n\n## 余额\n\n请阅读[卡尔达诺结算层的余额和权益](/cardano/balance-and-stake/) 获得解释。\n\n## 区块\n\n[账本](#账本)的基础元素。请阅读[卡尔达诺区块](/technical/blocks/)获取技术细节。\n\n## 区块链\n\n请阅读[账本](#账本)。\n\n## 卡尔达诺结算层\n\n卡尔达诺 SL (或者说卡尔达诺结算层) 是由 [IOHK](https://iohk.io/team) 设计和开发的去中心化加密货币。为纪念 [Gerolamo Cardano](https://en.wikipedia.org/wiki/Gerolamo_Cardano) 而命名。\n\n## 掷币\n\n掷币协议是允许两方或多方获得均匀随机值的协议。我们使用掷币协议作为 [SSC](#ssc) 的基础。请阅读[论文](#论文)（第36页）以了解掷币协议的更多详情。\n\n## 一致性算法\n\n分布式系统对于共享数据集合达成一致观点的一种方式。卡尔达诺结算层使用[乌洛波罗斯一致性算法](/cardano/proof-of-stake/)，这是一个基于[权益证明](#权益证明)的算法。\n\n## 加密货币\n\n使用加密协议来生成账本的计算机系统，请阅读[加密货币基础](/introduction/#cryptocurrency-basics)了解更多信息。\n\n## 代达罗斯\n\n卡尔达诺结算层钱包应用。 它为用户提供一个用户界面, 用户可以管理，发送，收取资金等等。请阅读[卡尔达诺结算层钱包应用前端](/technical/wallet-frontend/)获取更多信息。\n\n## 去中心化\n\n通过独立节点进行交互操作的计算机系统的概念。在维护共享数据集合，如账本的情况下，需要对数据的一致性和可靠性达成共识。\n\n## Epoch\n\n我们将知道谁有权利在每个 slot 中生成一个区块的更长的时间段。请阅读[论文](#论文)（第3页）了解技术细节。\n\n## 追随中本聪\n\n一种随机选择权益所有者在区块链中建立一个新区块的机制，根据协议中的股份数量，按比例获得选举机会。\n\n## 保证输出交付\n\n保证输出交付是一种机制，能证明诚实方能保证成功完成多方计算（MPC）。我们在 [SSC](#ssc) 中使用 G.O.D.\n\n## 诚实的大多数\n\n诚实的大多数是指诚实的参与者数量严格大于攻击者数量的情况，即至少 50% + 1 是诚实的大多数。\n\n## Kademlia\n\n请阅读[对等点发现](#对等点发现)。\n\n## 领导者选举\n\n挑选谁将在下一个 epoch 生成区块的过程。将依据领导者的股权比例选出（参见[权益证明](#权益证明), [追随中本聪算法](#追随中本聪算法))。\n\n## 账本\n\n个人所拥有的价值的数据集合。请阅读[论文](#论文)了解技术细节。\n\n## Lovelace\n\n我们的货币的最小单位的名称。为纪念 [Ada\nLovelace](https://en.wikipedia.org/wiki/Ada_Lovelace) 而命名。\n\n## 铸币\n\n在[权益证明和铸币](/introduction/#权益证明和铸币)系统中生成新区块的过程。\n\n## 节点\n\n参与分布式协议系统的计算机程序。请阅读[高层次概述](/technical/#高层次概述)获取更多细节。\n\n## 论文\n\n官方协议论文：[乌洛波罗斯：一个可证安全的权益证明区块链协议](https://eprint.iacr.org/2016/889)。请注意，卡尔达诺结算层的实现与论文的实现不同，[请阅读差异](/cardano/differences/)以了解详情。\n\n## 节点发现\n\n节点运行后找到其他节点的方法。我们使用的节点发现基于 Kademlia DHT。请阅读 [ Kademlia \n论文](https://pdos.csail.mit.edu/~petar/papers/maymounkov-kademlia-lncs.pdf)获得技术细节。\n\n\n## Plutus\n\n在卡尔达诺中定义智能协议的强类型纯函数式语言。请阅读 [Plutus](/technical/plutus/introduction/) 获取更多细节。\n\n## 权益证明\n\n乌洛波罗斯权益证明算法是[协议](#论文)中最重要的部分。它定义了[节点](#节点)对[账本](#账本)状态达成共识的方式。请阅读[乌洛波罗斯权益证明算法](/cardano/proof-of-stake/)获取更多细节。\n\n## PVSS\n\n公开验证密钥共享模式 (Publicly Verifiable Secret Sharing)是我们在 [SSC](#ssc) 中使用的密码方案。请阅读[卡尔达诺结算层 PVSS](/technical/pvss/) 获取更多细节。\n\n## 富人\n\n有足够股权参与一些行动的权益所有人。具体来说，有三种类型的动作：随机性生成（[slot 领导者选举过程](/technical/leader-selection/)），[重量级权益委派](/technical/delegation/#重量级权益委派)，[更新提案的投票](/cardano/update-mechanism/#应用程序更新：签署和宣布)。\n\n## 签名\n\n一种用来生成我们在[加密货币](#加密货币)中使用的保证任何类型信息真实性证据的方法。\n\n## Slot\n\n在不同节点上显著大于预期的不同时钟数的一小段物理时间。请阅读[论文](#论文)(第4页)获取更多技术细节。\n\n## Slot 领导者\n\nslot 领导者是一个被选举为有权在当前 slot 创建区块的节点。请阅读[论文](#论文)(第7页)获取更多技术细节。\n\n## SSC\n\nSSC (Shared Seed Computation) 是 [Slot 领导者选举](#领导者选举)的一部分。这部分被实现为[保证输出交付](#保证输出交付)的[掷币](#掷币)协议。作为 SSC 的结果，我们得到一个将用于[追随中本聪](#追随中本聪)机制的随机算法。\n\n## 权益\n\n请阅读 [卡尔达诺结算层的余额和权益](/cardano/balance-and-stake/) 章节获取解释。\n\n## 权益所有人\n\n一个拥有正数股权的节点。\n\n## 转账\n\n表示价值转移的数据。请阅读[卡尔达诺结算层的转账](/cardano/transactions/)获取更多细节。\n\n## 转账费用\n\n请阅读[卡尔达诺结算层转账费用](/cardano/transaction-fees/)章节获取解释。\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-19-glossary.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-04-differences.en.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-04-differences.en.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-04-differences.en.md absPath of file",
      "internal": {
        "content": "---\ndoc_title: Differences Between Paper and the Implementation\npath: /en/cardano/differences-between-paper-and-the-implementation/\ngroup: cardano\nvisible: true\nlanguage: en\nlabel: docs\n---\n<!-- Reviewed at c4c45ce9a7a8f4aa6d88a32829755196a017f6a1 -->\n\n# Differences Between the Ouroborous Protocol Paper and the Implementation\n\nThe goal of this document is to outline the ways in which the Cardano SL\nimplementation differs from the specifications presented in the *Ouroboros*\nprotocol [paper](/glossary/#paper) and to clarify any outstanding questions \nafter reading the paper.\n\nThis document is divided into four parts:\n\n1.  *Clarifications* - clarifies any details that are not specified in the\n    paper, but are important for practical implementations.\n2.  *Modifications* - outlines elements that are specified in the paper, but are\n    implemented differently in Cardano SL.\n3.  *Added features* - briefly outlines new features which are not described\n    in the paper, but have been implemented in Cardano SL.\n4.  *Omissions* - lists topics described in the paper but are not yet implemented into\n    Cardano SL.\n<!-- end -->\n# Clarifications\nThis section outlines any topics that require clarifications. \n\n## Time, Slots, and Synchrony\n\nIn a basic model of the protocol time is divided into discrete units called\n*slots*. However, there are no details on how to obtain the current time value securely\nand with enough precision.\n\nIn Cardano SL, the current time value is obtained from a user's computer system time value.\n\nWe also have a feature to notify users if their system time is incorrect\n(we compare it with the time value that is obtained from NTP servers). This feature is planned for a future release.\n\n## Coin Tossing and Verifiable Secret Sharing\n\nThe paper suggests PVSS (Publicly Verifiable Secret Sharing) scheme by Schoenmakers for Cardano SL. However,\ncurrently Cardano SL uses [\"SCRAPE: Scalable Randomness Attested by\nPublic Entities\"](https://eprint.iacr.org/2017/216.pdf) PVSS scheme.\n\nOne of the challenges while using a VSS (Verifiable Secret Sharing) scheme is associating the\npublic key used for signing with the public key used for the VSS scheme\n(`VssPublicKey`). This is solved by introducing `VssCertificate`s. This\ncertificate is a signature given by a signing key for a pair consisting of\n`VssPublicKey` and the epoch until which this certificate is valid. Initially,\nall stakeholders with stake enough for participation in randomness generation\nhold certificates. When a new stakeholder with enough stake appears, or when an\nexisting certificate expires, a new certificate should be generated and\nsubmitted to the network. `VssCertificate`s are stored in blocks.\n\nPVSS scheme uses share verification information which also\nincludes a commitment to the secret. It is also used as a commitment in\nthe protocol. The PVSS scheme has been implemented over the elliptic curve\nsecp256r1. Please refer to [PVSS implementation in Cardano\nSL](/technical/pvss/) for more details.\n\n## Block Generation Time\n\nIn the paper, they do not state explicitly when a slot leader should\ngenerate a new block and send it to the network: it can be done at the beginning\nof a slot, at the end of a slot, in the middle of a slot, etc. In Cardano SL\nthere is a special constant called \"network diameter\" which approximates maximal time\nnecessary to broadcast a block to all nodes in the network. For example, if network\ndiameter is 3, then block is generated and announced 3 seconds before the end of a slot.\n\n## Stake Delegation\n\nDelegation scheme, as described in the paper, does not explicitly state whether proxy\nsigning certificates should be stored within the blockchain (though there is a\nsuggestion to store the revocation list in the blockchain). Without storing\nproxy signing certificates in the blockchain it is barely possible to consider\ndelegated stake in checking eligibility threshold. On the other hand, if all\ncertificates are stored in the blockchain, it may lead to a blockchain bloat\nwhen a big portion of blocks will be occupied by proxy certificates. Submitting\na certificate is free, so adversaries can generate as many certificates as they\nwant.\n\nThere are two types of delegation in Cardano SL: heavyweight and lightweight.\nThere is a threshold on stake that one has to posses in order to participate in\nheavyweight delegation. Proxy signing certificates from heavyweight delegation\nare stored within the blockchain. On the contrary, lightweight delegation is\navailable for everybody, but certificates are not stored within the blockchain\nand are not considered when checking eligibility threshold. As the paper suggests,\n*delegation-by-proxy* scheme is used.\n\nPlease read about [Stake Delegation in Cardano SL](/technical/delegation/) for\nimplementation details.\n\n# Modifications\n\n## Leader Selection Process\n\nIn the paper, Leader Selection Process is described as flipping a\n`(1 - p₁) … (1 - pⱼ₋₁) pⱼ`-biased coin to see whether the `j`-th stakeholder is\nselected as the leader of the given slot. Here `pⱼ` is probability of selecting the `j`-th\nstakeholder.\n\nIn Cardano SL, it is implemented in a slightly different way. `R` random\nnumbers in a range `[0 .. totalCoins]` are generated, where `R` is a number of\nslots in an epoch. Stakeholders occupy different subsegments on this range,\nproportional to their stakes. This way, each random number maps into stakeholder.\nAlso, as the paper suggests, a short (32-bits) seed is used for initializing PRG\ninstead of using `n ⌈log λ⌉` random bits.\n\nPlease read about [Leader Selection in Cardano SL](/technical/leader-selection/)\nfor implementation details.\n\n## Commitments, openings, shares sending\n\nTime of sending is randomized within a small interval. It is done to avoid network\noverload when all coin-tossing participants send their data at the same time.\nThis interval is chosen to be small enough for protocol to remain secure. If\nthis data is sent too late and there are many adversaries leading last few slots\nof a certain phase, it can happen that data will not be included into the block.\n\n## Multishares\n\nIn the paper, each stakeholder is presented as exactly one participant of the\nunderlying VSS scheme. However, it is natural that a stakeholder with more stake\nis more important than a stakeholder with less stake with regards to secret\nsharing. For instance, if three honest stakeholders control 60% of stake in\ntotal (each of them controls 20%) and there are 40 adversary stakeholders each\nhaving 1% of stake, then the adversary has full control over secret sharing.\n\nTo overcome this problem, a number of shares for each stakeholder proportional\nto their stake is generated in Cardano SL.\n\n## Randomness Generation Failure\n\nThe paper does not cover the situation when commitments cannot be recovered.\nHowever, a practical implementation should account for such scenarios.\nCardano SL implementation uses a seed consisting of all zeroes if there are no\ncommitments that could be recovered.\n\n# Added Features\n\n## Update System\n\nSee the article on [update system](/cardano/update-mechanism/).\n\n## Security of P2P\n\nSee the article on [P2P implementation and\nhardening](/technical/protocols/p2p/).\n\n# Omissions\n\nThe sections on *Input Endorsers* and *Incentive Structure* are not implemented\nyet. Those sections are to be implemented together with the pending research on\nSide-chains and released within the Side-chains release.\n",
        "type": "MarkdownRemark",
        "contentDigest": "cc481d43054e4ef3c99cd3a8eaae993c",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "doc_title": "Differences Between Paper and the Implementation",
        "path": "/en/cardano/differences-between-paper-and-the-implementation/",
        "group": "cardano",
        "visible": true,
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-04-differences.en.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-04-differences.en.md absPath of file"
      },
      "excerpt": "<!-- Reviewed at c4c45ce9a7a8f4aa6d88a32829755196a017f6a1 -->\n\n# Differences Between the Ouroborous Protocol Paper and the Implementation\n\nThe goal of this document is to outline the ways in which the Cardano SL\nimplementation differs from the specifications presented in the *Ouroboros*\nprotocol [paper](/glossary/#paper) and to clarify any outstanding questions \nafter reading the paper.\n\nThis document is divided into four parts:\n\n1.  *Clarifications* - clarifies any details that are not specified in the\n    paper, but are important for practical implementations.\n2.  *Modifications* - outlines elements that are specified in the paper, but are\n    implemented differently in Cardano SL.\n3.  *Added features* - briefly outlines new features which are not described\n    in the paper, but have been implemented in Cardano SL.\n4.  *Omissions* - lists topics described in the paper but are not yet implemented into\n    Cardano SL.\n",
      "rawMarkdownBody": "<!-- Reviewed at c4c45ce9a7a8f4aa6d88a32829755196a017f6a1 -->\n\n# Differences Between the Ouroborous Protocol Paper and the Implementation\n\nThe goal of this document is to outline the ways in which the Cardano SL\nimplementation differs from the specifications presented in the *Ouroboros*\nprotocol [paper](/glossary/#paper) and to clarify any outstanding questions \nafter reading the paper.\n\nThis document is divided into four parts:\n\n1.  *Clarifications* - clarifies any details that are not specified in the\n    paper, but are important for practical implementations.\n2.  *Modifications* - outlines elements that are specified in the paper, but are\n    implemented differently in Cardano SL.\n3.  *Added features* - briefly outlines new features which are not described\n    in the paper, but have been implemented in Cardano SL.\n4.  *Omissions* - lists topics described in the paper but are not yet implemented into\n    Cardano SL.\n<!-- end -->\n# Clarifications\nThis section outlines any topics that require clarifications. \n\n## Time, Slots, and Synchrony\n\nIn a basic model of the protocol time is divided into discrete units called\n*slots*. However, there are no details on how to obtain the current time value securely\nand with enough precision.\n\nIn Cardano SL, the current time value is obtained from a user's computer system time value.\n\nWe also have a feature to notify users if their system time is incorrect\n(we compare it with the time value that is obtained from NTP servers). This feature is planned for a future release.\n\n## Coin Tossing and Verifiable Secret Sharing\n\nThe paper suggests PVSS (Publicly Verifiable Secret Sharing) scheme by Schoenmakers for Cardano SL. However,\ncurrently Cardano SL uses [\"SCRAPE: Scalable Randomness Attested by\nPublic Entities\"](https://eprint.iacr.org/2017/216.pdf) PVSS scheme.\n\nOne of the challenges while using a VSS (Verifiable Secret Sharing) scheme is associating the\npublic key used for signing with the public key used for the VSS scheme\n(`VssPublicKey`). This is solved by introducing `VssCertificate`s. This\ncertificate is a signature given by a signing key for a pair consisting of\n`VssPublicKey` and the epoch until which this certificate is valid. Initially,\nall stakeholders with stake enough for participation in randomness generation\nhold certificates. When a new stakeholder with enough stake appears, or when an\nexisting certificate expires, a new certificate should be generated and\nsubmitted to the network. `VssCertificate`s are stored in blocks.\n\nPVSS scheme uses share verification information which also\nincludes a commitment to the secret. It is also used as a commitment in\nthe protocol. The PVSS scheme has been implemented over the elliptic curve\nsecp256r1. Please refer to [PVSS implementation in Cardano\nSL](/technical/pvss/) for more details.\n\n## Block Generation Time\n\nIn the paper, they do not state explicitly when a slot leader should\ngenerate a new block and send it to the network: it can be done at the beginning\nof a slot, at the end of a slot, in the middle of a slot, etc. In Cardano SL\nthere is a special constant called \"network diameter\" which approximates maximal time\nnecessary to broadcast a block to all nodes in the network. For example, if network\ndiameter is 3, then block is generated and announced 3 seconds before the end of a slot.\n\n## Stake Delegation\n\nDelegation scheme, as described in the paper, does not explicitly state whether proxy\nsigning certificates should be stored within the blockchain (though there is a\nsuggestion to store the revocation list in the blockchain). Without storing\nproxy signing certificates in the blockchain it is barely possible to consider\ndelegated stake in checking eligibility threshold. On the other hand, if all\ncertificates are stored in the blockchain, it may lead to a blockchain bloat\nwhen a big portion of blocks will be occupied by proxy certificates. Submitting\na certificate is free, so adversaries can generate as many certificates as they\nwant.\n\nThere are two types of delegation in Cardano SL: heavyweight and lightweight.\nThere is a threshold on stake that one has to posses in order to participate in\nheavyweight delegation. Proxy signing certificates from heavyweight delegation\nare stored within the blockchain. On the contrary, lightweight delegation is\navailable for everybody, but certificates are not stored within the blockchain\nand are not considered when checking eligibility threshold. As the paper suggests,\n*delegation-by-proxy* scheme is used.\n\nPlease read about [Stake Delegation in Cardano SL](/technical/delegation/) for\nimplementation details.\n\n# Modifications\n\n## Leader Selection Process\n\nIn the paper, Leader Selection Process is described as flipping a\n`(1 - p₁) … (1 - pⱼ₋₁) pⱼ`-biased coin to see whether the `j`-th stakeholder is\nselected as the leader of the given slot. Here `pⱼ` is probability of selecting the `j`-th\nstakeholder.\n\nIn Cardano SL, it is implemented in a slightly different way. `R` random\nnumbers in a range `[0 .. totalCoins]` are generated, where `R` is a number of\nslots in an epoch. Stakeholders occupy different subsegments on this range,\nproportional to their stakes. This way, each random number maps into stakeholder.\nAlso, as the paper suggests, a short (32-bits) seed is used for initializing PRG\ninstead of using `n ⌈log λ⌉` random bits.\n\nPlease read about [Leader Selection in Cardano SL](/technical/leader-selection/)\nfor implementation details.\n\n## Commitments, openings, shares sending\n\nTime of sending is randomized within a small interval. It is done to avoid network\noverload when all coin-tossing participants send their data at the same time.\nThis interval is chosen to be small enough for protocol to remain secure. If\nthis data is sent too late and there are many adversaries leading last few slots\nof a certain phase, it can happen that data will not be included into the block.\n\n## Multishares\n\nIn the paper, each stakeholder is presented as exactly one participant of the\nunderlying VSS scheme. However, it is natural that a stakeholder with more stake\nis more important than a stakeholder with less stake with regards to secret\nsharing. For instance, if three honest stakeholders control 60% of stake in\ntotal (each of them controls 20%) and there are 40 adversary stakeholders each\nhaving 1% of stake, then the adversary has full control over secret sharing.\n\nTo overcome this problem, a number of shares for each stakeholder proportional\nto their stake is generated in Cardano SL.\n\n## Randomness Generation Failure\n\nThe paper does not cover the situation when commitments cannot be recovered.\nHowever, a practical implementation should account for such scenarios.\nCardano SL implementation uses a seed consisting of all zeroes if there are no\ncommitments that could be recovered.\n\n# Added Features\n\n## Update System\n\nSee the article on [update system](/cardano/update-mechanism/).\n\n## Security of P2P\n\nSee the article on [P2P implementation and\nhardening](/technical/protocols/p2p/).\n\n# Omissions\n\nThe sections on *Input Endorsers* and *Incentive Structure* are not implemented\nyet. Those sections are to be implemented together with the pending research on\nSide-chains and released within the Side-chains release.\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-04-differences.en.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-07-addresses.en.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-07-addresses.en.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-07-addresses.en.md absPath of file",
      "internal": {
        "content": "---\ndoc_title: Addresses\npath: /en/cardano/addresses/\ngroup: cardano\nlanguage: en\nlabel: docs\n---\n<!-- Reviewed at a6a1cdf72c7e167a13f500c0679c01fe4cfa0ca8 -->\n\n# Addresses in Cardano SL\n\nTo send and receive value, addresses are used in virtually all cryptocurrencies.\nCardano SL supports 3 main types of addresses:\n\n1.  public key address,\n2.  script address,\n3.  redeem address.\n\nPublic key address is a normal address like in any other cryptocurrency. It is\na hashed public key. Read more about public key addresses [below](#public-key-addresses).\n\nScript address is used in so-called \"Pay to Script Hash\" (P2SH) transactions.\nIt operates autonomously and acts somewhat like a bank deposit: you can send\nmoney to it, but in order to redeem it you have to satisfy certain conditions,\ndetermined by a script associated with the address. The address itself contains\nthe hash of the serialized script. Read more about P2SH [below](#pay-to-script-hash).\n<!-- end -->\nRedeem address is a special type of address for ADA redemption. Read more about redeem\naddresses [below](#redeem-addresses).\n\nMoreover, Cardano SL support `Unknown` address type as well. This type will allow us to use\ncustom types of addresses in the future.\n\n## What Does an Address Look Like?\n\nAddresses are `base58`-encoded bytestrings, for example:\n\n```\nAe2tdPwUPEZKmwoy3AU3cXb5Chnasj6mvVNxV1H11997q3VW5ihbSfQwGpm\n```\n\n### Encoding\n\n`base58` encoding is the same one as used in Bitcoin. It uses a 58-symbol alphabet\nto encode data, hence the name. Here is the alphabet we are using:\n\n```\n123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\n```\n\nIt avoids both non-alphanumeric characters and letters which might look\nambiguous when printed (`0`, `O`, `I`, `l`); therefore it is suitable for human\nusers who enter the data manually, copying it from some visual source, and also\nallows easy copy and paste by double-clicking which usually selects the whole\nstring.\n\n## Public Key Addresses\n\nAs mentioned in the [Introduction](/introduction/#you-own-your-money), the wallets\nyou can see in the user interface are a convenient representation of the fact that\nyou own a secret key to spend money in this particular wallet. But how is such\nspending verified by the network and how can you receive money from others? The\nanswer is that along with the secret key which is used to control the value in\nyour wallets, a public key is generated. This public component can be known by\nanybody, hence the name.\n\nA public key address contains the hash of this public key.\n\nPublic keys are also used for verifying your identity when you create a\ntransaction and other auxiliary purposes.\n\n## Pay to Script Hash\n\nThe idea of Pay to Script Hash (P2SH) is to provide a lot of flexibility for\nformulating complex rules for spending money. Instead of sending a transaction\nto a public key address, we create a validator script that can take a so-called\nredemption script as a parameter. To redeem funds, we pass the redemption script\nto the validator and evaluate it. If it evaluates to `success`, money is sent as\nspecified by the redeemer. Otherwise nothing happens.\n\nTo quote Bitcoin Wiki,\n\n> Using P2SH, you can send bitcoins to an address that is secured in various\n> unusual ways without knowing anything about the details of how the security is\n> set up. The recipient might need the signatures of several people to spend\n> these bitcoins, or a password might be required, or the requirements could be\n> completely unique.\n\n## Redeem Addresses\n\nRedeem addresses are Pay To PubKey Hash (P2PKH). Such an address contains the hash\nof redeem public key, and this key is actually [Ed25519](http://ed25519.cr.yp.to/)\npublic key.\n\n## Other Address Types\n\nIn the future, we may use the update system to introduce other address types. Please\n[see more](/cardano/update-mechanism/#soft-fork-updates) on extending the system in\nnon-breaking fashion.\n\n## Address Structure\n\nAddress consists of 3 parts:\n\n*  address root,\n*  address attributes,\n*  address type.\n\nWe can imagine an address as a JSON-like structure, for example:\n\n```\nAddress {\n    addrRoot = AbstractHash e63175c654dfd93a9290342a067158dc0f57a1108ddbd8cace3839bd,\n    addrAttributes = Attributes {\n        data: AddrAttributes {\n            aaPkDerivationPath = Nothing,\n            aaStakeDistribution = BootstrapEraDistr\n        } \n    },\n    addrType = ATPubKey\n}\n```\n\n`addrRoot` is the BLAKE2b-224 hash of the tuple made from `addrType`, `addrSpendingData` and `addrAttributes`.\n\n`addrSpendingData` is a special value which is bound to an address and must be revealed in order to spend coins belonging to\nthis address. For example, for public key address this value contains the public key. In this case, it is impossible to change\naddress attributes without knowing of the public key because if the attributes have been changed the whole address becomes\ninvalid.\n\n`addrAttributes` include important attributes of each address: derivation path and stake distribution.\n\nFor more info about derivation path please read [HD Wallets in Cardano SL](https://cardanodocs.com/technical/hd-wallets/) chapter.\n\nFor more info about stake distribution please read [Transactions in Cardano SL](https://cardanodocs.com/cardano/transactions/#stake-distribution)\nchapter.\n\nValue of `addrType` corresponds to address type as was mentioned above, in this example it is a public key address.\n\n### Length\n\nAddresses may have different lengths depending on address type and additional data in it.\n\nFor example, this address\n\n```\nAe2tdPwUPEZKmwoy3AU3cXb5Chnasj6mvVNxV1H11997q3VW5ihbSfQwGpm\n```\n\nand this one\n\n```\n4swhHtxKapQbj3TZEipgtp7NQzcRWDYqCxXYoPQWjGyHmhxS1w1TjUEszCQT1sQucGwmPQMYdv1FYs3d51KgoubviPBf\n```\n\nare both public key addresses.\n",
        "type": "MarkdownRemark",
        "contentDigest": "3b6560dd95b09af54b16218f3fdf4681",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "doc_title": "Addresses",
        "path": "/en/cardano/addresses/",
        "group": "cardano",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-07-addresses.en.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-07-addresses.en.md absPath of file"
      },
      "excerpt": "<!-- Reviewed at a6a1cdf72c7e167a13f500c0679c01fe4cfa0ca8 -->\n\n# Addresses in Cardano SL\n\nTo send and receive value, addresses are used in virtually all cryptocurrencies.\nCardano SL supports 3 main types of addresses:\n\n1.  public key address,\n2.  script address,\n3.  redeem address.\n\nPublic key address is a normal address like in any other cryptocurrency. It is\na hashed public key. Read more about public key addresses [below](#public-key-addresses).\n\nScript address is used in so-called \"Pay to Script Hash\" (P2SH) transactions.\nIt operates autonomously and acts somewhat like a bank deposit: you can send\nmoney to it, but in order to redeem it you have to satisfy certain conditions,\ndetermined by a script associated with the address. The address itself contains\nthe hash of the serialized script. Read more about P2SH [below](#pay-to-script-hash).\n",
      "rawMarkdownBody": "<!-- Reviewed at a6a1cdf72c7e167a13f500c0679c01fe4cfa0ca8 -->\n\n# Addresses in Cardano SL\n\nTo send and receive value, addresses are used in virtually all cryptocurrencies.\nCardano SL supports 3 main types of addresses:\n\n1.  public key address,\n2.  script address,\n3.  redeem address.\n\nPublic key address is a normal address like in any other cryptocurrency. It is\na hashed public key. Read more about public key addresses [below](#public-key-addresses).\n\nScript address is used in so-called \"Pay to Script Hash\" (P2SH) transactions.\nIt operates autonomously and acts somewhat like a bank deposit: you can send\nmoney to it, but in order to redeem it you have to satisfy certain conditions,\ndetermined by a script associated with the address. The address itself contains\nthe hash of the serialized script. Read more about P2SH [below](#pay-to-script-hash).\n<!-- end -->\nRedeem address is a special type of address for ADA redemption. Read more about redeem\naddresses [below](#redeem-addresses).\n\nMoreover, Cardano SL support `Unknown` address type as well. This type will allow us to use\ncustom types of addresses in the future.\n\n## What Does an Address Look Like?\n\nAddresses are `base58`-encoded bytestrings, for example:\n\n```\nAe2tdPwUPEZKmwoy3AU3cXb5Chnasj6mvVNxV1H11997q3VW5ihbSfQwGpm\n```\n\n### Encoding\n\n`base58` encoding is the same one as used in Bitcoin. It uses a 58-symbol alphabet\nto encode data, hence the name. Here is the alphabet we are using:\n\n```\n123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\n```\n\nIt avoids both non-alphanumeric characters and letters which might look\nambiguous when printed (`0`, `O`, `I`, `l`); therefore it is suitable for human\nusers who enter the data manually, copying it from some visual source, and also\nallows easy copy and paste by double-clicking which usually selects the whole\nstring.\n\n## Public Key Addresses\n\nAs mentioned in the [Introduction](/introduction/#you-own-your-money), the wallets\nyou can see in the user interface are a convenient representation of the fact that\nyou own a secret key to spend money in this particular wallet. But how is such\nspending verified by the network and how can you receive money from others? The\nanswer is that along with the secret key which is used to control the value in\nyour wallets, a public key is generated. This public component can be known by\nanybody, hence the name.\n\nA public key address contains the hash of this public key.\n\nPublic keys are also used for verifying your identity when you create a\ntransaction and other auxiliary purposes.\n\n## Pay to Script Hash\n\nThe idea of Pay to Script Hash (P2SH) is to provide a lot of flexibility for\nformulating complex rules for spending money. Instead of sending a transaction\nto a public key address, we create a validator script that can take a so-called\nredemption script as a parameter. To redeem funds, we pass the redemption script\nto the validator and evaluate it. If it evaluates to `success`, money is sent as\nspecified by the redeemer. Otherwise nothing happens.\n\nTo quote Bitcoin Wiki,\n\n> Using P2SH, you can send bitcoins to an address that is secured in various\n> unusual ways without knowing anything about the details of how the security is\n> set up. The recipient might need the signatures of several people to spend\n> these bitcoins, or a password might be required, or the requirements could be\n> completely unique.\n\n## Redeem Addresses\n\nRedeem addresses are Pay To PubKey Hash (P2PKH). Such an address contains the hash\nof redeem public key, and this key is actually [Ed25519](http://ed25519.cr.yp.to/)\npublic key.\n\n## Other Address Types\n\nIn the future, we may use the update system to introduce other address types. Please\n[see more](/cardano/update-mechanism/#soft-fork-updates) on extending the system in\nnon-breaking fashion.\n\n## Address Structure\n\nAddress consists of 3 parts:\n\n*  address root,\n*  address attributes,\n*  address type.\n\nWe can imagine an address as a JSON-like structure, for example:\n\n```\nAddress {\n    addrRoot = AbstractHash e63175c654dfd93a9290342a067158dc0f57a1108ddbd8cace3839bd,\n    addrAttributes = Attributes {\n        data: AddrAttributes {\n            aaPkDerivationPath = Nothing,\n            aaStakeDistribution = BootstrapEraDistr\n        } \n    },\n    addrType = ATPubKey\n}\n```\n\n`addrRoot` is the BLAKE2b-224 hash of the tuple made from `addrType`, `addrSpendingData` and `addrAttributes`.\n\n`addrSpendingData` is a special value which is bound to an address and must be revealed in order to spend coins belonging to\nthis address. For example, for public key address this value contains the public key. In this case, it is impossible to change\naddress attributes without knowing of the public key because if the attributes have been changed the whole address becomes\ninvalid.\n\n`addrAttributes` include important attributes of each address: derivation path and stake distribution.\n\nFor more info about derivation path please read [HD Wallets in Cardano SL](https://cardanodocs.com/technical/hd-wallets/) chapter.\n\nFor more info about stake distribution please read [Transactions in Cardano SL](https://cardanodocs.com/cardano/transactions/#stake-distribution)\nchapter.\n\nValue of `addrType` corresponds to address type as was mentioned above, in this example it is a public key address.\n\n### Length\n\nAddresses may have different lengths depending on address type and additional data in it.\n\nFor example, this address\n\n```\nAe2tdPwUPEZKmwoy3AU3cXb5Chnasj6mvVNxV1H11997q3VW5ihbSfQwGpm\n```\n\nand this one\n\n```\n4swhHtxKapQbj3TZEipgtp7NQzcRWDYqCxXYoPQWjGyHmhxS1w1TjUEszCQT1sQucGwmPQMYdv1FYs3d51KgoubviPBf\n```\n\nare both public key addresses.\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-07-addresses.en.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-13-balance-and-stake.en.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-13-balance-and-stake.en.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-13-balance-and-stake.en.md absPath of file",
      "internal": {
        "content": "---\ndoc_title: Balance and Stake\npath: /en/cardano/balance-and-stake/\ngroup: cardano\nlanguage: en\nlabel: docs\n---\n<!-- Reviewed at e070e675764738b5190b2f93424de403f1937216 -->\n\n# How Balance and Stake work within the Cardano SL\n\nThere are two important concepts within the Cardano SL: these are **balance** and **stake**. This chapter\nexplains the difference between these two concepts and how they both function.\n\n### Balance\n\nBalance is the real amount of coins that each user has. When you install a Daedalus wallet on your computer\nand perform the [Ada redemption](/timeline/bootstrap/) process, you receive an amount of Ada. This amount of\nAda is called your balance. You can send an amount of Ada (within this balance), to other users, as well as\nreceive any amount of Ada from other users.\n<!-- end -->\nThus, when we refer to the balance, we are talking about the user's actual money.\n\n### Stake\n\nUnlike balance (the real amount of money you have),\nstake is a key element of the entire financial power of Cardano SL. Stake gives a user the\npower to control various Cardano SL algorithm parts, for example: being the [slot leader](/glossary/#slot-leader),\nvoting in the [Update system](/cardano/update-mechanism/), taking part in [MPC/SSC](/technical/leader-selection/#follow-the-satoshi). This is why all thresholds in the Cardano SL protocol are expressed in terms of stake, rather than balance.\n\nThus, when we refer to the stake, we are talking about the user's ability to control the actual Cardano SL. For more information about stake, please refer to the following [paper](/glossary/#paper). \n\n### The Relationship Between Balance and Stake\n\nEvery coin in Cardano SL is associated with a balance and with a stake. We use [transaction output](/cardano/transactions/#design)\nto associate coin `C` with a user's balance, and we use [stake distribution](/cardano/transactions/#stake-distribution)\nto associate coin `C` with a user's stake.\n\nNote: It is possible to change the association between coin and stake using what is known as [stake delegation](/technical/delegation/).\n",
        "type": "MarkdownRemark",
        "contentDigest": "0b1f6043995db56edf36654f64d6d712",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "doc_title": "Balance and Stake",
        "path": "/en/cardano/balance-and-stake/",
        "group": "cardano",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-13-balance-and-stake.en.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-13-balance-and-stake.en.md absPath of file"
      },
      "excerpt": "<!-- Reviewed at e070e675764738b5190b2f93424de403f1937216 -->\n\n# How Balance and Stake work within the Cardano SL\n\nThere are two important concepts within the Cardano SL: these are **balance** and **stake**. This chapter\nexplains the difference between these two concepts and how they both function.\n\n### Balance\n\nBalance is the real amount of coins that each user has. When you install a Daedalus wallet on your computer\nand perform the [Ada redemption](/timeline/bootstrap/) process, you receive an amount of Ada. This amount of\nAda is called your balance. You can send an amount of Ada (within this balance), to other users, as well as\nreceive any amount of Ada from other users.\n",
      "rawMarkdownBody": "<!-- Reviewed at e070e675764738b5190b2f93424de403f1937216 -->\n\n# How Balance and Stake work within the Cardano SL\n\nThere are two important concepts within the Cardano SL: these are **balance** and **stake**. This chapter\nexplains the difference between these two concepts and how they both function.\n\n### Balance\n\nBalance is the real amount of coins that each user has. When you install a Daedalus wallet on your computer\nand perform the [Ada redemption](/timeline/bootstrap/) process, you receive an amount of Ada. This amount of\nAda is called your balance. You can send an amount of Ada (within this balance), to other users, as well as\nreceive any amount of Ada from other users.\n<!-- end -->\nThus, when we refer to the balance, we are talking about the user's actual money.\n\n### Stake\n\nUnlike balance (the real amount of money you have),\nstake is a key element of the entire financial power of Cardano SL. Stake gives a user the\npower to control various Cardano SL algorithm parts, for example: being the [slot leader](/glossary/#slot-leader),\nvoting in the [Update system](/cardano/update-mechanism/), taking part in [MPC/SSC](/technical/leader-selection/#follow-the-satoshi). This is why all thresholds in the Cardano SL protocol are expressed in terms of stake, rather than balance.\n\nThus, when we refer to the stake, we are talking about the user's ability to control the actual Cardano SL. For more information about stake, please refer to the following [paper](/glossary/#paper). \n\n### The Relationship Between Balance and Stake\n\nEvery coin in Cardano SL is associated with a balance and with a stake. We use [transaction output](/cardano/transactions/#design)\nto associate coin `C` with a user's balance, and we use [stake distribution](/cardano/transactions/#stake-distribution)\nto associate coin `C` with a user's stake.\n\nNote: It is possible to change the association between coin and stake using what is known as [stake delegation](/technical/delegation/).\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-13-balance-and-stake.en.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-19-topology.en.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-19-topology.en.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-19-topology.en.md absPath of file",
      "internal": {
        "content": "---\ndoc_title: Topology\npath: /en/cardano/topology/\ngroup: cardano\nlanguage: en\nlabel: docs\n---\n<!-- Reviewed at ba744590c89d8ffa6d6f0919ec11f52202a6d8f2 -->\n\n# Cardano SL Network Topology\n\nThis is an overview of Cardano SL network topology.\n\n## Nodes Groups\n\nThough Cardano SL is designed and implemented as a distributed network, for purpose of DDoS protection\nadditional facilities were added to Cardano SL implementation and topology. Currently all nodes are\ndivided into 3 groups:\n\n1. Core\n2. Relay\n3. Edge\n\nLet's describe each of these groups.\n<!-- end -->\n### Core Node\n\nCore nodes are the most important ones.\n\nAs described [here](/timeline/bootstrap/#stake-locking), for Byron release we will have stake effectively\nlocked on federation of core nodes. Only these few nodes can be [slot leaders](/glossary/#slot-leader), so\nonly these nodes will be able to create new blocks over this period. This is essential for network core nodes to\noperate well and continue maintaining the blockchain. We also bring additional security level around this set\nof core nodes: we put them inside a perimeter of relay nodes, so core nodes are isolated from the public\ninternet and only relay nodes are allowed to communicate with core nodes. This is how we reduce probability\nfor them being attacked.\n\nPlease note that core nodes never create currency transactions (only edge nodes can do it, see below).\n\n### Relay Node\n\nYou can think of relay nodes as of proxy between core nodes and public internet.\n\nSince relay nodes are not isolated, they can be attacked, but they are in principle stateless and do not have\nany stake, so they can be moved, or their number can be increased. If relays are taken down, this does deny\nservice, but the integrity of the core nodes (and the blockchain) should not be compromised.\n\nSince relay nodes do not have any stake, they cannot be slot leaders. Moreover, they cannot create currency\ntransactions as well.\n\nRelay nodes are fully under the control of the federated committee of initial stakeholders.\n\n### Edge Node\n\nEdge node is a simple node that anyone can run on their computer. Only these nodes can create currency\ntransactions.\n\nSince edge nodes do not have any stake, they cannot be slot leaders as well as relay nodes. Furthermore,\nedge nodes cannot directly communicate with core nodes, only with relay nodes and with other edge nodes.\n",
        "type": "MarkdownRemark",
        "contentDigest": "4ba2441ef5e02513b38bef59b73b97e1",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "doc_title": "Topology",
        "path": "/en/cardano/topology/",
        "group": "cardano",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-19-topology.en.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-19-topology.en.md absPath of file"
      },
      "excerpt": "<!-- Reviewed at ba744590c89d8ffa6d6f0919ec11f52202a6d8f2 -->\n\n# Cardano SL Network Topology\n\nThis is an overview of Cardano SL network topology.\n\n## Nodes Groups\n\nThough Cardano SL is designed and implemented as a distributed network, for purpose of DDoS protection\nadditional facilities were added to Cardano SL implementation and topology. Currently all nodes are\ndivided into 3 groups:\n\n1. Core\n2. Relay\n3. Edge\n\nLet's describe each of these groups.\n",
      "rawMarkdownBody": "<!-- Reviewed at ba744590c89d8ffa6d6f0919ec11f52202a6d8f2 -->\n\n# Cardano SL Network Topology\n\nThis is an overview of Cardano SL network topology.\n\n## Nodes Groups\n\nThough Cardano SL is designed and implemented as a distributed network, for purpose of DDoS protection\nadditional facilities were added to Cardano SL implementation and topology. Currently all nodes are\ndivided into 3 groups:\n\n1. Core\n2. Relay\n3. Edge\n\nLet's describe each of these groups.\n<!-- end -->\n### Core Node\n\nCore nodes are the most important ones.\n\nAs described [here](/timeline/bootstrap/#stake-locking), for Byron release we will have stake effectively\nlocked on federation of core nodes. Only these few nodes can be [slot leaders](/glossary/#slot-leader), so\nonly these nodes will be able to create new blocks over this period. This is essential for network core nodes to\noperate well and continue maintaining the blockchain. We also bring additional security level around this set\nof core nodes: we put them inside a perimeter of relay nodes, so core nodes are isolated from the public\ninternet and only relay nodes are allowed to communicate with core nodes. This is how we reduce probability\nfor them being attacked.\n\nPlease note that core nodes never create currency transactions (only edge nodes can do it, see below).\n\n### Relay Node\n\nYou can think of relay nodes as of proxy between core nodes and public internet.\n\nSince relay nodes are not isolated, they can be attacked, but they are in principle stateless and do not have\nany stake, so they can be moved, or their number can be increased. If relays are taken down, this does deny\nservice, but the integrity of the core nodes (and the blockchain) should not be compromised.\n\nSince relay nodes do not have any stake, they cannot be slot leaders. Moreover, they cannot create currency\ntransactions as well.\n\nRelay nodes are fully under the control of the federated committee of initial stakeholders.\n\n### Edge Node\n\nEdge node is a simple node that anyone can run on their computer. Only these nodes can create currency\ntransactions.\n\nSince edge nodes do not have any stake, they cannot be slot leaders as well as relay nodes. Furthermore,\nedge nodes cannot directly communicate with core nodes, only with relay nodes and with other edge nodes.\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-19-topology.en.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-01-monetary-policy.en.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-01-monetary-policy.en.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-01-monetary-policy.en.md absPath of file",
      "internal": {
        "content": "---\ndoc_title: Monetary Policy\npath: /en/cardano/monetary-policy/\ngroup: cardano\nlanguage: en\nlabel: docs\n---\n<!-- Reviewed at 1bd2a2f5979233f4f50a7e66ab4e1819ac486400 -->\n\n# Cardano Monetary Policy\n\n<div  markdown=\"1\">\nThis section defines the Cardano monetary policy.\n\n### THE LAUNCH OF CARDANO AND AVAILABILITY OF ADA\n\nDuring the sale that occurred at the launch, 25,927,070,538 Ada were sold. An amount equal to 20% of the total Ada vouchers were sold during the sale period, equating to 5,185,414,108 units. These Ada vouchers were generated and distributed to three entities of the Cardano community, each members of the Technical and Business Development Pool, namely: [IOHK](https://iohk.io), [Emurgo](http://emurgo.io/) and the [Cardano Foundation](https://cardanofoundation.org/). The total amount of Ada that was made available at the launch is equal to 31,112,484,646 ADA.\n<!-- end -->\n### ADA SUPPLY CAP\nAda is capped at an arbitrary 45,000,000,000, or forty-five billion Ada.\n\n### ADA TO BE ISSUED DURING THE OPERATION OF THE CARDANO PROTOCOL\nThe remaining Ada, 13,887,515,354, will be issued after the launch through minting.\n\nNote: There will never be more than 45,000,000,000 Ada in circulation.\n</div>\n\n\n## TREASURY AND FEES\n<div  markdown=\"1\">\nThis section outlines treasury plans and associated fees.\n\n### BOOTSTRAP ERA (LAUNCH)\nCardano is currently in its bootstrapping phase. During this phase, fees are not being collected and no Ada is being minted. Fees from this phase will be collected in the future and they will be destroyed.\n\n### TREASURY\nCardano will have a treasury going forward. This treasury will be endowed via some portion (yet to be defined), of newly-minted Ada and transaction fees. The treasury will be governed by Ada holders.\n\n### MINIMAL FEE (Current Calculation)\nThe minimal fee = 0.155381 ADA + 0.000043946 (ADA/Byte) x size-of-transaction.\n\nNote: Fee calculations and incentives are areas that are currently being researched and their development is in progress.\n\n### DENOMINATIONS\n- 1 ADA = 1,000,000 Lovelaces\n- 1 Lovelace = 1/1,000,000 Ada\n- Ada has six decimal places.\n- 1.000000 = 1 ADA\n- 0.000001 = 1 Lovelace\n\nIn terms of money units, there are two points of consideration. Firstly in Japan, yen amounts are much larger, where 10,000 yen is similar to a 100 dollar bill. Factoring this into unit calculations, the amount changes from 25 billion Ada to 250 million. Remember that a unit of Ada is equal to a million Lovelaces (the smallest unit), and after factoring in this adjustment, equates to a total of 2.5 million. Secondly, Ada has six digits from the decimal point, rather than eight digits for Bitcoin. \n\n\n</div>\n",
        "type": "MarkdownRemark",
        "contentDigest": "ee2419d27640a4a9db458ac8c503d407",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "doc_title": "Monetary Policy",
        "path": "/en/cardano/monetary-policy/",
        "group": "cardano",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-01-monetary-policy.en.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-01-monetary-policy.en.md absPath of file"
      },
      "excerpt": "<!-- Reviewed at 1bd2a2f5979233f4f50a7e66ab4e1819ac486400 -->\n\n# Cardano Monetary Policy\n\n<div  markdown=\"1\">\nThis section defines the Cardano monetary policy.\n\n### THE LAUNCH OF CARDANO AND AVAILABILITY OF ADA\n\nDuring the sale that occurred at the launch, 25,927,070,538 Ada were sold. An amount equal to 20% of the total Ada vouchers were sold during the sale period, equating to 5,185,414,108 units. These Ada vouchers were generated and distributed to three entities of the Cardano community, each members of the Technical and Business Development Pool, namely: [IOHK](https://iohk.io), [Emurgo](http://emurgo.io/) and the [Cardano Foundation](https://cardanofoundation.org/). The total amount of Ada that was made available at the launch is equal to 31,112,484,646 ADA.\n",
      "rawMarkdownBody": "<!-- Reviewed at 1bd2a2f5979233f4f50a7e66ab4e1819ac486400 -->\n\n# Cardano Monetary Policy\n\n<div  markdown=\"1\">\nThis section defines the Cardano monetary policy.\n\n### THE LAUNCH OF CARDANO AND AVAILABILITY OF ADA\n\nDuring the sale that occurred at the launch, 25,927,070,538 Ada were sold. An amount equal to 20% of the total Ada vouchers were sold during the sale period, equating to 5,185,414,108 units. These Ada vouchers were generated and distributed to three entities of the Cardano community, each members of the Technical and Business Development Pool, namely: [IOHK](https://iohk.io), [Emurgo](http://emurgo.io/) and the [Cardano Foundation](https://cardanofoundation.org/). The total amount of Ada that was made available at the launch is equal to 31,112,484,646 ADA.\n<!-- end -->\n### ADA SUPPLY CAP\nAda is capped at an arbitrary 45,000,000,000, or forty-five billion Ada.\n\n### ADA TO BE ISSUED DURING THE OPERATION OF THE CARDANO PROTOCOL\nThe remaining Ada, 13,887,515,354, will be issued after the launch through minting.\n\nNote: There will never be more than 45,000,000,000 Ada in circulation.\n</div>\n\n\n## TREASURY AND FEES\n<div  markdown=\"1\">\nThis section outlines treasury plans and associated fees.\n\n### BOOTSTRAP ERA (LAUNCH)\nCardano is currently in its bootstrapping phase. During this phase, fees are not being collected and no Ada is being minted. Fees from this phase will be collected in the future and they will be destroyed.\n\n### TREASURY\nCardano will have a treasury going forward. This treasury will be endowed via some portion (yet to be defined), of newly-minted Ada and transaction fees. The treasury will be governed by Ada holders.\n\n### MINIMAL FEE (Current Calculation)\nThe minimal fee = 0.155381 ADA + 0.000043946 (ADA/Byte) x size-of-transaction.\n\nNote: Fee calculations and incentives are areas that are currently being researched and their development is in progress.\n\n### DENOMINATIONS\n- 1 ADA = 1,000,000 Lovelaces\n- 1 Lovelace = 1/1,000,000 Ada\n- Ada has six decimal places.\n- 1.000000 = 1 ADA\n- 0.000001 = 1 Lovelace\n\nIn terms of money units, there are two points of consideration. Firstly in Japan, yen amounts are much larger, where 10,000 yen is similar to a 100 dollar bill. Factoring this into unit calculations, the amount changes from 25 billion Ada to 250 million. Remember that a unit of Ada is equal to a million Lovelaces (the smallest unit), and after factoring in this adjustment, equates to a total of 2.5 million. Secondly, Ada has six digits from the decimal point, rather than eight digits for Bitcoin. \n\n\n</div>\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-01-monetary-policy.en.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-02-transaction-fees.en.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-02-transaction-fees.en.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-02-transaction-fees.en.md absPath of file",
      "internal": {
        "content": "---\ndoc_title: Transaction Fees\npath: /en/cardano/transaction-fees/\ngroup: cardano\nlanguage: en\nlabel: docs\n---\n\n# Transaction Fees in Cardano SL\n\n## Motivation\n\nThere are two main reasons why transaction fees are needed for Cardano SL:\n\n1.  People who run full Cardano SL nodes spend time, money and effort to run the protocol, for which they should\n    be compensated and rewarded. In contrast to Bitcoin, where new currency is created with each mined block,\n    in Cardano SL, transaction fees are the only source of income for participants in the protocol.\n2.  The second reason is the prevention of DDoS (Distributed Denial of Service) attacks. In a DDoS attack, an attacker\n    tries to flood the network with dummy transactions, and if he has to pay a sufficiently high fee for each of those\n    dummy transactions, this form of attack will become prohibitively expensive for him.\n<!-- end -->\n## How transaction fees work\n\nWhenever somebody wants to transfer an amount of Ada, some minimal fees are computed for that transaction. In order for\nthe transaction to be valid, these minimal fees have to be included, although the sender is free to pay higher fees if\nhe so wishes.\n\nPlease also read about transaction distribution [below](#transaction-fees-distribution).\n\n## Minimal transaction fees\n\nThe minimal fees for a transaction are calculated according to the formula:\n\n```\na + b × size\n```\n\nwhere:\n\n*  `a` is a special constant, at the moment it is 0.155381 ADA;\n*  `b` is a special constant, at the moment it is 0.000043946 ADA/byte;\n*  `size` is the size of the transaction in bytes.\n\nThis means that each transaction costs at least 0.155381 ADA, with an additional cost of 0.000043946 ADA per byte of\ntransaction size. For example, a transaction of size 200 bytes (a fairly typical size) costs:\n\n```\n0.155381 ADA + 0.000043946 ADA/byte × 200 byte = 0.1641702 ADA.\n```\n\nThe reason for having parameter `a` is the prevention of DDoS attacks mentioned above: even a very small dummy\ntransaction should cost enough to hurt an attacker who tries to generate many thousands of them.\n\nParameter `b` has been introduced to reflect actual costs: storing larger transactions needs more computer memory\nthan storing smaller transactions, so larger transactions should be more expensive than smaller ones.\n\nAlthough particular values for parameters `a` and `b` were calculated, these values will probably be adjusted in\nfuture to better reflect actual costs.\n\n## Transaction fees distribution\n\nAll transaction fees of a given [epoch](https://cardanodocs.com/glossary/#epoch) are collected in a virtual pool,\nand the idea is to then redistribute the money from that pool amongst people who were elected [slot leaders](https://cardanodocs.com/glossary/#slot-leader)\nby the PoS-algorithm during that epoch and who created blocks.\n\nAt this stage of Cardano SL, where all blocks are created by nodes operated by IOHK and our partners, fees are\nalready collected (to prevent DDoS attacks), but they will not be distributed and instead will be burnt.\n\nAs soon as Cardano SL enters its next, [fully decentralized stage](https://cardanoroadmap.com/), fees will be\ndistributed as described above.\n",
        "type": "MarkdownRemark",
        "contentDigest": "4024837d47784988cd359b4635a1ca5d",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "doc_title": "Transaction Fees",
        "path": "/en/cardano/transaction-fees/",
        "group": "cardano",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-02-transaction-fees.en.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-02-transaction-fees.en.md absPath of file"
      },
      "excerpt": "\n# Transaction Fees in Cardano SL\n\n## Motivation\n\nThere are two main reasons why transaction fees are needed for Cardano SL:\n\n1.  People who run full Cardano SL nodes spend time, money and effort to run the protocol, for which they should\n    be compensated and rewarded. In contrast to Bitcoin, where new currency is created with each mined block,\n    in Cardano SL, transaction fees are the only source of income for participants in the protocol.\n2.  The second reason is the prevention of DDoS (Distributed Denial of Service) attacks. In a DDoS attack, an attacker\n    tries to flood the network with dummy transactions, and if he has to pay a sufficiently high fee for each of those\n    dummy transactions, this form of attack will become prohibitively expensive for him.\n",
      "rawMarkdownBody": "\n# Transaction Fees in Cardano SL\n\n## Motivation\n\nThere are two main reasons why transaction fees are needed for Cardano SL:\n\n1.  People who run full Cardano SL nodes spend time, money and effort to run the protocol, for which they should\n    be compensated and rewarded. In contrast to Bitcoin, where new currency is created with each mined block,\n    in Cardano SL, transaction fees are the only source of income for participants in the protocol.\n2.  The second reason is the prevention of DDoS (Distributed Denial of Service) attacks. In a DDoS attack, an attacker\n    tries to flood the network with dummy transactions, and if he has to pay a sufficiently high fee for each of those\n    dummy transactions, this form of attack will become prohibitively expensive for him.\n<!-- end -->\n## How transaction fees work\n\nWhenever somebody wants to transfer an amount of Ada, some minimal fees are computed for that transaction. In order for\nthe transaction to be valid, these minimal fees have to be included, although the sender is free to pay higher fees if\nhe so wishes.\n\nPlease also read about transaction distribution [below](#transaction-fees-distribution).\n\n## Minimal transaction fees\n\nThe minimal fees for a transaction are calculated according to the formula:\n\n```\na + b × size\n```\n\nwhere:\n\n*  `a` is a special constant, at the moment it is 0.155381 ADA;\n*  `b` is a special constant, at the moment it is 0.000043946 ADA/byte;\n*  `size` is the size of the transaction in bytes.\n\nThis means that each transaction costs at least 0.155381 ADA, with an additional cost of 0.000043946 ADA per byte of\ntransaction size. For example, a transaction of size 200 bytes (a fairly typical size) costs:\n\n```\n0.155381 ADA + 0.000043946 ADA/byte × 200 byte = 0.1641702 ADA.\n```\n\nThe reason for having parameter `a` is the prevention of DDoS attacks mentioned above: even a very small dummy\ntransaction should cost enough to hurt an attacker who tries to generate many thousands of them.\n\nParameter `b` has been introduced to reflect actual costs: storing larger transactions needs more computer memory\nthan storing smaller transactions, so larger transactions should be more expensive than smaller ones.\n\nAlthough particular values for parameters `a` and `b` were calculated, these values will probably be adjusted in\nfuture to better reflect actual costs.\n\n## Transaction fees distribution\n\nAll transaction fees of a given [epoch](https://cardanodocs.com/glossary/#epoch) are collected in a virtual pool,\nand the idea is to then redistribute the money from that pool amongst people who were elected [slot leaders](https://cardanodocs.com/glossary/#slot-leader)\nby the PoS-algorithm during that epoch and who created blocks.\n\nAt this stage of Cardano SL, where all blocks are created by nodes operated by IOHK and our partners, fees are\nalready collected (to prevent DDoS attacks), but they will not be distributed and instead will be burnt.\n\nAs soon as Cardano SL enters its next, [fully decentralized stage](https://cardanoroadmap.com/), fees will be\ndistributed as described above.\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-02-transaction-fees.en.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-05-explorer.en.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-05-explorer.en.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-05-explorer.en.md absPath of file",
      "internal": {
        "content": "---\ndoc_title: Explorer\npath: /en/cardano/explorer/\ngroup: cardano\nlanguage: en\nlabel: docs\n---\n<!-- Reviewed at dec0d911d6c4beb8e708ed4076f832ff871f6125 -->\n\n# Cardano SL Explorer\n\nThis is an overview of Cardano SL Explorer service (hereafter referred to as\n\"Explorer\").\n\nExplorer is an [online service](https://cardanoexplorer.com/) for searching\naddresses, transactions, epochs and slots on the Cardano network.\n\n## Address\n\nIt is possible to find information about users' addresses. After inserting the\naddress' hash we'll see:\n\n1.  The number of transactions related to this address.\n2.  The final balance on this address.\n3.  The QR-code associated with this address.\n\nExample of an address' hash: `1fhXcTriF8i8FFSdCTaU9d3yp3oCLFQhon5KBkevT8rQDPP`.\n<!-- end -->\n## Transaction\n\nWe can find information about a transaction. After inserting the transaction's\nID we'll see:\n\n1.  Transaction date and time.\n2.  This transaction's source address.\n3.  This transaction's address destination.\n4.  The amount of ADA transferred within this transaction.\n5.  Transaction fee.\n\nThe example of a transaction's ID:\n`fe0681c7fe20c27071befc329caac059bb183afaf68b9595744c52125c61cf68`.\n\n## Time\n\nWe can find information about transactions by the time as well. Now it's\npossible to specify [epoch](/glossary/#epoch) and [slot](/glossary/#slot) only.\nAfter inserting the epoch's index and the slot's index, we'll see:\n\n1.  The number of transactions for this slot.\n2.  The total amount of ADA transferred during this slot.\n3.  The size of the block generated within this slot.\n\n### Slot\n\nIt's possible to get the information about a particular slot. After inserting\nthe slot's hash we'll see:\n\n1.  The number of transaction for this slot.\n2.  The total output value.\n3.  Estimated volume of ADA for this slot.\n4.  Fees.\n5.  The slot's ID.\n\nFurthermore, we'll see information about hashes:\n\n1.  This slot's hash.\n2.  The previous slot's hash (if exists).\n3.  The next slot's hash (if exists).\n4.  The Merkle root.\n",
        "type": "MarkdownRemark",
        "contentDigest": "7834534e00d63de49a651c292a914dfb",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "doc_title": "Explorer",
        "path": "/en/cardano/explorer/",
        "group": "cardano",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-05-explorer.en.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-05-explorer.en.md absPath of file"
      },
      "excerpt": "<!-- Reviewed at dec0d911d6c4beb8e708ed4076f832ff871f6125 -->\n\n# Cardano SL Explorer\n\nThis is an overview of Cardano SL Explorer service (hereafter referred to as\n\"Explorer\").\n\nExplorer is an [online service](https://cardanoexplorer.com/) for searching\naddresses, transactions, epochs and slots on the Cardano network.\n\n## Address\n\nIt is possible to find information about users' addresses. After inserting the\naddress' hash we'll see:\n\n1.  The number of transactions related to this address.\n2.  The final balance on this address.\n3.  The QR-code associated with this address.\n\nExample of an address' hash: `1fhXcTriF8i8FFSdCTaU9d3yp3oCLFQhon5KBkevT8rQDPP`.\n",
      "rawMarkdownBody": "<!-- Reviewed at dec0d911d6c4beb8e708ed4076f832ff871f6125 -->\n\n# Cardano SL Explorer\n\nThis is an overview of Cardano SL Explorer service (hereafter referred to as\n\"Explorer\").\n\nExplorer is an [online service](https://cardanoexplorer.com/) for searching\naddresses, transactions, epochs and slots on the Cardano network.\n\n## Address\n\nIt is possible to find information about users' addresses. After inserting the\naddress' hash we'll see:\n\n1.  The number of transactions related to this address.\n2.  The final balance on this address.\n3.  The QR-code associated with this address.\n\nExample of an address' hash: `1fhXcTriF8i8FFSdCTaU9d3yp3oCLFQhon5KBkevT8rQDPP`.\n<!-- end -->\n## Transaction\n\nWe can find information about a transaction. After inserting the transaction's\nID we'll see:\n\n1.  Transaction date and time.\n2.  This transaction's source address.\n3.  This transaction's address destination.\n4.  The amount of ADA transferred within this transaction.\n5.  Transaction fee.\n\nThe example of a transaction's ID:\n`fe0681c7fe20c27071befc329caac059bb183afaf68b9595744c52125c61cf68`.\n\n## Time\n\nWe can find information about transactions by the time as well. Now it's\npossible to specify [epoch](/glossary/#epoch) and [slot](/glossary/#slot) only.\nAfter inserting the epoch's index and the slot's index, we'll see:\n\n1.  The number of transactions for this slot.\n2.  The total amount of ADA transferred during this slot.\n3.  The size of the block generated within this slot.\n\n### Slot\n\nIt's possible to get the information about a particular slot. After inserting\nthe slot's hash we'll see:\n\n1.  The number of transaction for this slot.\n2.  The total output value.\n3.  Estimated volume of ADA for this slot.\n4.  Fees.\n5.  The slot's ID.\n\nFurthermore, we'll see information about hashes:\n\n1.  This slot's hash.\n2.  The previous slot's hash (if exists).\n3.  The next slot's hash (if exists).\n4.  The Merkle root.\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-05-explorer.en.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/for-contributors/2017-01-01-building-from-source.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/for-contributors/2017-01-01-building-from-source.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/for-contributors/2017-01-01-building-from-source.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: Building Cardano SL From Source Code\npath: /en/for-contributors/building-cardano-sl-from-source-code/\ngroup: for-contributors\nlanguage: en\nlabel: docs\n---\n\n# Redirecting...\n\n<script>\n    // window.location.replace(\"https://github.com/input-output-hk/cardano-sl/blob/master/docs/how-to/build-cardano-sl-and-daedalus-from-source-code.md\");\n</script>\n",
        "type": "MarkdownRemark",
        "contentDigest": "af37823c941c468ba78df462c177243c",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "Building Cardano SL From Source Code",
        "path": "/en/for-contributors/building-cardano-sl-from-source-code/",
        "group": "for-contributors",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/for-contributors/2017-01-01-building-from-source.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/for-contributors/2017-01-01-building-from-source.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n# Redirecting...\n\n<script>\n    // window.location.replace(\"https://github.com/input-output-hk/cardano-sl/blob/master/docs/how-to/build-cardano-sl-and-daedalus-from-source-code.md\");\n</script>\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/for-contributors/2017-01-01-building-from-source.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-02-launcher.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-02-launcher.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-02-launcher.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: Cardano SL Launcher\npath: /en/technical/cardano-sl-launcher/\ngroup: technical\nlanguage: en\nlabel: docs\n---\n<!-- Reviewed at ac0126b2753f1f5ca6fbfb555783fbeb1aa141bd -->\n\n# Cardano SL Launcher\n\n## Overview\n\nAn executable\n[`cardano-launcher`](/technical/cli-options/#cardano-launcher)\nis a tool for launching Cardano SL. It actually runs the whole Cardano SL system\n(i.e. a node, a wallet) and handles updates. To do this, `cardano-launcher` uses two\nseparate tools: [`cardano-node`](/technical/cli-options/#cardano-node) and\n[`cardano-updater`](https://github.com/input-output-hk/cardano-updater).\n\nPlease see [`cardano-launcher`'s description](/technical/cli-options/#cardano-launcher)\nfor detailed information about available options.\n\n## Scenarios\n\nThere are two work scenarios for `cardano-launcher`: client scenario and server scenario.\nIf you provide a path to the wallet (e.g. Daedalus) using `--wallet` argument during\nstart, `cardano-node` will run in\n[client](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L178)\nscenario, otherwise it will run in\n[server](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L171)\none.\n\n### Server Scenario\n\nAfter the start, there are 2 steps:\n\n1.  Running an updater.\n2.  Running a node.\n\nUpdater's work is explained [below](#updater).\n\nA node is [spawning as a separate\nprocess](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L280).\nAfter that we just [wait until the node\nstops](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L201).\nAfter a node exits, its exit code is checked. If it equals `20`, we [restart the\nlauncher](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L204),\notherwise we quit.\n\nLog info can be [written to the log file](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L207) before quitting. To do it, we must\nprovide two additional arguments during launcher's start: `--report-server` and\n`--node-log`. The first argument defines an URL of the report server, the second\none defines a path to the log file. We asynchronously [send log info to the\nreport server](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L343).\nPlease note that the file from the `--node-log` argument must exist.\n\n### Client Scenario\n\nAs the process starts, there are 3 steps:\n\n1.  Running an updater.\n2.  Running a node.\n3.  Running a wallet.\n\nFor steps 1 and 2, see [Server Scenario](#server-scenario) above.\n\nThe wallet is [spawning as a separate\nprocess](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L227).\n\nAfter that, we [wait until node or wallet\nstops](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L228).\nWhen it stops, we check it:\n\n1.  If the node exits, we write a log (see [Server Scenario](#server-scenario)\n    above for explanations) and [wait for the wallet's\n    death](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L235).\n2.  If the wallet exits, we check the exit code, and if it equals `20`, we\n    [kill the node](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L242)\n    and [restart the launcher in the client\n    scenario](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L244).\n    Please note that killing the node isn't executed immediately; the node is\n    killed after some timeout, and its value is obtained from the\n    `--node-timeout` argument mentioned above.\n3.  If the wallet exits *and* exit code isn't equal to `20`, we\n    [kill the node](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L250)\n    immediately.\n\n## Updater\n\nAnother important thing `cardano-launcher` does is updating a node. The first\nstep in both scenarios is [running an\nupdater](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L255).\n\nThe core idea is very simple. The node update is a special `.tar`-archive: it\nrepresents the *difference* between the old (current) version of the node and a\nnew version of it. A path to this archive is obtained via `--update-archive`\nargument. So, `cardano-updater` applies this archive to the node, and after\nrestart a new version of the node can be used.\n\nPlease note that when we run `cardano-launcher` in the client scenario, a wallet's\nuser is able to see that an update is ready, and there are two situations\npossible.\n\nIf a user *agrees* to apply this update, the wallet exits immediately with an\nexit code `20`. In this case, as described above, launcher restarts the node and\nthe update is applied.\n\nIf a user *doesn't agree* to apply this update, the wallet continues working.\nBut when it *is* restarted (sooner or later), that update [*will* be applied](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L223).\n\n**Important**: the updater runs synchronously, we start it and then [wait for it to\nfinish](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L269).\nIf the updater finishes its work\n[successfully](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L271),\nthe`.tar`-archive is deleted.\n\n### Implementation Overview\n\nFor more implementation details about Cardano SL Update system please see [this chapter](/technical/updater/).\n",
        "type": "MarkdownRemark",
        "contentDigest": "bd626209a9fdbb8da990148a83b9886b",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "Cardano SL Launcher",
        "path": "/en/technical/cardano-sl-launcher/",
        "group": "technical",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-02-launcher.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-02-launcher.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at ac0126b2753f1f5ca6fbfb555783fbeb1aa141bd -->\n\n# Cardano SL Launcher\n\n## Overview\n\nAn executable\n[`cardano-launcher`](/technical/cli-options/#cardano-launcher)\nis a tool for launching Cardano SL. It actually runs the whole Cardano SL system\n(i.e. a node, a wallet) and handles updates. To do this, `cardano-launcher` uses two\nseparate tools: [`cardano-node`](/technical/cli-options/#cardano-node) and\n[`cardano-updater`](https://github.com/input-output-hk/cardano-updater).\n\nPlease see [`cardano-launcher`'s description](/technical/cli-options/#cardano-launcher)\nfor detailed information about available options.\n\n## Scenarios\n\nThere are two work scenarios for `cardano-launcher`: client scenario and server scenario.\nIf you provide a path to the wallet (e.g. Daedalus) using `--wallet` argument during\nstart, `cardano-node` will run in\n[client](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L178)\nscenario, otherwise it will run in\n[server](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L171)\none.\n\n### Server Scenario\n\nAfter the start, there are 2 steps:\n\n1.  Running an updater.\n2.  Running a node.\n\nUpdater's work is explained [below](#updater).\n\nA node is [spawning as a separate\nprocess](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L280).\nAfter that we just [wait until the node\nstops](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L201).\nAfter a node exits, its exit code is checked. If it equals `20`, we [restart the\nlauncher](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L204),\notherwise we quit.\n\nLog info can be [written to the log file](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L207) before quitting. To do it, we must\nprovide two additional arguments during launcher's start: `--report-server` and\n`--node-log`. The first argument defines an URL of the report server, the second\none defines a path to the log file. We asynchronously [send log info to the\nreport server](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L343).\nPlease note that the file from the `--node-log` argument must exist.\n\n### Client Scenario\n\nAs the process starts, there are 3 steps:\n\n1.  Running an updater.\n2.  Running a node.\n3.  Running a wallet.\n\nFor steps 1 and 2, see [Server Scenario](#server-scenario) above.\n\nThe wallet is [spawning as a separate\nprocess](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L227).\n\nAfter that, we [wait until node or wallet\nstops](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L228).\nWhen it stops, we check it:\n\n1.  If the node exits, we write a log (see [Server Scenario](#server-scenario)\n    above for explanations) and [wait for the wallet's\n    death](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L235).\n2.  If the wallet exits, we check the exit code, and if it equals `20`, we\n    [kill the node](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L242)\n    and [restart the launcher in the client\n    scenario](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L244).\n    Please note that killing the node isn't executed immediately; the node is\n    killed after some timeout, and its value is obtained from the\n    `--node-timeout` argument mentioned above.\n3.  If the wallet exits *and* exit code isn't equal to `20`, we\n    [kill the node](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L250)\n    immediately.\n\n## Updater\n\nAnother important thing `cardano-launcher` does is updating a node. The first\nstep in both scenarios is [running an\nupdater](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L255).\n\nThe core idea is very simple. The node update is a special `.tar`-archive: it\nrepresents the *difference* between the old (current) version of the node and a\nnew version of it. A path to this archive is obtained via `--update-archive`\nargument. So, `cardano-updater` applies this archive to the node, and after\nrestart a new version of the node can be used.\n\nPlease note that when we run `cardano-launcher` in the client scenario, a wallet's\nuser is able to see that an update is ready, and there are two situations\npossible.\n\nIf a user *agrees* to apply this update, the wallet exits immediately with an\nexit code `20`. In this case, as described above, launcher restarts the node and\nthe update is applied.\n\nIf a user *doesn't agree* to apply this update, the wallet continues working.\nBut when it *is* restarted (sooner or later), that update [*will* be applied](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L223).\n\n**Important**: the updater runs synchronously, we start it and then [wait for it to\nfinish](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L269).\nIf the updater finishes its work\n[successfully](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L271),\nthe`.tar`-archive is deleted.\n\n### Implementation Overview\n\nFor more implementation details about Cardano SL Update system please see [this chapter](/technical/updater/).\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-02-launcher.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/for-contributors/2017-01-03-haddock.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/for-contributors/2017-01-03-haddock.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/for-contributors/2017-01-03-haddock.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: Haddock Documentation\npath: /en/for-contributors/haddock-documentation/\ngroup: for-contributors\nlanguage: en\nlabel: docs\n---\n<!-- Reviewed at c507f6675c16810ba9ca72b71dac57288fd1735c -->\n\n# Haddock Documentation\n\nHere you can find the Haddock-based documentation for Cardano SL.\n\n## Latest\n\nThis is the [latest documentation](https://cardanodocs.com/haddock/latest/index.html).\n\n## Release\n\nDocumentation for stable releases will be published later.\n",
        "type": "MarkdownRemark",
        "contentDigest": "ebfe061bd13fcc7faea9c098a97b04d4",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "Haddock Documentation",
        "path": "/en/for-contributors/haddock-documentation/",
        "group": "for-contributors",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/for-contributors/2017-01-03-haddock.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/for-contributors/2017-01-03-haddock.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at c507f6675c16810ba9ca72b71dac57288fd1735c -->\n\n# Haddock Documentation\n\nHere you can find the Haddock-based documentation for Cardano SL.\n\n## Latest\n\nThis is the [latest documentation](https://cardanodocs.com/haddock/latest/index.html).\n\n## Release\n\nDocumentation for stable releases will be published later.\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/for-contributors/2017-01-03-haddock.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-06-explorer.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-06-explorer.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-06-explorer.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: Cardano SL Explorer\npath: /en/technical/cardano-sl-explorer/\ngroup: technical\nlanguage: en\nlabel: docs\n---\n<!-- Reviewed at ac0126b2753f1f5ca6fbfb555783fbeb1aa141bd -->\n\n# Cardano SL Explorer\n\nAs [mentioned earlier](/cardano/explorer), Explorer is a service for searching\ninformation about [transactions](/glossary/#transaction),\n[addresses](/glossary/#address) and time periods ([epochs](/glossary/#epoch) and\n[slots](/glossary/#slot)) in the Cardano network.\n\n## Explorer Backend Workflow\n\nExplorer starts with\n[CLI-options](https://github.com/input-output-hk/cardano-sl/blob/master/explorer/src/explorer/ExplorerNodeOptions.hs).\nAll supported options can be viewed by `cardano-explorer --help` command.\n\nThen explorer [runs \"internal\"\nnode](https://github.com/input-output-hk/cardano-sl/blob/master/explorer/src/explorer/Main.hs)\nvia `cardano-sl` library. So we can think of explorer's backend as of a common\nnode with [two special\nplugins](https://github.com/input-output-hk/cardano-sl/blob/master/explorer/src/explorer/Main.hs#L64):\n`explorerPlugin` and `notifierPlugin`.\n\nThe first plugin is for serving [explorer web\nAPI](https://github.com/input-output-hk/cardano-sl/blob/master/explorer/src/Pos/Explorer/Web/Api.hs).\nThe second one [starts notification\nserver](https://github.com/input-output-hk/cardano-sl/blob/master/explorer/src/Pos/Explorer/Socket/App.hs#L215).\nThis websocket-based server notifies frontend about changes with\nblocks/transactions.\n\n## Explorer Backend API\n\nCurrently, the explorer web API provides a series of methods to obtain\ninformation from the Cardano network. The `servant` Haskell library that\nprovides a modular approach to API-building is used. This library uses\ncombinators both to build atomic HTTP actions and to glue these atomic methods\ntogether to form larger and more complete APIs.\n\n### HTTP API\n\nExplorer web API is defined\n[here](https://github.com/input-output-hk/cardano-sl/blob/master/explorer/src/Pos/Explorer/Web/Api.hs).\nIf the event requests fail, there is a\n[`ExplorerError`](https://github.com/input-output-hk/cardano-sl/blob/master/explorer/src/Pos/Explorer/Web/Error.hs)\ntype, which is simply a wrapper over `Text` to show what happened.\n\nDocumentation for explorer web API is available\n[here](https://cardanodocs.com/technical/explorer/api/).\n\n### socket.io API\n\nWe currently have these events a client can register to:\n\n``` haskell\ndata ClientEvent\n    = Subscribe Subscription\n    | Unsubscribe Subscription\n    | CallMe\n```\n\nA subscription can be to the following events:\n\n``` haskell\ndata Subscription\n    = SubAddr\n    | SubBlockLastPage\n    | SubTx\n```\n\nAnd the corresponding server events are here:\n\n``` haskell\ndata ServerEvent\n    = AddrUpdated\n    | BlocksLastPageUpdated\n    | TxsUpdated\n    | CallYou\n```\n\nA user can call the desired events and subscribe to them:\n\n``` js\nvar client = require('socket.io-client');\nvar socket = client('http://localhost:8110');\n\nsocket.on('CallYou', function(msg){ console.log(msg); })\nsocket.emit('CallMe', 'test');\n```\n\nYou can also try running purescript repl (`pulp psci`) and then playing around\nwith the events:\n\n``` purescript\nimport Prelude\nimport Control.SocketIO.Client\nimport Control.Monad.Eff.Console\n\nlet socket = connect \"http://localhost:8110\"\n\nsocket >>= \\soc -> emit soc \"CallYou\" \"test\"\n```\n",
        "type": "MarkdownRemark",
        "contentDigest": "6b627b35edbbee295523d21c8f8f3e42",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "Cardano SL Explorer",
        "path": "/en/technical/cardano-sl-explorer/",
        "group": "technical",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-06-explorer.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-06-explorer.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at ac0126b2753f1f5ca6fbfb555783fbeb1aa141bd -->\n\n# Cardano SL Explorer\n\nAs [mentioned earlier](/cardano/explorer), Explorer is a service for searching\ninformation about [transactions](/glossary/#transaction),\n[addresses](/glossary/#address) and time periods ([epochs](/glossary/#epoch) and\n[slots](/glossary/#slot)) in the Cardano network.\n\n## Explorer Backend Workflow\n\nExplorer starts with\n[CLI-options](https://github.com/input-output-hk/cardano-sl/blob/master/explorer/src/explorer/ExplorerNodeOptions.hs).\nAll supported options can be viewed by `cardano-explorer --help` command.\n\nThen explorer [runs \"internal\"\nnode](https://github.com/input-output-hk/cardano-sl/blob/master/explorer/src/explorer/Main.hs)\nvia `cardano-sl` library. So we can think of explorer's backend as of a common\nnode with [two special\nplugins](https://github.com/input-output-hk/cardano-sl/blob/master/explorer/src/explorer/Main.hs#L64):\n`explorerPlugin` and `notifierPlugin`.\n\nThe first plugin is for serving [explorer web\nAPI](https://github.com/input-output-hk/cardano-sl/blob/master/explorer/src/Pos/Explorer/Web/Api.hs).\nThe second one [starts notification\nserver](https://github.com/input-output-hk/cardano-sl/blob/master/explorer/src/Pos/Explorer/Socket/App.hs#L215).\nThis websocket-based server notifies frontend about changes with\nblocks/transactions.\n\n## Explorer Backend API\n\nCurrently, the explorer web API provides a series of methods to obtain\ninformation from the Cardano network. The `servant` Haskell library that\nprovides a modular approach to API-building is used. This library uses\ncombinators both to build atomic HTTP actions and to glue these atomic methods\ntogether to form larger and more complete APIs.\n\n### HTTP API\n\nExplorer web API is defined\n[here](https://github.com/input-output-hk/cardano-sl/blob/master/explorer/src/Pos/Explorer/Web/Api.hs).\nIf the event requests fail, there is a\n[`ExplorerError`](https://github.com/input-output-hk/cardano-sl/blob/master/explorer/src/Pos/Explorer/Web/Error.hs)\ntype, which is simply a wrapper over `Text` to show what happened.\n\nDocumentation for explorer web API is available\n[here](https://cardanodocs.com/technical/explorer/api/).\n\n### socket.io API\n\nWe currently have these events a client can register to:\n\n``` haskell\ndata ClientEvent\n    = Subscribe Subscription\n    | Unsubscribe Subscription\n    | CallMe\n```\n\nA subscription can be to the following events:\n\n``` haskell\ndata Subscription\n    = SubAddr\n    | SubBlockLastPage\n    | SubTx\n```\n\nAnd the corresponding server events are here:\n\n``` haskell\ndata ServerEvent\n    = AddrUpdated\n    | BlocksLastPageUpdated\n    | TxsUpdated\n    | CallYou\n```\n\nA user can call the desired events and subscribe to them:\n\n``` js\nvar client = require('socket.io-client');\nvar socket = client('http://localhost:8110');\n\nsocket.on('CallYou', function(msg){ console.log(msg); })\nsocket.emit('CallMe', 'test');\n```\n\nYou can also try running purescript repl (`pulp psci`) and then playing around\nwith the events:\n\n``` purescript\nimport Prelude\nimport Control.SocketIO.Client\nimport Control.Monad.Eff.Console\n\nlet socket = connect \"http://localhost:8110\"\n\nsocket >>= \\soc -> emit soc \"CallYou\" \"test\"\n```\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-06-explorer.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-14-leader-selection.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-14-leader-selection.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-14-leader-selection.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: Leader Selection in Cardano SL\npath: /en/technical/leader-selection-in-cardano-sl/\ngroup: technical\nlanguage: en\nlabel: docs\n---\n<!-- Reviewed at e1d0f9fb37a3f1378341716916f0321fb55698df -->\n\n# Leader Selection in Cardano SL\n\nThis chapter describes [slot-leader](/glossary/#slot-leader) selection process.\n\n## Follow the Satoshi\n\nAs mentioned [earlier](/cardano/proof-of-stake/#follow-the-satoshi), Cardano SL\nuses Follow the Satoshi (FTS) algorithm to choose slot leaders. Leaders for\neach slot of the current epoch are computed by FTS in the beginning of the current\nepoch. So genesis block contains a list of selected slot leaders. The number of\nselected slot-leaders corresponds to a number of slots in epoch, and this number\n[depends](https://github.com/input-output-hk/cardano-sl/blob/5f7b619c6ec9056c6fe778d862c426233af165df/core/Pos/Core/Constants/Raw.hs#L136)\non fundamental security parameter `k` defined in [configuration\nfile](https://github.com/input-output-hk/cardano-sl/blob/446444070ee09857603797a90af970fff215c8c5/core/constants.yaml#L10).\n\nFTS uses a [shared\nseed](https://github.com/input-output-hk/cardano-sl/blob/446444070ee09857603797a90af970fff215c8c5/core/Pos/Core/Types.hs#L256)\nwhich is result of [Multi Party Computation\n(MPC)](/cardano/proof-of-stake/#multi-party-computation) algorithm for previous\nepoch: in the result of MPC some nodes reveal their seeds, XOR of these seeds is\ncalled *shared seed*. Actually shared seed [is a bytestring](https://github.com/input-output-hk/cardano-sl/blob/446444070ee09857603797a90af970fff215c8c5/core/Pos/Core/Types.hs#L257).\n\nThe probability that a stakeholder will be chosen as a slot leader is\nproportional to the number of coins this stakeholder holds. The same stakeholder\ncan be chosen as a leader for multiple slots within an epoch.\n\n## Algorithm\n\nTheoretical aspects of the slot leader selection process is described in\n[paper](/glossary/#paper), page 11.\n\nThe node sorts all unspent outputs (`utxo`) in a deterministic way\n(lexicographically), so result is an ordered\n[sequence](https://github.com/input-output-hk/cardano-sl/blob/1f866450a8a530c119e3fc9edb84c97c56417aa2/src/Pos/Genesis.hs#L177)\nof pairs `(StakeholderId, Coin)`, where `StakeholderId` is an id of stakeholder\n(its public key hash) and `Coin` is an amount of coins this stakeholder has.\nIt's assumed that `utxo` [isn't\nempty](https://github.com/input-output-hk/cardano-sl/blob/1f866450a8a530c119e3fc9edb84c97c56417aa2/src/Pos/Lrc/FtsPure.hs#L52).\n\nThen the node chooses several random `i`s between `1` and [amount of Lovelaces\nin the system](https://github.com/input-output-hk/cardano-sl/blob/1f866450a8a530c119e3fc9edb84c97c56417aa2/src/Pos/Lrc/FtsPure.hs#L49).\nTo find owner of `i`-th coin node finds the lowest `x` such that sum of all coins\nin this list up to 'i'-th is not less than 'i' (and then 'x'-th address is the\nowner of `i`-th coin).\n\nThe result is a non-empty sequence of `StakeholderId`, ids of selected stakeholders.\nThis sequence of [`SlotLeaders`](https://github.com/input-output-hk/cardano-sl/blob/5f7b619c6ec9056c6fe778d862c426233af165df/core/Pos/Core/Types.hs#L264)\nis storing in the [node's runtime\ncontext](https://github.com/input-output-hk/cardano-sl/blob/da70b2597aab352d7574a3946a366395b09e97eb/node/src/Pos/Context/Context.hs#L94).\n\nWith P2SH addresses, node doesn't know who is going to end up with funds sent to\nthem. Therefore, P2SH addresses can contain destination address which specifies\nwhich addresses should count as “owning” funds for the purposes of FTS.\n",
        "type": "MarkdownRemark",
        "contentDigest": "4d4bb0d6e4096865710a4d668685e40e",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "Leader Selection in Cardano SL",
        "path": "/en/technical/leader-selection-in-cardano-sl/",
        "group": "technical",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-14-leader-selection.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-14-leader-selection.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at e1d0f9fb37a3f1378341716916f0321fb55698df -->\n\n# Leader Selection in Cardano SL\n\nThis chapter describes [slot-leader](/glossary/#slot-leader) selection process.\n\n## Follow the Satoshi\n\nAs mentioned [earlier](/cardano/proof-of-stake/#follow-the-satoshi), Cardano SL\nuses Follow the Satoshi (FTS) algorithm to choose slot leaders. Leaders for\neach slot of the current epoch are computed by FTS in the beginning of the current\nepoch. So genesis block contains a list of selected slot leaders. The number of\nselected slot-leaders corresponds to a number of slots in epoch, and this number\n[depends](https://github.com/input-output-hk/cardano-sl/blob/5f7b619c6ec9056c6fe778d862c426233af165df/core/Pos/Core/Constants/Raw.hs#L136)\non fundamental security parameter `k` defined in [configuration\nfile](https://github.com/input-output-hk/cardano-sl/blob/446444070ee09857603797a90af970fff215c8c5/core/constants.yaml#L10).\n\nFTS uses a [shared\nseed](https://github.com/input-output-hk/cardano-sl/blob/446444070ee09857603797a90af970fff215c8c5/core/Pos/Core/Types.hs#L256)\nwhich is result of [Multi Party Computation\n(MPC)](/cardano/proof-of-stake/#multi-party-computation) algorithm for previous\nepoch: in the result of MPC some nodes reveal their seeds, XOR of these seeds is\ncalled *shared seed*. Actually shared seed [is a bytestring](https://github.com/input-output-hk/cardano-sl/blob/446444070ee09857603797a90af970fff215c8c5/core/Pos/Core/Types.hs#L257).\n\nThe probability that a stakeholder will be chosen as a slot leader is\nproportional to the number of coins this stakeholder holds. The same stakeholder\ncan be chosen as a leader for multiple slots within an epoch.\n\n## Algorithm\n\nTheoretical aspects of the slot leader selection process is described in\n[paper](/glossary/#paper), page 11.\n\nThe node sorts all unspent outputs (`utxo`) in a deterministic way\n(lexicographically), so result is an ordered\n[sequence](https://github.com/input-output-hk/cardano-sl/blob/1f866450a8a530c119e3fc9edb84c97c56417aa2/src/Pos/Genesis.hs#L177)\nof pairs `(StakeholderId, Coin)`, where `StakeholderId` is an id of stakeholder\n(its public key hash) and `Coin` is an amount of coins this stakeholder has.\nIt's assumed that `utxo` [isn't\nempty](https://github.com/input-output-hk/cardano-sl/blob/1f866450a8a530c119e3fc9edb84c97c56417aa2/src/Pos/Lrc/FtsPure.hs#L52).\n\nThen the node chooses several random `i`s between `1` and [amount of Lovelaces\nin the system](https://github.com/input-output-hk/cardano-sl/blob/1f866450a8a530c119e3fc9edb84c97c56417aa2/src/Pos/Lrc/FtsPure.hs#L49).\nTo find owner of `i`-th coin node finds the lowest `x` such that sum of all coins\nin this list up to 'i'-th is not less than 'i' (and then 'x'-th address is the\nowner of `i`-th coin).\n\nThe result is a non-empty sequence of `StakeholderId`, ids of selected stakeholders.\nThis sequence of [`SlotLeaders`](https://github.com/input-output-hk/cardano-sl/blob/5f7b619c6ec9056c6fe778d862c426233af165df/core/Pos/Core/Types.hs#L264)\nis storing in the [node's runtime\ncontext](https://github.com/input-output-hk/cardano-sl/blob/da70b2597aab352d7574a3946a366395b09e97eb/node/src/Pos/Context/Context.hs#L94).\n\nWith P2SH addresses, node doesn't know who is going to end up with funds sent to\nthem. Therefore, P2SH addresses can contain destination address which specifies\nwhich addresses should count as “owning” funds for the purposes of FTS.\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-14-leader-selection.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-16-specification-wallet-backend.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-16-specification-wallet-backend.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-16-specification-wallet-backend.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: Formal specification for a Cardano wallet\npath: /en/technical/formal-specification-for-a-cardano-wallet/\ngroup: technical\nlanguage: en\nlabel: docs\n---\n# Formal specification for a Cardano wallet\n\nThis document is a formal specification of a wallet for Cardano (or any UTxO-based cryptocurrency). The purpose is to help understand some of the subtleties and give a reasonable starting point for tests and implementations.\n\nTo the best of our knowledge, no other existing cryptocurrency wallet comes with such a formal specification. We have therefore attempted to formalise the core functionality of the existing wallet and let our knowledge of the difficulties with the current implementation be a guide in deciding which aspects of the wallet needed more careful thought. We also state and (partially) prove various properties of the wallet models we develop, not only to prove its correctness but also to try and capture our intuitions about what a cryptocurrency wallet is, exactly.\n\n<a href=\"/files/formal-specification-of-the-cardano-wallet.pdf\" target=\"_blank\"><img src=\"/img/formal-specification-of-the-cardano-wallet4.jpg\" alt=\"\" /></a>\n",
        "type": "MarkdownRemark",
        "contentDigest": "b76c259790519df95ff9cfd71631f93f",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "Formal specification for a Cardano wallet",
        "path": "/en/technical/formal-specification-for-a-cardano-wallet/",
        "group": "technical",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-16-specification-wallet-backend.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-16-specification-wallet-backend.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "# Formal specification for a Cardano wallet\n\nThis document is a formal specification of a wallet for Cardano (or any UTxO-based cryptocurrency). The purpose is to help understand some of the subtleties and give a reasonable starting point for tests and implementations.\n\nTo the best of our knowledge, no other existing cryptocurrency wallet comes with such a formal specification. We have therefore attempted to formalise the core functionality of the existing wallet and let our knowledge of the difficulties with the current implementation be a guide in deciding which aspects of the wallet needed more careful thought. We also state and (partially) prove various properties of the wallet models we develop, not only to prove its correctness but also to try and capture our intuitions about what a cryptocurrency wallet is, exactly.\n\n<a href=\"/files/formal-specification-of-the-cardano-wallet.pdf\" target=\"_blank\"><img src=\"/img/formal-specification-of-the-cardano-wallet4.jpg\" alt=\"\" /></a>\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-16-specification-wallet-backend.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-01-testnet.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-01-testnet.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-01-testnet.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: Testnet Era\npath: /en/timeline/testnet-era/\ngroup: timeline\nlanguage: en\nlabel: docs\n---\n\n<!-- Reviewed at 357ac1f7b4a9f1d98ee7f7bee46e874d7356958f -->\n\n# Testnet Era\n\nThe Cardano SL test network (the testnet) is required to get the community\nacquainted with the cryptocurrency and to polish the implementation, eliminating\npossible flaws or instabilities.\n\nDuring the Testnet era all functionality, including the reward mechanism, are\nactivated. Anyone is able to redeem a private key from Cardano SL Testnet Faucet\nto get their coin supply.\n\nWe encourage everyone to download Cardano SL client for their platform, get some\ncoins (we call them [Lovelace](/glossary/#lovelace)) from the faucet, and invite\nother people to participate in beta testing.\n\nThe result of the Testnet era is the [release](/timeline/bootstrap) of Cardano SL.\n",
        "type": "MarkdownRemark",
        "contentDigest": "d798a1c2cd4c6c9d0048fd6ed35acc80",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "Testnet Era",
        "path": "/en/timeline/testnet-era/",
        "group": "timeline",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-01-testnet.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-01-testnet.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n<!-- Reviewed at 357ac1f7b4a9f1d98ee7f7bee46e874d7356958f -->\n\n# Testnet Era\n\nThe Cardano SL test network (the testnet) is required to get the community\nacquainted with the cryptocurrency and to polish the implementation, eliminating\npossible flaws or instabilities.\n\nDuring the Testnet era all functionality, including the reward mechanism, are\nactivated. Anyone is able to redeem a private key from Cardano SL Testnet Faucet\nto get their coin supply.\n\nWe encourage everyone to download Cardano SL client for their platform, get some\ncoins (we call them [Lovelace](/glossary/#lovelace)) from the faucet, and invite\nother people to participate in beta testing.\n\nThe result of the Testnet era is the [release](/timeline/bootstrap) of Cardano SL.\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-01-testnet.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-02-bootstrap.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-02-bootstrap.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-02-bootstrap.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: Bootstrap Era\npath: /en/timeline/bootstrap-era/\ngroup: timeline\nlanguage: en\nlabel: docs\n---\n\n<!-- Reviewed at c23493d7a33a82d559d5bd9d289486795cf6592f -->\n\n# Bootstrap Era\n\nAfter the Cardano SL Testnet era and release of Cardano SL, the network will\noperate in “bootstrap mode” for a period of time called Bootstrap era. As people\nwho purchased Ada redeem their coins, the stake will automatically get delegated\nto a pool of trusted nodes that will maintain the network. During this time no\nblock rewards will be issued — we will maintain the network pro bono. This is\nrequired because in order for the protocol to function properly, some of the\nstakeholders who jointly posses majority of stake have to be online, which in\nreality won't be the case during the first months of network operation.\n\nThe Bootstrap era will lead to the [Reward era](/timeline/reward), during which\nupdates to the protocol will be issued, and the major stakeholders will be\nprovided with convenient options to run their nodes on personal servers in the\ncloud.\n\n## Stake Locking\n\nThe Bootstrap era is the period of Cardano SL existence that allows only fixed predefined\nusers to have control over the system. The set of such users (the bootstrap stakeholders)\nand propotion of total stake each of them controls is defined in genesis block.\n\nPurpose of Bootstrap era is to address concern that at the beginning of mainnet majority of\nstake will probably be offline (which breaks the protocol at the start). Bootstrap era is to be ended\nwhen network stabilizes and majority of stake is present online.\n\nThe next era after Bootstrap is called [the Reward era](https://cardanodocs.com/timeline/reward/).\nReward era is actually a \"normal\" operation mode of Cardano SL as a PoS-cryptocurrency.\n\n### Requirements\n\n1.  During Bootstrap era stake in Cardano SL should be effectively delegated to a fixed set of keys `S`.\n2.  `S` = 7\n3.  Stake should be distributed among `s` ∈  `S`.\n4.  At the end of Bootstrap era stake should be unlocked:\n    1.  Ada buyers should be able to participate in protocol themselves (or delegate their rights to some\n        delegate not from `S`).\n    2.  Each Ada buyer should explicitly state she wants to take control over her stake.\n        * Otherwise it may easily lead to situation when less than majority of stake is online once Reward\n        era starts.\n    3.  Before this withdrawing stake action occurs, stake should be still being controlled by `S` nodes.\n\n### Proposal\n\nLet us now present the Bootstrap era solution:\n\n1.  Initial `utxo` contains all the stake distributed among Bootstrap stakeholders. Initial `utxo`\n    consists of `(txIn, txOut)` pairs, and every `txOut` contains an address with stake distribution in it.\n    So we just set distribution in a way it sends all coins to all Bootstrap stakeholders.\n2.  While the Bootstrap era takes place, users can send transactions changing initial `utxo`. We enforce\n    setting stake distribution for each transaction output to spread stake to Bootstrap stakeholders in. This\n    effectively makes stake distribution is system constant.\n3.  There is genesis state of heavyweight delegation. It contains pairs `(Issuer, ProxySK)`, where\n    `Issuer` is an identifier of stakeholder who delegated and `ProxySK` is a proxy secret key for delegate.\n    Please note that:\n    *  delegate must differ from an issuer in each pair, i. e. no revocations are allowed;\n    *  delegate can't be an issuer, i.e. transitive delegation is not supported.\n4.  When the Bootstrap era is over, we disable restriction on stake distribution. Bootstrap stakeholders will\n    vote for Bootstrap era ending: special update proposal will be formed, where a particular constant\n    will be set appropriately to trigger Bootstrap era end at the point update proposal gets adopted.\n    System operates the same way as in Bootstrap era, but users need to explicitly state they understand\n    owning their stake leads to responsibility to handle the node. To get his stake back user should\n    send a transaction, specifying delegate key(s) in stake distribution. It may be the key owned by user\n    himself or the key of some delegate (which may also be one or few of Bootstrap stakeholders).\n\nPlease read about [Stake Delegation in Cardano SL](/technical/delegation/) for more details about\ndelegation mechanism.\n",
        "type": "MarkdownRemark",
        "contentDigest": "c2aba65a7c34939edff00ba224f9e263",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "Bootstrap Era",
        "path": "/en/timeline/bootstrap-era/",
        "group": "timeline",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-02-bootstrap.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-02-bootstrap.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n<!-- Reviewed at c23493d7a33a82d559d5bd9d289486795cf6592f -->\n\n# Bootstrap Era\n\nAfter the Cardano SL Testnet era and release of Cardano SL, the network will\noperate in “bootstrap mode” for a period of time called Bootstrap era. As people\nwho purchased Ada redeem their coins, the stake will automatically get delegated\nto a pool of trusted nodes that will maintain the network. During this time no\nblock rewards will be issued — we will maintain the network pro bono. This is\nrequired because in order for the protocol to function properly, some of the\nstakeholders who jointly posses majority of stake have to be online, which in\nreality won't be the case during the first months of network operation.\n\nThe Bootstrap era will lead to the [Reward era](/timeline/reward), during which\nupdates to the protocol will be issued, and the major stakeholders will be\nprovided with convenient options to run their nodes on personal servers in the\ncloud.\n\n## Stake Locking\n\nThe Bootstrap era is the period of Cardano SL existence that allows only fixed predefined\nusers to have control over the system. The set of such users (the bootstrap stakeholders)\nand propotion of total stake each of them controls is defined in genesis block.\n\nPurpose of Bootstrap era is to address concern that at the beginning of mainnet majority of\nstake will probably be offline (which breaks the protocol at the start). Bootstrap era is to be ended\nwhen network stabilizes and majority of stake is present online.\n\nThe next era after Bootstrap is called [the Reward era](https://cardanodocs.com/timeline/reward/).\nReward era is actually a \"normal\" operation mode of Cardano SL as a PoS-cryptocurrency.\n\n### Requirements\n\n1.  During Bootstrap era stake in Cardano SL should be effectively delegated to a fixed set of keys `S`.\n2.  `S` = 7\n3.  Stake should be distributed among `s` ∈  `S`.\n4.  At the end of Bootstrap era stake should be unlocked:\n    1.  Ada buyers should be able to participate in protocol themselves (or delegate their rights to some\n        delegate not from `S`).\n    2.  Each Ada buyer should explicitly state she wants to take control over her stake.\n        * Otherwise it may easily lead to situation when less than majority of stake is online once Reward\n        era starts.\n    3.  Before this withdrawing stake action occurs, stake should be still being controlled by `S` nodes.\n\n### Proposal\n\nLet us now present the Bootstrap era solution:\n\n1.  Initial `utxo` contains all the stake distributed among Bootstrap stakeholders. Initial `utxo`\n    consists of `(txIn, txOut)` pairs, and every `txOut` contains an address with stake distribution in it.\n    So we just set distribution in a way it sends all coins to all Bootstrap stakeholders.\n2.  While the Bootstrap era takes place, users can send transactions changing initial `utxo`. We enforce\n    setting stake distribution for each transaction output to spread stake to Bootstrap stakeholders in. This\n    effectively makes stake distribution is system constant.\n3.  There is genesis state of heavyweight delegation. It contains pairs `(Issuer, ProxySK)`, where\n    `Issuer` is an identifier of stakeholder who delegated and `ProxySK` is a proxy secret key for delegate.\n    Please note that:\n    *  delegate must differ from an issuer in each pair, i. e. no revocations are allowed;\n    *  delegate can't be an issuer, i.e. transitive delegation is not supported.\n4.  When the Bootstrap era is over, we disable restriction on stake distribution. Bootstrap stakeholders will\n    vote for Bootstrap era ending: special update proposal will be formed, where a particular constant\n    will be set appropriately to trigger Bootstrap era end at the point update proposal gets adopted.\n    System operates the same way as in Bootstrap era, but users need to explicitly state they understand\n    owning their stake leads to responsibility to handle the node. To get his stake back user should\n    send a transaction, specifying delegate key(s) in stake distribution. It may be the key owned by user\n    himself or the key of some delegate (which may also be one or few of Bootstrap stakeholders).\n\nPlease read about [Stake Delegation in Cardano SL](/technical/delegation/) for more details about\ndelegation mechanism.\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-02-bootstrap.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-15-wallet-backend.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-15-wallet-backend.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-15-wallet-backend.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: Cardano SL Wallet Backend\npath: /en/technical/cardano-sl-wallet-backend/\ngroup: technical\nlanguage: en\nlabel: docs\n---\n<!-- Reviewed at ac0126b2753f1f5ca6fbfb555783fbeb1aa141bd -->\n\n# Cardano SL Wallet Backend\n\nWhile addresses discussed in [Addresses](/cardano/addresses/) section are\nfundamental to send and receive funds, wallets are a way to simplify these\nprocesses for end-users.\n\n## What is a Wallet?\n\nIn Cardano, wallets are defined in the following manner:\n\n``` haskell\ndata CWallet = CWallet\n    { cwId       :: !CWalletAddress\n    , cwMeta     :: !CWalletMeta\n    , cwAccounts :: ![CAccount]\n    , cwAmount   :: !CCoin\n    }\n```\n\nwhere `CWalletMeta` is a type that presently indicates whether the wallet is\nshared or personal, the currency that this wallet uses, and the wallet's name.\nWith this, the wallet type is easily extensible, as any additional features can\nbe added to the `CWalletMeta` type, leaving other fields untouched. Every\nwallet, regardless of name, type and currency, must have the said fields.\n\n## Transactions and Wallets\n\nIn the [Transactions](/cardano/transactions/) section, the structure of\ntransactions is defined. However, to facilitate client operations, transactions\nare represented differently in clients. They are represented as\n\n``` haskell\ndata CTx = CTx\n    { ctId            :: CTxId\n    , ctAmount        :: CCoin\n    , ctConfirmations :: Word\n    , ctMeta          :: CTxMeta\n    , ctInputAddrs    :: [CAddress Acc]\n    , ctOutputAddrs   :: [CAddress Acc]\n    }\n```\n\nEssentially, a client transaction is composed by the actual transaction `Id`, by\nthe amount the wallet in question received, the number of confirmations this\ntransaction has received (i.e., the number of blocks that are currently on top\nof the block containing the transaction in question), input and output\naddresses. Meta-information - the datatype `CTxMeta` - indicates the\ntransaction's currency, its title or name, its description and the\nPOSIX-formatted date of sending it.\n\n## Wallet Backend API\n\nCurrently, the wallet's API provides a series of methods to work with wallets.\nThe `servant` Haskell library that provides a modular approach to API-building\nis used. This library uses combinators both to build atomic HTTP actions and to\nglue these atomic methods together to form larger and more complete APIs.\n\nThe wallet web API is enabled by default. It uses the `IP:PORT` specified with a\n`--wallet-address` option (defaults to: `127.0.0.1:8090`).\n\nDocumentation for wallet web API is available\n[here](/technical/wallet/api/v0).\n\n### TLS Connections\n\nThe Wallet Web API uses TLS for secure communication. Calls to the API need\nto send a client CA certificate that was used when launching the node and\nidentifies the client as being permitted to invoke the server API.\n\nNote that the client certificate file is the one which was supplied as the\n`--tlsca` option, when launching the node.\n\nFor example, If that file is available as `ca.crt`, then a curl call to a node\nrunning on `localhost:8090` can be made like so -\n\n``` bash\ncurl --cacert ca.crt -v https://localhost:8090/api/settings/sync/progress\n```\n\nIf that request succeeds, then you have configured TLS properly.\n\n### Handling errors\n\nIf the event requests fail, there is a `WalletError` type, which is simply a\nwrapper over `Text` to show what happened.\n",
        "type": "MarkdownRemark",
        "contentDigest": "6d8214444d92c8e50243bfc1bf507c8f",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "Cardano SL Wallet Backend",
        "path": "/en/technical/cardano-sl-wallet-backend/",
        "group": "technical",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-15-wallet-backend.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-15-wallet-backend.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at ac0126b2753f1f5ca6fbfb555783fbeb1aa141bd -->\n\n# Cardano SL Wallet Backend\n\nWhile addresses discussed in [Addresses](/cardano/addresses/) section are\nfundamental to send and receive funds, wallets are a way to simplify these\nprocesses for end-users.\n\n## What is a Wallet?\n\nIn Cardano, wallets are defined in the following manner:\n\n``` haskell\ndata CWallet = CWallet\n    { cwId       :: !CWalletAddress\n    , cwMeta     :: !CWalletMeta\n    , cwAccounts :: ![CAccount]\n    , cwAmount   :: !CCoin\n    }\n```\n\nwhere `CWalletMeta` is a type that presently indicates whether the wallet is\nshared or personal, the currency that this wallet uses, and the wallet's name.\nWith this, the wallet type is easily extensible, as any additional features can\nbe added to the `CWalletMeta` type, leaving other fields untouched. Every\nwallet, regardless of name, type and currency, must have the said fields.\n\n## Transactions and Wallets\n\nIn the [Transactions](/cardano/transactions/) section, the structure of\ntransactions is defined. However, to facilitate client operations, transactions\nare represented differently in clients. They are represented as\n\n``` haskell\ndata CTx = CTx\n    { ctId            :: CTxId\n    , ctAmount        :: CCoin\n    , ctConfirmations :: Word\n    , ctMeta          :: CTxMeta\n    , ctInputAddrs    :: [CAddress Acc]\n    , ctOutputAddrs   :: [CAddress Acc]\n    }\n```\n\nEssentially, a client transaction is composed by the actual transaction `Id`, by\nthe amount the wallet in question received, the number of confirmations this\ntransaction has received (i.e., the number of blocks that are currently on top\nof the block containing the transaction in question), input and output\naddresses. Meta-information - the datatype `CTxMeta` - indicates the\ntransaction's currency, its title or name, its description and the\nPOSIX-formatted date of sending it.\n\n## Wallet Backend API\n\nCurrently, the wallet's API provides a series of methods to work with wallets.\nThe `servant` Haskell library that provides a modular approach to API-building\nis used. This library uses combinators both to build atomic HTTP actions and to\nglue these atomic methods together to form larger and more complete APIs.\n\nThe wallet web API is enabled by default. It uses the `IP:PORT` specified with a\n`--wallet-address` option (defaults to: `127.0.0.1:8090`).\n\nDocumentation for wallet web API is available\n[here](/technical/wallet/api/v0).\n\n### TLS Connections\n\nThe Wallet Web API uses TLS for secure communication. Calls to the API need\nto send a client CA certificate that was used when launching the node and\nidentifies the client as being permitted to invoke the server API.\n\nNote that the client certificate file is the one which was supplied as the\n`--tlsca` option, when launching the node.\n\nFor example, If that file is available as `ca.crt`, then a curl call to a node\nrunning on `localhost:8090` can be made like so -\n\n``` bash\ncurl --cacert ca.crt -v https://localhost:8090/api/settings/sync/progress\n```\n\nIf that request succeeds, then you have configured TLS properly.\n\n### Handling errors\n\nIf the event requests fail, there is a `WalletError` type, which is simply a\nwrapper over `Text` to show what happened.\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-15-wallet-backend.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-14-hd-wallets.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-14-hd-wallets.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-14-hd-wallets.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: HD wallets\npath: /en/technical/hd-wallets/\ngroup: technical\nlanguage: en\nlabel: docs\n---\n<!-- Reviewed at 866fd6a29a15c503e54426f17b91bd8b0903c5dc -->\n\n# HD wallets\n\nHierarchical Deterministic (HD) wallets allow users to derive keys from a\ncommon seed making backup easier and allowing for new wallet features and privacy\nimprovements.\n\n## How it works\n\nBasically, you generate an initial secret key `SK₀` from a\nrandom seed. Then you can derive child keys `SK₀-₀`, `SK₀-₁` from `SK₀`. From\nthese children, you can derive `SK₀-₀-₀`, `SK₀-₀-₁`, `SK₀-₁-₀` and so on\n(derivations for a tree of arbitrary depth).\n\n<!-- For subscripts and other symbols: https://help.ubuntu.com/community/ComposeKey -->\n\nWe distinguish two types of keys:\n\n-   **Hardened**\n-   **Non-hardened**\n\nThe only distinction here is that **hardened** keys allow only generation of\nchild secret keys from parent secret keys. Thus, to derive a child key for\na hardened key, you have to own the private key. **Non-hardened** keys allow one to\nderive a child public key from a parent public key (without requiring access to the secret key).\n\nEach child is assigned a 4-byte index `i`:\n\n-   `i ≤ 2³¹ - 1` for **non-hardened** keys,\n-   `i > 2³¹ - 1` for **hardened** keys.\n\n## Properties:\n\n1.  Metadata to reconstruct the tree is stored as part of the root address.\n\n## Root Address format\n\nWe start with a `PublicKey` type [address](/cardano/addresses/) and add a new field for additional attributes.\nThe attribute indexed by `0` (**HD wallets attribute**) is used to store tree\ndata in the form of **derivation paths**. Each **derivation path** is\nspecified as a list of **derivation indices**. Each **derivation index** is 4-byte\nunsigned int.\n\nThe resulting object is serialized and encrypted with the symmetric scheme\n([ChaChaPoly1305](https://en.wikipedia.org/wiki/Salsa20#ChaCha_variant) algorithm) using the passphrase computed from the SHA-512 hash of the\nroot public key. This will not allow an adversary to map all child addresses on the chain to\ntheir root as long as we do not actually store any funds on the root key (which\nis not forced by consensus rules, rather by UI).\n\n**Crucial point in wallet design:** root public keys are not used to actually store\nmoney.\n\n## Use cases\n\n### Financial audit\n\nAn auditor requires only the hash of a root public key in order to view all\nkeys / addresses in the hierarchy.\n\n### Payment server\n\n_This is applicable for **non-hardened** keys only._\n\nFor a payment server to be able to derive subsequent addresses for receiving\npayments, one of the following is required on the server:\n\n-   Root public key\n\nOr\n\n-   Payload of:\n\n    -   Public key `PK` of level `i`\n\n    -   Hash of root public key\n\n    -   Tree path for `PK`\n\n### Wallet\n\nFor a wallet to operate over some subtree, one needs to provide either:\n\n-   Root secret key\n\nOr\n\n-   Payload of:\n\n    -   Secret key `SK` of level `i`\n\n    -   Hash of root public key\n\n    -   Tree path for `SK`\n\n## Requirements\n\nLet `A(K)` denote the address that holds information about keypair `K`. Let\n`child(K, i)` denote the `i`-th child keypair of `K`. Let `tree(K)` denote the\ntree of addresses for keypairs, derived from `K` (and having positive balance)\nand held in **utxo**.\n\n`a -> b` denotes `b` is derivable from `a`. `a -x b` denotes that `b` can not be derived from `a`:\n\n    priv(K) -> pub(K)\n    pub(K) -> A(K)\n    pub(K) -x priv(K)\n    A(K) -x pub(K)\n    A(K) -x A(child(K, i))\n\nFor **hardened** keys:\n\n    (priv(K), utxo) -> tree(K)\n    pub(K) -x pub(child(K, i))\n    priv(K) -> priv(child(K, i))\n\nFor **non-hardened** keys\n\n    (pub(K), utxo) -> tree(K)\n    pub(K) -> pub(child(K, i))\n    priv(K) -> priv(child(K, i))\n\n## Derivation Crypto Interface\n\n### Notation:\n\n-   `kp` denotes a private key with index `p`. Just an **Ed25519** private key.\n\n-   `Kp` denotes public key with index `p`. Just an **Ed25519** public key.\n\n-   `cp` denotes chain code with index `p`.\n\n### Entropy\n\nBitcoin uses a 512-bit hash, but `kp` is only 256 bit. For this reason we need\nto supply 512 bits of entropy, so we do not reduce hashing space.\n\n-   Extended private key is a pair denoted as `(ki, ci)`.\n\n-   Extended public key is a pair denoted as `(Ki, ci)`.\n\nFrom application perspective, HD wallets (as defined in [BIP-32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)) introduce following crypto primitives:\n\n-   `CKDpriv :: ((kpar, cpar), i) → (ki, ci)`\n\n    Computes a child extended private key from the parent extended private key.\n\n-   `CKDpub :: ((Kpar, cpar), i) → (Ki, ci)`\n\n    Computes a child extended public key from the parent extended public key.\n\n# Daedalus HD wallets\n\nThis section describes how HD wallets are used. It is\nsplit into two parts:\n\n1.  Extension of wallet backend API to support HD wallet structure locally (as\n    implemented in Bitcoin).\n\n2.  Extension to blockchain handling to utilize new address attribute to keep HD\n    structure of multiple wallet clients in sync.\n\n## Local storage\n\n### Old storage\n\nThe old wallet stored a simple list of addresses. Each address was associated with a name\nand was derived from separate secret key (backed up by mnemonics and encrypted\nwith the spending password).\n\n### New storage\n\nWallet storage is extended to store a list of **wallets**. Each wallet corresponds\nto a single root secret key (backed up by mnemonics and encrypted with spending\npassword).\n\nEach wallet contains a number of **accounts**.\n\nEach account contains a number of **addresses** (i.e. an address is a key of the\n2nd level in a HD tree).\n\nThis maps to a HD tree:\n\n-   wallet set corresponds to key of 0-th level (*root*),\n\n-   wallet corresponds to key of 1-th level (children of root),\n\n-   address corresponds to key of 2-th level (grandchildren of root).\n\nFunds are kept only on addresses.\n\nWhen funds are spent from one or more addresses, a new one is generated\nto receive the change (unspent coins) from the payment.\n\n### Usability\n\nA user is able to:\n\n-   import/export an arbitrary number of **wallets**,\n\n-   generate an arbitrary number of **accounts**,\n\n-   assign names to **wallets** and **accounts**,\n\n-   generate an arbitrary number of **addresses**,\n\n-   change **wallet** spending password.\n\n## Backup and restore\n\nThere are two ways of backing up a wallet:\n\n-   **mnemonics**: 24 words which allow the wallet to later regenerate all required keypairs. Names will not be restored however.\n-   Wallet backup file: will restore the whole wallet structure with names.\n\n### Import\n\nIn both cases we have a secret root key which can be used to regenerate the wallet using the following procedure:\n\n-   Root key is checked to be absent from local storage.\n\n-   The **utxo set** is traversed to find all addresses with a non-zero balance\n    corresponding to each derived keypair and add them to storage along with their\n    parent wallets.\n\n-   In case of file import, the structure that resulted from step 2 is additionally labeled with\n    names (if they exist in the backup file).\n\n### New transaction handling\n\nWhen a new transaction becomes available (appears either in block or in the mempool),\nit will be analyzed to see if it modifies outputs associated with addresses belonging to a wallet we own. If it does, the address and balance is shown in the\nuser interface.\n",
        "type": "MarkdownRemark",
        "contentDigest": "8d7bfad203d87d7ae88493baa5922a68",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "HD wallets",
        "path": "/en/technical/hd-wallets/",
        "group": "technical",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-14-hd-wallets.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-14-hd-wallets.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at 866fd6a29a15c503e54426f17b91bd8b0903c5dc -->\n\n# HD wallets\n\nHierarchical Deterministic (HD) wallets allow users to derive keys from a\ncommon seed making backup easier and allowing for new wallet features and privacy\nimprovements.\n\n## How it works\n\nBasically, you generate an initial secret key `SK₀` from a\nrandom seed. Then you can derive child keys `SK₀-₀`, `SK₀-₁` from `SK₀`. From\nthese children, you can derive `SK₀-₀-₀`, `SK₀-₀-₁`, `SK₀-₁-₀` and so on\n(derivations for a tree of arbitrary depth).\n\n<!-- For subscripts and other symbols: https://help.ubuntu.com/community/ComposeKey -->\n\nWe distinguish two types of keys:\n\n-   **Hardened**\n-   **Non-hardened**\n\nThe only distinction here is that **hardened** keys allow only generation of\nchild secret keys from parent secret keys. Thus, to derive a child key for\na hardened key, you have to own the private key. **Non-hardened** keys allow one to\nderive a child public key from a parent public key (without requiring access to the secret key).\n\nEach child is assigned a 4-byte index `i`:\n\n-   `i ≤ 2³¹ - 1` for **non-hardened** keys,\n-   `i > 2³¹ - 1` for **hardened** keys.\n\n## Properties:\n\n1.  Metadata to reconstruct the tree is stored as part of the root address.\n\n## Root Address format\n\nWe start with a `PublicKey` type [address](/cardano/addresses/) and add a new field for additional attributes.\nThe attribute indexed by `0` (**HD wallets attribute**) is used to store tree\ndata in the form of **derivation paths**. Each **derivation path** is\nspecified as a list of **derivation indices**. Each **derivation index** is 4-byte\nunsigned int.\n\nThe resulting object is serialized and encrypted with the symmetric scheme\n([ChaChaPoly1305](https://en.wikipedia.org/wiki/Salsa20#ChaCha_variant) algorithm) using the passphrase computed from the SHA-512 hash of the\nroot public key. This will not allow an adversary to map all child addresses on the chain to\ntheir root as long as we do not actually store any funds on the root key (which\nis not forced by consensus rules, rather by UI).\n\n**Crucial point in wallet design:** root public keys are not used to actually store\nmoney.\n\n## Use cases\n\n### Financial audit\n\nAn auditor requires only the hash of a root public key in order to view all\nkeys / addresses in the hierarchy.\n\n### Payment server\n\n_This is applicable for **non-hardened** keys only._\n\nFor a payment server to be able to derive subsequent addresses for receiving\npayments, one of the following is required on the server:\n\n-   Root public key\n\nOr\n\n-   Payload of:\n\n    -   Public key `PK` of level `i`\n\n    -   Hash of root public key\n\n    -   Tree path for `PK`\n\n### Wallet\n\nFor a wallet to operate over some subtree, one needs to provide either:\n\n-   Root secret key\n\nOr\n\n-   Payload of:\n\n    -   Secret key `SK` of level `i`\n\n    -   Hash of root public key\n\n    -   Tree path for `SK`\n\n## Requirements\n\nLet `A(K)` denote the address that holds information about keypair `K`. Let\n`child(K, i)` denote the `i`-th child keypair of `K`. Let `tree(K)` denote the\ntree of addresses for keypairs, derived from `K` (and having positive balance)\nand held in **utxo**.\n\n`a -> b` denotes `b` is derivable from `a`. `a -x b` denotes that `b` can not be derived from `a`:\n\n    priv(K) -> pub(K)\n    pub(K) -> A(K)\n    pub(K) -x priv(K)\n    A(K) -x pub(K)\n    A(K) -x A(child(K, i))\n\nFor **hardened** keys:\n\n    (priv(K), utxo) -> tree(K)\n    pub(K) -x pub(child(K, i))\n    priv(K) -> priv(child(K, i))\n\nFor **non-hardened** keys\n\n    (pub(K), utxo) -> tree(K)\n    pub(K) -> pub(child(K, i))\n    priv(K) -> priv(child(K, i))\n\n## Derivation Crypto Interface\n\n### Notation:\n\n-   `kp` denotes a private key with index `p`. Just an **Ed25519** private key.\n\n-   `Kp` denotes public key with index `p`. Just an **Ed25519** public key.\n\n-   `cp` denotes chain code with index `p`.\n\n### Entropy\n\nBitcoin uses a 512-bit hash, but `kp` is only 256 bit. For this reason we need\nto supply 512 bits of entropy, so we do not reduce hashing space.\n\n-   Extended private key is a pair denoted as `(ki, ci)`.\n\n-   Extended public key is a pair denoted as `(Ki, ci)`.\n\nFrom application perspective, HD wallets (as defined in [BIP-32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)) introduce following crypto primitives:\n\n-   `CKDpriv :: ((kpar, cpar), i) → (ki, ci)`\n\n    Computes a child extended private key from the parent extended private key.\n\n-   `CKDpub :: ((Kpar, cpar), i) → (Ki, ci)`\n\n    Computes a child extended public key from the parent extended public key.\n\n# Daedalus HD wallets\n\nThis section describes how HD wallets are used. It is\nsplit into two parts:\n\n1.  Extension of wallet backend API to support HD wallet structure locally (as\n    implemented in Bitcoin).\n\n2.  Extension to blockchain handling to utilize new address attribute to keep HD\n    structure of multiple wallet clients in sync.\n\n## Local storage\n\n### Old storage\n\nThe old wallet stored a simple list of addresses. Each address was associated with a name\nand was derived from separate secret key (backed up by mnemonics and encrypted\nwith the spending password).\n\n### New storage\n\nWallet storage is extended to store a list of **wallets**. Each wallet corresponds\nto a single root secret key (backed up by mnemonics and encrypted with spending\npassword).\n\nEach wallet contains a number of **accounts**.\n\nEach account contains a number of **addresses** (i.e. an address is a key of the\n2nd level in a HD tree).\n\nThis maps to a HD tree:\n\n-   wallet set corresponds to key of 0-th level (*root*),\n\n-   wallet corresponds to key of 1-th level (children of root),\n\n-   address corresponds to key of 2-th level (grandchildren of root).\n\nFunds are kept only on addresses.\n\nWhen funds are spent from one or more addresses, a new one is generated\nto receive the change (unspent coins) from the payment.\n\n### Usability\n\nA user is able to:\n\n-   import/export an arbitrary number of **wallets**,\n\n-   generate an arbitrary number of **accounts**,\n\n-   assign names to **wallets** and **accounts**,\n\n-   generate an arbitrary number of **addresses**,\n\n-   change **wallet** spending password.\n\n## Backup and restore\n\nThere are two ways of backing up a wallet:\n\n-   **mnemonics**: 24 words which allow the wallet to later regenerate all required keypairs. Names will not be restored however.\n-   Wallet backup file: will restore the whole wallet structure with names.\n\n### Import\n\nIn both cases we have a secret root key which can be used to regenerate the wallet using the following procedure:\n\n-   Root key is checked to be absent from local storage.\n\n-   The **utxo set** is traversed to find all addresses with a non-zero balance\n    corresponding to each derived keypair and add them to storage along with their\n    parent wallets.\n\n-   In case of file import, the structure that resulted from step 2 is additionally labeled with\n    names (if they exist in the backup file).\n\n### New transaction handling\n\nWhen a new transaction becomes available (appears either in block or in the mempool),\nit will be analyzed to see if it modifies outputs associated with addresses belonging to a wallet we own. If it does, the address and balance is shown in the\nuser interface.\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-14-hd-wallets.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-04-differences.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-04-differences.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-04-differences.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 论文与实现的区别\npath: /cn/cardano/differences/\ngroup: cardano\nvisible: true\nlanguage: cn\nlabel: docs\n---\n<!-- Reviewed at c4c45ce9a7a8f4aa6d88a32829755196a017f6a1 -->\n\n# 乌洛波罗斯协议论文与实现的区别\n\n本文档的目标是概述卡尔达诺结算层实现方式与[论文](/glossary/#论文)中提供的乌洛波罗斯算法协议规范的不同，并阐明论文中的典型问题。\n\n本文档分为四个部分：\n\n1. *说明* - 阐述在论文中没有提到但实际实现中非常重要的细节。  \n2. *修改* - 列出哪些在论文中有说明，但在卡尔达诺结算层中以不同的方式实现。  \n3. *新增功能* - 简要概述了在论文中没有介绍但在卡尔达诺结算层中实现的新功能。  \n4. *遗漏* - 列出了论文中有描述，但尚未在卡尔达诺结算层中实现的特性。\n\n\n# 说明\n\n这一章节概述需要阐明的任何话题。\n\n\n## 时间, Slots, 和同步\n\n在协议的基本模型中，时间被分成称为 slot 的离散单位。但是，没有安全获得足够精度的当前时间的详细方法。\n\n在卡尔达诺结算层中，当前时间值从用户的计算机系统时间值获取。\n\n我们还有一个功能来通知用户他们的系统时间是否不正确（我们将它与 NTP 服务器的时间进行比较）。这个功能计划将来发布。\n\n## 投币和可验证的密钥共享\n\n论文中由 Schoenmakers 为卡尔达诺结算层提供 PVSS(Publicly Verifiable Secret Sharing) 方案。但是，卡尔达诺结算层目前使用 [\"SCRAPE: Scalable Randomness Attested by\nPublic Entities\"](https://eprint.iacr.org/2017/216.pdf) PVSS 方案 \n\n使用 VSS（可验证的密钥分享，Verifiable Secret Sharing）方案时的一个挑战是将用于签名的公钥与用于 VSS 方案的公钥相关联（`VssPublicKey`）。这是通过引入 `VssCertificate` 来解决的。这个证书是一个由签名密钥给出的签名，它由一个对 `VssPublicKey` 以及这个证书的有效时间组成。最初，所有参与随机生成的权益所有者都拥有证书。当出现一个拥有足够股份的新权益所有人时，或现有证书到期时，应该生成一个新的证书并提交给网络。`VssCertificate` 被存储在区块中。\n\nPVSS 方案使用共享验证信息，这也包括了对密钥的提交。它也被用做协议中的提交。PVSS 提交已经在 elliptic curve (TODO)\nsecp256r1 实现，请参考 [PVSS 在卡尔达诺结算层的实现](/technical/pvss/)获取更多细节。\n\n\n## 区块生成时间\n\n在论文中，他们没有明确说明何时 slot 领导者应该生成一个新的区块发送给网络：它可以在 slot 的开始，slot 的结尾，slot 的中间等等。在卡尔达诺结算层中有一个特殊的常量，叫做『网络直径』（network diameter），它接近于将区块广播到网络中所有节点所需的最大时间。例如，如果网络直径值为3，则在 slot 结束前，区块会被生成，并且广播3秒。\n\n## 权益委派\n\n权益委派，如论文中描述的，不明确规定代理签名证书是否应存储在区块链中（尽管建议存储区块链中的撤销列表）。在区块链没有存储代理签名证书的情况下，几乎没有可能考虑检查委派的股份的阈值合格性。另一方面，如果所有的证书都存储在区块链中，当大部分区块被代理证书占用时，可能会导致区块链膨胀。提交证书是免费的，所以攻击者可以根据需要生成尽可能多的证书。\n\n卡尔达诺结算层有两种委派：重量级和轻量级。加入重量级委派有一个门槛。来自重量级代理的代理签名证书存储在区块链中。相反，每个人都可以使用轻量级委派，但证书不会存储在区块链中，在检查资格限制时不会考虑证书，正如论文所建议的，使用委派代理方案。\n\n请阅读[卡尔达诺结算层权益委派]((/technical/delegation/)) 获取实现细节。\n\n\n# 修改\n\n## 领导者选举过程\n\n在论文中，领导者选举过程被描述为翻转币的有偏估计量 `(1 - p₁) … (1 - pⱼ₋₁) pⱼ`，以判断第 j 个权益所有人是否为给定 slot 的领导者。这里 `pⱼ` 为选择第 j 个权益所有人的可能性。\n\n在卡尔达诺结算层中，它以稍微不同的方式实现。生成 R 个范围为 `[0 .. totalCoins]` 的随机数，这里 `R` 为一个 epoch 里面的 slot 数量。权益所有人在这个范围内占据不同的部分，这与他们的股权成正比。这样一来，每个随机数据对应权益所有人。另外，正如论文所建议的，使用一个短的（32位）的种子来初始化 PRG，而不是使用 `n ⌈log λ⌉` 随机位数。\n\n请阅读[卡尔达诺结算层领导者选举](/technical/leader-selection/)获得实现细节。\n\n\n## 提交，开放，股权发送\n\n发送时间是在一个很小的时间间隔内随机分配的。这样做是为了避免所有投币者同时发送数据时的网络过载。这个时间间隔必须足够小，以保证协议安全。如果这个数据发送得太晚，则可能会发生数据不包含在区块中的情况。\n\n## 多个权益所有人\n\n在论文中，每个权益所有人都是基本 VSS 模型的参与者。然而，拥有更多股份的权益所有人比秘密共享股份的权益所有人更重要。例如，如果3个诚实的权益所有人控制了总共60%的股份（每个控制20%），并且有40个敌对权益所有人各持有1%的股份，那么对手就完全控制了秘密股份。\n\n为了解决这个问题，卡尔达诺结算层为每个利益相关者分配了一定比例的股份。\n\n## 随机生成失败\n\n论文没有涵盖提交无法恢复的情况。但是，一个现实的实现应该考虑这种情况。如果没有可以收回的提交，卡尔达诺结算层的实现使用由全零组成的种子。\n\n\n# 增加的特性\n\n## 更新系统\n\n请查阅这篇文章：[更新系统](/cardano/update-mechanism/).\n\n## P2P 的安全性\n\n请查阅这篇文章：[P2P 的实现和强化](/technical/protocols/p2p/).\n\n# 遗漏\n*输入背书人*和*激励结构*还没有实现。这些部分将与侧链悬而未决的研究一起实现，并随侧链的发布一起发布。\n\n",
        "type": "MarkdownRemark",
        "contentDigest": "3683fbaa862104ad721077bef028d368",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "论文与实现的区别",
        "path": "/cn/cardano/differences/",
        "group": "cardano",
        "visible": true,
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-04-differences.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-04-differences.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at c4c45ce9a7a8f4aa6d88a32829755196a017f6a1 -->\n\n# 乌洛波罗斯协议论文与实现的区别\n\n本文档的目标是概述卡尔达诺结算层实现方式与[论文](/glossary/#论文)中提供的乌洛波罗斯算法协议规范的不同，并阐明论文中的典型问题。\n\n本文档分为四个部分：\n\n1. *说明* - 阐述在论文中没有提到但实际实现中非常重要的细节。  \n2. *修改* - 列出哪些在论文中有说明，但在卡尔达诺结算层中以不同的方式实现。  \n3. *新增功能* - 简要概述了在论文中没有介绍但在卡尔达诺结算层中实现的新功能。  \n4. *遗漏* - 列出了论文中有描述，但尚未在卡尔达诺结算层中实现的特性。\n\n\n# 说明\n\n这一章节概述需要阐明的任何话题。\n\n\n## 时间, Slots, 和同步\n\n在协议的基本模型中，时间被分成称为 slot 的离散单位。但是，没有安全获得足够精度的当前时间的详细方法。\n\n在卡尔达诺结算层中，当前时间值从用户的计算机系统时间值获取。\n\n我们还有一个功能来通知用户他们的系统时间是否不正确（我们将它与 NTP 服务器的时间进行比较）。这个功能计划将来发布。\n\n## 投币和可验证的密钥共享\n\n论文中由 Schoenmakers 为卡尔达诺结算层提供 PVSS(Publicly Verifiable Secret Sharing) 方案。但是，卡尔达诺结算层目前使用 [\"SCRAPE: Scalable Randomness Attested by\nPublic Entities\"](https://eprint.iacr.org/2017/216.pdf) PVSS 方案 \n\n使用 VSS（可验证的密钥分享，Verifiable Secret Sharing）方案时的一个挑战是将用于签名的公钥与用于 VSS 方案的公钥相关联（`VssPublicKey`）。这是通过引入 `VssCertificate` 来解决的。这个证书是一个由签名密钥给出的签名，它由一个对 `VssPublicKey` 以及这个证书的有效时间组成。最初，所有参与随机生成的权益所有者都拥有证书。当出现一个拥有足够股份的新权益所有人时，或现有证书到期时，应该生成一个新的证书并提交给网络。`VssCertificate` 被存储在区块中。\n\nPVSS 方案使用共享验证信息，这也包括了对密钥的提交。它也被用做协议中的提交。PVSS 提交已经在 elliptic curve (TODO)\nsecp256r1 实现，请参考 [PVSS 在卡尔达诺结算层的实现](/technical/pvss/)获取更多细节。\n\n\n## 区块生成时间\n\n在论文中，他们没有明确说明何时 slot 领导者应该生成一个新的区块发送给网络：它可以在 slot 的开始，slot 的结尾，slot 的中间等等。在卡尔达诺结算层中有一个特殊的常量，叫做『网络直径』（network diameter），它接近于将区块广播到网络中所有节点所需的最大时间。例如，如果网络直径值为3，则在 slot 结束前，区块会被生成，并且广播3秒。\n\n## 权益委派\n\n权益委派，如论文中描述的，不明确规定代理签名证书是否应存储在区块链中（尽管建议存储区块链中的撤销列表）。在区块链没有存储代理签名证书的情况下，几乎没有可能考虑检查委派的股份的阈值合格性。另一方面，如果所有的证书都存储在区块链中，当大部分区块被代理证书占用时，可能会导致区块链膨胀。提交证书是免费的，所以攻击者可以根据需要生成尽可能多的证书。\n\n卡尔达诺结算层有两种委派：重量级和轻量级。加入重量级委派有一个门槛。来自重量级代理的代理签名证书存储在区块链中。相反，每个人都可以使用轻量级委派，但证书不会存储在区块链中，在检查资格限制时不会考虑证书，正如论文所建议的，使用委派代理方案。\n\n请阅读[卡尔达诺结算层权益委派]((/technical/delegation/)) 获取实现细节。\n\n\n# 修改\n\n## 领导者选举过程\n\n在论文中，领导者选举过程被描述为翻转币的有偏估计量 `(1 - p₁) … (1 - pⱼ₋₁) pⱼ`，以判断第 j 个权益所有人是否为给定 slot 的领导者。这里 `pⱼ` 为选择第 j 个权益所有人的可能性。\n\n在卡尔达诺结算层中，它以稍微不同的方式实现。生成 R 个范围为 `[0 .. totalCoins]` 的随机数，这里 `R` 为一个 epoch 里面的 slot 数量。权益所有人在这个范围内占据不同的部分，这与他们的股权成正比。这样一来，每个随机数据对应权益所有人。另外，正如论文所建议的，使用一个短的（32位）的种子来初始化 PRG，而不是使用 `n ⌈log λ⌉` 随机位数。\n\n请阅读[卡尔达诺结算层领导者选举](/technical/leader-selection/)获得实现细节。\n\n\n## 提交，开放，股权发送\n\n发送时间是在一个很小的时间间隔内随机分配的。这样做是为了避免所有投币者同时发送数据时的网络过载。这个时间间隔必须足够小，以保证协议安全。如果这个数据发送得太晚，则可能会发生数据不包含在区块中的情况。\n\n## 多个权益所有人\n\n在论文中，每个权益所有人都是基本 VSS 模型的参与者。然而，拥有更多股份的权益所有人比秘密共享股份的权益所有人更重要。例如，如果3个诚实的权益所有人控制了总共60%的股份（每个控制20%），并且有40个敌对权益所有人各持有1%的股份，那么对手就完全控制了秘密股份。\n\n为了解决这个问题，卡尔达诺结算层为每个利益相关者分配了一定比例的股份。\n\n## 随机生成失败\n\n论文没有涵盖提交无法恢复的情况。但是，一个现实的实现应该考虑这种情况。如果没有可以收回的提交，卡尔达诺结算层的实现使用由全零组成的种子。\n\n\n# 增加的特性\n\n## 更新系统\n\n请查阅这篇文章：[更新系统](/cardano/update-mechanism/).\n\n## P2P 的安全性\n\n请查阅这篇文章：[P2P 的实现和强化](/technical/protocols/p2p/).\n\n# 遗漏\n*输入背书人*和*激励结构*还没有实现。这些部分将与侧链悬而未决的研究一起实现，并随侧链的发布一起发布。\n\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-04-differences.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-07-addresses.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-07-addresses.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-07-addresses.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 地址\npath: /cn/cardano/addresses/\ngroup: cardano\nlanguage: cn\nlabel: docs\n---\n<!-- Reviewed at a6a1cdf72c7e167a13f500c0679c01fe4cfa0ca8 -->\n\n# 卡尔达诺结算层的地址\n\n要发送和接收价值，基本所有加密货币都使用地址。卡尔达诺结算层支持3种类型的地址：\n\n1. 公钥地址\n2. 脚本地址\n3. 兑换地址\n\n公钥地址在就像其他的加密货币一样，是个正常的，经过哈希的公钥。\n\n脚本地址被用在一个称为『支付脚本 Hash』（P2SH）的交易中。它会自动运作，就像银行里的存款一样：你可以向它汇款，但为了兑换这笔钱你必须满足一些特定的条件，条件由于地址相关的脚本决定。地址本身包含着序列化脚本的哈希值。请阅读下面的 [P2SH](#pay-to-script-hash) 获取更多信息。\n\n赎回地址是 ADA 赎回的一种特殊地址类型。\n\n不仅如此，卡尔达诺结算层还支持 `Unknown` 地址类型。这种类型可以允许我们在未来使用自定义的地址类型。\n\n\n## 地址看起来像什么？\n\n地址是 `base58` 编码的字符串，例如：\n\n```\nAe2tdPwUPEZKmwoy3AU3cXb5Chnasj6mvVNxV1H11997q3VW5ihbSfQwGpm\n```\n\n### 编码\n\n`base58` 编码也是比特币中使用的编码。它使用58个符号的字母表来对数据进行编码，这也是它名字的由来。下面就是我们使用的字母表：\n\n\n```\n123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\n```\n\n它去除了非字母数字字符和显示时看起来模棱两可的字母（`0`, `O`, `I`, `l`）；因此它适用于手动输入数据，从可视化的源代码复制数据的普通用户，并且允许通过双击来简单的拷贝和粘贴，不过双击通常会选择整个字符串。\n\n## 公钥地址\n\n就像[介绍](/introduction/#you-own-your-money)章节提到的，在用户界面你看到钱包就代表着在这个特定的钱包中你拥有可以花费这笔钱的私钥。但是这样的花销是如何被网络验证，你又如何接收到别人支付给你的钱呢？答案就是跟控制你钱包价值的私钥一起产生的一个公钥。这个公共的部分即指可以被任何人知道，因此叫做『公钥』。\n\n一个公钥的地址包含了公钥的哈希值。\n\n公钥同时用来在你创建一个交易或其他辅助用途的时候验证你的身份。\n\n\n## P2SH\n\nP2SH 的思想是为花费制定复杂的规则提供很大的灵活性。与发送一笔交易到公钥地址不同，我们创建一个验证脚本，该脚本使用赎回脚本当做参数。为了赎回里面的资金，我们发送一个赎回请求给验证器，然后开始计算。如果计算结果是 `success`, 钱就会被汇到指定的赎回者那里，否则的话什么都不会发生。\n\n引用一下比特币 WiKi：\n\n> 使用 P2SH，你可以将比特币打给一个用多种不常见的方法保护着的地址，不用知道关于该地址安全设置的任何详细信息。接收者可能需要多个人的签名，或一个密码，或一个非常独特的要求才能使用这些比特币。\n\n\n## 赎回地址\n\n赎回地址就是 P2PKH。这样的地址包含了赎回公钥的哈希值，并且这个钥匙是 [Ed25519](http://ed25519.cr.yp.to/) 公钥。\n\n## 其他地址类型\n\n在未来，我们可能会用升级的系统来引入其他地址类型。请阅读[查看更多](/cardano/update-mechanism/#soft-fork-updates) 来了解以无缝升级的方式来扩展系统的相关信息。\n\n## 地址结构\n\n地址由三部分组成\n\n* 地址根\n* 地址属性\n* 地址类型\n\n我们可以把地址想象成类似 JSON 的结构，例如：\n\n```\nAddress {\n    addrRoot = AbstractHash e63175c654dfd93a9290342a067158dc0f57a1108ddbd8cace3839bd,\n    addrAttributes = Attributes {\n        data: AddrAttributes {\n            aaPkDerivationPath = Nothing,\n            aaStakeDistribution = BootstrapEraDistr\n        } \n    },\n    addrType = ATPubKey\n}\n```\n\n`addrRoot` 是由 `addrType`、`addrSpendingData`、`addrAttributes` 组成数组的 BLAKE2b-224 哈希值。\n\n\naddrSpendingData 是一个与地址绑定的特殊值，消费在这个地址的币必须是被公开的。例如，对于公钥来说，这个值就包含着公钥。这样一来，在不知道公钥的时候不可能改变地址属性，因为如果属性改变了，整个地址就变成无效的了。\n\n`addrAttributes` 包含了每个地址重要的属性：衍生的路径和权益的分配。\n\n想要了解更多关于衍生路径的内容请阅读[卡尔达诺结算层的 HD 钱包](https://cardanodocs.com/technical/hd-wallets/)章节。\n\n想要了解更多关于权益分配的内容请阅读[卡尔达诺结算层的转账](https://cardanodocs.com/cardano/transactions/#stake-distribution)章节。\n\n`addrType` 的值与上面提到的地址类型相对应，在上面的例子中它是一个公钥地址。\n\n### 长度\n\n地址的长度可能是不同的，地址长度与地址类型和附加数据有关。\n\n例如这个地址：\n\n```\nAe2tdPwUPEZKmwoy3AU3cXb5Chnasj6mvVNxV1H11997q3VW5ihbSfQwGpm\n```\n\n以及这个地址：\n\n```\n4swhHtxKapQbj3TZEipgtp7NQzcRWDYqCxXYoPQWjGyHmhxS1w1TjUEszCQT1sQucGwmPQMYdv1FYs3d51KgoubviPBf\n```\n\n都是公钥地址。\n",
        "type": "MarkdownRemark",
        "contentDigest": "d8fe7df8f87ff4b2eaef83955bde668f",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "地址",
        "path": "/cn/cardano/addresses/",
        "group": "cardano",
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-07-addresses.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-07-addresses.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at a6a1cdf72c7e167a13f500c0679c01fe4cfa0ca8 -->\n\n# 卡尔达诺结算层的地址\n\n要发送和接收价值，基本所有加密货币都使用地址。卡尔达诺结算层支持3种类型的地址：\n\n1. 公钥地址\n2. 脚本地址\n3. 兑换地址\n\n公钥地址在就像其他的加密货币一样，是个正常的，经过哈希的公钥。\n\n脚本地址被用在一个称为『支付脚本 Hash』（P2SH）的交易中。它会自动运作，就像银行里的存款一样：你可以向它汇款，但为了兑换这笔钱你必须满足一些特定的条件，条件由于地址相关的脚本决定。地址本身包含着序列化脚本的哈希值。请阅读下面的 [P2SH](#pay-to-script-hash) 获取更多信息。\n\n赎回地址是 ADA 赎回的一种特殊地址类型。\n\n不仅如此，卡尔达诺结算层还支持 `Unknown` 地址类型。这种类型可以允许我们在未来使用自定义的地址类型。\n\n\n## 地址看起来像什么？\n\n地址是 `base58` 编码的字符串，例如：\n\n```\nAe2tdPwUPEZKmwoy3AU3cXb5Chnasj6mvVNxV1H11997q3VW5ihbSfQwGpm\n```\n\n### 编码\n\n`base58` 编码也是比特币中使用的编码。它使用58个符号的字母表来对数据进行编码，这也是它名字的由来。下面就是我们使用的字母表：\n\n\n```\n123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\n```\n\n它去除了非字母数字字符和显示时看起来模棱两可的字母（`0`, `O`, `I`, `l`）；因此它适用于手动输入数据，从可视化的源代码复制数据的普通用户，并且允许通过双击来简单的拷贝和粘贴，不过双击通常会选择整个字符串。\n\n## 公钥地址\n\n就像[介绍](/introduction/#you-own-your-money)章节提到的，在用户界面你看到钱包就代表着在这个特定的钱包中你拥有可以花费这笔钱的私钥。但是这样的花销是如何被网络验证，你又如何接收到别人支付给你的钱呢？答案就是跟控制你钱包价值的私钥一起产生的一个公钥。这个公共的部分即指可以被任何人知道，因此叫做『公钥』。\n\n一个公钥的地址包含了公钥的哈希值。\n\n公钥同时用来在你创建一个交易或其他辅助用途的时候验证你的身份。\n\n\n## P2SH\n\nP2SH 的思想是为花费制定复杂的规则提供很大的灵活性。与发送一笔交易到公钥地址不同，我们创建一个验证脚本，该脚本使用赎回脚本当做参数。为了赎回里面的资金，我们发送一个赎回请求给验证器，然后开始计算。如果计算结果是 `success`, 钱就会被汇到指定的赎回者那里，否则的话什么都不会发生。\n\n引用一下比特币 WiKi：\n\n> 使用 P2SH，你可以将比特币打给一个用多种不常见的方法保护着的地址，不用知道关于该地址安全设置的任何详细信息。接收者可能需要多个人的签名，或一个密码，或一个非常独特的要求才能使用这些比特币。\n\n\n## 赎回地址\n\n赎回地址就是 P2PKH。这样的地址包含了赎回公钥的哈希值，并且这个钥匙是 [Ed25519](http://ed25519.cr.yp.to/) 公钥。\n\n## 其他地址类型\n\n在未来，我们可能会用升级的系统来引入其他地址类型。请阅读[查看更多](/cardano/update-mechanism/#soft-fork-updates) 来了解以无缝升级的方式来扩展系统的相关信息。\n\n## 地址结构\n\n地址由三部分组成\n\n* 地址根\n* 地址属性\n* 地址类型\n\n我们可以把地址想象成类似 JSON 的结构，例如：\n\n```\nAddress {\n    addrRoot = AbstractHash e63175c654dfd93a9290342a067158dc0f57a1108ddbd8cace3839bd,\n    addrAttributes = Attributes {\n        data: AddrAttributes {\n            aaPkDerivationPath = Nothing,\n            aaStakeDistribution = BootstrapEraDistr\n        } \n    },\n    addrType = ATPubKey\n}\n```\n\n`addrRoot` 是由 `addrType`、`addrSpendingData`、`addrAttributes` 组成数组的 BLAKE2b-224 哈希值。\n\n\naddrSpendingData 是一个与地址绑定的特殊值，消费在这个地址的币必须是被公开的。例如，对于公钥来说，这个值就包含着公钥。这样一来，在不知道公钥的时候不可能改变地址属性，因为如果属性改变了，整个地址就变成无效的了。\n\n`addrAttributes` 包含了每个地址重要的属性：衍生的路径和权益的分配。\n\n想要了解更多关于衍生路径的内容请阅读[卡尔达诺结算层的 HD 钱包](https://cardanodocs.com/technical/hd-wallets/)章节。\n\n想要了解更多关于权益分配的内容请阅读[卡尔达诺结算层的转账](https://cardanodocs.com/cardano/transactions/#stake-distribution)章节。\n\n`addrType` 的值与上面提到的地址类型相对应，在上面的例子中它是一个公钥地址。\n\n### 长度\n\n地址的长度可能是不同的，地址长度与地址类型和附加数据有关。\n\n例如这个地址：\n\n```\nAe2tdPwUPEZKmwoy3AU3cXb5Chnasj6mvVNxV1H11997q3VW5ihbSfQwGpm\n```\n\n以及这个地址：\n\n```\n4swhHtxKapQbj3TZEipgtp7NQzcRWDYqCxXYoPQWjGyHmhxS1w1TjUEszCQT1sQucGwmPQMYdv1FYs3d51KgoubviPBf\n```\n\n都是公钥地址。\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-07-addresses.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-13-balance-and-stake.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-13-balance-and-stake.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-13-balance-and-stake.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 余额和权益\npath: /cn/cardano/balance-and-stake/\ngroup: cardano\nlanguage: cn\nlabel: docs\n---\n<!-- Reviewed at e070e675764738b5190b2f93424de403f1937216 -->\n\n# 卡尔达诺结算层的余额和权益是怎么运行的\n\n卡尔达诺结算层中有两个重要的概念：余额和权益。这一章将解释着两个概念的差异。\n\n### 余额\n\n余额是用户真实拥有的币数。当你在计算机上安装了代达罗斯钱包，执行 [Ada 兑换](/timeline/bootstrap/)流程时，您会收到一定数量的 Ada 币。这个 Ada 币的数量称为你的余额，您可以向其他用户发送一定数量的 Ada 币（在此余额内），也可以从其他用户接收任意数量的 Ada 币。\n\n因此，当我们谈到余额时，我们讨论的是用户的实际资金。\n\n\n### 权益\n\n与余额（拥有的实际数额）不同，权益是卡尔达诺结算层整个金融系统的关键因素。权益让用户能够控制各种卡尔达诺结算层的算法，比如：成为 slot 领导者，在更新系统中投票，参加 MPC/ SSC，这就是为什么卡尔达诺结算层协议中的所有阈值都以权益，而不是余额来表示。\n\n因此，当我们谈到权益时，我们正在讨论用户实际控制卡尔达诺结算层的能力。有关权益的更多信息，请参阅[论文](/glossary/#论文)\n\n\n### 余额和权益的关系\n\n卡尔达诺结算层的每一枚币都与余额和权益相关。我们使用[交易输出](/cardano/transactions/#design)将币 `C` 与用户余额相关联，并且我们使用股权分配将币 `C` 与用户权益相关联。\n\n注意：可以使用权益委派来更改币和股权之间的关联。",
        "type": "MarkdownRemark",
        "contentDigest": "cf13d4984b9b8e5ec4bbcc314d851ce8",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "余额和权益",
        "path": "/cn/cardano/balance-and-stake/",
        "group": "cardano",
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-13-balance-and-stake.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-13-balance-and-stake.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at e070e675764738b5190b2f93424de403f1937216 -->\n\n# 卡尔达诺结算层的余额和权益是怎么运行的\n\n卡尔达诺结算层中有两个重要的概念：余额和权益。这一章将解释着两个概念的差异。\n\n### 余额\n\n余额是用户真实拥有的币数。当你在计算机上安装了代达罗斯钱包，执行 [Ada 兑换](/timeline/bootstrap/)流程时，您会收到一定数量的 Ada 币。这个 Ada 币的数量称为你的余额，您可以向其他用户发送一定数量的 Ada 币（在此余额内），也可以从其他用户接收任意数量的 Ada 币。\n\n因此，当我们谈到余额时，我们讨论的是用户的实际资金。\n\n\n### 权益\n\n与余额（拥有的实际数额）不同，权益是卡尔达诺结算层整个金融系统的关键因素。权益让用户能够控制各种卡尔达诺结算层的算法，比如：成为 slot 领导者，在更新系统中投票，参加 MPC/ SSC，这就是为什么卡尔达诺结算层协议中的所有阈值都以权益，而不是余额来表示。\n\n因此，当我们谈到权益时，我们正在讨论用户实际控制卡尔达诺结算层的能力。有关权益的更多信息，请参阅[论文](/glossary/#论文)\n\n\n### 余额和权益的关系\n\n卡尔达诺结算层的每一枚币都与余额和权益相关。我们使用[交易输出](/cardano/transactions/#design)将币 `C` 与用户余额相关联，并且我们使用股权分配将币 `C` 与用户权益相关联。\n\n注意：可以使用权益委派来更改币和股权之间的关联。",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-13-balance-and-stake.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-19-topology.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-19-topology.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-19-topology.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 拓扑\npath: /cn/cardano/topology/\ngroup: cardano\nlanguage: cn\nlabel: docs\n---\n<!-- Reviewed at ba744590c89d8ffa6d6f0919ec11f52202a6d8f2 -->\n\n# 卡尔达诺结算层网络拓扑\n\n这一篇是卡尔达诺结算层网络拓扑的概述\n\n## 节点组\n\n虽然卡尔达诺结算层被设计，实现为一个分布式网络，为了防 DDoS，卡尔达诺结算层的实现和拓扑加入了一些额外的功能。当前所有的节点被分为三组：\n\n* 核心组\n* 中继组\n* 边缘组\n\n\n让我们分别讲解一下每组的节点。\n\n### 核心节点\n\n核心节点是最重要的。\n\n就像[这里](/timeline/bootstrap/#stake-locking)描述的, 在 Byron 版本中，我们将会把权益高效地锁定在核心节点联盟上。只有很少的节点能够成为[领导者](/glossary/#slot-leader)，所以只有这些节点能够在这个时期生成新区块。这是网络核心节点能够很好的运行和维护区块链的精髓所在。我们还为核心节点提供了更高的安全级别：我们把它们放在中介节点的中间，因此核心节点与公有网络隔离，并且只允许中继节点和核心节点进行同学。这就是我们减少核心节点被攻击的方法。\n\n请注意核心节点永远不会创建货币交易（只有边缘节点可以创建，请看下文）。\n\n### 中继节点\n\n你可以将中继节点想象为核心节点和公有网络的代理。\n\n因为中继节点是不隔离的，所以它们可以被攻击，原则上它们没有状态而且没有权益，所以它们可以被移除，也可以增加数量。如果中继节点崩溃了，会导致拒绝服务，但核心节点（和区块链）的完整性不会受影响。\n\n由于中继节点没有任何权益，所以它们不能成为领导者。不仅如此，它们也不能创建货币交易。\n\n中继节点是完全被初始股东联合会控制的。\n\n### 边缘节点\n\n边缘节点是最简单的节点，每个人都可以在自己的电脑上运行边缘节点，只有这些节点可以创建货币交易。\n\n由于边缘节点没有任何的权益，它们同中继节点一样不能成为领导者，此外，边缘节点不能直接与核心节点通信，只能与中继节点以及其他边缘节点进行通信。\n\n",
        "type": "MarkdownRemark",
        "contentDigest": "d8978e79268ecb5827495c104040018b",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "拓扑",
        "path": "/cn/cardano/topology/",
        "group": "cardano",
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-19-topology.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-19-topology.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at ba744590c89d8ffa6d6f0919ec11f52202a6d8f2 -->\n\n# 卡尔达诺结算层网络拓扑\n\n这一篇是卡尔达诺结算层网络拓扑的概述\n\n## 节点组\n\n虽然卡尔达诺结算层被设计，实现为一个分布式网络，为了防 DDoS，卡尔达诺结算层的实现和拓扑加入了一些额外的功能。当前所有的节点被分为三组：\n\n* 核心组\n* 中继组\n* 边缘组\n\n\n让我们分别讲解一下每组的节点。\n\n### 核心节点\n\n核心节点是最重要的。\n\n就像[这里](/timeline/bootstrap/#stake-locking)描述的, 在 Byron 版本中，我们将会把权益高效地锁定在核心节点联盟上。只有很少的节点能够成为[领导者](/glossary/#slot-leader)，所以只有这些节点能够在这个时期生成新区块。这是网络核心节点能够很好的运行和维护区块链的精髓所在。我们还为核心节点提供了更高的安全级别：我们把它们放在中介节点的中间，因此核心节点与公有网络隔离，并且只允许中继节点和核心节点进行同学。这就是我们减少核心节点被攻击的方法。\n\n请注意核心节点永远不会创建货币交易（只有边缘节点可以创建，请看下文）。\n\n### 中继节点\n\n你可以将中继节点想象为核心节点和公有网络的代理。\n\n因为中继节点是不隔离的，所以它们可以被攻击，原则上它们没有状态而且没有权益，所以它们可以被移除，也可以增加数量。如果中继节点崩溃了，会导致拒绝服务，但核心节点（和区块链）的完整性不会受影响。\n\n由于中继节点没有任何权益，所以它们不能成为领导者。不仅如此，它们也不能创建货币交易。\n\n中继节点是完全被初始股东联合会控制的。\n\n### 边缘节点\n\n边缘节点是最简单的节点，每个人都可以在自己的电脑上运行边缘节点，只有这些节点可以创建货币交易。\n\n由于边缘节点没有任何的权益，它们同中继节点一样不能成为领导者，此外，边缘节点不能直接与核心节点通信，只能与中继节点以及其他边缘节点进行通信。\n\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-19-topology.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-01-monetary-policy.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-01-monetary-policy.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-01-monetary-policy.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 货币政策\npath: /cn/cardano/monetary-policy/\ngroup: cardano\nlanguage: cn\nlabel: docs\n---\n<!-- Reviewed at 1bd2a2f5979233f4f50a7e66ab4e1819ac486400 -->\n\n# 卡尔达诺货币政策\n\n<div  markdown=\"1\">\n\n### ADA 币在卡尔达诺协议发布时发行\n\n启动期间的销售，卖出了 25,927,070,538 个 Ada 币。5,185,414,108 个 ADA 币，相当于所售 ADA 数量的 20%，生成并分发给组成卡尔达诺技术和业务生态系统的三个实体：[IOHK](https://iohk.io), [Emurgo](http://emurgo.io/) 以及 [卡尔达诺基金会](https://cardanofoundation.org/)。因此 ADA 发布时的总量是 31,112,484,646 个。\n\n### ADA 供给量\n\nAda 币以 45,000,000,000 或者说 450 亿封顶。\n\n\n### 卡尔达诺协议运行期间发行的 ADA 币\n\n剩余的 13,887,515,354 个 ADA 币，将在铸币的过程中发行。\n\n\n注意：ADA 的数量永远不会超过 45,000,000,000\n</div>\n\n\n## 财政和费用\n<div  markdown=\"1\">\n这一章将概述财政政策和相关费用。\n\n### 启动阶段 (发行)\n\n卡尔达诺正处于启动阶段。在这个阶段，交易费没有被收集起来，没有 ADA 被铸造。这一时期的费用会在未来被收集然后他们就会被销毁。\n\n\n### 国库\n\n卡尔达诺将有一个国库。这个国库由部分（还没决定）新铸造的 ADA 币以及转账费用捐赠。国库为 ADA 持有者所有。\n\n### 最小费用 (当前计算方式)\n\n最小费用 = 0.155381 ADA + 0.000043946 (ADA/字节) x 转账数据大小\n\n费用计算和激励措施仍在研究中。\n\n\n### 面额\n- 1 ADA = 1,000,000 Lovelaces\n- 1 Lovelace = 1/1,000,000 Ada\n- Ada 有6个小数点\n- 1.000000 = 1 ADA\n- 0.000001 = 1 Lovelace\n\n在货币单位方面有两点考虑。首先在日本，日元面额要大得多，10000 日元相当于 100美元，相当于250亿 ADA 对应 两亿五千万。第二点，与比特币的8位小数不同，ADA 有6位小数，一个 ADA 有100万个 Lovelaces（最小单位）。Adjusting for this takes you to 2.5 million. (TODO)\n\n</div>\n",
        "type": "MarkdownRemark",
        "contentDigest": "f41d9ed984ce96fde5771c2601297e21",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "货币政策",
        "path": "/cn/cardano/monetary-policy/",
        "group": "cardano",
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-01-monetary-policy.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-01-monetary-policy.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at 1bd2a2f5979233f4f50a7e66ab4e1819ac486400 -->\n\n# 卡尔达诺货币政策\n\n<div  markdown=\"1\">\n\n### ADA 币在卡尔达诺协议发布时发行\n\n启动期间的销售，卖出了 25,927,070,538 个 Ada 币。5,185,414,108 个 ADA 币，相当于所售 ADA 数量的 20%，生成并分发给组成卡尔达诺技术和业务生态系统的三个实体：[IOHK](https://iohk.io), [Emurgo](http://emurgo.io/) 以及 [卡尔达诺基金会](https://cardanofoundation.org/)。因此 ADA 发布时的总量是 31,112,484,646 个。\n\n### ADA 供给量\n\nAda 币以 45,000,000,000 或者说 450 亿封顶。\n\n\n### 卡尔达诺协议运行期间发行的 ADA 币\n\n剩余的 13,887,515,354 个 ADA 币，将在铸币的过程中发行。\n\n\n注意：ADA 的数量永远不会超过 45,000,000,000\n</div>\n\n\n## 财政和费用\n<div  markdown=\"1\">\n这一章将概述财政政策和相关费用。\n\n### 启动阶段 (发行)\n\n卡尔达诺正处于启动阶段。在这个阶段，交易费没有被收集起来，没有 ADA 被铸造。这一时期的费用会在未来被收集然后他们就会被销毁。\n\n\n### 国库\n\n卡尔达诺将有一个国库。这个国库由部分（还没决定）新铸造的 ADA 币以及转账费用捐赠。国库为 ADA 持有者所有。\n\n### 最小费用 (当前计算方式)\n\n最小费用 = 0.155381 ADA + 0.000043946 (ADA/字节) x 转账数据大小\n\n费用计算和激励措施仍在研究中。\n\n\n### 面额\n- 1 ADA = 1,000,000 Lovelaces\n- 1 Lovelace = 1/1,000,000 Ada\n- Ada 有6个小数点\n- 1.000000 = 1 ADA\n- 0.000001 = 1 Lovelace\n\n在货币单位方面有两点考虑。首先在日本，日元面额要大得多，10000 日元相当于 100美元，相当于250亿 ADA 对应 两亿五千万。第二点，与比特币的8位小数不同，ADA 有6位小数，一个 ADA 有100万个 Lovelaces（最小单位）。Adjusting for this takes you to 2.5 million. (TODO)\n\n</div>\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-01-monetary-policy.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-02-transaction-fees.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-02-transaction-fees.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-02-transaction-fees.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 转账费用\npath: /cn/cardano/transaction-fees/\ngroup: cardano\nlanguage: cn\nlabel: docs\n---\n\n# 卡尔达诺结算层的转账费用\n\n## 驱动力\n\n卡尔达诺结算层需要交易费主要因为两个原因：\n\n1. 人们运行卡尔达诺结算层完整节点，需要花费时间、金钱和经历来运行协议，为此他们应得到补偿和奖励。在卡尔达诺结算层中与比特币不同的是，当新货币在每个区块被挖出时，交易费用是协议参与者的唯一收入来源。\n\n2. 第二个原因是为了防 DDoS（分布式拒绝服务攻击）。在 DDoS 攻击者，攻击者尝试用虚假交易来冲击网络，如果他必须为每个虚假交易支付足够高的费用，这种攻击形式对于他来说就过于昂贵了。\n\n\n## 交易费用如何运作\n\n每当有人想要转移一定数量的 Ada，这笔转账就会有一个最低的转账费。如果想让这个交易有效，必须包含这笔很小的费用，尽管发送者可以选择支付更高的费用。\n\n请阅读[下面](#transaction-fees-distribution)的交易分配方式。\n\n\n## 最低转账费\n\n一笔转账的最低费用通过下面的公式计算：\n\n\n```\na + b × size\n```\n\n其中:\n\n* `a` 是一个特殊常量，目前是 0.155381 ADA;\n* `b` 是一个特殊常量，目前是 0.000043946 ADA/byte;\n* `size` 是以字节为单位的转账数据大小\n\n\n这意味着每笔交易至少需要 0.155381 ADA, 每字节的交易需要额外的 0.000043946 ADA。例如，大小为200字节（相当典型的大小）的转账费用是：\n\n```\n0.155381 ADA + 0.000043946 ADA/byte × 200 byte = 0.1641702 ADA.\n```\n\n有参数 `a` 的原因是为了防止上面提到的 DDoS 攻击：即使是非常小的虚假交易也要花费足够的代价，以此来防止试图产生成千上万交易的攻击者。\n\n引入参数 `b` 用来反映实际成本：存储更大的交易比存储更小的交易需要更多计算机内存，因此数据量更大的交易应该比数据量小的交易收费更贵。\n\n虽然是通过特定参数 `a` 和 `b` 计算的，这些值可能会在未来进行调整，以更好地反映实际成本。\n\n## 交易分配方式\n\n在一个特定 [epoch](http://cardanodocs.com/glossary/cn/#epoch) 中产生的交易费用会被收集到一个虚拟池里，然后将这个池里的资金重新分配给由 PoS 算法选举的那些 [slot 领导者](https://cardanodocs.com/glossary/cn/#slot-leader)。\n\n在卡尔达诺结算层这个阶段，所有的区块都是有 IOHK 以及我们的合作伙伴运行的节点创建的，收集了费用（为了防止 DDoS 攻击），但它们不会被重新分配，而是被销毁。\n\n\n不久，卡尔达诺结算层进入下一个阶段，[完全分布式阶段](https://cardanoroadmap.com/)后，费用会按如上所述分配。\n\n",
        "type": "MarkdownRemark",
        "contentDigest": "da1cb00d4ad9e2a3d257c89504bfafa0",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "转账费用",
        "path": "/cn/cardano/transaction-fees/",
        "group": "cardano",
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-02-transaction-fees.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-02-transaction-fees.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n# 卡尔达诺结算层的转账费用\n\n## 驱动力\n\n卡尔达诺结算层需要交易费主要因为两个原因：\n\n1. 人们运行卡尔达诺结算层完整节点，需要花费时间、金钱和经历来运行协议，为此他们应得到补偿和奖励。在卡尔达诺结算层中与比特币不同的是，当新货币在每个区块被挖出时，交易费用是协议参与者的唯一收入来源。\n\n2. 第二个原因是为了防 DDoS（分布式拒绝服务攻击）。在 DDoS 攻击者，攻击者尝试用虚假交易来冲击网络，如果他必须为每个虚假交易支付足够高的费用，这种攻击形式对于他来说就过于昂贵了。\n\n\n## 交易费用如何运作\n\n每当有人想要转移一定数量的 Ada，这笔转账就会有一个最低的转账费。如果想让这个交易有效，必须包含这笔很小的费用，尽管发送者可以选择支付更高的费用。\n\n请阅读[下面](#transaction-fees-distribution)的交易分配方式。\n\n\n## 最低转账费\n\n一笔转账的最低费用通过下面的公式计算：\n\n\n```\na + b × size\n```\n\n其中:\n\n* `a` 是一个特殊常量，目前是 0.155381 ADA;\n* `b` 是一个特殊常量，目前是 0.000043946 ADA/byte;\n* `size` 是以字节为单位的转账数据大小\n\n\n这意味着每笔交易至少需要 0.155381 ADA, 每字节的交易需要额外的 0.000043946 ADA。例如，大小为200字节（相当典型的大小）的转账费用是：\n\n```\n0.155381 ADA + 0.000043946 ADA/byte × 200 byte = 0.1641702 ADA.\n```\n\n有参数 `a` 的原因是为了防止上面提到的 DDoS 攻击：即使是非常小的虚假交易也要花费足够的代价，以此来防止试图产生成千上万交易的攻击者。\n\n引入参数 `b` 用来反映实际成本：存储更大的交易比存储更小的交易需要更多计算机内存，因此数据量更大的交易应该比数据量小的交易收费更贵。\n\n虽然是通过特定参数 `a` 和 `b` 计算的，这些值可能会在未来进行调整，以更好地反映实际成本。\n\n## 交易分配方式\n\n在一个特定 [epoch](http://cardanodocs.com/glossary/cn/#epoch) 中产生的交易费用会被收集到一个虚拟池里，然后将这个池里的资金重新分配给由 PoS 算法选举的那些 [slot 领导者](https://cardanodocs.com/glossary/cn/#slot-leader)。\n\n在卡尔达诺结算层这个阶段，所有的区块都是有 IOHK 以及我们的合作伙伴运行的节点创建的，收集了费用（为了防止 DDoS 攻击），但它们不会被重新分配，而是被销毁。\n\n\n不久，卡尔达诺结算层进入下一个阶段，[完全分布式阶段](https://cardanoroadmap.com/)后，费用会按如上所述分配。\n\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-02-transaction-fees.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-16-wallet-frontend.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-16-wallet-frontend.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-16-wallet-frontend.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: Cardano SL Wallet Frontend\npath: /en/technical/cardano-sl-wallet-frontend/\ngroup: technical\nlanguage: en\nlabel: docs\n---\n<!-- Reviewed at cd26fb28eb48f893a4ca2d045a10da19c211b807 -->\n\n# Cardano SL Wallet Frontend\n\nWhen developing Cardano SL, the need arose for a UI from which users could\naccess their funds, send and receive transactions, and perform other tasks\nrelated to managing a personal cryptocurrency wallet. The Daedalus wallet is the\nCardano's solution to these necessities.\n\nCurrently, it allows a user to use their ADA in the aforementioned actions, and\nproviding support for other currencies is planned for the near future — as is\nthe exchange between different currencies, both digital and not.\n\n## Building Daedalus client API\n\nTo run Daedalus client API locally, you have to start [`cardano-sl`](https://github.com/input-output-hk/cardano-sl/)\nwith wallet API as follows.\n\nPlease make sure that you are in the root directory of `cardano-sl` repository.\nAlso make sure you have [npm](https://www.npmjs.com/) program.\n\n## Running and testing Daedalus client API\n\nIn order to see Daedalus client API in action, first run a local Cardano SL network:\n\n``` bash\n# run tmux in another window\n$ tmux\n# launch nodes\n$ ./scripts/launch/demo-with-wallet-api.sh\n```\n\nBy default, this should launch Cardano SL network consisting of 3 nodes talking to\neach other. One node is running wallet API, and it will behave the same as Daedalus\nwallet that is run in production.\n\n## Notify websockets\n\nWe can test the websockets with a small utility\napplication(`npm install -g wscat`):\n\n``` bash\n> wscat -c ws://127.0.0.1:8090\n\nconnected (press CTRL+C to quit)\n\n< {\"tag\":\"ConnectionOpened\"}\n\n< {\"tag\":\"NetworkDifficultyChanged\",\"contents\":{\"getChainDifficulty\":1}}\n< {\"tag\":\"LocalDifficultyChanged\",\"contents\":{\"getChainDifficulty\":1}}\n< {\"tag\":\"NetworkDifficultyChanged\",\"contents\":{\"getChainDifficulty\":2}}\n< {\"tag\":\"LocalDifficultyChanged\",\"contents\":{\"getChainDifficulty\":2}}\n< {\"tag\":\"NetworkDifficultyChanged\",\"contents\":{\"getChainDifficulty\":3}}\n< {\"tag\":\"LocalDifficultyChanged\",\"contents\":{\"getChainDifficulty\":3}}\n< {\"tag\":\"NetworkDifficultyChanged\",\"contents\":{\"getChainDifficulty\":4}}\n< {\"tag\":\"LocalDifficultyChanged\",\"contents\":{\"getChainDifficulty\":4}}\n```\n\nWe should be seeing the same changes manually from here:\n\n``` bash\ncurl http://localhost:8090/api/settings/sync/progress\n```\n\nAccount should be renamed into address. Please see an issue\n[CSM-249](https://issues.serokell.io/issue/CSM-249) for details.\n\n## Wallet events\n\nAside from these HTTP endpoints, there is one unidirectional websocket channel\nopened from server to client, the `notify` endpoint.\n\nThis channel serves as a notification system so that Daedalus UI can be informed\nabout events. Currently supported events are:\n\n-   `LocalDifficultyChanged` - local blockchain height,\n-   `NetworkDifficultyChanged` - global blockchain height,\n-   `UpdateAvailable` - new system update available,\n-   `ConnectedPeersChanged` - number of peers connected to the node changed,\n-   `ConnectionOpened` - websocket connection opened,\n-   `ConnectionClosed` - websocket connection closed.\n\nAs this channel is unidirectional, any message sent to the channel from the\nclient will be ignored.\n",
        "type": "MarkdownRemark",
        "contentDigest": "2b12e8982c6c7f38cccfc63b373abffa",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "Cardano SL Wallet Frontend",
        "path": "/en/technical/cardano-sl-wallet-frontend/",
        "group": "technical",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-16-wallet-frontend.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-16-wallet-frontend.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at cd26fb28eb48f893a4ca2d045a10da19c211b807 -->\n\n# Cardano SL Wallet Frontend\n\nWhen developing Cardano SL, the need arose for a UI from which users could\naccess their funds, send and receive transactions, and perform other tasks\nrelated to managing a personal cryptocurrency wallet. The Daedalus wallet is the\nCardano's solution to these necessities.\n\nCurrently, it allows a user to use their ADA in the aforementioned actions, and\nproviding support for other currencies is planned for the near future — as is\nthe exchange between different currencies, both digital and not.\n\n## Building Daedalus client API\n\nTo run Daedalus client API locally, you have to start [`cardano-sl`](https://github.com/input-output-hk/cardano-sl/)\nwith wallet API as follows.\n\nPlease make sure that you are in the root directory of `cardano-sl` repository.\nAlso make sure you have [npm](https://www.npmjs.com/) program.\n\n## Running and testing Daedalus client API\n\nIn order to see Daedalus client API in action, first run a local Cardano SL network:\n\n``` bash\n# run tmux in another window\n$ tmux\n# launch nodes\n$ ./scripts/launch/demo-with-wallet-api.sh\n```\n\nBy default, this should launch Cardano SL network consisting of 3 nodes talking to\neach other. One node is running wallet API, and it will behave the same as Daedalus\nwallet that is run in production.\n\n## Notify websockets\n\nWe can test the websockets with a small utility\napplication(`npm install -g wscat`):\n\n``` bash\n> wscat -c ws://127.0.0.1:8090\n\nconnected (press CTRL+C to quit)\n\n< {\"tag\":\"ConnectionOpened\"}\n\n< {\"tag\":\"NetworkDifficultyChanged\",\"contents\":{\"getChainDifficulty\":1}}\n< {\"tag\":\"LocalDifficultyChanged\",\"contents\":{\"getChainDifficulty\":1}}\n< {\"tag\":\"NetworkDifficultyChanged\",\"contents\":{\"getChainDifficulty\":2}}\n< {\"tag\":\"LocalDifficultyChanged\",\"contents\":{\"getChainDifficulty\":2}}\n< {\"tag\":\"NetworkDifficultyChanged\",\"contents\":{\"getChainDifficulty\":3}}\n< {\"tag\":\"LocalDifficultyChanged\",\"contents\":{\"getChainDifficulty\":3}}\n< {\"tag\":\"NetworkDifficultyChanged\",\"contents\":{\"getChainDifficulty\":4}}\n< {\"tag\":\"LocalDifficultyChanged\",\"contents\":{\"getChainDifficulty\":4}}\n```\n\nWe should be seeing the same changes manually from here:\n\n``` bash\ncurl http://localhost:8090/api/settings/sync/progress\n```\n\nAccount should be renamed into address. Please see an issue\n[CSM-249](https://issues.serokell.io/issue/CSM-249) for details.\n\n## Wallet events\n\nAside from these HTTP endpoints, there is one unidirectional websocket channel\nopened from server to client, the `notify` endpoint.\n\nThis channel serves as a notification system so that Daedalus UI can be informed\nabout events. Currently supported events are:\n\n-   `LocalDifficultyChanged` - local blockchain height,\n-   `NetworkDifficultyChanged` - global blockchain height,\n-   `UpdateAvailable` - new system update available,\n-   `ConnectedPeersChanged` - number of peers connected to the node changed,\n-   `ConnectionOpened` - websocket connection opened,\n-   `ConnectionClosed` - websocket connection closed.\n\nAs this channel is unidirectional, any message sent to the channel from the\nclient will be ignored.\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-16-wallet-frontend.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-05-explorer.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-05-explorer.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-05-explorer.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 浏览器\npath: /cn/cardano/explorer/\ngroup: cardano\nlanguage: cn\nlabel: docs\n---\n<!-- Reviewed at dec0d911d6c4beb8e708ed4076f832ff871f6125 -->\n\n# 卡尔达诺运算层浏览器\n\n这是卡尔达诺浏览器服务的概述 (下文称作『浏览器』).\n\n浏览器是一个搜索卡尔达诺网络中的地址，转账，epochs，slots 信息的[在线服务](https://cardanoexplorer.com/)\n\n## 地址\n\n找到一个用户的地址信息是有可能的。在得到一个 hash 地址后，我们将看到：\n\n1. 与这个地址有关的交易数量\n2. 这个地址的最终余额\n3. 这个地址的 QR 码\n\nHash 地址的例子: `1fhXcTriF8i8FFSdCTaU9d3yp3oCLFQhon5KBkevT8rQDPP`.\n\n## 转账\n\n我们可以找到转账的相关信息。在得到一个交易 ID 后，我们将看到：\n\n1. 交易日期和时间\n2. 交易的来源地址\n3. 交易的目标地址\n4. 这次交易转移的 ADA 金额\n5. 手续费\n\n交易 ID 的例子:\n\n`fe0681c7fe20c27071befc329caac059bb183afaf68b9595744c52125c61cf68`.\n\n## 时间\n\n我们能找到某个时间点的交易信息。目前只能指定 [epoch](/glossary/#epoch) 和 [slot](/glossary/#slot)，在得到 epoch 和 slot 的索引后，我们将看到：\n\n1. 这个 slot 的交易数\n2. 在这次 slot 中的转移的 ADA 金额\n3. 在这个 slot 中产生的区块的大小\n\n\n### Slot\n\n我们可以找到特定 slot 的相关信息。在得到 slot 的 hash 值之后，我们可以看到：\n\n1. 这个 slot 的交易次数\n2. 总产值\n3. 这个 slot 的预计 ADA 数量\n4. 费用\n5. slot 的 ID\n\n此外，我们还能得到散列的信息：\n\n1. slot 的散列\n2. 前一个 slot 的散列（如果存在的话）\n3. 下一个 slot 的散列（如果存在的话）\n4. The Merkle root. (TODO)\n",
        "type": "MarkdownRemark",
        "contentDigest": "46b0888add0a432b2a8fe7f291eb13cc",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "浏览器",
        "path": "/cn/cardano/explorer/",
        "group": "cardano",
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-05-explorer.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-05-explorer.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at dec0d911d6c4beb8e708ed4076f832ff871f6125 -->\n\n# 卡尔达诺运算层浏览器\n\n这是卡尔达诺浏览器服务的概述 (下文称作『浏览器』).\n\n浏览器是一个搜索卡尔达诺网络中的地址，转账，epochs，slots 信息的[在线服务](https://cardanoexplorer.com/)\n\n## 地址\n\n找到一个用户的地址信息是有可能的。在得到一个 hash 地址后，我们将看到：\n\n1. 与这个地址有关的交易数量\n2. 这个地址的最终余额\n3. 这个地址的 QR 码\n\nHash 地址的例子: `1fhXcTriF8i8FFSdCTaU9d3yp3oCLFQhon5KBkevT8rQDPP`.\n\n## 转账\n\n我们可以找到转账的相关信息。在得到一个交易 ID 后，我们将看到：\n\n1. 交易日期和时间\n2. 交易的来源地址\n3. 交易的目标地址\n4. 这次交易转移的 ADA 金额\n5. 手续费\n\n交易 ID 的例子:\n\n`fe0681c7fe20c27071befc329caac059bb183afaf68b9595744c52125c61cf68`.\n\n## 时间\n\n我们能找到某个时间点的交易信息。目前只能指定 [epoch](/glossary/#epoch) 和 [slot](/glossary/#slot)，在得到 epoch 和 slot 的索引后，我们将看到：\n\n1. 这个 slot 的交易数\n2. 在这次 slot 中的转移的 ADA 金额\n3. 在这个 slot 中产生的区块的大小\n\n\n### Slot\n\n我们可以找到特定 slot 的相关信息。在得到 slot 的 hash 值之后，我们可以看到：\n\n1. 这个 slot 的交易次数\n2. 总产值\n3. 这个 slot 的预计 ADA 数量\n4. 费用\n5. slot 的 ID\n\n此外，我们还能得到散列的信息：\n\n1. slot 的散列\n2. 前一个 slot 的散列（如果存在的话）\n3. 下一个 slot 的散列（如果存在的话）\n4. The Merkle root. (TODO)\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-05-explorer.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-03-reward.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-03-reward.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-03-reward.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: Reward Era\npath: /en/timeline/reward-era/\ngroup: timeline\nlanguage: en\nlabel: docs\n\n---\n<!-- Reviewed at 357ac1f7b4a9f1d98ee7f7bee46e874d7356958f -->\n\n# Reward Era\n\nAfter the [Bootstrap era](/timeline/bootstrap), the Reward era will start.\nDuring this time, the network will operate in a completely decentralized,\ntrustless mode. We expect staking pools to emerge during this era, allowing\nstakeholders with little stake to get rewards as stakeholders with large stake\nkeep their nodes online to maintain the protocol in a decentralized fashion.\n\nThe system will receive regular software updates moving forward, and a massive\namount of new features will be released in the near future.\n",
        "type": "MarkdownRemark",
        "contentDigest": "391a708f4dd23d66533905f6de4fba63",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "Reward Era",
        "path": "/en/timeline/reward-era/",
        "group": "timeline",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-03-reward.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-03-reward.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at 357ac1f7b4a9f1d98ee7f7bee46e874d7356958f -->\n\n# Reward Era\n\nAfter the [Bootstrap era](/timeline/bootstrap), the Reward era will start.\nDuring this time, the network will operate in a completely decentralized,\ntrustless mode. We expect staking pools to emerge during this era, allowing\nstakeholders with little stake to get rewards as stakeholders with large stake\nkeep their nodes online to maintain the protocol in a decentralized fashion.\n\nThe system will receive regular software updates moving forward, and a massive\namount of new features will be released in the near future.\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-03-reward.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-01-proof-of-stake.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-01-proof-of-stake.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-01-proof-of-stake.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 乌洛波罗斯权益证明算法\npath: /cn/cardano/proof-of-stake/\ngroup: cardano\nvisible: true\nlanguage: cn\nlabel: docs\n---\n<!-- Reviewed at c4c45ce9a7a8f4aa6d88a32829755196a017f6a1 -->\n\n# 乌洛波罗斯权益证明算法\n\n乌洛波罗斯权益证明算法是协议中最重要的部分。它定义了节点达到[账本](/glossary/#ledger)一致性的方式。\n\n乌洛波罗斯算法是唯一一个基于科学证明的安全的区块链权益证明协议。\n\n\n## 为什么要有权益证明？\n\n不选择被比特币采用的 PoW（工作量证明）而选择 PoS (权益证明) 最重要的原因是考虑了能源消耗。运行比特币协议非常消耗资源，据估计，一个比特币的转账所需要的能源是3.8个美国家庭一天消耗的能源。随着越来越多的比特币矿工将资金投入矿业，运行比特币协议的能源要求只会越来越高，他们挖矿的难度也会越来越大。这也是为什么研究人员尽力研究达成共识的替代算法，比如使用所谓的 BFT（Byzantine Fault Tolerant）一致性算法和 PoS 算法。\n\n## 什么是权益证明算法\n\n权益证明是生成区块的新方法。权益证明的核心思想是，不要浪费电力来解决计算量大的问题，而是选择一个节点来产生（或『铸造』）一个新的区块，其概率与这个节点所拥有的币数量成正比。如果一个节点具有正数（>0）的股权，则被称为权益所有人。如果一个节点最终被选中来铸造新的区块，它被称为『slot 领导者』。\n\n### 证明\n\n『权益证明』的『证明』部分是指证明交易块是合法的。\n\n\n### 权益\n\n『权益』指的是节点上的地址所拥有的相对价值。『相对价值』指的是『卡尔达诺结算层系统中某个节点钱包上的价值除以总价值』。请阅读[卡尔达诺结算层的平衡和权益](/cardano/balance-and-stake/) 章节获取更多信息。\n\n\n## 关于 Slot 领导者\n\n有正资产的节点称作权益所有人，只有权益所有人能参与运行协议。权益所有人必须被选举为 slot 领导者才让区块链生成区块。Slot 领导者可能监听到其他节点的交易信息，然后通过密钥生成一个交易区块发给全网。\n\n你可以认为 slot 领导者是比特币中的矿工，但上述的一致性协议会确定谁，什么时候能挖矿，能挖到多少矿。\n\n## Epochs 和 Slots\n\n乌洛波罗斯协议将物理的时间划分为 **epochs**, 每一个 epoch 又划分为 **slots**:\n\n```\n+----------+----------+-------+----------+--------------------> t\n|  slot 0  |  slot 1  |  ...  |  slot N  |\n\n \\                                      / \\\n  -------------- epoch M ---------------   -- epoch M+1 -- ...\n```\n\n\n请注意 slot 是相对较短的一段时间（比如20秒）。\n\n每个 slot 有且只有一个领导者（slot leader，SL）：\n\n```\n+----------+----------+-------+----------+----> t\n|  slot 0  |  slot 1  |  ...  |  slot N  |\n\n    SL 0       SL 1               SL N\n```\n\n\nslot 领导者有权在他的 slot 内生成一个区块。\n\n```\n  +------+   +------+           +------+\n  | Bl 0 |<--| Bl 1 |<-- ... <--| Bl N |\n  +------+   +------+           +------+\n+----------+----------+-------+----------+----> t\n|  slot 0  |  slot 1  |  ...  |  slot N  |\n\n    SL 0       SL 1               SL N\n```\n\n\n这意味着 slot 领导者的数量一定等于一个 epoch 内 slots 的数量（不妨设为 `N`)，因此不可能在一个 epoch 里面生成超过 `N` 个区块。\n\n如果 slot 领导者错过了它的 slot（比如，在那个阶段它离线了），在下一次被选举为领导者之前，它没有权利再生成区块。\n\n**请注意：** 可以有一个或多个 slots 是空的（即，不生成区块），但在一个 epoch 期间，它必须生成大部分块（至少50%+1）。\n\n\n## Slot 领导者选举是怎么工作的\n\nSlot 领导者从所有的权益所有人中选举。请注意并不是所有的权益所有人能参与这次选举，只有有足够多的权益（比如，总量的2%)才有资格。我们称这些权益所有人为『候选人』\n\n在 epoch 的选举中会选举一个 slot 领导者参与下一次 epoch。因此，在 epoch `N` 结束的时候，我们就能知道 epoch `N+1` 的 slot 领导者是谁，并且这是不可更改的。\n\n你可以把这样的选举当做 『公平抽签』：权益所有人中的任何一个都能成为 slot 领导者。但 PoS 中一个很重要的的思想是，权益所有人拥有的股份越多，它被选举为 slot 领导者的可能性也就越大。\n\n**请注意：**同一个 epoch，一个权益所有人可以被多次选做 slot 领导者。\n\n\n### 多方计算\n\n选举过程的根本问题之一是无偏性。我们需要一些随机性作为选举的基础，这样的话，选举的结果是随机的，公平的，问题是，这个随机性从哪来？\n\n多方计算（multiparty computation (MPC) ）方法用来实现这个随机性，每个参选人独立进行一次『投硬币』的行为，然后与其他参选人分享结果。这个想法就是：结果由每个参选人随机产生，但最终它们在相同的最终价值上达成一致。\n\n#### 提交阶段\n\n首先，参选人会产生一个密钥（特殊的随机值）。接着，参选人会形成一个『提交』，这是一个包含加密份额（见下面的解释）以及密码的证明的消息。\n\n然后参选人会用密钥来签署这个提交，指定 epoch 编号，附上它的公钥。在这种情况下，每个人都可以知道谁创建了这个提交，以及这个提交属于哪个 epoch。\n\n随后，参选人会将其提交交给其他参选人，最终每个参选人都会拿到其他参选人的提交。\n\n注意：这些提交将被放入区块中，也就是说它们将成为区块链的一部分。\n\n\n#### 开启阶段\n\n在这个阶段参选人发送一个『开启』状态，这是一个打开提交的特殊值。一个提交就像一个锁着的盒子（里面有一个密钥），我们需要一个开启的钥匙来打开这个盒子，获取里面的密钥。\n\n**注意：**所有的开启都将放入区块中，它们会变成区块链的一部分。\n\n\n#### 恢复阶段\n\n这是最后的阶段。\n\n最终，参选者既有提交，也有开启。从理论上来说，一些选民可以是对手。它可以公布它的提交，但**不**公开它的开启。\n\n在这种情况下，诚实的选民可以张贴（上面有提到）来重建密钥，这个想法很简单：即使某些选民是对手，选举也能成功结束。\n\n随后，参选者验证提交，开启匹配，如果成功，从提交中提取密钥，并从这些密钥中形成种子（随机生成的字符串）。所以所有的选民都会得到相同的种子，并且会被用于追随中本聪算法。\n\n### 追随中本聪\n\n在参选者获取种子之后（我们需要随机性），他们必须为下一个 epoch 选择特定的 slot 领导者。这时候就引入了追随中本聪算法。它类似于这样：\n\n\n```\n         +-----+\nSEED --->| FTS |---> ELECTED_SLOT_LEADERS\n         +-----+\n```\n\n我们解释一下 slot 领导者是怎么被选中的。我们将最小的，原子级的币叫做 『[Lovelace](/glossary/#lovelace)』。基本上，因为 slot 领导者只能从权益所有者中选择，账本会生成币的分发。FTS 是一个挑选币的可证算法，当权益所有人 `S` 的币被选中时，`S` 就成为一个 slot 领导者。很明显，`S` 的币越多，他的币被选中的几率也就越大。\n\n为什么它被称为『追随中本聪算法』是因为在比特币中，货币的最小单位被称为『聪』，这是为了表彰比特币的发明人中本聪（Satoshi Nakamoto）\n\n## 大多数都是诚实的\n\n协议的基本假设前提是**大多数都是诚实的**。这意味着至少有 50%+1 的权益所有人是诚实的。在这种情况下，我们可以**证明**攻击者无法打破区块链的*持久化*和*活跃度*。欲了解更多信息，请参阅[论文](/glossary/#paper) (2到3页)。\n",
        "type": "MarkdownRemark",
        "contentDigest": "06ec201e6fe1ff929117cda80a3b5506",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "乌洛波罗斯权益证明算法",
        "path": "/cn/cardano/proof-of-stake/",
        "group": "cardano",
        "visible": true,
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-01-proof-of-stake.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-01-proof-of-stake.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at c4c45ce9a7a8f4aa6d88a32829755196a017f6a1 -->\n\n# 乌洛波罗斯权益证明算法\n\n乌洛波罗斯权益证明算法是协议中最重要的部分。它定义了节点达到[账本](/glossary/#ledger)一致性的方式。\n\n乌洛波罗斯算法是唯一一个基于科学证明的安全的区块链权益证明协议。\n\n\n## 为什么要有权益证明？\n\n不选择被比特币采用的 PoW（工作量证明）而选择 PoS (权益证明) 最重要的原因是考虑了能源消耗。运行比特币协议非常消耗资源，据估计，一个比特币的转账所需要的能源是3.8个美国家庭一天消耗的能源。随着越来越多的比特币矿工将资金投入矿业，运行比特币协议的能源要求只会越来越高，他们挖矿的难度也会越来越大。这也是为什么研究人员尽力研究达成共识的替代算法，比如使用所谓的 BFT（Byzantine Fault Tolerant）一致性算法和 PoS 算法。\n\n## 什么是权益证明算法\n\n权益证明是生成区块的新方法。权益证明的核心思想是，不要浪费电力来解决计算量大的问题，而是选择一个节点来产生（或『铸造』）一个新的区块，其概率与这个节点所拥有的币数量成正比。如果一个节点具有正数（>0）的股权，则被称为权益所有人。如果一个节点最终被选中来铸造新的区块，它被称为『slot 领导者』。\n\n### 证明\n\n『权益证明』的『证明』部分是指证明交易块是合法的。\n\n\n### 权益\n\n『权益』指的是节点上的地址所拥有的相对价值。『相对价值』指的是『卡尔达诺结算层系统中某个节点钱包上的价值除以总价值』。请阅读[卡尔达诺结算层的平衡和权益](/cardano/balance-and-stake/) 章节获取更多信息。\n\n\n## 关于 Slot 领导者\n\n有正资产的节点称作权益所有人，只有权益所有人能参与运行协议。权益所有人必须被选举为 slot 领导者才让区块链生成区块。Slot 领导者可能监听到其他节点的交易信息，然后通过密钥生成一个交易区块发给全网。\n\n你可以认为 slot 领导者是比特币中的矿工，但上述的一致性协议会确定谁，什么时候能挖矿，能挖到多少矿。\n\n## Epochs 和 Slots\n\n乌洛波罗斯协议将物理的时间划分为 **epochs**, 每一个 epoch 又划分为 **slots**:\n\n```\n+----------+----------+-------+----------+--------------------> t\n|  slot 0  |  slot 1  |  ...  |  slot N  |\n\n \\                                      / \\\n  -------------- epoch M ---------------   -- epoch M+1 -- ...\n```\n\n\n请注意 slot 是相对较短的一段时间（比如20秒）。\n\n每个 slot 有且只有一个领导者（slot leader，SL）：\n\n```\n+----------+----------+-------+----------+----> t\n|  slot 0  |  slot 1  |  ...  |  slot N  |\n\n    SL 0       SL 1               SL N\n```\n\n\nslot 领导者有权在他的 slot 内生成一个区块。\n\n```\n  +------+   +------+           +------+\n  | Bl 0 |<--| Bl 1 |<-- ... <--| Bl N |\n  +------+   +------+           +------+\n+----------+----------+-------+----------+----> t\n|  slot 0  |  slot 1  |  ...  |  slot N  |\n\n    SL 0       SL 1               SL N\n```\n\n\n这意味着 slot 领导者的数量一定等于一个 epoch 内 slots 的数量（不妨设为 `N`)，因此不可能在一个 epoch 里面生成超过 `N` 个区块。\n\n如果 slot 领导者错过了它的 slot（比如，在那个阶段它离线了），在下一次被选举为领导者之前，它没有权利再生成区块。\n\n**请注意：** 可以有一个或多个 slots 是空的（即，不生成区块），但在一个 epoch 期间，它必须生成大部分块（至少50%+1）。\n\n\n## Slot 领导者选举是怎么工作的\n\nSlot 领导者从所有的权益所有人中选举。请注意并不是所有的权益所有人能参与这次选举，只有有足够多的权益（比如，总量的2%)才有资格。我们称这些权益所有人为『候选人』\n\n在 epoch 的选举中会选举一个 slot 领导者参与下一次 epoch。因此，在 epoch `N` 结束的时候，我们就能知道 epoch `N+1` 的 slot 领导者是谁，并且这是不可更改的。\n\n你可以把这样的选举当做 『公平抽签』：权益所有人中的任何一个都能成为 slot 领导者。但 PoS 中一个很重要的的思想是，权益所有人拥有的股份越多，它被选举为 slot 领导者的可能性也就越大。\n\n**请注意：**同一个 epoch，一个权益所有人可以被多次选做 slot 领导者。\n\n\n### 多方计算\n\n选举过程的根本问题之一是无偏性。我们需要一些随机性作为选举的基础，这样的话，选举的结果是随机的，公平的，问题是，这个随机性从哪来？\n\n多方计算（multiparty computation (MPC) ）方法用来实现这个随机性，每个参选人独立进行一次『投硬币』的行为，然后与其他参选人分享结果。这个想法就是：结果由每个参选人随机产生，但最终它们在相同的最终价值上达成一致。\n\n#### 提交阶段\n\n首先，参选人会产生一个密钥（特殊的随机值）。接着，参选人会形成一个『提交』，这是一个包含加密份额（见下面的解释）以及密码的证明的消息。\n\n然后参选人会用密钥来签署这个提交，指定 epoch 编号，附上它的公钥。在这种情况下，每个人都可以知道谁创建了这个提交，以及这个提交属于哪个 epoch。\n\n随后，参选人会将其提交交给其他参选人，最终每个参选人都会拿到其他参选人的提交。\n\n注意：这些提交将被放入区块中，也就是说它们将成为区块链的一部分。\n\n\n#### 开启阶段\n\n在这个阶段参选人发送一个『开启』状态，这是一个打开提交的特殊值。一个提交就像一个锁着的盒子（里面有一个密钥），我们需要一个开启的钥匙来打开这个盒子，获取里面的密钥。\n\n**注意：**所有的开启都将放入区块中，它们会变成区块链的一部分。\n\n\n#### 恢复阶段\n\n这是最后的阶段。\n\n最终，参选者既有提交，也有开启。从理论上来说，一些选民可以是对手。它可以公布它的提交，但**不**公开它的开启。\n\n在这种情况下，诚实的选民可以张贴（上面有提到）来重建密钥，这个想法很简单：即使某些选民是对手，选举也能成功结束。\n\n随后，参选者验证提交，开启匹配，如果成功，从提交中提取密钥，并从这些密钥中形成种子（随机生成的字符串）。所以所有的选民都会得到相同的种子，并且会被用于追随中本聪算法。\n\n### 追随中本聪\n\n在参选者获取种子之后（我们需要随机性），他们必须为下一个 epoch 选择特定的 slot 领导者。这时候就引入了追随中本聪算法。它类似于这样：\n\n\n```\n         +-----+\nSEED --->| FTS |---> ELECTED_SLOT_LEADERS\n         +-----+\n```\n\n我们解释一下 slot 领导者是怎么被选中的。我们将最小的，原子级的币叫做 『[Lovelace](/glossary/#lovelace)』。基本上，因为 slot 领导者只能从权益所有者中选择，账本会生成币的分发。FTS 是一个挑选币的可证算法，当权益所有人 `S` 的币被选中时，`S` 就成为一个 slot 领导者。很明显，`S` 的币越多，他的币被选中的几率也就越大。\n\n为什么它被称为『追随中本聪算法』是因为在比特币中，货币的最小单位被称为『聪』，这是为了表彰比特币的发明人中本聪（Satoshi Nakamoto）\n\n## 大多数都是诚实的\n\n协议的基本假设前提是**大多数都是诚实的**。这意味着至少有 50%+1 的权益所有人是诚实的。在这种情况下，我们可以**证明**攻击者无法打破区块链的*持久化*和*活跃度*。欲了解更多信息，请参阅[论文](/glossary/#paper) (2到3页)。\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-01-proof-of-stake.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-02-launcher.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-02-launcher.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-02-launcher.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 卡尔达诺结算层启动器\npath: /cn/technical/launcher/\ngroup: technical\nvisible: true\nlanguage: cn\nlabel: docs\n---\n<!-- Reviewed at ac0126b2753f1f5ca6fbfb555783fbeb1aa141bd -->\n\n# 卡尔达诺结算层启动器\n\n## 概述\n\n可执行文件 [`cardano-launcher`](/technical/cli-options/#cardano-launcher) 是启动卡尔达诺结算层的工具。它实际运行整个卡尔达诺结算层系统（即一个节点，一个钱包）并处理更新。要做到这一点，[`cardano-launcher`](/technical/cli-options/#cardano-launcher) 使用两个独立的工具：[`cardano-node`](/technical/cli-options/#cardano-node) 和 [`cardano-updater`](https://github.com/input-output-hk/cardano-updater)。\n\n有关可选项的详细信息，请查阅 [`cardano-launcher` 的说明](/technical/cli-options/#cardano-launcher)。\n\n\n## 场景\n\n`cardano-launcher` 有两种工作场景：客户端场景和服务端场景。如果你在启动过程中用 `--wallet` 参数提供一个钱包（例如代达罗斯）路径，`cardano-node` 将在[客户端](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L178)场景下运行，\n否则将在[服务端](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L171)场景下运行。\n\n### 服务端场景\n\n开始时，有两个步骤：\n\n1. 运行更新程序。\n2. 运行一个节点。\n\n更新程序的工作[如下所述](#更新器)。\n\n一个节点[以一个单独的进程运行](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L280)。之后，我们[等待，直到节点停止](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L201)。节点退出后，将检查其退出代码，如果等于 `20`，我们[重新启动 launcher](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L204)，否则我们退出。\n\n\n在退出前日志会[写入到日志文件](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L207)。要做到这一点，我们在启动时必须提供两个额外的参数：`--report-server` 和\n`--node-log`。第一个参数定义了收集日志的 URl，第二个参数定义了日志文件的路径。我们将日志[异步发送到收集日志服务器](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L343)。请注意 `--node-log` 参数中的文件必须存在。\n\n\n### 客户端场景\n\n当进程开始时，有三个步骤：\n\n1. 运行更新程序。\n2. 运行一个节点。\n3. 运行一个钱包。\n\n对于步骤1和2，请参与上面的[服务器场景](#服务端场景)。\n\n\n钱包[作为一个独立进程运行](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L227)。\n\n之后，我们[等待节点或钱包停止](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L228)。当它停止时，我们会检查它：\n\n1. 如果节点退出了，我们写一条日志（见上面[服务端场景](#服务端场景)的解释），然后[等待钱包退出](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L235)。  \n2. 如果钱包退出，我们会检查其退出代码，如果它等于 `20`，我们[杀死这个节点](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L242)，[重新启动客户端场景的启动程序](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L244)。请注意，不会立即杀死这个节点；节点在一定的超时过后才会被终止，其值从上述的 `--node-timeout` 参数获得。\n3. 如果钱包退出*并且*退出码不等于 `20`，我们立即杀死节点。\n\n\n## 更新器\n\n`cardano-launcher` 另一个非常重要的作用是更新节点。两种场景的公共步骤是[运行更新程序](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L255)。\n\n核心思想非常简单。节点更新是一个特殊的 `.tar` 存档：它表明节点的旧（当前）版本和新版本之间的区别。这个归档的路径通过 `--update-archive` 参数获得。\n因此，`cardano-launcher` 将该归档应用到该节点，并且在重新启动后可以使用该节点的新版本。\n\n请注意，当我们的 `cardano-launcher` 在客户端场景下运行时，钱包的用户能够看到更新已经准备就绪，并且有两种可能的情况。\n\n如果用户*同意*采用这次更新，钱包立即以退出码 `20` 退出。在这种情况下，如上所述，启动器重新启动节点并更新应用。\n\n如果用户*不同意*采用这次更新，钱包将继续工作，当时，当它*被*重新启动（早晚的事情），这个更新[*将*被应用](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L223)\n\n**重要**：更新器同步运行，我们启动它，然后[等待它完成](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L269)，如果更新程序[成功](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L271)运行，`.tar` 文件将被删除。\n\n\n### 实现概述\n\n有关卡尔达诺结算层更新系统的更多实现细节，请参阅[这一章](/technical/updater/)。\n\n",
        "type": "MarkdownRemark",
        "contentDigest": "af790ab7d7daf2cc3ada5fa71373cd51",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "卡尔达诺结算层启动器",
        "path": "/cn/technical/launcher/",
        "group": "technical",
        "visible": true,
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-02-launcher.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-02-launcher.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at ac0126b2753f1f5ca6fbfb555783fbeb1aa141bd -->\n\n# 卡尔达诺结算层启动器\n\n## 概述\n\n可执行文件 [`cardano-launcher`](/technical/cli-options/#cardano-launcher) 是启动卡尔达诺结算层的工具。它实际运行整个卡尔达诺结算层系统（即一个节点，一个钱包）并处理更新。要做到这一点，[`cardano-launcher`](/technical/cli-options/#cardano-launcher) 使用两个独立的工具：[`cardano-node`](/technical/cli-options/#cardano-node) 和 [`cardano-updater`](https://github.com/input-output-hk/cardano-updater)。\n\n有关可选项的详细信息，请查阅 [`cardano-launcher` 的说明](/technical/cli-options/#cardano-launcher)。\n\n\n## 场景\n\n`cardano-launcher` 有两种工作场景：客户端场景和服务端场景。如果你在启动过程中用 `--wallet` 参数提供一个钱包（例如代达罗斯）路径，`cardano-node` 将在[客户端](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L178)场景下运行，\n否则将在[服务端](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L171)场景下运行。\n\n### 服务端场景\n\n开始时，有两个步骤：\n\n1. 运行更新程序。\n2. 运行一个节点。\n\n更新程序的工作[如下所述](#更新器)。\n\n一个节点[以一个单独的进程运行](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L280)。之后，我们[等待，直到节点停止](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L201)。节点退出后，将检查其退出代码，如果等于 `20`，我们[重新启动 launcher](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L204)，否则我们退出。\n\n\n在退出前日志会[写入到日志文件](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L207)。要做到这一点，我们在启动时必须提供两个额外的参数：`--report-server` 和\n`--node-log`。第一个参数定义了收集日志的 URl，第二个参数定义了日志文件的路径。我们将日志[异步发送到收集日志服务器](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L343)。请注意 `--node-log` 参数中的文件必须存在。\n\n\n### 客户端场景\n\n当进程开始时，有三个步骤：\n\n1. 运行更新程序。\n2. 运行一个节点。\n3. 运行一个钱包。\n\n对于步骤1和2，请参与上面的[服务器场景](#服务端场景)。\n\n\n钱包[作为一个独立进程运行](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L227)。\n\n之后，我们[等待节点或钱包停止](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L228)。当它停止时，我们会检查它：\n\n1. 如果节点退出了，我们写一条日志（见上面[服务端场景](#服务端场景)的解释），然后[等待钱包退出](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L235)。  \n2. 如果钱包退出，我们会检查其退出代码，如果它等于 `20`，我们[杀死这个节点](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L242)，[重新启动客户端场景的启动程序](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L244)。请注意，不会立即杀死这个节点；节点在一定的超时过后才会被终止，其值从上述的 `--node-timeout` 参数获得。\n3. 如果钱包退出*并且*退出码不等于 `20`，我们立即杀死节点。\n\n\n## 更新器\n\n`cardano-launcher` 另一个非常重要的作用是更新节点。两种场景的公共步骤是[运行更新程序](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L255)。\n\n核心思想非常简单。节点更新是一个特殊的 `.tar` 存档：它表明节点的旧（当前）版本和新版本之间的区别。这个归档的路径通过 `--update-archive` 参数获得。\n因此，`cardano-launcher` 将该归档应用到该节点，并且在重新启动后可以使用该节点的新版本。\n\n请注意，当我们的 `cardano-launcher` 在客户端场景下运行时，钱包的用户能够看到更新已经准备就绪，并且有两种可能的情况。\n\n如果用户*同意*采用这次更新，钱包立即以退出码 `20` 退出。在这种情况下，如上所述，启动器重新启动节点并更新应用。\n\n如果用户*不同意*采用这次更新，钱包将继续工作，当时，当它*被*重新启动（早晚的事情），这个更新[*将*被应用](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L223)\n\n**重要**：更新器同步运行，我们启动它，然后[等待它完成](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L269)，如果更新程序[成功](https://github.com/input-output-hk/cardano-sl/blob/194f4876d7b72766f7fe72ed4a1fba828903cae0/src/launcher/Main.hs#L271)运行，`.tar` 文件将被删除。\n\n\n### 实现概述\n\n有关卡尔达诺结算层更新系统的更多实现细节，请参阅[这一章](/technical/updater/)。\n\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-02-launcher.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-06-explorer.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-06-explorer.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-06-explorer.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 卡尔达诺结算层浏览器\npath: /cn/technical/explorer/\ngroup: technical\nvisible: true\nlanguage: cn\nlabel: docs\n---\n<!-- Reviewed at ac0126b2753f1f5ca6fbfb555783fbeb1aa141bd -->\n\n# 卡尔达诺结算层浏览器\n\n正如之前提到的，浏览器是一个在卡尔达诺网络中搜索卡尔达诺结算层[转账](/glossary/#转账)，[地址](/glossary/#address)，时间区间（[epochs](/glossary/#epoch) 和 [slots](/glossary/#slot)）信息的服务。\n\n\n## 浏览器后端工作流\n\n浏览器利用[命令行参数](https://github.com/input-output-hk/cardano-sl-explorer/blob/f64fb137415c03e8569129067a7798bb8a51456c/src/explorer/ExplorerOptions.hs#L25)选项启动。所有支持的选项都可以通过 `cardano-explorer --help` 命令查看。\n\n然后，浏览器通过 `cardano-sl` 库运行『[内部节点](https://github.com/input-output-hk/cardano-sl-explorer/blob/f64fb137415c03e8569129067a7798bb8a51456c/src/explorer/Main.hs#L74)』。因此我们可以把浏览器当做有着两个[特殊插件](https://github.com/input-output-hk/cardano-sl-explorer/blob/f64fb137415c03e8569129067a7798bb8a51456c/src/explorer/Main.hs#L70) `explorerPlugin`, `notifierPlugin` 的普通节点。\n\n第一个插件用于[浏览器 web API](https://github.com/input-output-hk/cardano-sl-explorer/blob/e343db1def575cc2a47d9168414c22c2599c50e6/src/Pos/Explorer/Web/Api.hs#L25)，第二个启动[通知服务器](https://github.com/input-output-hk/cardano-sl-explorer/blob/e343db1def575cc2a47d9168414c22c2599c50e6/src/Pos/Explorer/Socket/App.hs#L164)，这个基于 websocket 的服务器通知前端关于区块/转账的修改。\n\n\n## 浏览器后端 API\n\n目前，浏览器后端 Web API 提供了一系列从卡尔达诺网络获取信息的方法。`servant` 库提供了很多构建 API 的方法模块。该库使用组合器来构建 HTTP 原子操作，并将这些原子方法组合在一起形成更大，更完整的 API。\n\n### HTTP API\n\n浏览器 web api 在[这里](https://github.com/input-output-hk/cardano-sl-explorer/blob/f64fb137415c03e8569129067a7798bb8a51456c/src/Pos/Explorer/Web/Api.hs#L25)定义。如果事件请求失败，则有一个 [`ExplorerError`](https://github.com/input-output-hk/cardano-sl-explorer/blob/f64fb137415c03e8569129067a7798bb8a51456c/src/Pos/Explorer/Web/Error.hs#L11) 类型，它简单地封装在 `Text` 里面，以显示发生了什么。\n\n浏览器 Web API 的文档可以在[这里](https://cardanodocs.com/technical/explorer/api/)找到。\n\n\n### socket.io API\n\n目前我们有这些事件客户可以订阅到：\n\n\n``` haskell\ndata ClientEvent\n    = Subscribe Subscription\n    | Unsubscribe Subscription\n    | CallMe\n```\n\n订阅可以是以下事件：\n\n``` haskell\ndata Subscription\n    = SubAddr\n    | SubBlockLastPage\n    | SubTx\n```\n\n相应的服务器事件是：\n\n``` haskell\ndata ServerEvent\n    = AddrUpdated\n    | BlocksLastPageUpdated\n    | TxsUpdated\n    | CallYou\n```\n\n\n用户可以调用所需的事件并订阅它们：\n\n``` js\nvar client = require('socket.io-client');\nvar socket = client('http://localhost:8110');\n\nsocket.on('CallYou', function(msg){ console.log(msg); })\nsocket.emit('CallMe', 'test');\n```\n\n你也可以尝试运行 purescript repl（`pulp psci` ），尝试一下事件：\n\n\n``` purescript\nimport Prelude\nimport Control.SocketIO.Client\nimport Control.Monad.Eff.Console\n\nlet socket = connect \"http://localhost:8110\"\n\nsocket >>= \\soc -> emit soc \"CallYou\" \"test\"\n```\n",
        "type": "MarkdownRemark",
        "contentDigest": "5dc7f2d87c3e2229603759563df924a2",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "卡尔达诺结算层浏览器",
        "path": "/cn/technical/explorer/",
        "group": "technical",
        "visible": true,
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-06-explorer.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-06-explorer.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at ac0126b2753f1f5ca6fbfb555783fbeb1aa141bd -->\n\n# 卡尔达诺结算层浏览器\n\n正如之前提到的，浏览器是一个在卡尔达诺网络中搜索卡尔达诺结算层[转账](/glossary/#转账)，[地址](/glossary/#address)，时间区间（[epochs](/glossary/#epoch) 和 [slots](/glossary/#slot)）信息的服务。\n\n\n## 浏览器后端工作流\n\n浏览器利用[命令行参数](https://github.com/input-output-hk/cardano-sl-explorer/blob/f64fb137415c03e8569129067a7798bb8a51456c/src/explorer/ExplorerOptions.hs#L25)选项启动。所有支持的选项都可以通过 `cardano-explorer --help` 命令查看。\n\n然后，浏览器通过 `cardano-sl` 库运行『[内部节点](https://github.com/input-output-hk/cardano-sl-explorer/blob/f64fb137415c03e8569129067a7798bb8a51456c/src/explorer/Main.hs#L74)』。因此我们可以把浏览器当做有着两个[特殊插件](https://github.com/input-output-hk/cardano-sl-explorer/blob/f64fb137415c03e8569129067a7798bb8a51456c/src/explorer/Main.hs#L70) `explorerPlugin`, `notifierPlugin` 的普通节点。\n\n第一个插件用于[浏览器 web API](https://github.com/input-output-hk/cardano-sl-explorer/blob/e343db1def575cc2a47d9168414c22c2599c50e6/src/Pos/Explorer/Web/Api.hs#L25)，第二个启动[通知服务器](https://github.com/input-output-hk/cardano-sl-explorer/blob/e343db1def575cc2a47d9168414c22c2599c50e6/src/Pos/Explorer/Socket/App.hs#L164)，这个基于 websocket 的服务器通知前端关于区块/转账的修改。\n\n\n## 浏览器后端 API\n\n目前，浏览器后端 Web API 提供了一系列从卡尔达诺网络获取信息的方法。`servant` 库提供了很多构建 API 的方法模块。该库使用组合器来构建 HTTP 原子操作，并将这些原子方法组合在一起形成更大，更完整的 API。\n\n### HTTP API\n\n浏览器 web api 在[这里](https://github.com/input-output-hk/cardano-sl-explorer/blob/f64fb137415c03e8569129067a7798bb8a51456c/src/Pos/Explorer/Web/Api.hs#L25)定义。如果事件请求失败，则有一个 [`ExplorerError`](https://github.com/input-output-hk/cardano-sl-explorer/blob/f64fb137415c03e8569129067a7798bb8a51456c/src/Pos/Explorer/Web/Error.hs#L11) 类型，它简单地封装在 `Text` 里面，以显示发生了什么。\n\n浏览器 Web API 的文档可以在[这里](https://cardanodocs.com/technical/explorer/api/)找到。\n\n\n### socket.io API\n\n目前我们有这些事件客户可以订阅到：\n\n\n``` haskell\ndata ClientEvent\n    = Subscribe Subscription\n    | Unsubscribe Subscription\n    | CallMe\n```\n\n订阅可以是以下事件：\n\n``` haskell\ndata Subscription\n    = SubAddr\n    | SubBlockLastPage\n    | SubTx\n```\n\n相应的服务器事件是：\n\n``` haskell\ndata ServerEvent\n    = AddrUpdated\n    | BlocksLastPageUpdated\n    | TxsUpdated\n    | CallYou\n```\n\n\n用户可以调用所需的事件并订阅它们：\n\n``` js\nvar client = require('socket.io-client');\nvar socket = client('http://localhost:8110');\n\nsocket.on('CallYou', function(msg){ console.log(msg); })\nsocket.emit('CallMe', 'test');\n```\n\n你也可以尝试运行 purescript repl（`pulp psci` ），尝试一下事件：\n\n\n``` purescript\nimport Prelude\nimport Control.SocketIO.Client\nimport Control.Monad.Eff.Console\n\nlet socket = connect \"http://localhost:8110\"\n\nsocket >>= \\soc -> emit soc \"CallYou\" \"test\"\n```\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-06-explorer.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-14-leader-selection.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-14-leader-selection.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-14-leader-selection.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 卡尔达诺结算层中的领导者选举\npath: /cn/technical/leader-selection/\ngroup: technical\nvisible: true\nlanguage: cn\nlabel: docs\n---\n<!-- Reviewed at e1d0f9fb37a3f1378341716916f0321fb55698df -->\n\n# 卡尔达诺结算层中的领导者选举\n\n这一章描述[领导者](/glossary/#slot-leader)选举过程。\n\n## 追随中本聪算法\n\n如[前](/cardano/proof-of-stake/#follow-the-satoshi)所述，卡尔达诺结算层使用追随中本聪算法（FTS）来选择领导者。每个当前 epoch 的领导者在当前 epoch 开始的时候，由 FTS 算法计算得出。所以创始区块包含一组领导者列表。领导者的数量和 epoch 的 slot 数量是一致的，这个数量[取决](https://github.com/input-output-hk/cardano-sl/blob/5f7b619c6ec9056c6fe778d862c426233af165df/core/Pos/Core/Constants/Raw.hs#L136)于在[配置文件](https://github.com/input-output-hk/cardano-sl/blob/446444070ee09857603797a90af970fff215c8c5/core/constants.yaml#L10)中定义的基本安全参数 `K`。\n\nFTS 使用[共享种子](https://github.com/input-output-hk/cardano-sl/blob/446444070ee09857603797a90af970fff215c8c5/core/Pos/Core/Types.hs#L256)，该[共享种子](https://github.com/input-output-hk/cardano-sl/blob/446444070ee09857603797a90af970fff215c8c5/core/Pos/Core/Types.hs#L256)为上个 epoch 计算的结果：在 MPC 的结果中的一些节点会揭露它们的种子，这些种子的 XOR 就被称为共享种子，实际上共享种子就是一个[字符串](https://github.com/input-output-hk/cardano-sl/blob/446444070ee09857603797a90af970fff215c8c5/core/Pos/Core/Types.hs#L257)。\n\n股东被选举为领导者的概率与股东持有的币的数量相关。同一个股东可以在同一个 epoch 里面被选举为多个 slot 的领导者。\n\n## 算法\n\n在[论文](/glossary/#论文)的第11页从以学术角度描述了领导者的选举过程。\n\n节点将所有未花费的输出(`utxo`)按照一种特定的方法（按字典）进行排序，因此结果是一对 `(StakeholderId, Coin)` 的有序[序列](https://github.com/input-output-hk/cardano-sl/blob/1f866450a8a530c119e3fc9edb84c97c56417aa2/src/Pos/Genesis.hs#L177)，`StakeholderId` 是股东的 ID（股东的公钥哈希值），`Coin` 是股东持有币的数量。这里假设 `utxo` [不是空的](https://github.com/input-output-hk/cardano-sl/blob/1f866450a8a530c119e3fc9edb84c97c56417aa2/src/Pos/Lrc/FtsPure.hs#L52)。\n\n然后节点选择几个在 `1` 和[系统中 Lovelaces 的数量](https://github.com/input-output-hk/cardano-sl/blob/1f866450a8a530c119e3fc9edb84c97c56417aa2/src/Pos/Lrc/FtsPure.hs#L49)之间的随机数 `i`。为了找到第 `i` 个币的拥有者，节点找到最小的 `x`，使得这个列表从 `x` 到 `i` 的所有币的总数不小于 `i`(这样第 `x` 个地址就是第 `i` 个的拥有者)。\n\n\n结果是一个非空的 `StakeholderId` 序列，也就是被选中的股东们的 ID，[`SlotLeaders`](https://github.com/input-output-hk/cardano-sl/blob/5f7b619c6ec9056c6fe778d862c426233af165df/core/Pos/Core/Types.hs#L264) 序列保存在[节点运行环境中](https://github.com/input-output-hk/cardano-sl/blob/da70b2597aab352d7574a3946a366395b09e97eb/node/src/Pos/Context/Context.hs#L94)。\n\n由于是 P2SH 地址，所以节点不知道是会谁将要给它们发送资金。因此，P2SH 地址可以包含目标地址，该目标地址指明哪些地址应该被视为『拥有』用于 FTS 的基金。\n\n",
        "type": "MarkdownRemark",
        "contentDigest": "684c1064db3e37ebd317ae5942e91922",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "卡尔达诺结算层中的领导者选举",
        "path": "/cn/technical/leader-selection/",
        "group": "technical",
        "visible": true,
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-14-leader-selection.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-14-leader-selection.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at e1d0f9fb37a3f1378341716916f0321fb55698df -->\n\n# 卡尔达诺结算层中的领导者选举\n\n这一章描述[领导者](/glossary/#slot-leader)选举过程。\n\n## 追随中本聪算法\n\n如[前](/cardano/proof-of-stake/#follow-the-satoshi)所述，卡尔达诺结算层使用追随中本聪算法（FTS）来选择领导者。每个当前 epoch 的领导者在当前 epoch 开始的时候，由 FTS 算法计算得出。所以创始区块包含一组领导者列表。领导者的数量和 epoch 的 slot 数量是一致的，这个数量[取决](https://github.com/input-output-hk/cardano-sl/blob/5f7b619c6ec9056c6fe778d862c426233af165df/core/Pos/Core/Constants/Raw.hs#L136)于在[配置文件](https://github.com/input-output-hk/cardano-sl/blob/446444070ee09857603797a90af970fff215c8c5/core/constants.yaml#L10)中定义的基本安全参数 `K`。\n\nFTS 使用[共享种子](https://github.com/input-output-hk/cardano-sl/blob/446444070ee09857603797a90af970fff215c8c5/core/Pos/Core/Types.hs#L256)，该[共享种子](https://github.com/input-output-hk/cardano-sl/blob/446444070ee09857603797a90af970fff215c8c5/core/Pos/Core/Types.hs#L256)为上个 epoch 计算的结果：在 MPC 的结果中的一些节点会揭露它们的种子，这些种子的 XOR 就被称为共享种子，实际上共享种子就是一个[字符串](https://github.com/input-output-hk/cardano-sl/blob/446444070ee09857603797a90af970fff215c8c5/core/Pos/Core/Types.hs#L257)。\n\n股东被选举为领导者的概率与股东持有的币的数量相关。同一个股东可以在同一个 epoch 里面被选举为多个 slot 的领导者。\n\n## 算法\n\n在[论文](/glossary/#论文)的第11页从以学术角度描述了领导者的选举过程。\n\n节点将所有未花费的输出(`utxo`)按照一种特定的方法（按字典）进行排序，因此结果是一对 `(StakeholderId, Coin)` 的有序[序列](https://github.com/input-output-hk/cardano-sl/blob/1f866450a8a530c119e3fc9edb84c97c56417aa2/src/Pos/Genesis.hs#L177)，`StakeholderId` 是股东的 ID（股东的公钥哈希值），`Coin` 是股东持有币的数量。这里假设 `utxo` [不是空的](https://github.com/input-output-hk/cardano-sl/blob/1f866450a8a530c119e3fc9edb84c97c56417aa2/src/Pos/Lrc/FtsPure.hs#L52)。\n\n然后节点选择几个在 `1` 和[系统中 Lovelaces 的数量](https://github.com/input-output-hk/cardano-sl/blob/1f866450a8a530c119e3fc9edb84c97c56417aa2/src/Pos/Lrc/FtsPure.hs#L49)之间的随机数 `i`。为了找到第 `i` 个币的拥有者，节点找到最小的 `x`，使得这个列表从 `x` 到 `i` 的所有币的总数不小于 `i`(这样第 `x` 个地址就是第 `i` 个的拥有者)。\n\n\n结果是一个非空的 `StakeholderId` 序列，也就是被选中的股东们的 ID，[`SlotLeaders`](https://github.com/input-output-hk/cardano-sl/blob/5f7b619c6ec9056c6fe778d862c426233af165df/core/Pos/Core/Types.hs#L264) 序列保存在[节点运行环境中](https://github.com/input-output-hk/cardano-sl/blob/da70b2597aab352d7574a3946a366395b09e97eb/node/src/Pos/Context/Context.hs#L94)。\n\n由于是 P2SH 地址，所以节点不知道是会谁将要给它们发送资金。因此，P2SH 地址可以包含目标地址，该目标地址指明哪些地址应该被视为『拥有』用于 FTS 的基金。\n\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-14-leader-selection.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-16-delegation.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-16-delegation.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-16-delegation.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 卡尔达诺股权委派\npath: /cn/technical/delegation/\ngroup: technical\nvisible: true\nlanguage: cn\nlabel: docs\n---\n<!-- Reviewed at c23493d7a33a82d559d5bd9d289486795cf6592f -->\n\n# 卡尔达诺结算层股权委派\n\n这一章描述权益委托过程的实现细节。\n\n如前所述。为了产生新区块，被选举为领导者的股东必须在线。这种情况可能没有什么吸引力，因为大多数的当选股东都必须为了刷新随机数而参加投币协议（领导者选举过程的关键属性）。如果有很多当选的领导者，会让股东和网络都有很大的压力，因为需要广播和存储大量的提交和共享。\n\n委派的功能允许被称为发行人（_issuers_） `I1...In` 的股权所有人将他们的『参与义务』转移给某些代表团（_delegates_） `D1...Dm`，这些代表团会在[投币协议](https://github.com/input-output-hk/cardano-sl/blob/4bd49d6b852e778c52c60a384a47681acec02d22/src/Pos/Ssc/GodTossing.hs)中代表股权所有人 `S1...Sn`。在这种情况下，真正参与到投币协议中节点的数量就少很多，可以看看[论文](/glossary/#paper)的第38页。\n\n不仅如此，代表团不仅可以生产新区块，参与到 [MPC/SSC](/technical/leader-selection/#follow-the-satoshi) 中，还可以在[系统更新](/cardano/update-mechanism/)时进行投票。\n\n## 策略\n\n领导者可以将自己生产新区块的权利转移给代表团。为了转移这个权利，领导者使用一个代理委托的策略：领导者产生一个[代理签名钥匙](https://github.com/input-output-hk/cardano-sl/blob/4378a616654ff47faf828ef51ab2f455fa53d3a3/core/Pos/Crypto/SignTag.hs#L33)，或者说 PSK，然后代表团会使用它[签名](https://github.com/input-output-hk/cardano-sl/blob/ed6db6c8a44489e2919cd0e01582f638f4ad9b72/src/Pos/Delegation/Listeners.hs#L65)信息来认证一个区块。有两种类型的 PSK：重量级和轻量级（见下文）\n\n具体来说，股权所有人通过自己的公钥构建一个特殊证书来指定代表团的身份。以便之后代表团可以在有限的信息空间内用已签名的证书在自己的公钥下为这些信息提供签名。\n\n\n这是[代理签名](https://github.com/input-output-hk/cardano-sl/blob/d01d392d49db8a25e17749173ec9bce057911191/core/Pos/Crypto/Signing.hs#L256)的格式。它包括了：\n\n* 代理私钥，\n* 签名。\n\n代理私钥包括：\n\n1. omega 值，\n2. 发行人的公钥，\n3. 代表团的公钥，\n4. 代理证书。\n\nOmega (or ω) 是[论文](/glossary/#paper)中一个特殊的值。在我们的实现中，它是[一对 epoch 的标识符](https://github.com/input-output-hk/cardano-sl/blob/f374a970dadef0fe62cf69e8b9a6b8cc606b5c7d/core/Pos/Core/Types.hs#L235)。这些标识符定义了委托有效期：如果 epoch 索引在这个范围内那么生产的区块就是有效的。\n\n[代理证书](https://github.com/input-output-hk/cardano-sl/blob/d01d392d49db8a25e17749173ec9bce057911191/core/Pos/Crypto/Signing.hs#L209)就是 omega 和代表团公钥的[签名](https://github.com/input-output-hk/cardano-crypto/blob/84f8c358463bbf6bb09168aac5ad990faa9d310a/src/Cardano/Crypto/Wallet.hs#L74)。\n\n## 重量级委派\n\n重量级委托使用权益阈值 `T`，这意味着股权所有人拥有的权益不少于 `T` 时才能参与重量级委托。这个阈值在[配置文件](https://github.com/input-output-hk/cardano-sl/blob/42f413b65eeacb59d0b439d04073edcc5adc2656/lib/configuration.yaml#L224)中定义。就像主网的这个阈值是总权益的 0.03%，这个值可以通过系统更新来改变。\n\n来自重量级委托的代理签名证书存储在区块链中。请注意发行者在每个 epoch 只能发布一个证书。\n\n请注意重量级委托有一个传递关系，所以，如果 `A` 委派给 B，然后 B 又委派给 `C`，那么 `C` 代表的权益等于 `A + B`，而不仅仅是 `B`。\n\n\n### 到期\n\n在每一个 epoch 开始时，股权所有人不再传递阈值 `T`, 那么重量级委派证书就会过期。这样做是为了预防委派池膨胀攻击：用户提交了一个证书然后将自己所有的钱（高于阈值）都转到另一个账户，并且重复此操作。\n\n\n## 轻量级委派\n\n**注意：目前轻量级委派功能是关闭的，在 [Shelley 版本](https://cardanoroadmap.com/)中会打开这个功能，所以下面的信息可能是过期的。**\n\n与重量级委托相反，轻量级委派不要求代表团拥有 `T` 或更多的股份。所以轻量级委派可以用于任何的节点。但是轻量级委派的代理签名证书不存在区块链中，所以轻量级委派证书必须要广播到代表团。\n\n之后轻量级 PSK 可以被指定发行者的公钥、签名和信息本身进行[验证](https://github.com/input-output-hk/cardano-sl/blob/42f413b65eeacb59d0b439d04073edcc5adc2656/lib/src/Pos/Delegation/Logic/Mempool.hs#L309)。\n\n请注意『每个 epoch 只能发布一个证书』的规则在轻量级委托中不适用。因为轻量级证书不存储在区块链中，所以可以在每个 epoch 签发很多轻量级证书，不会导致区块链膨胀。\n\n\n### 确认代理签名支付\n\n代表团应该使用他拥有的代理签名密钥，使用 PSK 和代表团的钥匙制作一个 PSK 签名。如果签名是正确的，那么就是由代表团进行签名的（由 PSK 策略确保是这种结果）。\n\n## 为什么有两个委派\n\n你可以将重量级委托和轻量级委托想象成强委托和弱委托。\n\n重量级委派证书被存储在区块链中，所以被委派的权益可能会通过加入到委派权益中而参与 MPC。所以有很多重量级委派的代表团可能会累计足够的权益通过阈值的门槛。不仅如此，重量级委派可以参与卡尔达诺结算层更新的投票。\n\n与此相反，轻量级委派的权益不会被计算到代表团的 MPC 相关权益。所以轻量级委派只能用来生产新区块。\n\n## 回撤证书\n\n回撤证书是一种特殊的证书，发行者创建一个回撤证书来撤回委托。重量级委托和轻量级委托都可以被撤回，不过撤回的方法不同。\n\n作为相同的标准 PSK 的发行者和委派，撤销证书也是相同的。（换句话说，发行者委派给他自己）\n\n要撤销轻量级委派，发行者发送撤销证书给网络，要求撤销委派，但是不能强制撤销，因为轻量级的 PSK 不是区块链的一部分。所以理论上轻量级委派是可以忽略撤销证书的，这样的话，他就一直保持着委派直到它的委派过期。但这样的情况不会妨碍区块链。\n\n重量级委派撤销的处理是另一种方式。因为来自重量级委派的代理签名证书是存储在区块链中的，撤销证书也会被提交到区块链中。这种情况下，节点会删除撤销证书签发之前的重量级委派证。不过有三点很重要：\n\n* 如果提交的重量级委派证书是在节点的内存池里，而且撤销证书也被提交了，那么委派证书将会从内存池中被删除，显然，这种情况下委派证书将永远不会添加到区块链中。  \n* 如果一个用户提交委派证书后丢失了他的钱，他仍然可以撤销那个委派，即使那个时候他已经没有足够的钱了（也就是说他拥有的钱少于上面提到的阈值 `T`)  \n* 尽管发行者在当前的 epoch 只能发布一个证书，在同一个 epoch 他可以撤销他的重量级委派。\n\n",
        "type": "MarkdownRemark",
        "contentDigest": "91baede34665ebc04879c47f827b054a",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "卡尔达诺股权委派",
        "path": "/cn/technical/delegation/",
        "group": "technical",
        "visible": true,
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-16-delegation.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-16-delegation.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at c23493d7a33a82d559d5bd9d289486795cf6592f -->\n\n# 卡尔达诺结算层股权委派\n\n这一章描述权益委托过程的实现细节。\n\n如前所述。为了产生新区块，被选举为领导者的股东必须在线。这种情况可能没有什么吸引力，因为大多数的当选股东都必须为了刷新随机数而参加投币协议（领导者选举过程的关键属性）。如果有很多当选的领导者，会让股东和网络都有很大的压力，因为需要广播和存储大量的提交和共享。\n\n委派的功能允许被称为发行人（_issuers_） `I1...In` 的股权所有人将他们的『参与义务』转移给某些代表团（_delegates_） `D1...Dm`，这些代表团会在[投币协议](https://github.com/input-output-hk/cardano-sl/blob/4bd49d6b852e778c52c60a384a47681acec02d22/src/Pos/Ssc/GodTossing.hs)中代表股权所有人 `S1...Sn`。在这种情况下，真正参与到投币协议中节点的数量就少很多，可以看看[论文](/glossary/#paper)的第38页。\n\n不仅如此，代表团不仅可以生产新区块，参与到 [MPC/SSC](/technical/leader-selection/#follow-the-satoshi) 中，还可以在[系统更新](/cardano/update-mechanism/)时进行投票。\n\n## 策略\n\n领导者可以将自己生产新区块的权利转移给代表团。为了转移这个权利，领导者使用一个代理委托的策略：领导者产生一个[代理签名钥匙](https://github.com/input-output-hk/cardano-sl/blob/4378a616654ff47faf828ef51ab2f455fa53d3a3/core/Pos/Crypto/SignTag.hs#L33)，或者说 PSK，然后代表团会使用它[签名](https://github.com/input-output-hk/cardano-sl/blob/ed6db6c8a44489e2919cd0e01582f638f4ad9b72/src/Pos/Delegation/Listeners.hs#L65)信息来认证一个区块。有两种类型的 PSK：重量级和轻量级（见下文）\n\n具体来说，股权所有人通过自己的公钥构建一个特殊证书来指定代表团的身份。以便之后代表团可以在有限的信息空间内用已签名的证书在自己的公钥下为这些信息提供签名。\n\n\n这是[代理签名](https://github.com/input-output-hk/cardano-sl/blob/d01d392d49db8a25e17749173ec9bce057911191/core/Pos/Crypto/Signing.hs#L256)的格式。它包括了：\n\n* 代理私钥，\n* 签名。\n\n代理私钥包括：\n\n1. omega 值，\n2. 发行人的公钥，\n3. 代表团的公钥，\n4. 代理证书。\n\nOmega (or ω) 是[论文](/glossary/#paper)中一个特殊的值。在我们的实现中，它是[一对 epoch 的标识符](https://github.com/input-output-hk/cardano-sl/blob/f374a970dadef0fe62cf69e8b9a6b8cc606b5c7d/core/Pos/Core/Types.hs#L235)。这些标识符定义了委托有效期：如果 epoch 索引在这个范围内那么生产的区块就是有效的。\n\n[代理证书](https://github.com/input-output-hk/cardano-sl/blob/d01d392d49db8a25e17749173ec9bce057911191/core/Pos/Crypto/Signing.hs#L209)就是 omega 和代表团公钥的[签名](https://github.com/input-output-hk/cardano-crypto/blob/84f8c358463bbf6bb09168aac5ad990faa9d310a/src/Cardano/Crypto/Wallet.hs#L74)。\n\n## 重量级委派\n\n重量级委托使用权益阈值 `T`，这意味着股权所有人拥有的权益不少于 `T` 时才能参与重量级委托。这个阈值在[配置文件](https://github.com/input-output-hk/cardano-sl/blob/42f413b65eeacb59d0b439d04073edcc5adc2656/lib/configuration.yaml#L224)中定义。就像主网的这个阈值是总权益的 0.03%，这个值可以通过系统更新来改变。\n\n来自重量级委托的代理签名证书存储在区块链中。请注意发行者在每个 epoch 只能发布一个证书。\n\n请注意重量级委托有一个传递关系，所以，如果 `A` 委派给 B，然后 B 又委派给 `C`，那么 `C` 代表的权益等于 `A + B`，而不仅仅是 `B`。\n\n\n### 到期\n\n在每一个 epoch 开始时，股权所有人不再传递阈值 `T`, 那么重量级委派证书就会过期。这样做是为了预防委派池膨胀攻击：用户提交了一个证书然后将自己所有的钱（高于阈值）都转到另一个账户，并且重复此操作。\n\n\n## 轻量级委派\n\n**注意：目前轻量级委派功能是关闭的，在 [Shelley 版本](https://cardanoroadmap.com/)中会打开这个功能，所以下面的信息可能是过期的。**\n\n与重量级委托相反，轻量级委派不要求代表团拥有 `T` 或更多的股份。所以轻量级委派可以用于任何的节点。但是轻量级委派的代理签名证书不存在区块链中，所以轻量级委派证书必须要广播到代表团。\n\n之后轻量级 PSK 可以被指定发行者的公钥、签名和信息本身进行[验证](https://github.com/input-output-hk/cardano-sl/blob/42f413b65eeacb59d0b439d04073edcc5adc2656/lib/src/Pos/Delegation/Logic/Mempool.hs#L309)。\n\n请注意『每个 epoch 只能发布一个证书』的规则在轻量级委托中不适用。因为轻量级证书不存储在区块链中，所以可以在每个 epoch 签发很多轻量级证书，不会导致区块链膨胀。\n\n\n### 确认代理签名支付\n\n代表团应该使用他拥有的代理签名密钥，使用 PSK 和代表团的钥匙制作一个 PSK 签名。如果签名是正确的，那么就是由代表团进行签名的（由 PSK 策略确保是这种结果）。\n\n## 为什么有两个委派\n\n你可以将重量级委托和轻量级委托想象成强委托和弱委托。\n\n重量级委派证书被存储在区块链中，所以被委派的权益可能会通过加入到委派权益中而参与 MPC。所以有很多重量级委派的代表团可能会累计足够的权益通过阈值的门槛。不仅如此，重量级委派可以参与卡尔达诺结算层更新的投票。\n\n与此相反，轻量级委派的权益不会被计算到代表团的 MPC 相关权益。所以轻量级委派只能用来生产新区块。\n\n## 回撤证书\n\n回撤证书是一种特殊的证书，发行者创建一个回撤证书来撤回委托。重量级委托和轻量级委托都可以被撤回，不过撤回的方法不同。\n\n作为相同的标准 PSK 的发行者和委派，撤销证书也是相同的。（换句话说，发行者委派给他自己）\n\n要撤销轻量级委派，发行者发送撤销证书给网络，要求撤销委派，但是不能强制撤销，因为轻量级的 PSK 不是区块链的一部分。所以理论上轻量级委派是可以忽略撤销证书的，这样的话，他就一直保持着委派直到它的委派过期。但这样的情况不会妨碍区块链。\n\n重量级委派撤销的处理是另一种方式。因为来自重量级委派的代理签名证书是存储在区块链中的，撤销证书也会被提交到区块链中。这种情况下，节点会删除撤销证书签发之前的重量级委派证。不过有三点很重要：\n\n* 如果提交的重量级委派证书是在节点的内存池里，而且撤销证书也被提交了，那么委派证书将会从内存池中被删除，显然，这种情况下委派证书将永远不会添加到区块链中。  \n* 如果一个用户提交委派证书后丢失了他的钱，他仍然可以撤销那个委派，即使那个时候他已经没有足够的钱了（也就是说他拥有的钱少于上面提到的阈值 `T`)  \n* 尽管发行者在当前的 epoch 只能发布一个证书，在同一个 epoch 他可以撤销他的重量级委派。\n\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-16-delegation.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/contributors/2017-01-03-haddock.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/contributors/2017-01-03-haddock.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/contributors/2017-01-03-haddock.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: Haddock 文档\npath: /cn/for-contributors/haddock/\ngroup: for-contributors\nlanguage: cn\nlabel: docs\n---\n<!-- Reviewed at c507f6675c16810ba9ca72b71dac57288fd1735c -->\n\n# Haddock 文档\n\n这里是卡尔达诺结算层的 Haddock 文档。\n\n## 最新版本\n\n这是 [最新文档](/haddock/latest/index.html)。\n\n## 发布版本\n\n\n\n稳定版本的文档将在之后发布。",
        "type": "MarkdownRemark",
        "contentDigest": "d85b3e13e35c10d19d1e21ea6f53aa5f",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "Haddock 文档",
        "path": "/cn/for-contributors/haddock/",
        "group": "for-contributors",
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/contributors/2017-01-03-haddock.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/contributors/2017-01-03-haddock.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at c507f6675c16810ba9ca72b71dac57288fd1735c -->\n\n# Haddock 文档\n\n这里是卡尔达诺结算层的 Haddock 文档。\n\n## 最新版本\n\n这是 [最新文档](/haddock/latest/index.html)。\n\n## 发布版本\n\n\n\n稳定版本的文档将在之后发布。",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/contributors/2017-01-03-haddock.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-14-hd-wallets.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-14-hd-wallets.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-14-hd-wallets.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: HD 钱包\npath: /cn/technical/hd-wallets/\ngroup: technical\nvisible: true\nlanguage: cn\nlabel: docs\n---\n<!-- Reviewed at 866fd6a29a15c503e54426f17b91bd8b0903c5dc -->\n\n# HD 钱包\n\nHD 钱包是一个允许用户以一种确定性方式从普通种子中获取密钥的功能。基本上，你可以从一个随机种子中产生一个初始密钥。然后你就可以从 `SK₀` 得到孩子 `SK₀-₀`, `SK₀-₁`。从这些孩子中，你可以得到 `SK₀-₀-₀`, `SK₀-₀-₁`, `SK₀-₁-₀` 等（派生任意深度的树）。\n\n<!-- For subscripts and other symbols: https://help.ubuntu.com/community/ComposeKey -->\n\n我们会区分两种类型的键：\n\n-   **Hardened**\n-   **Non-hardened**\n\n这里唯一的区别是 **hardened** 密钥允许从父密钥派生出子密钥。因此，为了派生一个 **hardened** 键，你必须拥有私钥。**Non-hardened**密钥允许从父公钥派生子公钥（不具有可用密钥）。\n\n每个孩子被分配一个4字节的索引 `i`:\n\n-   `i ≤ 2³¹ - 1` **non-hardened** 键。\n-   `i > 2³¹ - 1` **hardened** 键。\n\n## 属性:\n\n1. 树结构保存在根地址中。用户需要复制公钥将其传递给任何想要恢复树的人。\n\n\n## 地址格式\n\n我们使用 `PublicKey` 地址（已经存在于系统中），并添加属性字段。在由 `0` (**HD 钱包属性**) ，我们存储树数据。\n\n树存储为**派生路径**的列表。每个**派生路径**被指定为**派生索引**的列表。每个**派生索引**都是4字节的无符号整数。\n\n所得到的对象被序列化并使用对称方案（*ChaChaPoly1305*算法进行加密），密码被计算为根公钥的SHA-512散列。只要我们实际上没有再根密钥上存储任何资金（不通过共识规则，而是通过用户界面），那么将不允许攻击者将链上的所有地址映射到根。\n\n**设计的关键点：**根密钥不用于实际存储金钱。\n\n## 用例\n\n### 财务审计\n\n应该提供一个根公钥的审计散列，让审计人员找到层次结构中的所有密钥。\n\n### 付款服务器\n\n它只适用于 **non-hardened** 键。\n\n为了使服务器能够获得后续地址来收取付款，需要上传：\n\n- 根公钥\n- 有效载荷：\n    - `i` 级别的 `PK`\n    - 跟公钥的哈希\n    - `PK` 的树路径\n\n### 钱包\n\n要使钱包在某个子树上运行，需要提供：\n\n- 根密钥\n- 有效载荷：\n    - `SK` 级别的密钥 `i`\n    - 根公钥的哈希\n    - `SK` 的树路径\n\n## 要求\n\n`A(K)` 表示保存密钥对信息的地址 `K`。`child(K, i)` 表示第 `i`个子密钥对 `K`。`tree(K)` 表示从 `K`（有证书余额）派生，以 **utxo** 保存的密钥对地址树。\n\n`a -> b` 表示 `b` 从 `a` 派生。`a -x b` 表示 `b` 不是从 `a` 派生的（在任何情况下）：\n\n    priv(K) -> pub(K)\n    pub(K) -> A(K)\n    pub(K) -x priv(K)\n    A(K) -x pub(K)\n    A(K) -x A(child(K, i))\n\n对于 **hardened** 键：\n\n    (priv(K), utxo) -> tree(K)\n    pub(K) -x pub(child(K, i))\n    priv(K) -> priv(child(K, i))\n\n对于 **non-hardened** 键：\n\n    (pub(K), utxo) -> tree(K)\n    pub(K) -> pub(child(K, i))\n    priv(K) -> priv(child(K, i))\n\n## 派生加密接口\n\n### 符号:\n\n- `kp` 表示具有索引 `p` 的私钥。只是一个 **Ed25519** 私钥。\n- `kp` 表示带有索引 `p` 的公钥。只是一个 **Ed25519** 公钥。\n- `cp` 表示带有索引的链。\n\n### 熵\n\n在比特币中，它们使用512位的散列，但 `kp` 只有 256 位，因为这个原因，我们需要遵循512位的密钥，所以我们不减少哈希空间。\n\n- 扩展的私钥是表示为 `(ki, ci)` 的一对。\n- 扩展的私钥是表示为 `(Ki, ci)` 的一对。\n\n从应用角度来看，HD 钱包（BIP-32）引入了以下密码原语：\n\n- `CKDpriv :: ((kpar, cpar), i) → (ki, ci)`  \n从父扩展私钥计算自扩展私钥\n\n- `CKDpub :: ((Kpar, cpar), i) → (Ki, ci)`  \n从父扩展私钥中调用一个子扩展私钥\n\n\n# 代达罗斯 HD 钱包\n\n本节介绍 HD 钱包功能的使用方式。它分为两部分：\n\n1. 扩展钱包后端 API 以在本地支持 HD 钱包结构（就像在比特币中完成的那样）\n2. 利用新的地指数型来扩展区块链处理以保持多个客户端实例的 HD 结构同步。\n\n## 本地存储\n\n### 旧的存储\n\n旧的钱包存储存的是地址列表。每个地址都与一个名称相关联，并且是从单独的密钥（由助记符备份并用消费密码加密）派生而来。\n\n### 新的存储\n\n钱包的存储扩展到存储**钱包**列表。每个钱包对应一个根密钥（由助记符备份并用消费密码加密）。\n\n每个钱包都包含一个**账户**。\n\n每个账户都包含多个**地址**（即地址是 HD 树中第二层的关键字）。\n\n这映射到一个 HD 树：\n\n- 钱包组对应第 0 级（*根*）密钥。\n- 钱包对应1级密钥（根的孩子）。\n- 地址对应于第2级（根的孙子）的密钥。\n\n钱只保存在地址上。\n\n当从一个或多个地址花费金钱时，如果有的话，将产生新的余额。\n\n### 可用性\n\n用户能够：\n\n- 导入/导出任意数量的**钱包**，\n- 生成任意数量的**账户**，\n- 分配**钱包**和**账户**名称，\n- 生成任意数量的地址，\n- 改变钱包消费密码。\n\n\n## 从区块链中读取 HD 钱包数据\n\n有两种导入/导出钱包的方法：\n\n- 通过**助记符**，\n- 通过导出文件。\n\n助记符在前端生成，并允许确定性地生成密钥。名称不会被恢复。\n\n导出文件能够恢复整个钱包结构。\n\n### 导入\n\n在两种情况下我们都有一个根密钥。在导入的时候会执行下面的步骤：\n\n- 根密钥在本地存储中被检查为不存在。\n- 遍历 **utxo** 查找与此根密钥对应的所有有余额的地址，并将它们与服务（钱包）一起添加到存储中。\n- 在文件导入的情况下，从步骤2得到的结构标有名称。此外，导入的文件中列出的钱包/地址，目前没有被使用。\n\n### 新的事务处理\n\n当有新的交易可用时（出现在区块或内存池中），输入会被分析。如果输入对应于具有 **HD 钱包属性**的公共密钥地址，则检查该地址是否对应于我们的**钱包**之一。如果是这样，地址将被导入到结构中（为了在用于界面显示余额）。\n",
        "type": "MarkdownRemark",
        "contentDigest": "0b863e019ac4ecf237d123cf5f174231",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "HD 钱包",
        "path": "/cn/technical/hd-wallets/",
        "group": "technical",
        "visible": true,
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-14-hd-wallets.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-14-hd-wallets.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at 866fd6a29a15c503e54426f17b91bd8b0903c5dc -->\n\n# HD 钱包\n\nHD 钱包是一个允许用户以一种确定性方式从普通种子中获取密钥的功能。基本上，你可以从一个随机种子中产生一个初始密钥。然后你就可以从 `SK₀` 得到孩子 `SK₀-₀`, `SK₀-₁`。从这些孩子中，你可以得到 `SK₀-₀-₀`, `SK₀-₀-₁`, `SK₀-₁-₀` 等（派生任意深度的树）。\n\n<!-- For subscripts and other symbols: https://help.ubuntu.com/community/ComposeKey -->\n\n我们会区分两种类型的键：\n\n-   **Hardened**\n-   **Non-hardened**\n\n这里唯一的区别是 **hardened** 密钥允许从父密钥派生出子密钥。因此，为了派生一个 **hardened** 键，你必须拥有私钥。**Non-hardened**密钥允许从父公钥派生子公钥（不具有可用密钥）。\n\n每个孩子被分配一个4字节的索引 `i`:\n\n-   `i ≤ 2³¹ - 1` **non-hardened** 键。\n-   `i > 2³¹ - 1` **hardened** 键。\n\n## 属性:\n\n1. 树结构保存在根地址中。用户需要复制公钥将其传递给任何想要恢复树的人。\n\n\n## 地址格式\n\n我们使用 `PublicKey` 地址（已经存在于系统中），并添加属性字段。在由 `0` (**HD 钱包属性**) ，我们存储树数据。\n\n树存储为**派生路径**的列表。每个**派生路径**被指定为**派生索引**的列表。每个**派生索引**都是4字节的无符号整数。\n\n所得到的对象被序列化并使用对称方案（*ChaChaPoly1305*算法进行加密），密码被计算为根公钥的SHA-512散列。只要我们实际上没有再根密钥上存储任何资金（不通过共识规则，而是通过用户界面），那么将不允许攻击者将链上的所有地址映射到根。\n\n**设计的关键点：**根密钥不用于实际存储金钱。\n\n## 用例\n\n### 财务审计\n\n应该提供一个根公钥的审计散列，让审计人员找到层次结构中的所有密钥。\n\n### 付款服务器\n\n它只适用于 **non-hardened** 键。\n\n为了使服务器能够获得后续地址来收取付款，需要上传：\n\n- 根公钥\n- 有效载荷：\n    - `i` 级别的 `PK`\n    - 跟公钥的哈希\n    - `PK` 的树路径\n\n### 钱包\n\n要使钱包在某个子树上运行，需要提供：\n\n- 根密钥\n- 有效载荷：\n    - `SK` 级别的密钥 `i`\n    - 根公钥的哈希\n    - `SK` 的树路径\n\n## 要求\n\n`A(K)` 表示保存密钥对信息的地址 `K`。`child(K, i)` 表示第 `i`个子密钥对 `K`。`tree(K)` 表示从 `K`（有证书余额）派生，以 **utxo** 保存的密钥对地址树。\n\n`a -> b` 表示 `b` 从 `a` 派生。`a -x b` 表示 `b` 不是从 `a` 派生的（在任何情况下）：\n\n    priv(K) -> pub(K)\n    pub(K) -> A(K)\n    pub(K) -x priv(K)\n    A(K) -x pub(K)\n    A(K) -x A(child(K, i))\n\n对于 **hardened** 键：\n\n    (priv(K), utxo) -> tree(K)\n    pub(K) -x pub(child(K, i))\n    priv(K) -> priv(child(K, i))\n\n对于 **non-hardened** 键：\n\n    (pub(K), utxo) -> tree(K)\n    pub(K) -> pub(child(K, i))\n    priv(K) -> priv(child(K, i))\n\n## 派生加密接口\n\n### 符号:\n\n- `kp` 表示具有索引 `p` 的私钥。只是一个 **Ed25519** 私钥。\n- `kp` 表示带有索引 `p` 的公钥。只是一个 **Ed25519** 公钥。\n- `cp` 表示带有索引的链。\n\n### 熵\n\n在比特币中，它们使用512位的散列，但 `kp` 只有 256 位，因为这个原因，我们需要遵循512位的密钥，所以我们不减少哈希空间。\n\n- 扩展的私钥是表示为 `(ki, ci)` 的一对。\n- 扩展的私钥是表示为 `(Ki, ci)` 的一对。\n\n从应用角度来看，HD 钱包（BIP-32）引入了以下密码原语：\n\n- `CKDpriv :: ((kpar, cpar), i) → (ki, ci)`  \n从父扩展私钥计算自扩展私钥\n\n- `CKDpub :: ((Kpar, cpar), i) → (Ki, ci)`  \n从父扩展私钥中调用一个子扩展私钥\n\n\n# 代达罗斯 HD 钱包\n\n本节介绍 HD 钱包功能的使用方式。它分为两部分：\n\n1. 扩展钱包后端 API 以在本地支持 HD 钱包结构（就像在比特币中完成的那样）\n2. 利用新的地指数型来扩展区块链处理以保持多个客户端实例的 HD 结构同步。\n\n## 本地存储\n\n### 旧的存储\n\n旧的钱包存储存的是地址列表。每个地址都与一个名称相关联，并且是从单独的密钥（由助记符备份并用消费密码加密）派生而来。\n\n### 新的存储\n\n钱包的存储扩展到存储**钱包**列表。每个钱包对应一个根密钥（由助记符备份并用消费密码加密）。\n\n每个钱包都包含一个**账户**。\n\n每个账户都包含多个**地址**（即地址是 HD 树中第二层的关键字）。\n\n这映射到一个 HD 树：\n\n- 钱包组对应第 0 级（*根*）密钥。\n- 钱包对应1级密钥（根的孩子）。\n- 地址对应于第2级（根的孙子）的密钥。\n\n钱只保存在地址上。\n\n当从一个或多个地址花费金钱时，如果有的话，将产生新的余额。\n\n### 可用性\n\n用户能够：\n\n- 导入/导出任意数量的**钱包**，\n- 生成任意数量的**账户**，\n- 分配**钱包**和**账户**名称，\n- 生成任意数量的地址，\n- 改变钱包消费密码。\n\n\n## 从区块链中读取 HD 钱包数据\n\n有两种导入/导出钱包的方法：\n\n- 通过**助记符**，\n- 通过导出文件。\n\n助记符在前端生成，并允许确定性地生成密钥。名称不会被恢复。\n\n导出文件能够恢复整个钱包结构。\n\n### 导入\n\n在两种情况下我们都有一个根密钥。在导入的时候会执行下面的步骤：\n\n- 根密钥在本地存储中被检查为不存在。\n- 遍历 **utxo** 查找与此根密钥对应的所有有余额的地址，并将它们与服务（钱包）一起添加到存储中。\n- 在文件导入的情况下，从步骤2得到的结构标有名称。此外，导入的文件中列出的钱包/地址，目前没有被使用。\n\n### 新的事务处理\n\n当有新的交易可用时（出现在区块或内存池中），输入会被分析。如果输入对应于具有 **HD 钱包属性**的公共密钥地址，则检查该地址是否对应于我们的**钱包**之一。如果是这样，地址将被导入到结构中（为了在用于界面显示余额）。\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-14-hd-wallets.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-16-wallet-frontend.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-16-wallet-frontend.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-16-wallet-frontend.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 卡尔达诺结算层钱包前端\npath: /cn/technical/wallet-frontend/\ngroup: technical\nvisible: true\nlanguage: cn\nlabel: docs\n---\n<!-- Reviewed at cd26fb28eb48f893a4ca2d045a10da19c211b807 -->\n\n# 卡尔达诺结算层钱包前端\n\n卡尔达诺结算层发展时，用户需要一个可以查看资金，发送接收转账，处理其他个人电子货币钱包的任务这样的用户界面，这一需求在增长。代达罗斯钱包是对于这些需求的解决方案。\n\n目前，它允许用户使用上述功能，并计划在不久的将来提供对其他货币的支持，包括电子货币和非电子货币。\n\n\n## 构建代达罗斯客户端 API\n\n要在本地运行代达罗斯客户端 API，您必须按照下面的要求开启 [`cardano-sl`](https://github.com/input-output-hk/cardano-sl/) 的钱包 API。\n\n请确保您在 `cardano-sl` 的根目录。同时确保您已经安装 [npm](https://www.npmjs.com/) 程序。\n\n\n## 运行和测试代达罗斯客户端 API\n\n为了在操作中看到代达罗斯客户端 API，首先运行一个本地的卡尔达诺结算层网络：\n\n``` bash\n# run tmux in another window\n$ tmux\n# launch nodes\n$ ./scripts/launch/demo-with-wallet-api.sh\n```\n\n默认情况下，这将启动由3个互连节点组成的尔达诺结算层网络。一个节点运行钱包 API，它会同生产环境中运行的代达罗斯钱包行为一致。\n\n\n## WEBSOCKETS 通知\n\n我们可以用一个小工具(`npm install -g wscat`)来测试 websocks：\n\n\n``` bash\n> wscat -c ws://127.0.0.1:8090\n\nconnected (press CTRL+C to quit)\n\n< {\"tag\":\"ConnectionOpened\"}\n\n< {\"tag\":\"NetworkDifficultyChanged\",\"contents\":{\"getChainDifficulty\":1}}\n< {\"tag\":\"LocalDifficultyChanged\",\"contents\":{\"getChainDifficulty\":1}}\n< {\"tag\":\"NetworkDifficultyChanged\",\"contents\":{\"getChainDifficulty\":2}}\n< {\"tag\":\"LocalDifficultyChanged\",\"contents\":{\"getChainDifficulty\":2}}\n< {\"tag\":\"NetworkDifficultyChanged\",\"contents\":{\"getChainDifficulty\":3}}\n< {\"tag\":\"LocalDifficultyChanged\",\"contents\":{\"getChainDifficulty\":3}}\n< {\"tag\":\"NetworkDifficultyChanged\",\"contents\":{\"getChainDifficulty\":4}}\n< {\"tag\":\"LocalDifficultyChanged\",\"contents\":{\"getChainDifficulty\":4}}\n```\n\n从这我们可以看到相同的改变：\n\n``` bash\ncurl http://localhost:8090/api/settings/sync/progress\n```\n\nAccound 应该重命名为地址。请查看这个 issues [CSM-249](https://issues.serokell.io/issue/CSM-249) 获取更多细节。\n\n## 钱包事件\n\n除了这些 HTTP 接入点外，还有一个从服务器到客户端的单向 websocket 通道，`notify` 接入点。\n\n这个通道充当通知系统。以便可以告知代达罗斯 UI 相关事件。目前支持的事件有：\n\n - `LocalDifficultyChanged` - 当前区块链高度，\n - `NetworkDifficultyChanged` - 全球区块链高度，\n - `UpdateAvailable` - 新的系统可用更新，\n - `ConnectedPeersChanged` - 连接到对等节点数量的改变，\n - `ConnectionOpened` - 打开 websocket 连接，\n - `ConnectionClosed` - 关闭 websocket 连接。\n\n由于此通道是单向的，因此从客户端发送到通道的任何消息都会被忽略。\n\n",
        "type": "MarkdownRemark",
        "contentDigest": "9c59a89b50b0596ba9cad1ee11ff1f34",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "卡尔达诺结算层钱包前端",
        "path": "/cn/technical/wallet-frontend/",
        "group": "technical",
        "visible": true,
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-16-wallet-frontend.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-16-wallet-frontend.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at cd26fb28eb48f893a4ca2d045a10da19c211b807 -->\n\n# 卡尔达诺结算层钱包前端\n\n卡尔达诺结算层发展时，用户需要一个可以查看资金，发送接收转账，处理其他个人电子货币钱包的任务这样的用户界面，这一需求在增长。代达罗斯钱包是对于这些需求的解决方案。\n\n目前，它允许用户使用上述功能，并计划在不久的将来提供对其他货币的支持，包括电子货币和非电子货币。\n\n\n## 构建代达罗斯客户端 API\n\n要在本地运行代达罗斯客户端 API，您必须按照下面的要求开启 [`cardano-sl`](https://github.com/input-output-hk/cardano-sl/) 的钱包 API。\n\n请确保您在 `cardano-sl` 的根目录。同时确保您已经安装 [npm](https://www.npmjs.com/) 程序。\n\n\n## 运行和测试代达罗斯客户端 API\n\n为了在操作中看到代达罗斯客户端 API，首先运行一个本地的卡尔达诺结算层网络：\n\n``` bash\n# run tmux in another window\n$ tmux\n# launch nodes\n$ ./scripts/launch/demo-with-wallet-api.sh\n```\n\n默认情况下，这将启动由3个互连节点组成的尔达诺结算层网络。一个节点运行钱包 API，它会同生产环境中运行的代达罗斯钱包行为一致。\n\n\n## WEBSOCKETS 通知\n\n我们可以用一个小工具(`npm install -g wscat`)来测试 websocks：\n\n\n``` bash\n> wscat -c ws://127.0.0.1:8090\n\nconnected (press CTRL+C to quit)\n\n< {\"tag\":\"ConnectionOpened\"}\n\n< {\"tag\":\"NetworkDifficultyChanged\",\"contents\":{\"getChainDifficulty\":1}}\n< {\"tag\":\"LocalDifficultyChanged\",\"contents\":{\"getChainDifficulty\":1}}\n< {\"tag\":\"NetworkDifficultyChanged\",\"contents\":{\"getChainDifficulty\":2}}\n< {\"tag\":\"LocalDifficultyChanged\",\"contents\":{\"getChainDifficulty\":2}}\n< {\"tag\":\"NetworkDifficultyChanged\",\"contents\":{\"getChainDifficulty\":3}}\n< {\"tag\":\"LocalDifficultyChanged\",\"contents\":{\"getChainDifficulty\":3}}\n< {\"tag\":\"NetworkDifficultyChanged\",\"contents\":{\"getChainDifficulty\":4}}\n< {\"tag\":\"LocalDifficultyChanged\",\"contents\":{\"getChainDifficulty\":4}}\n```\n\n从这我们可以看到相同的改变：\n\n``` bash\ncurl http://localhost:8090/api/settings/sync/progress\n```\n\nAccound 应该重命名为地址。请查看这个 issues [CSM-249](https://issues.serokell.io/issue/CSM-249) 获取更多细节。\n\n## 钱包事件\n\n除了这些 HTTP 接入点外，还有一个从服务器到客户端的单向 websocket 通道，`notify` 接入点。\n\n这个通道充当通知系统。以便可以告知代达罗斯 UI 相关事件。目前支持的事件有：\n\n - `LocalDifficultyChanged` - 当前区块链高度，\n - `NetworkDifficultyChanged` - 全球区块链高度，\n - `UpdateAvailable` - 新的系统可用更新，\n - `ConnectedPeersChanged` - 连接到对等节点数量的改变，\n - `ConnectionOpened` - 打开 websocket 连接，\n - `ConnectionClosed` - 关闭 websocket 连接。\n\n由于此通道是单向的，因此从客户端发送到通道的任何消息都会被忽略。\n\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-16-wallet-frontend.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-15-wallet-backend.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-15-wallet-backend.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-15-wallet-backend.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 卡尔达诺结算层钱包后端\npath: /cn/technical/wallet-backend/\ngroup: technical\nvisible: true\nlanguage: cn\nlabel: docs\n---\n<!-- Reviewed at ac0126b2753f1f5ca6fbfb555783fbeb1aa141bd -->\n\n# 卡尔达诺结算层钱包后端\n\n\n[地址](/cardano/addresses/)章节讨论的地址是发送和接收资金的基础，而钱包是简化用户最终流程的一种方式。\n\n\n## 什么是钱包？\n\n在卡尔达诺中，钱包的定义如下：\n\n\n``` haskell\ndata CWallet = CWallet\n    { cwId       :: !CWalletAddress\n    , cwMeta     :: !CWalletMeta\n    , cwAccounts :: ![CAccount]\n    , cwAmount   :: !CCoin\n    }\n```\n\n其中 `CWalletMeta` 指明当前钱包是共享的还是个人的，以及钱包使用的货币和钱包的名字。有了这个，钱包类型很容易扩展，因为任何附加的功能可以添加到 `CWalletMeta` 类型，而其他字段不变。每个钱包，无论名称，类型和货币，都必须具有上述字段。\n\n## 交易和钱包\n\n在[转账](/cardano/transactions/)章节定义了交易数据的结构。然而，为了方便客户的操作，交易在客户中有不同的表现形式，他们被表示为：\n\n\n``` haskell\ndata CTx = CTx\n    { ctId            :: CTxId\n    , ctAmount        :: CCoin\n    , ctConfirmations :: Word\n    , ctMeta          :: CTxMeta\n    , ctInputAddrs    :: [CAddress Acc]\n    , ctOutputAddrs   :: [CAddress Acc]\n    }\n```\n\n\n本质上，一个客户端的转账由实际交易 `Id`，收到的币的数量，交易已得到的确认数（即当前位于包含所述交易区块顶部的区块数量），输入和输出地址。元数据，数据类型 `CTxMeta`，表明交易的货币，标题或名称，描述信息，以及 POSIX 格式的发送日期。\n\n\n## 钱包后端 API\n\n目前，钱包 API 提供了一系列使用钱包的方法。Haskell 库 `servant` 提供了一个模块化的 API 构建方法。该库使用组合器来构建院子 HTTP 操作，并将这些原子方法粘合在一起以形成更大和更完整的 API。\n\n请注意，只有当您使用 `--wallet` 选项运行节点时，钱包 Web API 才可用，这个 API 的默认端口 `8090` 可以通过 `--wallet-port` 选项进行更改。\n\n钱包 Web API 文档可以在[这里](https://cardanodocs.com/technical/wallet/api/)找到\n\n\n### TLS 连接\n\n钱包 Web API 使用 TLS 进行安全通信。调用 API 需要发送客户端 CA 证书，该证书在启动节点时使用，并将客户端标识为允许调用服务器 API。\n\n请注意，客户端证书文件是启动节点时 `--tlsca` 作为选项提供的文件。\n\n例如，如果该文件是可用的 `ca.crt`，那么对于运行节点 `localhost:8090` 调用 curl 命令可以像这样：\n\n\n``` bash\ncurl --cacert ca.crt -v https://localhost:8090/api/settings/sync/progress\n```\n\n如果该请求成功，那么您已经正确配置了 TLS。\n\n\n### 处理错误\n\n如果事件请求失败，则有一个 `WalletError` 类型，它只封装一个 `Text` 来显示发生了什么。\n\n",
        "type": "MarkdownRemark",
        "contentDigest": "4a1102b8c1a75213545591be9339a9f8",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "卡尔达诺结算层钱包后端",
        "path": "/cn/technical/wallet-backend/",
        "group": "technical",
        "visible": true,
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-15-wallet-backend.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-15-wallet-backend.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at ac0126b2753f1f5ca6fbfb555783fbeb1aa141bd -->\n\n# 卡尔达诺结算层钱包后端\n\n\n[地址](/cardano/addresses/)章节讨论的地址是发送和接收资金的基础，而钱包是简化用户最终流程的一种方式。\n\n\n## 什么是钱包？\n\n在卡尔达诺中，钱包的定义如下：\n\n\n``` haskell\ndata CWallet = CWallet\n    { cwId       :: !CWalletAddress\n    , cwMeta     :: !CWalletMeta\n    , cwAccounts :: ![CAccount]\n    , cwAmount   :: !CCoin\n    }\n```\n\n其中 `CWalletMeta` 指明当前钱包是共享的还是个人的，以及钱包使用的货币和钱包的名字。有了这个，钱包类型很容易扩展，因为任何附加的功能可以添加到 `CWalletMeta` 类型，而其他字段不变。每个钱包，无论名称，类型和货币，都必须具有上述字段。\n\n## 交易和钱包\n\n在[转账](/cardano/transactions/)章节定义了交易数据的结构。然而，为了方便客户的操作，交易在客户中有不同的表现形式，他们被表示为：\n\n\n``` haskell\ndata CTx = CTx\n    { ctId            :: CTxId\n    , ctAmount        :: CCoin\n    , ctConfirmations :: Word\n    , ctMeta          :: CTxMeta\n    , ctInputAddrs    :: [CAddress Acc]\n    , ctOutputAddrs   :: [CAddress Acc]\n    }\n```\n\n\n本质上，一个客户端的转账由实际交易 `Id`，收到的币的数量，交易已得到的确认数（即当前位于包含所述交易区块顶部的区块数量），输入和输出地址。元数据，数据类型 `CTxMeta`，表明交易的货币，标题或名称，描述信息，以及 POSIX 格式的发送日期。\n\n\n## 钱包后端 API\n\n目前，钱包 API 提供了一系列使用钱包的方法。Haskell 库 `servant` 提供了一个模块化的 API 构建方法。该库使用组合器来构建院子 HTTP 操作，并将这些原子方法粘合在一起以形成更大和更完整的 API。\n\n请注意，只有当您使用 `--wallet` 选项运行节点时，钱包 Web API 才可用，这个 API 的默认端口 `8090` 可以通过 `--wallet-port` 选项进行更改。\n\n钱包 Web API 文档可以在[这里](https://cardanodocs.com/technical/wallet/api/)找到\n\n\n### TLS 连接\n\n钱包 Web API 使用 TLS 进行安全通信。调用 API 需要发送客户端 CA 证书，该证书在启动节点时使用，并将客户端标识为允许调用服务器 API。\n\n请注意，客户端证书文件是启动节点时 `--tlsca` 作为选项提供的文件。\n\n例如，如果该文件是可用的 `ca.crt`，那么对于运行节点 `localhost:8090` 调用 curl 命令可以像这样：\n\n\n``` bash\ncurl --cacert ca.crt -v https://localhost:8090/api/settings/sync/progress\n```\n\n如果该请求成功，那么您已经正确配置了 TLS。\n\n\n### 处理错误\n\n如果事件请求失败，则有一个 `WalletError` 类型，它只封装一个 `Text` 来显示发生了什么。\n\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-15-wallet-backend.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/contributors/2017-01-01-building-from-source.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/contributors/2017-01-01-building-from-source.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/contributors/2017-01-01-building-from-source.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 从源码构建卡尔达诺结算层\npath: /cn/for-contributors/building-from-source/\ngroup: for-contributors\nlanguage: cn\nlabel: docs\n---\n\n# 重定向中...\n\n<script>\n    // window.location.replace(\"https://github.com/input-output-hk/cardano-sl/blob/develop/docs/how-to/build-cardano-sl-and-daedalus-from-source-code.md\");\n</script>\n",
        "type": "MarkdownRemark",
        "contentDigest": "82572a960c5f511c5b552cf6b7be07fd",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "从源码构建卡尔达诺结算层",
        "path": "/cn/for-contributors/building-from-source/",
        "group": "for-contributors",
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/contributors/2017-01-01-building-from-source.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/contributors/2017-01-01-building-from-source.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n# 重定向中...\n\n<script>\n    // window.location.replace(\"https://github.com/input-output-hk/cardano-sl/blob/develop/docs/how-to/build-cardano-sl-and-daedalus-from-source-code.md\");\n</script>\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/contributors/2017-01-01-building-from-source.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-01-testnet.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-01-testnet.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-01-testnet.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 测试网阶段\npath: /cn/timeline/testnet/\ngroup: timeline\nlanguage: cn\nlabel: docs\n---\n\n<!-- Reviewed at 357ac1f7b4a9f1d98ee7f7bee46e874d7356958f -->\n\n# 测试网阶段\n\n让社区掌握加密货币，打磨实现，消除可能的缺陷和不稳定性，卡尔达诺测试网络（测试网）是必须的。\n\n在测试网阶段，包括奖励机制在内的所有功能都将被激活，任何人都可以从卡尔达诺测试网接口兑换密钥，拿到币。\n\n\n我们鼓励大家下载对应平台的卡尔达诺结算层客户端，从接口获取一些币（我们称它们为 [Lovelace](/cn/glossary/#lovelace)），邀请其他人参与 beta 版本的测试。\n\n测试网的结束是卡尔达诺结算层的[发布](/timeline/bootstrap)。\n\n",
        "type": "MarkdownRemark",
        "contentDigest": "3678554abfe84b9605a09ea1c6598c3b",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "测试网阶段",
        "path": "/cn/timeline/testnet/",
        "group": "timeline",
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-01-testnet.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-01-testnet.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n<!-- Reviewed at 357ac1f7b4a9f1d98ee7f7bee46e874d7356958f -->\n\n# 测试网阶段\n\n让社区掌握加密货币，打磨实现，消除可能的缺陷和不稳定性，卡尔达诺测试网络（测试网）是必须的。\n\n在测试网阶段，包括奖励机制在内的所有功能都将被激活，任何人都可以从卡尔达诺测试网接口兑换密钥，拿到币。\n\n\n我们鼓励大家下载对应平台的卡尔达诺结算层客户端，从接口获取一些币（我们称它们为 [Lovelace](/cn/glossary/#lovelace)），邀请其他人参与 beta 版本的测试。\n\n测试网的结束是卡尔达诺结算层的[发布](/timeline/bootstrap)。\n\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-01-testnet.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-02-bootstrap.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-02-bootstrap.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-02-bootstrap.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 引导阶段\npath: /cn/timeline/bootstrap/\ngroup: timeline\nlanguage: cn\nlabel: docs\n---\n\n<!-- Reviewed at c23493d7a33a82d559d5bd9d289486795cf6592f -->\n\n# 引导阶段\n\n在卡尔达诺测试网阶段和卡尔达诺结算层发布之后，该网络会在『引导模式』下运行一段时期，称为引导阶段。当购买 Ada 的人兑换他们的币时，股权将自动被委派给维护网络的可信节点池。在此期间，不会发放任何区块奖励 - 我们将保持网络在线。这是必要的，因为为了协议功能正常，拥有大部分期权的一些权益所有人必须在线，而在网络运行的头几个月，情况并非如此。\n\n引导阶段将慢慢进入[奖励阶段](/timeline/reward)，在这期间更新协议将被发布，将为大宗权益所有人提供在云服务器运行的方便选项。\n\n\n## 股权锁定\n\n引导阶段存在于卡尔达诺结算层存在的时期，它只允许固定的预定义用户对系统进行控制。这些用户集（引导阶段权益所有人）以及他们各自控制的总权益的比例，在创始区块中定义。\n\n引导阶段的目的是为了解决在主网开始的时候，大部分股权可能会脱机（开始时违反协议）的担忧。引导阶段将在网络稳定，并且大部分股权在线时结束。\n\n引导阶段之后的下一个阶段被称为[奖励阶段](https://cardanodocs.com/timeline/reward/cn/)，奖励阶段实际上是卡尔达诺结算层作为 PoS 加密货币的『正常』运行模式。\n\n\n### 要求\n\n1. 在引导阶段，卡尔达诺的股权应当被有效地委派给一组固定的密钥 `S`。\n2. `S` = 7\n3. 股权应该在 `s` ∈  `S`\n4. 在引导阶段结束时应该解开股权\n    1. Ada 买家能够自己参与协议（或将其权利委派给某个代表 `S`)。\n    2. 每个 Ada 买方都应该明确声明自己想要控制的股份。\n        * 否则，一旦奖励阶段开始，很容易导致在少于大多数股权在线的情况。\n    3. 在撤销股权行动之前，股权应该仍然由 `S` 节点控制。\n\n### 提案\n\n现在让我们来看看引导阶段的解决方案：\n\n1. 初始 `utxo` 包含引导阶段股权所有人的所有股权。初始 `utxo` 由 `(txIn, txOut)` 组成，并且每个 `txOut` 都有一个存有股权分发的地址。所以我们只是以一种将所有币发送给所有股权所有的方式设置分配。\n2. 引导阶段开始时，用户可以发送更改初始 `utxo` 的请求。我们为每个交易输出设定股权分配，以将权益分配给引导阶段权益相关者。这有效得使得利益分配是系统不变的。\n3. 重量级代表团有成因状态。它包含对 `(Issuer, ProxySK)`，其中 `Issuer` 是被委托的利益相关者的标识符，`ProxySK` 是委派的代理密钥。请注意：\n    * 代表必须与发行人不同，即不允许撤销；\n    * 委派人不能成为发行人，即不支持过渡性委派。\n4. 当引导阶段结束后，我们禁用股权分配的限制。股权所有人将投票让引导阶段结束：将形成特殊的更新提案，其中一个特定的常量将被适当设置，以触发引导阶段结束的更新提案获得通过。系统的运行方式与引导阶段相同，但用户需要明确说明自己的股份所有权，能承担处理节点的责任。为了获取他的股权，用户应该发送一个交易，指定股权分配的代理密钥（s）。它可能是用户自己拥有的密钥，也可能是某个关键代表（可能是引导阶段股权所有人中的一个或几个）。\n\n",
        "type": "MarkdownRemark",
        "contentDigest": "cf1810e544eb90de53b242071d05ece7",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "引导阶段",
        "path": "/cn/timeline/bootstrap/",
        "group": "timeline",
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-02-bootstrap.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-02-bootstrap.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n<!-- Reviewed at c23493d7a33a82d559d5bd9d289486795cf6592f -->\n\n# 引导阶段\n\n在卡尔达诺测试网阶段和卡尔达诺结算层发布之后，该网络会在『引导模式』下运行一段时期，称为引导阶段。当购买 Ada 的人兑换他们的币时，股权将自动被委派给维护网络的可信节点池。在此期间，不会发放任何区块奖励 - 我们将保持网络在线。这是必要的，因为为了协议功能正常，拥有大部分期权的一些权益所有人必须在线，而在网络运行的头几个月，情况并非如此。\n\n引导阶段将慢慢进入[奖励阶段](/timeline/reward)，在这期间更新协议将被发布，将为大宗权益所有人提供在云服务器运行的方便选项。\n\n\n## 股权锁定\n\n引导阶段存在于卡尔达诺结算层存在的时期，它只允许固定的预定义用户对系统进行控制。这些用户集（引导阶段权益所有人）以及他们各自控制的总权益的比例，在创始区块中定义。\n\n引导阶段的目的是为了解决在主网开始的时候，大部分股权可能会脱机（开始时违反协议）的担忧。引导阶段将在网络稳定，并且大部分股权在线时结束。\n\n引导阶段之后的下一个阶段被称为[奖励阶段](https://cardanodocs.com/timeline/reward/cn/)，奖励阶段实际上是卡尔达诺结算层作为 PoS 加密货币的『正常』运行模式。\n\n\n### 要求\n\n1. 在引导阶段，卡尔达诺的股权应当被有效地委派给一组固定的密钥 `S`。\n2. `S` = 7\n3. 股权应该在 `s` ∈  `S`\n4. 在引导阶段结束时应该解开股权\n    1. Ada 买家能够自己参与协议（或将其权利委派给某个代表 `S`)。\n    2. 每个 Ada 买方都应该明确声明自己想要控制的股份。\n        * 否则，一旦奖励阶段开始，很容易导致在少于大多数股权在线的情况。\n    3. 在撤销股权行动之前，股权应该仍然由 `S` 节点控制。\n\n### 提案\n\n现在让我们来看看引导阶段的解决方案：\n\n1. 初始 `utxo` 包含引导阶段股权所有人的所有股权。初始 `utxo` 由 `(txIn, txOut)` 组成，并且每个 `txOut` 都有一个存有股权分发的地址。所以我们只是以一种将所有币发送给所有股权所有的方式设置分配。\n2. 引导阶段开始时，用户可以发送更改初始 `utxo` 的请求。我们为每个交易输出设定股权分配，以将权益分配给引导阶段权益相关者。这有效得使得利益分配是系统不变的。\n3. 重量级代表团有成因状态。它包含对 `(Issuer, ProxySK)`，其中 `Issuer` 是被委托的利益相关者的标识符，`ProxySK` 是委派的代理密钥。请注意：\n    * 代表必须与发行人不同，即不允许撤销；\n    * 委派人不能成为发行人，即不支持过渡性委派。\n4. 当引导阶段结束后，我们禁用股权分配的限制。股权所有人将投票让引导阶段结束：将形成特殊的更新提案，其中一个特定的常量将被适当设置，以触发引导阶段结束的更新提案获得通过。系统的运行方式与引导阶段相同，但用户需要明确说明自己的股份所有权，能承担处理节点的责任。为了获取他的股权，用户应该发送一个交易，指定股权分配的代理密钥（s）。它可能是用户自己拥有的密钥，也可能是某个关键代表（可能是引导阶段股权所有人中的一个或几个）。\n\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-02-bootstrap.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-03-reward.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-03-reward.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-03-reward.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 奖励阶段\npath: /cn/timeline/reward/\ngroup: timeline\nlanguage: cn\nlabel: docs\n---\n<!-- Reviewed at 357ac1f7b4a9f1d98ee7f7bee46e874d7356958f -->\n\n# 奖励阶段\n\n在[引导阶段](/timeline/bootstrap)之后，奖励阶段将开始。在这个阶段，网络将是完全去中心化，非可信模式。我们预计在这个阶段权益池将会出现，让股权比较少的股民也能获得奖励，因为大股东会让节点时刻保持在线来维护去中心化协议。\n\n系统将会定期收到软件更新，并在不久的将来发布大量新功能。\n\n",
        "type": "MarkdownRemark",
        "contentDigest": "3eb3c6e63fd424e5ffbd5104bbb15f7d",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "奖励阶段",
        "path": "/cn/timeline/reward/",
        "group": "timeline",
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-03-reward.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-03-reward.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at 357ac1f7b4a9f1d98ee7f7bee46e874d7356958f -->\n\n# 奖励阶段\n\n在[引导阶段](/timeline/bootstrap)之后，奖励阶段将开始。在这个阶段，网络将是完全去中心化，非可信模式。我们预计在这个阶段权益池将会出现，让股权比较少的股民也能获得奖励，因为大股东会让节点时刻保持在线来维护去中心化协议。\n\n系统将会定期收到软件更新，并在不久的将来发布大量新功能。\n\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-03-reward.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-01-introduction.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-01-introduction.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-01-introduction.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: Introduction\npath: /en/technical/plutus/introduction/\ngroup: technical-plutus\nlanguage: en\nlabel: docs\n---\n<!-- Reviewed at f766612fb6c75b941cbe3c2d9c2db17dd2dc9bd3 -->\n\n# Plutus Introduction\n\nPlutus is a strictly typed pure functional programming language used for\ndefining smart contracts in Cardano. The syntax is fairly Haskell-like, but\nunlike Haskell, the language is eagerly evaluated.\n\n## Declaring Data Types\n\nIn Plutus, to define a data type, we give the name of the type, then any type\nparameters, together with a list of constructor alternatives — like in Haskell.\nEach constructor alternative has the types of its arguments.\n\nSo, for instance, the type of Peano numerals would be defined as\n\n    data Nat = { Zero | Suc Nat }\n\nwhereas binary trees would be defined as\n\n    data Tree a = { Leaf | Branch (Tree a) a (Tree a) }\n\nThe type constructor `Tree` takes one parameter, `a`. It's inhabited by values\nconstructed by two constructors, `Leaf`, which has no arguments, and `Branch`,\nwhich has three arguments, a left subtree of type `Tree a`, a value of type `a`,\nand a right subtree of type `Tree a`.\n\nWe can inspect data using the `case` construct, like so:\n\n    case t of {\n      Leaf -> ... ;\n      Branch l x r -> ...\n    }\n\n## Declaring Values\n\nTo declare a new value (whether it's a function or not), we provide its type,\nand then specify its value. For instance, to define addition for natural\nnumbers, we can give a recursive definition using `case`:\n\n    add : Nat -> Nat -> Nat {\n      add = \\m n ->\n        case m of {\n          Zero -> n ;\n          Suc m' -> Suc (add m' n)\n        }\n    }\n\nWe can also use pattern matching equations in the same way as in Haskell, which\nmakes the definition of functions like this much more elegant:\n\n    add : Nat -> Nat -> Nat {\n      add Zero n = n ;\n      add (Suc m) n = Suc (add m n)\n    }\n\n## Smart Contract Computations\n\nPlutus has one important type built into the language specific for smart\ncontract computations: the type constructor `Comp`, which takes one type\nparameter. The simplest way to make values is with the two computation\nconstructors `success`, which takes a value `M` with type `A` (for any choice of\n`A`) and produces a computation of type `Comp A` which represents a successful\nsmart contract computation that returns `M`. You can also build a value of type\n`Comp A` with just `failure`, which represents a failed computation.\n\nIt's also possible to chain smart contract computations together using `do`\nnotation. Given a term `M` of the type `Comp A`, and a term `N` of type `Comp B`\nwith a free variable `x` of type `A`, we can form `do { x <- M ; N }` which runs\nthe computation `M`, binds its returned value to `x`, then runs the computation\n`N`. If the term `M` computes to `failure`, then the failure is propagated by\nthe `do` construct and the whole thing computes to `failure`.\n\nThis is most useful for building validator scripts for smart contracts. The\nstandard way of doing this is by asking for a redeemer program of type `Comp A`\nand a validator program of type `A -> Comp B`, which then are composed to form\n`do { x <- redeemer ; validator x }`. The `redeemer` program is run, returning\nwhatever data `validator` needs, and then that data is given to `validator` \nwhich is then run.\n\n## More Detailed Overview\n\nThe other chapters in Plutus section provide a more detailed overview of the\ngrammar, types, and programs of Plutus, including the built-in types and\nfunctionality, and should be read before diving into writing programs. There's\nalso a demo file, showing the implementation of a number of common functions, to\ngive a good sense of the use of the language.\n",
        "type": "MarkdownRemark",
        "contentDigest": "43452d211ff5732d1242ec8d5e396b95",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "Introduction",
        "path": "/en/technical/plutus/introduction/",
        "group": "technical-plutus",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-01-introduction.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-01-introduction.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at f766612fb6c75b941cbe3c2d9c2db17dd2dc9bd3 -->\n\n# Plutus Introduction\n\nPlutus is a strictly typed pure functional programming language used for\ndefining smart contracts in Cardano. The syntax is fairly Haskell-like, but\nunlike Haskell, the language is eagerly evaluated.\n\n## Declaring Data Types\n\nIn Plutus, to define a data type, we give the name of the type, then any type\nparameters, together with a list of constructor alternatives — like in Haskell.\nEach constructor alternative has the types of its arguments.\n\nSo, for instance, the type of Peano numerals would be defined as\n\n    data Nat = { Zero | Suc Nat }\n\nwhereas binary trees would be defined as\n\n    data Tree a = { Leaf | Branch (Tree a) a (Tree a) }\n\nThe type constructor `Tree` takes one parameter, `a`. It's inhabited by values\nconstructed by two constructors, `Leaf`, which has no arguments, and `Branch`,\nwhich has three arguments, a left subtree of type `Tree a`, a value of type `a`,\nand a right subtree of type `Tree a`.\n\nWe can inspect data using the `case` construct, like so:\n\n    case t of {\n      Leaf -> ... ;\n      Branch l x r -> ...\n    }\n\n## Declaring Values\n\nTo declare a new value (whether it's a function or not), we provide its type,\nand then specify its value. For instance, to define addition for natural\nnumbers, we can give a recursive definition using `case`:\n\n    add : Nat -> Nat -> Nat {\n      add = \\m n ->\n        case m of {\n          Zero -> n ;\n          Suc m' -> Suc (add m' n)\n        }\n    }\n\nWe can also use pattern matching equations in the same way as in Haskell, which\nmakes the definition of functions like this much more elegant:\n\n    add : Nat -> Nat -> Nat {\n      add Zero n = n ;\n      add (Suc m) n = Suc (add m n)\n    }\n\n## Smart Contract Computations\n\nPlutus has one important type built into the language specific for smart\ncontract computations: the type constructor `Comp`, which takes one type\nparameter. The simplest way to make values is with the two computation\nconstructors `success`, which takes a value `M` with type `A` (for any choice of\n`A`) and produces a computation of type `Comp A` which represents a successful\nsmart contract computation that returns `M`. You can also build a value of type\n`Comp A` with just `failure`, which represents a failed computation.\n\nIt's also possible to chain smart contract computations together using `do`\nnotation. Given a term `M` of the type `Comp A`, and a term `N` of type `Comp B`\nwith a free variable `x` of type `A`, we can form `do { x <- M ; N }` which runs\nthe computation `M`, binds its returned value to `x`, then runs the computation\n`N`. If the term `M` computes to `failure`, then the failure is propagated by\nthe `do` construct and the whole thing computes to `failure`.\n\nThis is most useful for building validator scripts for smart contracts. The\nstandard way of doing this is by asking for a redeemer program of type `Comp A`\nand a validator program of type `A -> Comp B`, which then are composed to form\n`do { x <- redeemer ; validator x }`. The `redeemer` program is run, returning\nwhatever data `validator` needs, and then that data is given to `validator` \nwhich is then run.\n\n## More Detailed Overview\n\nThe other chapters in Plutus section provide a more detailed overview of the\ngrammar, types, and programs of Plutus, including the built-in types and\nfunctionality, and should be read before diving into writing programs. There's\nalso a demo file, showing the implementation of a number of common functions, to\ngive a good sense of the use of the language.\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-01-introduction.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-02-types.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-02-types.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-02-types.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: Types\npath: /en/technical/plutus/types/\ngroup: technical-plutus\nlanguage: en\nlabel: docs\n---\n<!-- Reviewed at 25dc86c0fd9741b2f1c59d3a594c48844bbc73f5 -->\n\n# Plutus Types\n\nThis chapter contains a reference for the types in the Plutus language. It uses\nsome informal type theory, which hopefully is understandable to everyone reading\nthis document.\n\nPlutus comes with a handful of built-in types (ints, floats, bytestrings), and a\nsingle built-in type operator (functions). Other types are defined by the\nauthors of programs. We'll discuss each of these in turn.\n\n## Ints, Floats, and Byte Strings\n\n`Int`, `Float`, and `ByteString` are primitive types, with constructor forms\ngiven by various constants specified by the following grammar.\n\n    <int> ::= \"-\"? <digit>+\n    <float> ::= \"-\"? <digit>+ <fractExponent>\n    <digit> = \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\"\n    <fractExponent> ::= <fraction> <exponent>? | <exponent>\n    <fraction> ::= \".\" <digit>+\n    <exponent> ::= (\"e\" | \"E\") (\"-\" | \"+\") <digit>+\n\n    <bytestring> ::= \"#\" <byte>*\n    <byte> ::= <nybble> <nybble>\n    <nybble> ::= <digit>\n               | \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\"\n               | \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\"\n\nThere are no true eliminator forms for these types, but there are a number of\nbuilt-in operations which can be applied to these types. We write the signatures\nof built-ins as follows: `f : (A,B) ⇀ C` indicates that a built-in name `f` can\nbe applied to an `A` and a `B` to produce a `C`. The built-ins for these\nprimitive types are as follows, with implementations in terms of Haskell\nfunctions:\n\n    addInt : (Int,Int) ⇀ Int\n      implemented as `(+) :: Int -> Int -> Int`\n\n    subtractInt : (Int,Int) ⇀ Int\n      implemented as `(-) :: Int -> Int -> Int`\n\n    multiplyInt : (Int,Int) ⇀ Int\n      implemented as `(*) :: Int -> Int -> Int`\n\n    divideInt : (Int,Int) ⇀ Int\n      implemented as `div :: Int -> Int -> Int`\n\n    remainderInt : (Int,Int) ⇀ Int\n      implemented as `(%) :: Int -> Int -> Int`\n\n    lessThanInt : (Int,Int) ⇀ Bool\n      implemented as `(<) :: Int -> Int -> Bool`\n\n    equalsInt : (Int,Int) ⇀ Bool\n      implemented as `(==) :: Int -> Int -> Bool`\n\n    intToFloat : (Int) ⇀ Float\n      implemented as `fromInteger . toInteger :: Int -> Float`\n\n    intToByteString : (Int) ⇀ ByteString\n      implemented as `encode :: Int -> ByteString`\n\n    addFloat : (Float,Float) ⇀ Float\n      implemented as `(+) :: Float -> Float -> Float`\n\n    subtractFloat : (Float,Float) ⇀ Float\n      implemented as `(-) :: Float -> Float -> Float`\n\n    multiplyFloat : (Float,Float) ⇀ Float\n      implemented as `(*) :: Float -> Float -> Float`\n\n    divideFloat : (Float,Float) ⇀ Float\n      implemented as `(/) :: Float -> Float -> Float`\n\n    lessThanFloat : (Float,Float) ⇀ Bool\n      implemented as `(<) :: Float -> Float -> Bool`\n\n    equalsFloat : (Float,Float) ⇀ Bool\n      implemented as `(==) :: Float -> Float -> Bool`\n\n    ceiling : (Float) ⇀ Float\n      implemented as `ceiling:: Float -> Float`\n\n    floor : (Float) ⇀ Float\n      implemented as `floor :: Float -> Float`\n\n    round : (Float) ⇀ Float\n      implemented as `round :: Float -> Float`\n\n    concatenate : (ByteString,ByteString) ⇀ ByteString\n      implemented via `concat :: [ByteString] -> ByteString`\n\n    drop : (Int,ByteString) ⇀ ByteString\n      implemented via `drop :: Integer -> ByteString -> ByteString`\n\n    take : (Int,ByteString) ⇀ ByteString\n      implemented via `take :: Integer -> ByteString -> ByteString`\n\n    sha2_256 : (ByteString) ⇀ ByteString\n      implemented via `hash : [Char8] -> Digest SHA256`\n\n    sha3_256 : (ByteString) ⇀ ByteString\n      implemented via `hash : [Char8] -> Digest SHA3_256`\n\n    equalsByteString : (ByteString,ByteString) ⇀ Bool\n      implemented as `(==) :: ByteString -> ByteString -> Bool`\n\nThe use of these built-in functions is by prefixing the name with `!` and fully\napplying them to arguments. E.g., adding 2 and 3 would be `!addInt 2 3`.\n\n## Function Types\n\nGiven any `A` and `B` types, there is a function type `A -> B`. To get a term of\nthis type, we can use the lambda introduction form as follows: if `M` has type\n`B` and has a free variable `x` that has type `A`, then `\\x -> M` has type\n`A -> B`. We can use a term with a function type as follows: if `M` has type\n`A -> B` and `N` has type `A`, then `M N` has type `B`. The computation for\nfunctions is standard beta reduction: `(\\x -> M) N` reduces to `[N/x]M`, i.e. to\n`M` with `N` substituted for `x`. Computation in Plutus is performed eagerly, so\n`N` is evaluated before substitution is performed.\n\n## User Declared Types\n\nWhen a user declares a new data type, for example\n\n    data Foo a = { Bar | Baz a }\n\nthis defines a new type constructor, in this case `Foo`, which has the following\ninference rule associated with it: given any type `A`, `Foo A` is also a type.\n\nIt also comes with inference rules for the constructors, as follows: `Bar` has\ntype `Foo A`, for any choice of `A`; and if `M` has type `A`, then `Baz M` has\ntype `Foo A`.\n\nThe eliminator form for user declared types is the case construct, which is used\nfor all such types. Case analysis is the same as in Haskell, for example, we\ncould write\n\n    case foo of { Bar -> 0 | Baz x -> x }\n\nto analyze an element of type `Foo Int`, computing an `Int`. There is a minor\ndifference from Haskell, however: we can analyze multiple terms at the same\ntime, by separating them (and their corresponding patterns) with `|`:\n\n    case foo0 | foo1 of { Bar | Bar -> 0 ; Baz x | Baz y -> !addInt x y }\n\nCase analysis is not required to be total, that is to say, there may be missing\npatterns. Any failed match causes the entire program to fail to run, and will\ncause a transaction to be considered invalid.\n\n`Int`, `Float`, and `ByteString` literals can be patterns as well; for example,\nwe can define the factorial function using case in this way:\n\n    facInt : Int -> Int {\n      facInt n = case n of {\n        0 -> 1 ;\n        _ -> !multiplyInt n (!subtractInt n 1)\n      }\n    }\n",
        "type": "MarkdownRemark",
        "contentDigest": "a0422f5ed8a9be3721ab3953394c11a4",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "Types",
        "path": "/en/technical/plutus/types/",
        "group": "technical-plutus",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-02-types.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-02-types.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at 25dc86c0fd9741b2f1c59d3a594c48844bbc73f5 -->\n\n# Plutus Types\n\nThis chapter contains a reference for the types in the Plutus language. It uses\nsome informal type theory, which hopefully is understandable to everyone reading\nthis document.\n\nPlutus comes with a handful of built-in types (ints, floats, bytestrings), and a\nsingle built-in type operator (functions). Other types are defined by the\nauthors of programs. We'll discuss each of these in turn.\n\n## Ints, Floats, and Byte Strings\n\n`Int`, `Float`, and `ByteString` are primitive types, with constructor forms\ngiven by various constants specified by the following grammar.\n\n    <int> ::= \"-\"? <digit>+\n    <float> ::= \"-\"? <digit>+ <fractExponent>\n    <digit> = \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\"\n    <fractExponent> ::= <fraction> <exponent>? | <exponent>\n    <fraction> ::= \".\" <digit>+\n    <exponent> ::= (\"e\" | \"E\") (\"-\" | \"+\") <digit>+\n\n    <bytestring> ::= \"#\" <byte>*\n    <byte> ::= <nybble> <nybble>\n    <nybble> ::= <digit>\n               | \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\"\n               | \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\"\n\nThere are no true eliminator forms for these types, but there are a number of\nbuilt-in operations which can be applied to these types. We write the signatures\nof built-ins as follows: `f : (A,B) ⇀ C` indicates that a built-in name `f` can\nbe applied to an `A` and a `B` to produce a `C`. The built-ins for these\nprimitive types are as follows, with implementations in terms of Haskell\nfunctions:\n\n    addInt : (Int,Int) ⇀ Int\n      implemented as `(+) :: Int -> Int -> Int`\n\n    subtractInt : (Int,Int) ⇀ Int\n      implemented as `(-) :: Int -> Int -> Int`\n\n    multiplyInt : (Int,Int) ⇀ Int\n      implemented as `(*) :: Int -> Int -> Int`\n\n    divideInt : (Int,Int) ⇀ Int\n      implemented as `div :: Int -> Int -> Int`\n\n    remainderInt : (Int,Int) ⇀ Int\n      implemented as `(%) :: Int -> Int -> Int`\n\n    lessThanInt : (Int,Int) ⇀ Bool\n      implemented as `(<) :: Int -> Int -> Bool`\n\n    equalsInt : (Int,Int) ⇀ Bool\n      implemented as `(==) :: Int -> Int -> Bool`\n\n    intToFloat : (Int) ⇀ Float\n      implemented as `fromInteger . toInteger :: Int -> Float`\n\n    intToByteString : (Int) ⇀ ByteString\n      implemented as `encode :: Int -> ByteString`\n\n    addFloat : (Float,Float) ⇀ Float\n      implemented as `(+) :: Float -> Float -> Float`\n\n    subtractFloat : (Float,Float) ⇀ Float\n      implemented as `(-) :: Float -> Float -> Float`\n\n    multiplyFloat : (Float,Float) ⇀ Float\n      implemented as `(*) :: Float -> Float -> Float`\n\n    divideFloat : (Float,Float) ⇀ Float\n      implemented as `(/) :: Float -> Float -> Float`\n\n    lessThanFloat : (Float,Float) ⇀ Bool\n      implemented as `(<) :: Float -> Float -> Bool`\n\n    equalsFloat : (Float,Float) ⇀ Bool\n      implemented as `(==) :: Float -> Float -> Bool`\n\n    ceiling : (Float) ⇀ Float\n      implemented as `ceiling:: Float -> Float`\n\n    floor : (Float) ⇀ Float\n      implemented as `floor :: Float -> Float`\n\n    round : (Float) ⇀ Float\n      implemented as `round :: Float -> Float`\n\n    concatenate : (ByteString,ByteString) ⇀ ByteString\n      implemented via `concat :: [ByteString] -> ByteString`\n\n    drop : (Int,ByteString) ⇀ ByteString\n      implemented via `drop :: Integer -> ByteString -> ByteString`\n\n    take : (Int,ByteString) ⇀ ByteString\n      implemented via `take :: Integer -> ByteString -> ByteString`\n\n    sha2_256 : (ByteString) ⇀ ByteString\n      implemented via `hash : [Char8] -> Digest SHA256`\n\n    sha3_256 : (ByteString) ⇀ ByteString\n      implemented via `hash : [Char8] -> Digest SHA3_256`\n\n    equalsByteString : (ByteString,ByteString) ⇀ Bool\n      implemented as `(==) :: ByteString -> ByteString -> Bool`\n\nThe use of these built-in functions is by prefixing the name with `!` and fully\napplying them to arguments. E.g., adding 2 and 3 would be `!addInt 2 3`.\n\n## Function Types\n\nGiven any `A` and `B` types, there is a function type `A -> B`. To get a term of\nthis type, we can use the lambda introduction form as follows: if `M` has type\n`B` and has a free variable `x` that has type `A`, then `\\x -> M` has type\n`A -> B`. We can use a term with a function type as follows: if `M` has type\n`A -> B` and `N` has type `A`, then `M N` has type `B`. The computation for\nfunctions is standard beta reduction: `(\\x -> M) N` reduces to `[N/x]M`, i.e. to\n`M` with `N` substituted for `x`. Computation in Plutus is performed eagerly, so\n`N` is evaluated before substitution is performed.\n\n## User Declared Types\n\nWhen a user declares a new data type, for example\n\n    data Foo a = { Bar | Baz a }\n\nthis defines a new type constructor, in this case `Foo`, which has the following\ninference rule associated with it: given any type `A`, `Foo A` is also a type.\n\nIt also comes with inference rules for the constructors, as follows: `Bar` has\ntype `Foo A`, for any choice of `A`; and if `M` has type `A`, then `Baz M` has\ntype `Foo A`.\n\nThe eliminator form for user declared types is the case construct, which is used\nfor all such types. Case analysis is the same as in Haskell, for example, we\ncould write\n\n    case foo of { Bar -> 0 | Baz x -> x }\n\nto analyze an element of type `Foo Int`, computing an `Int`. There is a minor\ndifference from Haskell, however: we can analyze multiple terms at the same\ntime, by separating them (and their corresponding patterns) with `|`:\n\n    case foo0 | foo1 of { Bar | Bar -> 0 ; Baz x | Baz y -> !addInt x y }\n\nCase analysis is not required to be total, that is to say, there may be missing\npatterns. Any failed match causes the entire program to fail to run, and will\ncause a transaction to be considered invalid.\n\n`Int`, `Float`, and `ByteString` literals can be patterns as well; for example,\nwe can define the factorial function using case in this way:\n\n    facInt : Int -> Int {\n      facInt n = case n of {\n        0 -> 1 ;\n        _ -> !multiplyInt n (!subtractInt n 1)\n      }\n    }\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-02-types.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-03-examples.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-03-examples.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-03-examples.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: Examples\npath: /en/technical/plutus/examples/\ngroup: technical-plutus\nlanguage: en\nlabel: docs\n---\n<!-- Reviewed at 25dc86c0fd9741b2f1c59d3a594c48844bbc73f5 -->\n\n# Plutus Examples\n\nHere we'll take a look at some of the common examples of programs to give you a\nbetter feel of how the Plutus language works. We'll implement Peano numerals,\ncons lists, and binary trees, as well as some common functions relating them.\n\nTo start with, let's define Peano numerals:\n\n    data Nat = { Zero | Suc Nat }\n\nThe naturals support a variety of functions, of course, such as addition,\nmultiplication, factorial, and Fibonacci, which are typical examples of\nprograms.\n\n    add : Nat -> Nat -> Nat {\n      add Zero n = n ;\n      add (Suc m) n = Suc (add m n)\n    }\n\n    mul : Nat -> Nat -> Nat {\n      mul Zero _ = Zero ;\n      mul (Suc m) n = add (mul m n) n\n    }\n\n    fac : Nat -> Nat {\n      fac Zero = Suc Zero ;\n      fac (Suc n) = mul (Suc n) (fac n)\n    }\n\n    fib : Nat -> Nat {\n      fib Zero = Suc Zero ;\n      fib (Suc Zero) = Suc Zero ;\n      fib (Suc (Suc n)) = add (fib n) (fib (Suc n))\n    }\n\nCons lists are also a familiar type:\n\n    data List a = { Nil | Cons a (List a) }\n\nThis demonstrates the use of parametric types, where `List a` has a type\nparameter `a` for the type of elements. So, for example, `List Nat` is the type\nof lists of Peano numerals.\n\nLists support a variety of functions, such as `length`, `append`, and `map`:\n\n    length : forall a. List a -> Nat {\n      length Nil = Zero ;\n      length (Cons _ xs) = Suc (length xs)\n    }\n\n    append : forall a. List a -> List a -> List a {\n      append Nil ys = ys ;\n      append (Cons x xs) ys = Cons x (append xs ys)\n    }\n\n    map : forall a b. (a -> b) -> List a -> List b {\n      map _ Nil = Nil ;\n      map f (Cons x xs) = Cons (f x) (map f xs)\n    }\n\nHere we can see the use of polymorphism principle in Plutus. These functions\nwork for any list, regardless of the element type, so we can abstract over the\nelement type by using `forall`. For instance, the type of `length` says that for\nany choice of `a`, we have a function of type `List a -> Nat`.\n\nIt's important to note that in Plutus, this polymorphism exists only for the\ndeclaration of values. Any time you use a polymorphically declared value, the\nchoice of the type variable must be fixed at the use site. You can't treat these\ndeclarations as giving polymorphic values in general, as in System-F. Rather, a\npolymorphic type in a declaration is an abbreviation for an infinite family of\nidentical definitions that differ only in the choice of that type variable. For\nexample, we could define multiple `length` functions like so:\n\n    lengthNat : List Nat -> Nat {\n      lengthNat Nil = Zero ;\n      lengthNat (Cons _ xs) = Suc (lengthNat xs)\n    }\n\n    lengthBool : List Bool -> Nat {\n      lengtBool Nil = Zero ;\n      lengthBool (Cons _ xs) = Suc (lengthBool xs)\n    }\n\n    lengthListNat : List (List Nat) -> Nat {\n      lengthListNat Nil = Zero ;\n      lengthListNat (Cons _ xs) = Suc (lengthListNat xs)\n    }\n\nAnd they're all identical except the name and the choice for `a`. This is of\ncourse redundant, so we can use the polymorphic declaration given above. But\nthis declaration does not give us a value `length` with the type\n`forall a. List a -> Nat`. Instead, it gives us that entire infinite family of\ndeclarations, but with a convenient abbreviation syntax. This is why the use of\nsuch polymorphic declarations requires the choice of the type variables to be\nfixed at the use site.\n\nAnother common type is the type of binary trees with data in the branches:\n\n    data Tree a = { Leaf | Branch a (Tree a) (Tree a) }\n\nSuch trees support functions such as `count`, `traversal`, and `reverse`:\n\n    count : forall a. Tree a -> Nat {\n      count Leaf = Zero ;\n      count (Branch _ l r) = Suc (add (count l) (count r))\n    }\n\n    traversal : forall a. Tree a -> List a {\n      traversal Leaf = Nil ;\n      traversal (Branch x l r) = Cons x (append (traversal l) (traversal r))\n    }\n\n    reverse : forall a. Tree a -> Tree a {\n      reverse Leaf = Leaf ;\n      reverse (Branch x l r) = Branch x (reverse r) (reverse l)\n    }\n",
        "type": "MarkdownRemark",
        "contentDigest": "7706ca7951bb1a34dfab946dd0d29daf",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "Examples",
        "path": "/en/technical/plutus/examples/",
        "group": "technical-plutus",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-03-examples.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-03-examples.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at 25dc86c0fd9741b2f1c59d3a594c48844bbc73f5 -->\n\n# Plutus Examples\n\nHere we'll take a look at some of the common examples of programs to give you a\nbetter feel of how the Plutus language works. We'll implement Peano numerals,\ncons lists, and binary trees, as well as some common functions relating them.\n\nTo start with, let's define Peano numerals:\n\n    data Nat = { Zero | Suc Nat }\n\nThe naturals support a variety of functions, of course, such as addition,\nmultiplication, factorial, and Fibonacci, which are typical examples of\nprograms.\n\n    add : Nat -> Nat -> Nat {\n      add Zero n = n ;\n      add (Suc m) n = Suc (add m n)\n    }\n\n    mul : Nat -> Nat -> Nat {\n      mul Zero _ = Zero ;\n      mul (Suc m) n = add (mul m n) n\n    }\n\n    fac : Nat -> Nat {\n      fac Zero = Suc Zero ;\n      fac (Suc n) = mul (Suc n) (fac n)\n    }\n\n    fib : Nat -> Nat {\n      fib Zero = Suc Zero ;\n      fib (Suc Zero) = Suc Zero ;\n      fib (Suc (Suc n)) = add (fib n) (fib (Suc n))\n    }\n\nCons lists are also a familiar type:\n\n    data List a = { Nil | Cons a (List a) }\n\nThis demonstrates the use of parametric types, where `List a` has a type\nparameter `a` for the type of elements. So, for example, `List Nat` is the type\nof lists of Peano numerals.\n\nLists support a variety of functions, such as `length`, `append`, and `map`:\n\n    length : forall a. List a -> Nat {\n      length Nil = Zero ;\n      length (Cons _ xs) = Suc (length xs)\n    }\n\n    append : forall a. List a -> List a -> List a {\n      append Nil ys = ys ;\n      append (Cons x xs) ys = Cons x (append xs ys)\n    }\n\n    map : forall a b. (a -> b) -> List a -> List b {\n      map _ Nil = Nil ;\n      map f (Cons x xs) = Cons (f x) (map f xs)\n    }\n\nHere we can see the use of polymorphism principle in Plutus. These functions\nwork for any list, regardless of the element type, so we can abstract over the\nelement type by using `forall`. For instance, the type of `length` says that for\nany choice of `a`, we have a function of type `List a -> Nat`.\n\nIt's important to note that in Plutus, this polymorphism exists only for the\ndeclaration of values. Any time you use a polymorphically declared value, the\nchoice of the type variable must be fixed at the use site. You can't treat these\ndeclarations as giving polymorphic values in general, as in System-F. Rather, a\npolymorphic type in a declaration is an abbreviation for an infinite family of\nidentical definitions that differ only in the choice of that type variable. For\nexample, we could define multiple `length` functions like so:\n\n    lengthNat : List Nat -> Nat {\n      lengthNat Nil = Zero ;\n      lengthNat (Cons _ xs) = Suc (lengthNat xs)\n    }\n\n    lengthBool : List Bool -> Nat {\n      lengtBool Nil = Zero ;\n      lengthBool (Cons _ xs) = Suc (lengthBool xs)\n    }\n\n    lengthListNat : List (List Nat) -> Nat {\n      lengthListNat Nil = Zero ;\n      lengthListNat (Cons _ xs) = Suc (lengthListNat xs)\n    }\n\nAnd they're all identical except the name and the choice for `a`. This is of\ncourse redundant, so we can use the polymorphic declaration given above. But\nthis declaration does not give us a value `length` with the type\n`forall a. List a -> Nat`. Instead, it gives us that entire infinite family of\ndeclarations, but with a convenient abbreviation syntax. This is why the use of\nsuch polymorphic declarations requires the choice of the type variables to be\nfixed at the use site.\n\nAnother common type is the type of binary trees with data in the branches:\n\n    data Tree a = { Leaf | Branch a (Tree a) (Tree a) }\n\nSuch trees support functions such as `count`, `traversal`, and `reverse`:\n\n    count : forall a. Tree a -> Nat {\n      count Leaf = Zero ;\n      count (Branch _ l r) = Suc (add (count l) (count r))\n    }\n\n    traversal : forall a. Tree a -> List a {\n      traversal Leaf = Nil ;\n      traversal (Branch x l r) = Cons x (append (traversal l) (traversal r))\n    }\n\n    reverse : forall a. Tree a -> Tree a {\n      reverse Leaf = Leaf ;\n      reverse (Branch x l r) = Branch x (reverse r) (reverse l)\n    }\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-03-examples.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/wallet/2018-03-14-api-docs.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/wallet/2018-03-14-api-docs.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/wallet/2018-03-14-api-docs.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: API Documentation\npath: /en/technical/wallet/api/\ngroup: technical\nlanguage: en\nlabel: docs\n---\n\nAPI Documentation\n-----------------\n\n\nV0 (deprecated)\n===============\n\nThe API documentation for v0, now **deprecated**, has been moved [here](/technical/wallet/api/v0).\n\n\n\nV1 \n==\n\nThe API documentation for v1 is available [here](/technical/wallet/api/v1).\n",
        "type": "MarkdownRemark",
        "contentDigest": "f55765839a0881bc89f06c9286861c56",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "API Documentation",
        "path": "/en/technical/wallet/api/",
        "group": "technical",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/wallet/2018-03-14-api-docs.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/wallet/2018-03-14-api-docs.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\nAPI Documentation\n-----------------\n\n\nV0 (deprecated)\n===============\n\nThe API documentation for v0, now **deprecated**, has been moved [here](/technical/wallet/api/v0).\n\n\n\nV1 \n==\n\nThe API documentation for v1 is available [here](/technical/wallet/api/v1).\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/wallet/2018-03-14-api-docs.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-02-types.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-02-types.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-02-types.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 类型\npath: /cn/technical/plutus/types/\ngroup: technical-plutus\nlanguage: cn\nlabel: docs\n---\n<!-- Reviewed at 25dc86c0fd9741b2f1c59d3a594c48844bbc73f5 -->\n\n# Plutus 类型\n\n本章包括了关于 Plutus 语言类型的参考。它使用了一些非正式的类型理论，希望对于阅读这个文件的每个人都易于理解。\n\nPlutus 有一些内置类型（int, float, bytestrings) 和一个内置的类型操作符（functions)。其他类型由程序的作者定义，我们将一次讨论每一种类型。\n\n\n## Ints, Floats 和 Byte Strings\n\n`Int`, `Float` 和 `ByteString` 是原始类型，具有由一下语法指定的常量给出的构造函数形式。\n\n\n    <int> ::= \"-\"? <digit>+\n    <float> ::= \"-\"? <digit>+ <fractExponent>\n    <digit> = \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\"\n    <fractExponent> ::= <fraction> <exponent>? | <exponent>\n    <fraction> ::= \".\" <digit>+\n    <exponent> ::= (\"e\" | \"E\") (\"-\" | \"+\") <digit>+\n\n    <bytestring> ::= \"#\" <byte>*\n    <byte> ::= <nybble> <nybble>\n    <nybble> ::= <digit>\n               | \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\"\n               | \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\"\n\n这些类型没有真正的 eliminator 形式，但是有一些内置操作可以应用于这些类型。我们编写的内置签名如下：`f : (A,B) ⇀ C`，表示 一个内置的名字 `f` 可以被应用于一个 `A` 和一个 `B` 产生一个 `C`。这些原始类型的内置函数如下，用 Haskell 函数实现：\n\n    addInt : (Int,Int) ⇀ Int\n      implemented as `(+) :: Int -> Int -> Int`\n\n    subtractInt : (Int,Int) ⇀ Int\n      implemented as `(-) :: Int -> Int -> Int`\n\n    multiplyInt : (Int,Int) ⇀ Int\n      implemented as `(*) :: Int -> Int -> Int`\n\n    divideInt : (Int,Int) ⇀ Int\n      implemented as `div :: Int -> Int -> Int`\n\n    remainderInt : (Int,Int) ⇀ Int\n      implemented as `(%) :: Int -> Int -> Int`\n\n    lessThanInt : (Int,Int) ⇀ Bool\n      implemented as `(<) :: Int -> Int -> Bool`\n\n    equalsInt : (Int,Int) ⇀ Bool\n      implemented as `(==) :: Int -> Int -> Bool`\n\n    intToFloat : (Int) ⇀ Float\n      implemented as `fromInteger . toInteger :: Int -> Float`\n\n    intToByteString : (Int) ⇀ ByteString\n      implemented as `encode :: Int -> ByteString`\n\n    addFloat : (Float,Float) ⇀ Float\n      implemented as `(+) :: Float -> Float -> Float`\n\n    subtractFloat : (Float,Float) ⇀ Float\n      implemented as `(-) :: Float -> Float -> Float`\n\n    multiplyFloat : (Float,Float) ⇀ Float\n      implemented as `(*) :: Float -> Float -> Float`\n\n    divideFloat : (Float,Float) ⇀ Float\n      implemented as `(/) :: Float -> Float -> Float`\n\n    lessThanFloat : (Float,Float) ⇀ Bool\n      implemented as `(<) :: Float -> Float -> Bool`\n\n    equalsFloat : (Float,Float) ⇀ Bool\n      implemented as `(==) :: Float -> Float -> Bool`\n\n    ceiling : (Float) ⇀ Float\n      implemented as `ceiling:: Float -> Float`\n\n    floor : (Float) ⇀ Float\n      implemented as `floor :: Float -> Float`\n\n    round : (Float) ⇀ Float\n      implemented as `round :: Float -> Float`\n\n    concatenate : (ByteString,ByteString) ⇀ ByteString\n      implemented via `concat :: [ByteString] -> ByteString`\n\n    drop : (Int,ByteString) ⇀ ByteString\n      implemented via `drop :: Integer -> ByteString -> ByteString`\n\n    take : (Int,ByteString) ⇀ ByteString\n      implemented via `take :: Integer -> ByteString -> ByteString`\n\n    sha2_256 : (ByteString) ⇀ ByteString\n      implemented via `hash : [Char8] -> Digest SHA256`\n\n    sha3_256 : (ByteString) ⇀ ByteString\n      implemented via `hash : [Char8] -> Digest SHA3_256`\n\n    equalsByteString : (ByteString,ByteString) ⇀ Bool\n      implemented as `(==) :: ByteString -> ByteString -> Bool`\n\n通过在名称前加上前缀 `!`，将其完全加上参数，使用这些内置函数。例如，加2和3就是 `!addInt 2 3`。\n\n## 函数类型\n\n给定任意 `A` 和 `B` 类型，有一种函数类型 `A -> B`。要获得这种类型，我们可以使用 lambada 的形式，如下所述：如果 `M` 有类型 `B`，有一个变量类型为 `A` 的变量 `x`，那么 `\\x -> M` 有类型 `A -> B`。我们可以使用一个具有函数类型的术语：如果 `M` 有类型 `A -> B`，`N` 有类型 `A`，`M N` 有类型 `B`。函数的计算是标准的 beta 递减：`(\\x -> M) N` 到 `[N/x]M`，即 `M` 用 `N` 取代 `x`。在 Plutus 中，计算是立即执行的，因此 `N` 在替换之前获得结果。（TODO)\n\n## 用户声明的类型\n\n例如，当用户声明新的数据类型时\n\n    data Foo a = { Bar | Baz a }\n\n这定义了一个新的类型构造函数，在这种情况下 `Foo` 具有以下推理规则：给定任意类型 `A`, `Foo A` 也是一种类型。\n\n它也带有构造函数的推理规则，如下：`Bar` 有 `Foo A` 类型，对于 `A` 的任意选项，如果 `M` 有类型 `A`, 那么 `Baz M` 也有类型 `Foo A`。\n\n用户声明类型的 eliminator 表单是 case 结构，用于所有类型。案例分析和 Haskell 一样，例如我们可以写做\n\n    case foo of { Bar -> 0 | Baz x -> x }\n\n分析 `Foo Int` 元素的类型，需计算 `Int`。与 Haskell 有一点不同：我们可以同时分析多个 term，将他们（及其相应的模式）以 `|` 分割：\n\n    case foo0 | foo1 of { Bar | Bar -> 0 ; Baz x | Baz y -> !addInt x y }\n\n案例分析不是必须的。也就是说，可能会有缺失的模式。任何失败的匹配都会导致整个程序运行失败，并导致事务被视为无效。\n\n`Int`, `Float` 和 `ByteString` 也可以为模式；例如，我们可以这种方式来定义阶乘函数：\n\n\n    facInt : Int -> Int {\n      facInt n = case n of {\n        0 -> 1 ;\n        _ -> !multiplyInt n (!subtractInt n 1)\n      }\n    }\n",
        "type": "MarkdownRemark",
        "contentDigest": "7529b7a9bcbcfdc2253f63bd8b4cacf9",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "类型",
        "path": "/cn/technical/plutus/types/",
        "group": "technical-plutus",
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-02-types.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-02-types.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at 25dc86c0fd9741b2f1c59d3a594c48844bbc73f5 -->\n\n# Plutus 类型\n\n本章包括了关于 Plutus 语言类型的参考。它使用了一些非正式的类型理论，希望对于阅读这个文件的每个人都易于理解。\n\nPlutus 有一些内置类型（int, float, bytestrings) 和一个内置的类型操作符（functions)。其他类型由程序的作者定义，我们将一次讨论每一种类型。\n\n\n## Ints, Floats 和 Byte Strings\n\n`Int`, `Float` 和 `ByteString` 是原始类型，具有由一下语法指定的常量给出的构造函数形式。\n\n\n    <int> ::= \"-\"? <digit>+\n    <float> ::= \"-\"? <digit>+ <fractExponent>\n    <digit> = \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\"\n    <fractExponent> ::= <fraction> <exponent>? | <exponent>\n    <fraction> ::= \".\" <digit>+\n    <exponent> ::= (\"e\" | \"E\") (\"-\" | \"+\") <digit>+\n\n    <bytestring> ::= \"#\" <byte>*\n    <byte> ::= <nybble> <nybble>\n    <nybble> ::= <digit>\n               | \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\"\n               | \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\"\n\n这些类型没有真正的 eliminator 形式，但是有一些内置操作可以应用于这些类型。我们编写的内置签名如下：`f : (A,B) ⇀ C`，表示 一个内置的名字 `f` 可以被应用于一个 `A` 和一个 `B` 产生一个 `C`。这些原始类型的内置函数如下，用 Haskell 函数实现：\n\n    addInt : (Int,Int) ⇀ Int\n      implemented as `(+) :: Int -> Int -> Int`\n\n    subtractInt : (Int,Int) ⇀ Int\n      implemented as `(-) :: Int -> Int -> Int`\n\n    multiplyInt : (Int,Int) ⇀ Int\n      implemented as `(*) :: Int -> Int -> Int`\n\n    divideInt : (Int,Int) ⇀ Int\n      implemented as `div :: Int -> Int -> Int`\n\n    remainderInt : (Int,Int) ⇀ Int\n      implemented as `(%) :: Int -> Int -> Int`\n\n    lessThanInt : (Int,Int) ⇀ Bool\n      implemented as `(<) :: Int -> Int -> Bool`\n\n    equalsInt : (Int,Int) ⇀ Bool\n      implemented as `(==) :: Int -> Int -> Bool`\n\n    intToFloat : (Int) ⇀ Float\n      implemented as `fromInteger . toInteger :: Int -> Float`\n\n    intToByteString : (Int) ⇀ ByteString\n      implemented as `encode :: Int -> ByteString`\n\n    addFloat : (Float,Float) ⇀ Float\n      implemented as `(+) :: Float -> Float -> Float`\n\n    subtractFloat : (Float,Float) ⇀ Float\n      implemented as `(-) :: Float -> Float -> Float`\n\n    multiplyFloat : (Float,Float) ⇀ Float\n      implemented as `(*) :: Float -> Float -> Float`\n\n    divideFloat : (Float,Float) ⇀ Float\n      implemented as `(/) :: Float -> Float -> Float`\n\n    lessThanFloat : (Float,Float) ⇀ Bool\n      implemented as `(<) :: Float -> Float -> Bool`\n\n    equalsFloat : (Float,Float) ⇀ Bool\n      implemented as `(==) :: Float -> Float -> Bool`\n\n    ceiling : (Float) ⇀ Float\n      implemented as `ceiling:: Float -> Float`\n\n    floor : (Float) ⇀ Float\n      implemented as `floor :: Float -> Float`\n\n    round : (Float) ⇀ Float\n      implemented as `round :: Float -> Float`\n\n    concatenate : (ByteString,ByteString) ⇀ ByteString\n      implemented via `concat :: [ByteString] -> ByteString`\n\n    drop : (Int,ByteString) ⇀ ByteString\n      implemented via `drop :: Integer -> ByteString -> ByteString`\n\n    take : (Int,ByteString) ⇀ ByteString\n      implemented via `take :: Integer -> ByteString -> ByteString`\n\n    sha2_256 : (ByteString) ⇀ ByteString\n      implemented via `hash : [Char8] -> Digest SHA256`\n\n    sha3_256 : (ByteString) ⇀ ByteString\n      implemented via `hash : [Char8] -> Digest SHA3_256`\n\n    equalsByteString : (ByteString,ByteString) ⇀ Bool\n      implemented as `(==) :: ByteString -> ByteString -> Bool`\n\n通过在名称前加上前缀 `!`，将其完全加上参数，使用这些内置函数。例如，加2和3就是 `!addInt 2 3`。\n\n## 函数类型\n\n给定任意 `A` 和 `B` 类型，有一种函数类型 `A -> B`。要获得这种类型，我们可以使用 lambada 的形式，如下所述：如果 `M` 有类型 `B`，有一个变量类型为 `A` 的变量 `x`，那么 `\\x -> M` 有类型 `A -> B`。我们可以使用一个具有函数类型的术语：如果 `M` 有类型 `A -> B`，`N` 有类型 `A`，`M N` 有类型 `B`。函数的计算是标准的 beta 递减：`(\\x -> M) N` 到 `[N/x]M`，即 `M` 用 `N` 取代 `x`。在 Plutus 中，计算是立即执行的，因此 `N` 在替换之前获得结果。（TODO)\n\n## 用户声明的类型\n\n例如，当用户声明新的数据类型时\n\n    data Foo a = { Bar | Baz a }\n\n这定义了一个新的类型构造函数，在这种情况下 `Foo` 具有以下推理规则：给定任意类型 `A`, `Foo A` 也是一种类型。\n\n它也带有构造函数的推理规则，如下：`Bar` 有 `Foo A` 类型，对于 `A` 的任意选项，如果 `M` 有类型 `A`, 那么 `Baz M` 也有类型 `Foo A`。\n\n用户声明类型的 eliminator 表单是 case 结构，用于所有类型。案例分析和 Haskell 一样，例如我们可以写做\n\n    case foo of { Bar -> 0 | Baz x -> x }\n\n分析 `Foo Int` 元素的类型，需计算 `Int`。与 Haskell 有一点不同：我们可以同时分析多个 term，将他们（及其相应的模式）以 `|` 分割：\n\n    case foo0 | foo1 of { Bar | Bar -> 0 ; Baz x | Baz y -> !addInt x y }\n\n案例分析不是必须的。也就是说，可能会有缺失的模式。任何失败的匹配都会导致整个程序运行失败，并导致事务被视为无效。\n\n`Int`, `Float` 和 `ByteString` 也可以为模式；例如，我们可以这种方式来定义阶乘函数：\n\n\n    facInt : Int -> Int {\n      facInt n = case n of {\n        0 -> 1 ;\n        _ -> !multiplyInt n (!subtractInt n 1)\n      }\n    }\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-02-types.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-01-introduction.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-01-introduction.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-01-introduction.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 介绍\npath: /cn/technical/plutus/introduction/\ngroup: technical-plutus\nlanguage: cn\nlabel: docs\n---\n<!-- Reviewed at f766612fb6c75b941cbe3c2d9c2db17dd2dc9bd3 -->\n\n# Plutus 介绍\n\nPlutus 是用于在 Cardano 中定义智能合约的严格类型的纯函数式编程语言。语法相当像 Haskell，但与 Haskell 不同的是， (TODO)\n\n\n## 声明数据类型\n\n在 Plutus 中，为定义一个数据类型，我们给出类型的名称，然后是任何类型参数，然后是一系列的构造参数 - 就像 Haskell 中的那样，每个构造函数都有其参数的类型。\n\n所以，例如， Peano 的数字的类型被定义为\n\n    data Nat = { Zero | Suc Nat }\n\n而二叉树被定义为\n\n    data Tree a = { Leaf | Branch (Tree a) a (Tree a) }\n\n`Tree` 类型的结构接受一个参数 `a`。它有两个构造函数构造的值，`Leaf` 没有参数，并且 `Branch` 有三个子树，一个左子树 `Tree a`，类型是 `a`，一个右子树，`Tree a`。\n\n我们可以用 `case` 结构来查看数据，如下所示：\n\n\n    case t of {\n      Leaf -> ... ;\n      Branch l x r -> ...\n    }\n\n## 声明值\n\n要声明一个新的值（不管它是否是函数），我们提供它的类型，然后指定它的值。例如，要定义自然数的加法，我们可以使用下面的递归定义 `case`：\n\n\n    add : Nat -> Nat -> Nat {\n      add = \\m n ->\n        case m of {\n          Zero -> n ;\n          Suc m' -> Suc (add m' n)\n        }\n    }\n\n我们也可以像 Haskell 中那样使用模式匹配，这使得这样的函数定义更加优雅：\n\n    add : Nat -> Nat -> Nat {\n      add Zero n = n ;\n      add (Suc m) n = Suc (add m n)\n    }\n\n## 智能合约计算\n\nPlutus 在智能合约计算专用语言中有一个重要类型：类型构造函数 `Comp`，它带有一个类型参数。创建值最简单的方法是使用两个计算构造函数 `success`，`M` 值使用类型 `A`（任何 `A` 的选择），并生成一个 `Comp A` 代表成功的返回 `M` 的智能合约类型计算结果。你也可以构造一个返回错误的 `Comp A` 类型，表明一个失败的计算结果。\n\n同样可以使用 `do` 符号将智能合约计算连接在一起。给定一个 `Comp A` 类型的 `A`，以及有着变量 `x` 的类型 `A`，我们可以形成 `do { x <- M ; N }` 运行计算 `M`，绑定它的返回值 `X`，然后运行计算 `N`。如果这个 `M` 计算结果是 `failure`，那么这个失败就会被这个 `do` 结构传播，整个事务就被计算为 `failure`。\n\n这对于构建只能合约的验证器脚本非常有用。这么做的标准方式是要求一个 `Comp A` 类型的赎回程序和一个 `A -> Comp B` 类型的验证程序，然后组成一个 `do { x <- redeemer ; validator x }` 类型的验证程序。该 `redeemer` 运行时的时候，不管 `validator` 需要什么数据都返回给它，`validator` 都会运行。\n\n## 更详细的概述\n\nPlutus 部分的其他章节提供了对 Plutus 的语法，类型和程序的更详细的概述，包括内置的类型和功能，在深入编写程序前应该阅读。还有一个演示文件，展示了一些常用函数的实现，一遍可以更好地理解该语言的使用。\n\n",
        "type": "MarkdownRemark",
        "contentDigest": "335df99841232a0d69e0d8d9a789f354",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "介绍",
        "path": "/cn/technical/plutus/introduction/",
        "group": "technical-plutus",
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-01-introduction.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-01-introduction.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at f766612fb6c75b941cbe3c2d9c2db17dd2dc9bd3 -->\n\n# Plutus 介绍\n\nPlutus 是用于在 Cardano 中定义智能合约的严格类型的纯函数式编程语言。语法相当像 Haskell，但与 Haskell 不同的是， (TODO)\n\n\n## 声明数据类型\n\n在 Plutus 中，为定义一个数据类型，我们给出类型的名称，然后是任何类型参数，然后是一系列的构造参数 - 就像 Haskell 中的那样，每个构造函数都有其参数的类型。\n\n所以，例如， Peano 的数字的类型被定义为\n\n    data Nat = { Zero | Suc Nat }\n\n而二叉树被定义为\n\n    data Tree a = { Leaf | Branch (Tree a) a (Tree a) }\n\n`Tree` 类型的结构接受一个参数 `a`。它有两个构造函数构造的值，`Leaf` 没有参数，并且 `Branch` 有三个子树，一个左子树 `Tree a`，类型是 `a`，一个右子树，`Tree a`。\n\n我们可以用 `case` 结构来查看数据，如下所示：\n\n\n    case t of {\n      Leaf -> ... ;\n      Branch l x r -> ...\n    }\n\n## 声明值\n\n要声明一个新的值（不管它是否是函数），我们提供它的类型，然后指定它的值。例如，要定义自然数的加法，我们可以使用下面的递归定义 `case`：\n\n\n    add : Nat -> Nat -> Nat {\n      add = \\m n ->\n        case m of {\n          Zero -> n ;\n          Suc m' -> Suc (add m' n)\n        }\n    }\n\n我们也可以像 Haskell 中那样使用模式匹配，这使得这样的函数定义更加优雅：\n\n    add : Nat -> Nat -> Nat {\n      add Zero n = n ;\n      add (Suc m) n = Suc (add m n)\n    }\n\n## 智能合约计算\n\nPlutus 在智能合约计算专用语言中有一个重要类型：类型构造函数 `Comp`，它带有一个类型参数。创建值最简单的方法是使用两个计算构造函数 `success`，`M` 值使用类型 `A`（任何 `A` 的选择），并生成一个 `Comp A` 代表成功的返回 `M` 的智能合约类型计算结果。你也可以构造一个返回错误的 `Comp A` 类型，表明一个失败的计算结果。\n\n同样可以使用 `do` 符号将智能合约计算连接在一起。给定一个 `Comp A` 类型的 `A`，以及有着变量 `x` 的类型 `A`，我们可以形成 `do { x <- M ; N }` 运行计算 `M`，绑定它的返回值 `X`，然后运行计算 `N`。如果这个 `M` 计算结果是 `failure`，那么这个失败就会被这个 `do` 结构传播，整个事务就被计算为 `failure`。\n\n这对于构建只能合约的验证器脚本非常有用。这么做的标准方式是要求一个 `Comp A` 类型的赎回程序和一个 `A -> Comp B` 类型的验证程序，然后组成一个 `do { x <- redeemer ; validator x }` 类型的验证程序。该 `redeemer` 运行时的时候，不管 `validator` 需要什么数据都返回给它，`validator` 都会运行。\n\n## 更详细的概述\n\nPlutus 部分的其他章节提供了对 Plutus 的语法，类型和程序的更详细的概述，包括内置的类型和功能，在深入编写程序前应该阅读。还有一个演示文件，展示了一些常用函数的实现，一遍可以更好地理解该语言的使用。\n\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-01-introduction.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-03-examples.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-03-examples.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-03-examples.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 例子\npath: /cn/technical/plutus/examples/\ngroup: technical-plutus\nlanguage: cn\nlabel: docs\n---\n<!-- Reviewed at 25dc86c0fd9741b2f1c59d3a594c48844bbc73f5 -->\n\n# Plutus 例子（TODO）\n\n这里，我们看看一些常见的程序示例，让您更好地了解 Plutus 语言的工作原理。我们将实现 Peano 数字类型，cons 列表，二叉树，以及一些相关的常见功能。\n\n首先，让我们定义 Peano 数字类型\n\n    data Nat = { Zero | Suc Nat }\n\n（Peano）数字类型支持各种功能，当然有加法，乘法，阶乘和斐波那契这些，这些是程序的典型例子。\n\n    add : Nat -> Nat -> Nat {\n      add Zero n = n ;\n      add (Suc m) n = Suc (add m n)\n    }\n\n    mul : Nat -> Nat -> Nat {\n      mul Zero _ = Zero ;\n      mul (Suc m) n = add (mul m n) n\n    }\n\n    fac : Nat -> Nat {\n      fac Zero = Suc Zero ;\n      fac (Suc n) = mul (Suc n) (fac n)\n    }\n\n    fib : Nat -> Nat {\n      fib Zero = Suc Zero ;\n      fib (Suc Zero) = Suc Zero ;\n      fib (Suc (Suc n)) = add (fib n) (fib (Suc n))\n    }\n\nCons 列表也是一种熟悉的类型：\n\n    data List a = { Nil | Cons a (List a) }\n\n这演示了参数类型的使用，其中 `List a` 有具有 `a` 元素类型的类型参数。举个例子，`List Nat` 是 Peano 数字类型的列表。\n\n列表支持各种功能，例如 `length`, `append` 和 `map`:\n\n    length : forall a. List a -> Nat {\n      length Nil = Zero ;\n      length (Cons _ xs) = Suc (length xs)\n    }\n\n    append : forall a. List a -> List a -> List a {\n      append Nil ys = ys ;\n      append (Cons x xs) ys = Cons x (append xs ys)\n    }\n\n    map : forall a b. (a -> b) -> List a -> List b {\n      map _ Nil = Nil ;\n      map f (Cons x xs) = Cons (f x) (map f xs)\n    }\n\n\n这里我们可以看到 Plutus 使用多态原则，这些函数适用于任何列表，不管元素类型如何，所以我们可以通过使用元素类型来抽象 `forall`。例如，`length` 对于任何 `a`，我们都有类型函数 `List a -> Nat`。\n\n需要重点注意的是，在 Plutus 中，这个多态只存在于值的声明中，你在任何时候使用一个多态声明的值，类型变量的选择必须在 use site 固定。一般来说，你不能像在 System-F 中那样将这些声明视为给出多态值。相反，声明中的多态类型是相同定义的 infinite 家族的缩写，只在该类型变量的选择上有所不同。例如，我们可以像这样定义多个 `length` 函数。\n\n\n    lengthNat : List Nat -> Nat {\n      lengthNat Nil = Zero ;\n      lengthNat (Cons _ xs) = Suc (lengthNat xs)\n    }\n\n    lengthBool : List Bool -> Nat {\n      lengtBool Nil = Zero ;\n      lengthBool (Cons _ xs) = Suc (lengthBool xs)\n    }\n\n    lengthListNat : List (List Nat) -> Nat {\n      lengthListNat Nil = Zero ;\n      lengthListNat (Cons _ xs) = Suc (lengthListNat xs)\n    }\n\n除了名字和 `a` 的不同外，它们都是相同的 `a`。这当然是多余的，所以我们可以使用上面给出的多态声明。但这个声明没有给我们具有 `forall a. List a -> Nat` 类型的值 `length`。相反，他给了我们整个 infinite 家族的定义，但有一个方便的缩写语法。这就是为什么使用这个多态声明需要在 use site 固定类型变量。\n\n另一种常见的类型是在分支中有数据的二叉树类型：\n\n    data Tree a = { Leaf | Branch a (Tree a) (Tree a) }\n\n这样的树支持 `count`, `traversal` 和 `reverse` 的功能：\n\n    count : forall a. Tree a -> Nat {\n      count Leaf = Zero ;\n      count (Branch _ l r) = Suc (add (count l) (count r))\n    }\n\n    traversal : forall a. Tree a -> List a {\n      traversal Leaf = Nil ;\n      traversal (Branch x l r) = Cons x (append (traversal l) (traversal r))\n    }\n\n    reverse : forall a. Tree a -> Tree a {\n      reverse Leaf = Leaf ;\n      reverse (Branch x l r) = Branch x (reverse r) (reverse l)\n    }\n",
        "type": "MarkdownRemark",
        "contentDigest": "a505f5be2bf0316f10d1b9d242546c81",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "例子",
        "path": "/cn/technical/plutus/examples/",
        "group": "technical-plutus",
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-03-examples.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-03-examples.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at 25dc86c0fd9741b2f1c59d3a594c48844bbc73f5 -->\n\n# Plutus 例子（TODO）\n\n这里，我们看看一些常见的程序示例，让您更好地了解 Plutus 语言的工作原理。我们将实现 Peano 数字类型，cons 列表，二叉树，以及一些相关的常见功能。\n\n首先，让我们定义 Peano 数字类型\n\n    data Nat = { Zero | Suc Nat }\n\n（Peano）数字类型支持各种功能，当然有加法，乘法，阶乘和斐波那契这些，这些是程序的典型例子。\n\n    add : Nat -> Nat -> Nat {\n      add Zero n = n ;\n      add (Suc m) n = Suc (add m n)\n    }\n\n    mul : Nat -> Nat -> Nat {\n      mul Zero _ = Zero ;\n      mul (Suc m) n = add (mul m n) n\n    }\n\n    fac : Nat -> Nat {\n      fac Zero = Suc Zero ;\n      fac (Suc n) = mul (Suc n) (fac n)\n    }\n\n    fib : Nat -> Nat {\n      fib Zero = Suc Zero ;\n      fib (Suc Zero) = Suc Zero ;\n      fib (Suc (Suc n)) = add (fib n) (fib (Suc n))\n    }\n\nCons 列表也是一种熟悉的类型：\n\n    data List a = { Nil | Cons a (List a) }\n\n这演示了参数类型的使用，其中 `List a` 有具有 `a` 元素类型的类型参数。举个例子，`List Nat` 是 Peano 数字类型的列表。\n\n列表支持各种功能，例如 `length`, `append` 和 `map`:\n\n    length : forall a. List a -> Nat {\n      length Nil = Zero ;\n      length (Cons _ xs) = Suc (length xs)\n    }\n\n    append : forall a. List a -> List a -> List a {\n      append Nil ys = ys ;\n      append (Cons x xs) ys = Cons x (append xs ys)\n    }\n\n    map : forall a b. (a -> b) -> List a -> List b {\n      map _ Nil = Nil ;\n      map f (Cons x xs) = Cons (f x) (map f xs)\n    }\n\n\n这里我们可以看到 Plutus 使用多态原则，这些函数适用于任何列表，不管元素类型如何，所以我们可以通过使用元素类型来抽象 `forall`。例如，`length` 对于任何 `a`，我们都有类型函数 `List a -> Nat`。\n\n需要重点注意的是，在 Plutus 中，这个多态只存在于值的声明中，你在任何时候使用一个多态声明的值，类型变量的选择必须在 use site 固定。一般来说，你不能像在 System-F 中那样将这些声明视为给出多态值。相反，声明中的多态类型是相同定义的 infinite 家族的缩写，只在该类型变量的选择上有所不同。例如，我们可以像这样定义多个 `length` 函数。\n\n\n    lengthNat : List Nat -> Nat {\n      lengthNat Nil = Zero ;\n      lengthNat (Cons _ xs) = Suc (lengthNat xs)\n    }\n\n    lengthBool : List Bool -> Nat {\n      lengtBool Nil = Zero ;\n      lengthBool (Cons _ xs) = Suc (lengthBool xs)\n    }\n\n    lengthListNat : List (List Nat) -> Nat {\n      lengthListNat Nil = Zero ;\n      lengthListNat (Cons _ xs) = Suc (lengthListNat xs)\n    }\n\n除了名字和 `a` 的不同外，它们都是相同的 `a`。这当然是多余的，所以我们可以使用上面给出的多态声明。但这个声明没有给我们具有 `forall a. List a -> Nat` 类型的值 `length`。相反，他给了我们整个 infinite 家族的定义，但有一个方便的缩写语法。这就是为什么使用这个多态声明需要在 use site 固定类型变量。\n\n另一种常见的类型是在分支中有数据的二叉树类型：\n\n    data Tree a = { Leaf | Branch a (Tree a) (Tree a) }\n\n这样的树支持 `count`, `traversal` 和 `reverse` 的功能：\n\n    count : forall a. Tree a -> Nat {\n      count Leaf = Zero ;\n      count (Branch _ l r) = Suc (add (count l) (count r))\n    }\n\n    traversal : forall a. Tree a -> List a {\n      traversal Leaf = Nil ;\n      traversal (Branch x l r) = Cons x (append (traversal l) (traversal r))\n    }\n\n    reverse : forall a. Tree a -> Tree a {\n      reverse Leaf = Leaf ;\n      reverse (Branch x l r) = Branch x (reverse r) (reverse l)\n    }\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-03-examples.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-10-technical.en.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-10-technical.en.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-10-technical.en.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-02'\ndoc_title: Technical details\ngroup: base\npath: /en/technical-details/\nchildren: technical\nlanguage: en\nlabel: docs\n---\n\n<!-- Reviewed at d0868afac50ba6ffcbd95054e65cbf77fa513082 -->\n\n# Cardano SL Technical Details\n\nThis section is a starting point for developers who wish to contribute to the\noriginal client, as well as those who wish to undertake making their own client\nfor Cardano SL. Nonetheless, this section covers the original client to great\nextent, assuming that it will be the initial reference client for some time.\n<!-- end -->\n## High-level overview\n\nA Cardano SL node is a blockchain node. When ran, it finds other nodes (via\n[DHT](http://ast-deim.urv.cat/cpairot/dhts.html)) and then starts performing\nblockchain-related procedures.\n\nTime in Cardano SL is divided into *epochs*. Every epoch is divided into\n*slots*. Epochs and slots are numbered. Therefore, the slot `(3,5)` is read as\n\"the fifth slot of the third epoch\" (the 0-th slot and the 0-th epoch are also\npossible).\n\nCardano SL uses sets of constants, special values defined in\n[the `constants.yaml` configuration file](https://github.com/input-output-hk/cardano-sl/blob/bf5dd592b7bf77a68bf71314718dc7a8d5cc8877/core/constants.yaml).\nThere are two main sets: for production mode and development mode. In this guide\nwe'll refer to productions constants.\n\nSuppose the values for Cardano SL are:\n\n-   slot duration: 120 seconds,\n-   security parameter *k*: 60.\n\nIn other words, **a slot lasts 120 seconds**, and an epoch has [`10×k`](https://github.com/input-output-hk/cardano-sl/blob/9ee12d3cc9ca0c8ad95f3031518a4a7acdcffc56/core/Pos/Core/Constants/Raw.hs#L161)\nslots in it, so it lasts **1200 minutes** or **20 hours**.\n\nThere is one node called the slot leader on each slot. Only this node has right\nto generate a new block during this slot; this block will be added to the\nblockchain. However, there's no guarantee that new block will be actually\ngenerated (e.g. slot leader can be offline during a corresponding slot).\n\nFurthermore, slot leader may delegate its right to another node `N`; in this\ncase node `N` will have a right to generate a new block instead of slot leader.\nPlease note that node `N` with delegated right is not called a slot leader\nthough, it is just a delegate.\n\nIt's theoretically possible to delegate the slot leader's right to multiple\nnodes, but it is **not** recommended by reasons explained later. Moreover, we can\nrun multiple nodes with the same key (i.e. on one computer), let's say nodes\n`A`, `B` and `C`, and if node `A` is elected as the slot leader, not only `A`\nitself, but nodes `B` and `C` will be able to generate a new block as well. In\nthis case, every one of these nodes will issue a most probably different block,\nand the network will fork — each other node will accept **only one** of these\nconcurrent blocks. Later, this fork will be eliminated.\n\nDuring the epoch, nodes send each other MPC messages to come to the consensus as\nto who would be allowed to generate blocks in the next epoch. Payloads from\n`Data` messages (along with transactions) are included into blocks.\n\nThe more currency (or \"stake\") an address holds, the more likely it is to be\nchosen to generate a block. Please read about [Ouroboros Proof of Stake Algorithm](/cardano/proof-of-stake/)\nfor more details.\n\nIn short:\n\n1.  send messages,\n2.  receive messages/transactions/etc,\n3.  form a block (if you are the slot leader),\n4.  repeat.\n\n## Business logic\n\n### Listeners\n\nListeners handle incoming messages and respond to them. Various supplemental\nlisteners will not be covered, focusing on the main ones instead.\n\nListeners mostly use the [Relay\nframework](/en/technical/protocols/csl-application-level/#invreqdata-and-messagepart),\nwhich includes three type of messages:\n\n-   `Inventory` message: node publishes message to network when gets a new data.\n-   `Request` message: node requests a new data which was published in\n    `Inventory` message, from other node, if this data is not known yet by\n    this node.\n-   `Data` message: node replies with this message on `Request` message. `Data`\n    message contains concrete data.\n\nFor instance, when a user creates a new transaction, the wallet sends\n`Inventory` message with transaction id to the network. If the node that has\nreceived `Inventory` doesn't know any transaction with such id, then it replies\nwith `Request` message, after that the wallet sends this transaction in `Data`\nmessage. After the node has received the `Data` message, it can send the\n`Inventory` message to its neighbors in DHT network and repeat previous\niterations again.\n\nAnother example - block listeners [`handleGetHeaders`](https://github.com/input-output-hk/cardano-sl/blob/69e896143cb02612514352e286403852264f0ba3/src/Pos/Block/Network/Listeners.hs#L30),\n[`handleGetBlocks`](https://github.com/input-output-hk/cardano-sl/blob/69e896143cb02612514352e286403852264f0ba3/src/Pos/Block/Network/Listeners.hs#L50),\n[`handleBlockHeaders`](https://github.com/input-output-hk/cardano-sl/blob/69e896143cb02612514352e286403852264f0ba3/src/Pos/Block/Network/Listeners.hs#L77).\n\n### Workers\n\nA Worker is an action repeated with some interval. For example:\n\n-   [`onNewSlotWorker`](https://github.com/input-output-hk/cardano-sl/blob/69e896143cb02612514352e286403852264f0ba3/infra/Pos/Communication/Protocol.hs#L218): Runs at the beginning of each slot. Does some cleanup and\n    then runs additional functions. This worker also creates a\n    *genesis block* at the beginning of the epoch. There are two kinds of\n    blocks: \"genesis blocks\" and \"main blocks\". Main blocks are stored in the\n    blockchain; genesis blocks are generated by each node internally between\n    epochs. Genesis blocks aren't announced to other nodes. However, a node may\n    request a genesis block from someone else for convenience, if this node was\n    offline for some time and needs to catch up with the blockchain.\n-   [`blkOnNewSlot`](https://github.com/input-output-hk/cardano-sl/blob/d01d392d49db8a25e17749173ec9bce057911191/src/Pos/Block/Worker.hs#L69): Creates\n    a new block (when it is the node's turn to create a new block) and announces it\n    to other nodes.\n\n## Proof of Stake\n\nAt the heart of Cardano SL sits the Ouroboros Proof of Stake protocol, as\ndescribed in [the whitepaper](https://eprint.iacr.org/2016/889) of the same\nname.\n\n## Forks\n\nGenerally, one chain (the *main chain*) is maintained by a node, but eventually\nalternative chains may arise. Recall that only blocks `k` and more slots deep are\nconsidered stable. This way, if a block which is neither a part nor a\ncontinuation of our blockchain is received, we first check if its complexity is\nbigger than ours (the complexity is the length of the chain), and then we start\nsubsequently requesting previous blocks from the node that provided an\nalternative chain header. If we come deeper than `k` slots ago, the alternative\nchain gets rejected. Otherwise, once we get to the block existing in our chain,\nthe alternative chain is added to storage. From the standpoint of state, we\nstore and maintain all the alternative chains that are viable. If it appears\nthat an alternative chain is longer than the main chain, they are swapped,\nmaking the alternative chain the new main chain.\n\n## Supplemental parts\n\n### Slotting\n\nThe consensus scheme we use relies on correct slotting. More specifically, it\nrelies on the assumption that nodes in the system have access to the current\ntime (small deviations are acceptable), which is then used to figure out when\nany particular slot begins and ends, and perform particular actions in this\nslot.\n\nSystem start time is a timestamp of the `(0,0)` slot (i.e. the 0-th slot of the 0-th\nepoch).\n\n## P2P Network\n\n### Peer discovery\n\nWe use Kademlia DHT for peer discovery. It is a general solution for distributed\nhash tables, based on [a whitepaper by Petar Maymounkov and David Mazières,\n2002](https://pdos.csail.mit.edu/~petar/papers/maymounkov-kademlia-lncs.pdf).\n\nHowever, we only take advantage of its peer discovery mechanism, and use none of\nits hash table capabilities.\n\nIn short, each node in the Kademlia network is provided a `160`-bit id generated\nrandomly. The distance between the nodes is defined by `XOR` metric. The network\nis organized in such a way that node knows no more than `K` (`K=7` in the\noriginal client implementation) nodes for each relative distance range:\n`2^i < d <= 2^(i+1)`.\n\nInitial peer discovery is done by\n[sending](https://github.com/serokell/kademlia/blob/bbdca50c263c6dae251e67eb36a7d4e1ba7c1cb6/src/Network/Kademlia/Implementation.hs#L194)\na Kademlia `FIND_NODE` message with our own node id as a parameter to [a\npre-configured set of\nnodes](https://github.com/input-output-hk/cardano-sl/blob/43a2d079a026b90ba860e79b5be52d1337e26c6f/src/Pos/Constants.hs#L89)\nand the nodes passed by the user on the command line. Our implementation\n[sends](https://github.com/input-output-hk/cardano-sl/blob/43a2d079a026b90ba860e79b5be52d1337e26c6f/infra/Pos/DHT/Real/Real.hs#L228)\nthis request to all known peers at once and then waits for the first reply.\n\nWhile the client runs, it collects peers per Kademlia protocol. The list of\nknown peers is preserved and\n[restored](https://github.com/serokell/kademlia/blob/bbdca50c263c6dae251e67eb36a7d4e1ba7c1cb6/src/Network/Kademlia.hs#L197)\nbetween subsequent launches. For each peer, we keep their [host and port\nnumber](https://github.com/serokell/kademlia/blob/bbdca50c263c6dae251e67eb36a7d4e1ba7c1cb6/src/Network/Kademlia/Types.hs#L42),\nas well as their [node\nid](https://github.com/serokell/kademlia/blob/bbdca50c263c6dae251e67eb36a7d4e1ba7c1cb6/src/Network/Kademlia/Types.hs#L70).\n\n### Messaging\n\nKademlia already provides the notion of nodes that are known. Such nodes can be\ncalled *neighbors*. To send message to all nodes in a network, you can send it\nto neighbors, they will resend it to their neighbors, and so on. But sometimes\nwe may need to not propagate messages across all network, but send it to\nneighbors only. Hence we have three types of sending messages:\n\n-   send to a node,\n-   send to neighbors,\n-   send to network.\n\n#### Message types\n\nTo handle this, three kind of message headers are used, and there are two\nmessage types:\n\n-   Simple: sending to a single peer.\n-   Broadcast: attempting to send to the entire network, iteratively sending\n    messages to neighbors.\n\nBroadcast messages are resent to neighbors right after retrieval (before\nhandling). Also, they are being checked against LRU cache, and messages that\nhave been already received once get ignored.\n\n### Leaders and rich men computation (LRC)\n\n\"Slot leaders\" and \"rich men\" are two important notions of Ouroboros Proof of\nStake Algorithm.\n\n-   Slot leaders: Slot leaders for the current epoch (for each slot of the\n    current epoch) are computed by [Follow the\n    Satoshi](/en/cardano/proof-of-stake/#follow-the-satoshi) (FTS) algorithm in the\n    beginning of current epoch. FTS uses a `shared seed` which is result of\n    [Multi Party Computation](/en/cardano/proof-of-stake/#multi-party-computation)\n    (MPC) algorithm for previous epoch: in the result of MPC some nodes reveal\n    their seeds, `xor` of these seeds is called `shared seed`.\n\n-   Rich men: Only nodes that have sent their VSS certificates and also have\n    enough stake can participate in the MPC algorithm. So in the beginning of\n    epoch node must know all potential participants for validation of MPC\n    messages during this epoch. Rich men are also computed in the beginning of\n    current epoch.\n\nRich men are important for other components as well; for instance, Update system\nuses rich men for checking that node can publish update proposal and vote.\n\nThere are two ways of computing who the rich men will be: - considering common\nstake - considering delegated stake (Ouroboros provides opportunity to delegate\nown stake to other node, see more in [Delegation\nsection](/en/cardano/differences/#stake-delegation))\n\nMPC and Update System components need rich men with delegated stake, but\nDelegation component with common stake.\n\n## Constants\n\nCardano SL uses a list of the fundamental constants. Their values have been\ndiscussed with the original authors of the protocol as well as independent\nsecurity auditors, so reusing these constants is strongly recommended for\nalternative clients.\n\nValues of these constants are defined in\n[the `constants.yaml` configuration file](https://github.com/input-output-hk/cardano-sl/blob/bf5dd592b7bf77a68bf71314718dc7a8d5cc8877/core/constants.yaml),\nfor production and development environments separately.\n",
        "type": "MarkdownRemark",
        "contentDigest": "644b786cf5e3e0cb966e1acbe196f74c",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-02",
        "doc_title": "Technical details",
        "group": "base",
        "path": "/en/technical-details/",
        "children": "technical",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-10-technical.en.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-10-technical.en.md absPath of file"
      },
      "excerpt": "\n<!-- Reviewed at d0868afac50ba6ffcbd95054e65cbf77fa513082 -->\n\n# Cardano SL Technical Details\n\nThis section is a starting point for developers who wish to contribute to the\noriginal client, as well as those who wish to undertake making their own client\nfor Cardano SL. Nonetheless, this section covers the original client to great\nextent, assuming that it will be the initial reference client for some time.\n",
      "rawMarkdownBody": "\n<!-- Reviewed at d0868afac50ba6ffcbd95054e65cbf77fa513082 -->\n\n# Cardano SL Technical Details\n\nThis section is a starting point for developers who wish to contribute to the\noriginal client, as well as those who wish to undertake making their own client\nfor Cardano SL. Nonetheless, this section covers the original client to great\nextent, assuming that it will be the initial reference client for some time.\n<!-- end -->\n## High-level overview\n\nA Cardano SL node is a blockchain node. When ran, it finds other nodes (via\n[DHT](http://ast-deim.urv.cat/cpairot/dhts.html)) and then starts performing\nblockchain-related procedures.\n\nTime in Cardano SL is divided into *epochs*. Every epoch is divided into\n*slots*. Epochs and slots are numbered. Therefore, the slot `(3,5)` is read as\n\"the fifth slot of the third epoch\" (the 0-th slot and the 0-th epoch are also\npossible).\n\nCardano SL uses sets of constants, special values defined in\n[the `constants.yaml` configuration file](https://github.com/input-output-hk/cardano-sl/blob/bf5dd592b7bf77a68bf71314718dc7a8d5cc8877/core/constants.yaml).\nThere are two main sets: for production mode and development mode. In this guide\nwe'll refer to productions constants.\n\nSuppose the values for Cardano SL are:\n\n-   slot duration: 120 seconds,\n-   security parameter *k*: 60.\n\nIn other words, **a slot lasts 120 seconds**, and an epoch has [`10×k`](https://github.com/input-output-hk/cardano-sl/blob/9ee12d3cc9ca0c8ad95f3031518a4a7acdcffc56/core/Pos/Core/Constants/Raw.hs#L161)\nslots in it, so it lasts **1200 minutes** or **20 hours**.\n\nThere is one node called the slot leader on each slot. Only this node has right\nto generate a new block during this slot; this block will be added to the\nblockchain. However, there's no guarantee that new block will be actually\ngenerated (e.g. slot leader can be offline during a corresponding slot).\n\nFurthermore, slot leader may delegate its right to another node `N`; in this\ncase node `N` will have a right to generate a new block instead of slot leader.\nPlease note that node `N` with delegated right is not called a slot leader\nthough, it is just a delegate.\n\nIt's theoretically possible to delegate the slot leader's right to multiple\nnodes, but it is **not** recommended by reasons explained later. Moreover, we can\nrun multiple nodes with the same key (i.e. on one computer), let's say nodes\n`A`, `B` and `C`, and if node `A` is elected as the slot leader, not only `A`\nitself, but nodes `B` and `C` will be able to generate a new block as well. In\nthis case, every one of these nodes will issue a most probably different block,\nand the network will fork — each other node will accept **only one** of these\nconcurrent blocks. Later, this fork will be eliminated.\n\nDuring the epoch, nodes send each other MPC messages to come to the consensus as\nto who would be allowed to generate blocks in the next epoch. Payloads from\n`Data` messages (along with transactions) are included into blocks.\n\nThe more currency (or \"stake\") an address holds, the more likely it is to be\nchosen to generate a block. Please read about [Ouroboros Proof of Stake Algorithm](/cardano/proof-of-stake/)\nfor more details.\n\nIn short:\n\n1.  send messages,\n2.  receive messages/transactions/etc,\n3.  form a block (if you are the slot leader),\n4.  repeat.\n\n## Business logic\n\n### Listeners\n\nListeners handle incoming messages and respond to them. Various supplemental\nlisteners will not be covered, focusing on the main ones instead.\n\nListeners mostly use the [Relay\nframework](/en/technical/protocols/csl-application-level/#invreqdata-and-messagepart),\nwhich includes three type of messages:\n\n-   `Inventory` message: node publishes message to network when gets a new data.\n-   `Request` message: node requests a new data which was published in\n    `Inventory` message, from other node, if this data is not known yet by\n    this node.\n-   `Data` message: node replies with this message on `Request` message. `Data`\n    message contains concrete data.\n\nFor instance, when a user creates a new transaction, the wallet sends\n`Inventory` message with transaction id to the network. If the node that has\nreceived `Inventory` doesn't know any transaction with such id, then it replies\nwith `Request` message, after that the wallet sends this transaction in `Data`\nmessage. After the node has received the `Data` message, it can send the\n`Inventory` message to its neighbors in DHT network and repeat previous\niterations again.\n\nAnother example - block listeners [`handleGetHeaders`](https://github.com/input-output-hk/cardano-sl/blob/69e896143cb02612514352e286403852264f0ba3/src/Pos/Block/Network/Listeners.hs#L30),\n[`handleGetBlocks`](https://github.com/input-output-hk/cardano-sl/blob/69e896143cb02612514352e286403852264f0ba3/src/Pos/Block/Network/Listeners.hs#L50),\n[`handleBlockHeaders`](https://github.com/input-output-hk/cardano-sl/blob/69e896143cb02612514352e286403852264f0ba3/src/Pos/Block/Network/Listeners.hs#L77).\n\n### Workers\n\nA Worker is an action repeated with some interval. For example:\n\n-   [`onNewSlotWorker`](https://github.com/input-output-hk/cardano-sl/blob/69e896143cb02612514352e286403852264f0ba3/infra/Pos/Communication/Protocol.hs#L218): Runs at the beginning of each slot. Does some cleanup and\n    then runs additional functions. This worker also creates a\n    *genesis block* at the beginning of the epoch. There are two kinds of\n    blocks: \"genesis blocks\" and \"main blocks\". Main blocks are stored in the\n    blockchain; genesis blocks are generated by each node internally between\n    epochs. Genesis blocks aren't announced to other nodes. However, a node may\n    request a genesis block from someone else for convenience, if this node was\n    offline for some time and needs to catch up with the blockchain.\n-   [`blkOnNewSlot`](https://github.com/input-output-hk/cardano-sl/blob/d01d392d49db8a25e17749173ec9bce057911191/src/Pos/Block/Worker.hs#L69): Creates\n    a new block (when it is the node's turn to create a new block) and announces it\n    to other nodes.\n\n## Proof of Stake\n\nAt the heart of Cardano SL sits the Ouroboros Proof of Stake protocol, as\ndescribed in [the whitepaper](https://eprint.iacr.org/2016/889) of the same\nname.\n\n## Forks\n\nGenerally, one chain (the *main chain*) is maintained by a node, but eventually\nalternative chains may arise. Recall that only blocks `k` and more slots deep are\nconsidered stable. This way, if a block which is neither a part nor a\ncontinuation of our blockchain is received, we first check if its complexity is\nbigger than ours (the complexity is the length of the chain), and then we start\nsubsequently requesting previous blocks from the node that provided an\nalternative chain header. If we come deeper than `k` slots ago, the alternative\nchain gets rejected. Otherwise, once we get to the block existing in our chain,\nthe alternative chain is added to storage. From the standpoint of state, we\nstore and maintain all the alternative chains that are viable. If it appears\nthat an alternative chain is longer than the main chain, they are swapped,\nmaking the alternative chain the new main chain.\n\n## Supplemental parts\n\n### Slotting\n\nThe consensus scheme we use relies on correct slotting. More specifically, it\nrelies on the assumption that nodes in the system have access to the current\ntime (small deviations are acceptable), which is then used to figure out when\nany particular slot begins and ends, and perform particular actions in this\nslot.\n\nSystem start time is a timestamp of the `(0,0)` slot (i.e. the 0-th slot of the 0-th\nepoch).\n\n## P2P Network\n\n### Peer discovery\n\nWe use Kademlia DHT for peer discovery. It is a general solution for distributed\nhash tables, based on [a whitepaper by Petar Maymounkov and David Mazières,\n2002](https://pdos.csail.mit.edu/~petar/papers/maymounkov-kademlia-lncs.pdf).\n\nHowever, we only take advantage of its peer discovery mechanism, and use none of\nits hash table capabilities.\n\nIn short, each node in the Kademlia network is provided a `160`-bit id generated\nrandomly. The distance between the nodes is defined by `XOR` metric. The network\nis organized in such a way that node knows no more than `K` (`K=7` in the\noriginal client implementation) nodes for each relative distance range:\n`2^i < d <= 2^(i+1)`.\n\nInitial peer discovery is done by\n[sending](https://github.com/serokell/kademlia/blob/bbdca50c263c6dae251e67eb36a7d4e1ba7c1cb6/src/Network/Kademlia/Implementation.hs#L194)\na Kademlia `FIND_NODE` message with our own node id as a parameter to [a\npre-configured set of\nnodes](https://github.com/input-output-hk/cardano-sl/blob/43a2d079a026b90ba860e79b5be52d1337e26c6f/src/Pos/Constants.hs#L89)\nand the nodes passed by the user on the command line. Our implementation\n[sends](https://github.com/input-output-hk/cardano-sl/blob/43a2d079a026b90ba860e79b5be52d1337e26c6f/infra/Pos/DHT/Real/Real.hs#L228)\nthis request to all known peers at once and then waits for the first reply.\n\nWhile the client runs, it collects peers per Kademlia protocol. The list of\nknown peers is preserved and\n[restored](https://github.com/serokell/kademlia/blob/bbdca50c263c6dae251e67eb36a7d4e1ba7c1cb6/src/Network/Kademlia.hs#L197)\nbetween subsequent launches. For each peer, we keep their [host and port\nnumber](https://github.com/serokell/kademlia/blob/bbdca50c263c6dae251e67eb36a7d4e1ba7c1cb6/src/Network/Kademlia/Types.hs#L42),\nas well as their [node\nid](https://github.com/serokell/kademlia/blob/bbdca50c263c6dae251e67eb36a7d4e1ba7c1cb6/src/Network/Kademlia/Types.hs#L70).\n\n### Messaging\n\nKademlia already provides the notion of nodes that are known. Such nodes can be\ncalled *neighbors*. To send message to all nodes in a network, you can send it\nto neighbors, they will resend it to their neighbors, and so on. But sometimes\nwe may need to not propagate messages across all network, but send it to\nneighbors only. Hence we have three types of sending messages:\n\n-   send to a node,\n-   send to neighbors,\n-   send to network.\n\n#### Message types\n\nTo handle this, three kind of message headers are used, and there are two\nmessage types:\n\n-   Simple: sending to a single peer.\n-   Broadcast: attempting to send to the entire network, iteratively sending\n    messages to neighbors.\n\nBroadcast messages are resent to neighbors right after retrieval (before\nhandling). Also, they are being checked against LRU cache, and messages that\nhave been already received once get ignored.\n\n### Leaders and rich men computation (LRC)\n\n\"Slot leaders\" and \"rich men\" are two important notions of Ouroboros Proof of\nStake Algorithm.\n\n-   Slot leaders: Slot leaders for the current epoch (for each slot of the\n    current epoch) are computed by [Follow the\n    Satoshi](/en/cardano/proof-of-stake/#follow-the-satoshi) (FTS) algorithm in the\n    beginning of current epoch. FTS uses a `shared seed` which is result of\n    [Multi Party Computation](/en/cardano/proof-of-stake/#multi-party-computation)\n    (MPC) algorithm for previous epoch: in the result of MPC some nodes reveal\n    their seeds, `xor` of these seeds is called `shared seed`.\n\n-   Rich men: Only nodes that have sent their VSS certificates and also have\n    enough stake can participate in the MPC algorithm. So in the beginning of\n    epoch node must know all potential participants for validation of MPC\n    messages during this epoch. Rich men are also computed in the beginning of\n    current epoch.\n\nRich men are important for other components as well; for instance, Update system\nuses rich men for checking that node can publish update proposal and vote.\n\nThere are two ways of computing who the rich men will be: - considering common\nstake - considering delegated stake (Ouroboros provides opportunity to delegate\nown stake to other node, see more in [Delegation\nsection](/en/cardano/differences/#stake-delegation))\n\nMPC and Update System components need rich men with delegated stake, but\nDelegation component with common stake.\n\n## Constants\n\nCardano SL uses a list of the fundamental constants. Their values have been\ndiscussed with the original authors of the protocol as well as independent\nsecurity auditors, so reusing these constants is strongly recommended for\nalternative clients.\n\nValues of these constants are defined in\n[the `constants.yaml` configuration file](https://github.com/input-output-hk/cardano-sl/blob/bf5dd592b7bf77a68bf71314718dc7a8d5cc8877/core/constants.yaml),\nfor production and development environments separately.\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-10-technical.en.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-10-technical.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-10-technical.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-10-technical.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 技术细节\ngroup: base\npath: /cn/technical\nchildren: cn-technical\nlanguage: cn\nlabel: docs\n---\n\n<!-- Reviewed at d0868afac50ba6ffcbd95054e65cbf77fa513082 -->\n\n# 卡尔达诺结算层技术细节\n\n对于想要贡献原始客户端，以及想基于卡尔达诺结算层创建自己的客户端的开发人员来说，这一章节是一个起点。尽管如此，这一节将主要覆盖原始客户端，并有所扩展，在一段时间内可以把它当做最初的参考文档\n\n## 高层次概述\n\n一个卡尔达诺结算层节点是一个区块链节点。运行时，他会找到其他节点(通过 [DHT](http://ast-deim.urv.cat/cpairot/dhts.html))，然后开始执行区块链的相关任务。\n\n卡尔达诺结算层中的时间会以 epochs 划分。epochs 又会以 slots 划分。 Epochs 和 slots 会被编号。 因此，slot `(3,5)` 被读作『第3个 epochs 的第5个 slot』 (第0个 slot 以及第0个 epoch 也是可以的).\n\n卡尔达诺结算层会使用一些常量集, 特殊值定义在\n[`constants.yaml` 配置文件中](https://github.com/input-output-hk/cardano-sl/blob/bf5dd592b7bf77a68bf71314718dc7a8d5cc8877/core/constants.yaml)。\n主要有两种：生产模式和开发模式。 在本指南中，我们将参考生产常量。\n\n假设卡尔达诺结算层的值是：:\n\n-   slot 持续时间: 120秒,\n-   安全参数 *k*: 60.\n\n换句话说，**一个 slot 可以持续120秒**, 而一个 epochs有 [`10×k`](https://github.com/input-output-hk/cardano-sl/blob/9ee12d3cc9ca0c8ad95f3031518a4a7acdcffc56/core/Pos/Core/Constants/Raw.hs#L161)\n个 slot, 所以它可以持续**1200分钟**或**20个小时**.\n\n每个 slot 上有一个节点被称作 slot 领导者。只有这个 slot 有权在这些 slot 中生成一个新区块；这个区块会被加入到区块链中。然而我们并不能确保这个区块一定会被生成(比如 slot 领导者在响应的过程中可能会离线)。\n\n此外，slot 领导者可以将其权利委托给另一个节点 `N`；在这种情况下，节点 `N` 而非 slot 领导者将有权生成一个新的块。请注意，`N` 具有委托权的节点不能被称为 slot 领导者，它只是一个委托。\n\n理论上可以将 slot 领导者的权力委托给多个节点，但是不推荐，之后会解释原因。此外，使用相同的密钥（即一台计算机上）我们可以运行中多个节点，假设有节点 `A`, `B`, `C`，如果节点 `A` 被选为 slot 领导者，不仅 `A` 本身，节点 `B` 和 `C` 都能够生成一个新区块。在这种情况下，每一个节点都将发出一个不同的块，网络将分叉 - 每个其他节点将只接受这些并发区块块中的一个。之后，这个分叉将被淘汰。\n\n在 epoch 中，节点之间相互发送 MPC 消息，以达成共识，谁将被允许在下一个时期生成区块。Data 消息中的有效载荷 （以及事务）会被包含在块中。\n\n一个地址持有的货币（或『股份』）越多，被选择生成一个区块的可能性就越大。请阅读[乌洛波罗斯权益证明算法](/cardano/proof-of-stake/)获取更多细节。\n\n\n简而言之:\n\n1. 发送信息，\n2. 接收信息/交易/等等，\n3. 形成一个区块 (如果你是 slot 领导者的话)，\n4. 重复。\n\n## 商业逻辑\n\n### 接收者\n\n接收者处理传入的消息并对其作出响应。各种补充的听众不会被覆盖，而是集中在一个接收者上。\n\n接收者大多使用[中继框架](/technical/protocols/csl-application-level/#invreqdata-and-messagepart)，其中包括三种类型的消息：\n\n* `Inventory` 消息：节点在获取新数据时向网络发布消息。  \n* `Request` 消息：如果某个新数据没有被这个节点获取的话，节点会向其他节点获取在 `Inventory` 消息中的新数据。  \n* `Data` 消息：节点对 `Request` 消息回复的数据。`Data`消息包含具体的数据。\n\n例如，当用户创建新的交易时，钱包将具有交易 ID 的 `Inventory` 消息发送到网络。如果收到 `Inventory` 的节点没有该 ID 相关的交易记录，那么它会回复 `Request` 消息，然后钱包会在 `Data` 消息中发送该交易信息。节点收到 `Data` 消息后，将 `Inventory` 消息发送给 DHT 网络中的邻居，并重复之前的操作。\n\n另一个例子 - 区块接收者：[`handleGetHeaders`](https://github.com/input-output-hk/cardano-sl/blob/69e896143cb02612514352e286403852264f0ba3/src/Pos/Block/Network/Listeners.hs#L30)，\n[`handleGetBlocks`](https://github.com/input-output-hk/cardano-sl/blob/69e896143cb02612514352e286403852264f0ba3/src/Pos/Block/Network/Listeners.hs#L50)，\n[`handleBlockHeaders`](https://github.com/input-output-hk/cardano-sl/blob/69e896143cb02612514352e286403852264f0ba3/src/Pos/Block/Network/Listeners.hs#L77)。\n\n### Worker\n\n一个 Worker 会在一个时间区间内进行重复性的工作. 比如：\n\n\n- [`onNewSlotWorker`](https://github.com/input-output-hk/cardano-sl/blob/69e896143cb02612514352e286403852264f0ba3/infra/Pos/Communication/Protocol.hs#L218)：在每个插槽的开始时运行。做一些清理，然后运行其他功能。这个 Worker 在这个 epoch 的开始时也会创造了一个 『起始块』。有两种类型的块：『生成块』和『主块』。主块储存在区块链中; 在 epoch 之间，每个节点都会间断性地生成块。主块不会被告知其他节点。但是，如果节点离线一段时间，并且需要同步区块链，节点可以请求其他人的创世区块。\n- [`blkOnNewSlot`](https://github.com/input-output-hk/cardano-sl/blob/d01d392d49db8a25e17749173ec9bce057911191/src/Pos/Block/Worker.hs#L69): 创建一个新块（当轮到节点创建一个新块时），并将其发给其他节点。\n\n\n## 权益证明\n\n卡尔达诺结算层的核心基于 乌洛波罗斯 权益证明算法。正如同名的[白皮书](https://eprint.iacr.org/2016/889)所描述的那样。\n\n\n## 分叉\n\n通常，一个链（主链）由一个节点维护，但最终可能会出现分叉链。回想一下，只有区块 `k` 和更多 slot 被认为是稳定的。这样一来，如果接收一个区块，它既不是区块链的一部分也不是 blockchain 的延续，我们首先检查其复杂程度（复杂性是链的长度）是否比我们的大，TODO\n\n然后我们开始随后请求来自先前块提供替代链头的节点。如果我们来得深入k插槽前，替代链被拒绝。否则，一旦我们到达我们连锁店中​​存在的区块，替代链就会被添加到存储区。从国家的角度来看，我们存储和维护所有可行的替代链。如果看起来一个替代链比主链更长，那么它们被替换，使替代链成为新的主链。\n\n## 补充部分\n\n### Slotting\n\n我们使用的共识方案依赖于正确的 slot。更具体地说，它依赖于系统中的节点可以访问的当前时间（小的偏差是可接受的），然后用于确定何时开始和结束任何特定的 slot，并且在该 slot 执行特定的动作。\n\n系统开始时间是 `(0,0)` slot 的时间戳（即，第0 epoch 的第0slot）。\n\n## P2P 网络\n\n### Peer 发现\n\n我们使用 Kademlia DHT 进行对等节点的发现。这是基于 [Kademlia: 基于 XOR 度量的 P2P 信息系统](https://pdos.csail.mit.edu/~petar/papers/maymounkov-kademlia-lncs.pdf) 的哈希表的通用解决方案。\n\n简言之，在 Kademlia 网络的每个节点都被提供一个 `160` 字节的随机生成的 id。节点之间的距离由 `XOR` 确定。网络以这样的方式组织：节点对于每个相对距离：`2^i < d <= 2^(i+1)` 只知道 `K` (在最初的客户端实现中 `K=7`)。\n\n初始对等节点通过[发送](https://github.com/serokell/kademlia/blob/bbdca50c263c6dae251e67eb36a7d4e1ba7c1cb6/src/Network/Kademlia/Implementation.hs#L194) Kademlia 的 `FIND_NODE` 信息完成，它带有以自己节点 ID 作为[预先配置的一组节点](https://github.com/input-output-hk/cardano-sl/blob/43a2d079a026b90ba860e79b5be52d1337e26c6f/src/Pos/Constants.hs#L89)以及通过用户命令行输入的节点的参数。我们的实现中会一次[发送](https://github.com/input-output-hk/cardano-sl/blob/43a2d079a026b90ba860e79b5be52d1337e26c6f/infra/Pos/DHT/Real/Real.hs#L228)这个请求给所有已知的对等节点，然后等待第一个回复。\n\n客户端运行时，每个 Kademlia 协议收集对等节点。已知对等节点在后续启动之间保存，[恢复](https://github.com/serokell/kademlia/blob/bbdca50c263c6dae251e67eb36a7d4e1ba7c1cb6/src/Network/Kademlia.hs#L197)。对于每个对等体，我们保存其[主机和端口号](https://github.com/serokell/kademlia/blob/bbdca50c263c6dae251e67eb36a7d4e1ba7c1cb6/src/Network/Kademlia/Types.hs#L42)，以及它们的[节点 id](https://github.com/serokell/kademlia/blob/bbdca50c263c6dae251e67eb36a7d4e1ba7c1cb6/src/Network/Kademlia/Types.hs#L70)。\n\n### Messaging\n\nKademlia 已经提供了已知节点的概念。这样的节点可以被称为*邻居*。要将消息发送到网络上的所有节点，你可以发送给邻居，它们会将其发送给它们的邻居，依次类推。但有时候我们可能不需要在整个网络上传播消息，而是只将消息发送给邻居。因此我们有三种类型的发送消息：\n\n- 发送给一个节点，\n- 发送给邻居，\n- 发送给网络。\n\n#### 消息类型\n\n为了处理这个，使用三种消息头，并且有两种消息：\n\n- 简单：发送给一个同伴。\n- 广播：试图发送到整个网络，迭代地发送消息到邻居。\n\n广播消息在检索（在处理之前）重新发送给邻居。而且，它们会通过 LRU 缓存检查，已经收到的消息会被忽略。\n\n\n### 领导者和富人计算（LRC）\n\n『Slot 领导者』和『富人』是乌洛波罗斯权益证明算法的重要概念。\n\n- Slot 领导者：当前 epoch（当前 epoch 的每个 slot） 的 slot 领导者是在而当前 epoch 开始时通过[追随中本聪](/cardano/proof-of-stake/#追随中本聪)（FTS）计算的。FTS 使用 `shared seed`，它是前一个 epoch [多方计算](/cardano/proof-of-stake/#多方计算)（MPC）算法的结果：MPC 结果中，一些节点揭露它们的 种子，这些种子的 `xor` 称为 `shared seed`。\n\n- 富人：只有已经发送 VSS 证书并且有足够权益的节点才能参与 MPC 算法。在 epoch 的开始，节点必须知道所有潜在的参与者以在这个 epoch 中验证 MPC 消息。富人也是在当前 epoch 的开始计算的。\n\n富人对于其他组件也很重要；例如，更新系统使用富人判断节点是否可以发布更新协议和投票。\n\n有两种计算富人的方法：\n\n- 考虑共同权益 \n- 考虑委派权益（乌洛波洛斯提供委派自己权益给其他节点的机会，更多信息请参阅[委派章节](/cardano/differences/#权益委派)。\n\nMPC 和更新系统组件需要具有委派权益的富人，但不需要拥有共同权益的委派组成。\n\n## 常量\n\n卡尔达诺结算层使用一些基础常量。他们的值经过了协议原作者和独立安全评论员的讨论，因此强烈推荐可选客户端使用这些常量。 \n\n这些常量在 \n[`constants.yaml` 配置文件](https://github.com/input-output-hk/cardano-sl/blob/bf5dd592b7bf77a68bf71314718dc7a8d5cc8877/core/constants.yaml)\n中定义，分为生产环境和开发环境。\n",
        "type": "MarkdownRemark",
        "contentDigest": "e69f96b948ee13d37f5706b5592ca48d",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "技术细节",
        "group": "base",
        "path": "/cn/technical",
        "children": "cn-technical",
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-10-technical.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-10-technical.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n<!-- Reviewed at d0868afac50ba6ffcbd95054e65cbf77fa513082 -->\n\n# 卡尔达诺结算层技术细节\n\n对于想要贡献原始客户端，以及想基于卡尔达诺结算层创建自己的客户端的开发人员来说，这一章节是一个起点。尽管如此，这一节将主要覆盖原始客户端，并有所扩展，在一段时间内可以把它当做最初的参考文档\n\n## 高层次概述\n\n一个卡尔达诺结算层节点是一个区块链节点。运行时，他会找到其他节点(通过 [DHT](http://ast-deim.urv.cat/cpairot/dhts.html))，然后开始执行区块链的相关任务。\n\n卡尔达诺结算层中的时间会以 epochs 划分。epochs 又会以 slots 划分。 Epochs 和 slots 会被编号。 因此，slot `(3,5)` 被读作『第3个 epochs 的第5个 slot』 (第0个 slot 以及第0个 epoch 也是可以的).\n\n卡尔达诺结算层会使用一些常量集, 特殊值定义在\n[`constants.yaml` 配置文件中](https://github.com/input-output-hk/cardano-sl/blob/bf5dd592b7bf77a68bf71314718dc7a8d5cc8877/core/constants.yaml)。\n主要有两种：生产模式和开发模式。 在本指南中，我们将参考生产常量。\n\n假设卡尔达诺结算层的值是：:\n\n-   slot 持续时间: 120秒,\n-   安全参数 *k*: 60.\n\n换句话说，**一个 slot 可以持续120秒**, 而一个 epochs有 [`10×k`](https://github.com/input-output-hk/cardano-sl/blob/9ee12d3cc9ca0c8ad95f3031518a4a7acdcffc56/core/Pos/Core/Constants/Raw.hs#L161)\n个 slot, 所以它可以持续**1200分钟**或**20个小时**.\n\n每个 slot 上有一个节点被称作 slot 领导者。只有这个 slot 有权在这些 slot 中生成一个新区块；这个区块会被加入到区块链中。然而我们并不能确保这个区块一定会被生成(比如 slot 领导者在响应的过程中可能会离线)。\n\n此外，slot 领导者可以将其权利委托给另一个节点 `N`；在这种情况下，节点 `N` 而非 slot 领导者将有权生成一个新的块。请注意，`N` 具有委托权的节点不能被称为 slot 领导者，它只是一个委托。\n\n理论上可以将 slot 领导者的权力委托给多个节点，但是不推荐，之后会解释原因。此外，使用相同的密钥（即一台计算机上）我们可以运行中多个节点，假设有节点 `A`, `B`, `C`，如果节点 `A` 被选为 slot 领导者，不仅 `A` 本身，节点 `B` 和 `C` 都能够生成一个新区块。在这种情况下，每一个节点都将发出一个不同的块，网络将分叉 - 每个其他节点将只接受这些并发区块块中的一个。之后，这个分叉将被淘汰。\n\n在 epoch 中，节点之间相互发送 MPC 消息，以达成共识，谁将被允许在下一个时期生成区块。Data 消息中的有效载荷 （以及事务）会被包含在块中。\n\n一个地址持有的货币（或『股份』）越多，被选择生成一个区块的可能性就越大。请阅读[乌洛波罗斯权益证明算法](/cardano/proof-of-stake/)获取更多细节。\n\n\n简而言之:\n\n1. 发送信息，\n2. 接收信息/交易/等等，\n3. 形成一个区块 (如果你是 slot 领导者的话)，\n4. 重复。\n\n## 商业逻辑\n\n### 接收者\n\n接收者处理传入的消息并对其作出响应。各种补充的听众不会被覆盖，而是集中在一个接收者上。\n\n接收者大多使用[中继框架](/technical/protocols/csl-application-level/#invreqdata-and-messagepart)，其中包括三种类型的消息：\n\n* `Inventory` 消息：节点在获取新数据时向网络发布消息。  \n* `Request` 消息：如果某个新数据没有被这个节点获取的话，节点会向其他节点获取在 `Inventory` 消息中的新数据。  \n* `Data` 消息：节点对 `Request` 消息回复的数据。`Data`消息包含具体的数据。\n\n例如，当用户创建新的交易时，钱包将具有交易 ID 的 `Inventory` 消息发送到网络。如果收到 `Inventory` 的节点没有该 ID 相关的交易记录，那么它会回复 `Request` 消息，然后钱包会在 `Data` 消息中发送该交易信息。节点收到 `Data` 消息后，将 `Inventory` 消息发送给 DHT 网络中的邻居，并重复之前的操作。\n\n另一个例子 - 区块接收者：[`handleGetHeaders`](https://github.com/input-output-hk/cardano-sl/blob/69e896143cb02612514352e286403852264f0ba3/src/Pos/Block/Network/Listeners.hs#L30)，\n[`handleGetBlocks`](https://github.com/input-output-hk/cardano-sl/blob/69e896143cb02612514352e286403852264f0ba3/src/Pos/Block/Network/Listeners.hs#L50)，\n[`handleBlockHeaders`](https://github.com/input-output-hk/cardano-sl/blob/69e896143cb02612514352e286403852264f0ba3/src/Pos/Block/Network/Listeners.hs#L77)。\n\n### Worker\n\n一个 Worker 会在一个时间区间内进行重复性的工作. 比如：\n\n\n- [`onNewSlotWorker`](https://github.com/input-output-hk/cardano-sl/blob/69e896143cb02612514352e286403852264f0ba3/infra/Pos/Communication/Protocol.hs#L218)：在每个插槽的开始时运行。做一些清理，然后运行其他功能。这个 Worker 在这个 epoch 的开始时也会创造了一个 『起始块』。有两种类型的块：『生成块』和『主块』。主块储存在区块链中; 在 epoch 之间，每个节点都会间断性地生成块。主块不会被告知其他节点。但是，如果节点离线一段时间，并且需要同步区块链，节点可以请求其他人的创世区块。\n- [`blkOnNewSlot`](https://github.com/input-output-hk/cardano-sl/blob/d01d392d49db8a25e17749173ec9bce057911191/src/Pos/Block/Worker.hs#L69): 创建一个新块（当轮到节点创建一个新块时），并将其发给其他节点。\n\n\n## 权益证明\n\n卡尔达诺结算层的核心基于 乌洛波罗斯 权益证明算法。正如同名的[白皮书](https://eprint.iacr.org/2016/889)所描述的那样。\n\n\n## 分叉\n\n通常，一个链（主链）由一个节点维护，但最终可能会出现分叉链。回想一下，只有区块 `k` 和更多 slot 被认为是稳定的。这样一来，如果接收一个区块，它既不是区块链的一部分也不是 blockchain 的延续，我们首先检查其复杂程度（复杂性是链的长度）是否比我们的大，TODO\n\n然后我们开始随后请求来自先前块提供替代链头的节点。如果我们来得深入k插槽前，替代链被拒绝。否则，一旦我们到达我们连锁店中​​存在的区块，替代链就会被添加到存储区。从国家的角度来看，我们存储和维护所有可行的替代链。如果看起来一个替代链比主链更长，那么它们被替换，使替代链成为新的主链。\n\n## 补充部分\n\n### Slotting\n\n我们使用的共识方案依赖于正确的 slot。更具体地说，它依赖于系统中的节点可以访问的当前时间（小的偏差是可接受的），然后用于确定何时开始和结束任何特定的 slot，并且在该 slot 执行特定的动作。\n\n系统开始时间是 `(0,0)` slot 的时间戳（即，第0 epoch 的第0slot）。\n\n## P2P 网络\n\n### Peer 发现\n\n我们使用 Kademlia DHT 进行对等节点的发现。这是基于 [Kademlia: 基于 XOR 度量的 P2P 信息系统](https://pdos.csail.mit.edu/~petar/papers/maymounkov-kademlia-lncs.pdf) 的哈希表的通用解决方案。\n\n简言之，在 Kademlia 网络的每个节点都被提供一个 `160` 字节的随机生成的 id。节点之间的距离由 `XOR` 确定。网络以这样的方式组织：节点对于每个相对距离：`2^i < d <= 2^(i+1)` 只知道 `K` (在最初的客户端实现中 `K=7`)。\n\n初始对等节点通过[发送](https://github.com/serokell/kademlia/blob/bbdca50c263c6dae251e67eb36a7d4e1ba7c1cb6/src/Network/Kademlia/Implementation.hs#L194) Kademlia 的 `FIND_NODE` 信息完成，它带有以自己节点 ID 作为[预先配置的一组节点](https://github.com/input-output-hk/cardano-sl/blob/43a2d079a026b90ba860e79b5be52d1337e26c6f/src/Pos/Constants.hs#L89)以及通过用户命令行输入的节点的参数。我们的实现中会一次[发送](https://github.com/input-output-hk/cardano-sl/blob/43a2d079a026b90ba860e79b5be52d1337e26c6f/infra/Pos/DHT/Real/Real.hs#L228)这个请求给所有已知的对等节点，然后等待第一个回复。\n\n客户端运行时，每个 Kademlia 协议收集对等节点。已知对等节点在后续启动之间保存，[恢复](https://github.com/serokell/kademlia/blob/bbdca50c263c6dae251e67eb36a7d4e1ba7c1cb6/src/Network/Kademlia.hs#L197)。对于每个对等体，我们保存其[主机和端口号](https://github.com/serokell/kademlia/blob/bbdca50c263c6dae251e67eb36a7d4e1ba7c1cb6/src/Network/Kademlia/Types.hs#L42)，以及它们的[节点 id](https://github.com/serokell/kademlia/blob/bbdca50c263c6dae251e67eb36a7d4e1ba7c1cb6/src/Network/Kademlia/Types.hs#L70)。\n\n### Messaging\n\nKademlia 已经提供了已知节点的概念。这样的节点可以被称为*邻居*。要将消息发送到网络上的所有节点，你可以发送给邻居，它们会将其发送给它们的邻居，依次类推。但有时候我们可能不需要在整个网络上传播消息，而是只将消息发送给邻居。因此我们有三种类型的发送消息：\n\n- 发送给一个节点，\n- 发送给邻居，\n- 发送给网络。\n\n#### 消息类型\n\n为了处理这个，使用三种消息头，并且有两种消息：\n\n- 简单：发送给一个同伴。\n- 广播：试图发送到整个网络，迭代地发送消息到邻居。\n\n广播消息在检索（在处理之前）重新发送给邻居。而且，它们会通过 LRU 缓存检查，已经收到的消息会被忽略。\n\n\n### 领导者和富人计算（LRC）\n\n『Slot 领导者』和『富人』是乌洛波罗斯权益证明算法的重要概念。\n\n- Slot 领导者：当前 epoch（当前 epoch 的每个 slot） 的 slot 领导者是在而当前 epoch 开始时通过[追随中本聪](/cardano/proof-of-stake/#追随中本聪)（FTS）计算的。FTS 使用 `shared seed`，它是前一个 epoch [多方计算](/cardano/proof-of-stake/#多方计算)（MPC）算法的结果：MPC 结果中，一些节点揭露它们的 种子，这些种子的 `xor` 称为 `shared seed`。\n\n- 富人：只有已经发送 VSS 证书并且有足够权益的节点才能参与 MPC 算法。在 epoch 的开始，节点必须知道所有潜在的参与者以在这个 epoch 中验证 MPC 消息。富人也是在当前 epoch 的开始计算的。\n\n富人对于其他组件也很重要；例如，更新系统使用富人判断节点是否可以发布更新协议和投票。\n\n有两种计算富人的方法：\n\n- 考虑共同权益 \n- 考虑委派权益（乌洛波洛斯提供委派自己权益给其他节点的机会，更多信息请参阅[委派章节](/cardano/differences/#权益委派)。\n\nMPC 和更新系统组件需要具有委派权益的富人，但不需要拥有共同权益的委派组成。\n\n## 常量\n\n卡尔达诺结算层使用一些基础常量。他们的值经过了协议原作者和独立安全评论员的讨论，因此强烈推荐可选客户端使用这些常量。 \n\n这些常量在 \n[`constants.yaml` 配置文件](https://github.com/input-output-hk/cardano-sl/blob/bf5dd592b7bf77a68bf71314718dc7a8d5cc8877/core/constants.yaml)\n中定义，分为生产环境和开发环境。\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-10-technical.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-01-proof-of-stake.en.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-01-proof-of-stake.en.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-01-proof-of-stake.en.md absPath of file",
      "internal": {
        "content": "---\ndoc_title: Ouroboros Proof of Stake Algorithm\npath: /en/cardano/ouroboros-proof-of-stake-algorithm/\ngroup: cardano\nvisible: true\nlanguage: en\nlabel: docs\n---\n<!-- Reviewed at c4c45ce9a7a8f4aa6d88a32829755196a017f6a1 -->\n\n# Ouroboros Proof of Stake Algorithm\n\nThe Ouroboros Proof of Stake (PoS) Algorithm is the most important part of the protocol.\nIt defines the way in which nodes reach consensus about the state of [ledger](/glossary/#ledger).\n\nOuroboros is unique as it is the first blockchain protocol that is based on proof of\nstake and has been scientifically proven as secure.\n\n## Why Proof of Stake?\n\nThe most important thing about picking a Proof of Stake (PoS) algorithm over a Proof\nof Work (PoW) algorithm (as adopted by Bitcoin), is the energy consumption\nconsiderations. Running the bitcoin protocol is a very expensive endeavor which uses\nlarge amounts of energy. It is estimated that 3.8 American households can be powered\nfor a day by the energy that is spent to generate one bitcoin transaction. These energy\nrequirements for running the bitcoin protocol continue to grow as more and more bitcoin\nminers sink money into mining. In addition, more energy is needed as the difficulty\nof the problems that their computers or mining rigs, encounter increases. This is why\nresearchers have investigated alternative ways to reach consensus — such as using the\nso-called BFT (Byzantine Fault Tolerant), consensus algorithms and PoS algorithms.\n\n## What is Proof of Stake?\n\nProof of Stake is a novel approach to block generation. The core idea of Proof of Stake\nis that instead of wasting electricity on cracking computationally heavy problems, a node\nis selected to generate (or “mint”) a new block with a probability proportional to the\namount of coins this node has. If a node has positive (> 0) stake, it is called a “stakeholder”.\nIf a node eventually becomes chosen to mint a new block, it is called a “slot leader”.\n<!-- end -->\n### Proof\n\nThe “proof” part of “proof of stake” refers to evidence that blocks of\ntransactions are legitimate.\n\n### Stake\n\nWhile “stake” means “the relative value held by addresses on the node”. By “relative\nvalue” we mean “all the total value held by wallets on a particular node divided by\nthe total value in the Cardano SL system”. For more information, please see:\n[Balance and Stake in Cardano SL](/cardano/balance-and-stake/)\n\n## About Slot Leaders\n\nNodes with a positive stake are called stakeholders, and only stakeholders may\nparticipate in running the protocol. Moreover, to be able to generate new blocks\nfor the blockchain, a stakeholder must be elected as a slot leader. The slot leader can\nlisten to transactions announced by other nodes, make a block of those transactions,\nsign this block with its secret key and publish it to the network.\n\nYou can think of a slot leader as a miner in bitcoin, but the above-mentioned consensus\ndefines who will be able to mine, when and how much.\n\n## Epochs and Slots\n\nThe Ouroboros protocol divides the physical time into **epochs**, and each epoch is\ndivided into **slots**. For example:\n\n```\n+----------+----------+-------+----------+--------------------> t\n|  slot 0  |  slot 1  |  ...  |  slot N  |\n\n \\                                      / \\\n  -------------- epoch M ---------------   -- epoch M+1 -- ...\n```\n\n**Note:** a slot is a relatively short period of time (for example, 20 seconds).\n\nEach slot has one and only one leader (slot leader, SL):\n\n```\n+----------+----------+-------+----------+----> t\n|  slot 0  |  slot 1  |  ...  |  slot N  |\n\n    SL 0       SL 1               SL N\n```\n\nThe slot leader has a (sole) right to produce one and only one block during his slot:\n\n```\n  +------+   +------+           +------+\n  | Bl 0 |<--| Bl 1 |<-- ... <--| Bl N |\n  +------+   +------+           +------+\n+----------+----------+-------+----------+----> t\n|  slot 0  |  slot 1  |  ...  |  slot N  |\n\n    SL 0       SL 1               SL N\n```\n\nIt means that the number of slot leaders is strictly equal to the number of slots\nin epoch (let's call this number `N`), so it is impossible to produce more than `N`\nblocks during an epoch.\n\nIf slot leader missed their slot (for example, when offline), the right to produce\na block is lost until they are elected again.\n\n**Note:** One or more slots can remain empty (without generated blocks), but the\nmajority of blocks (at least 50% + 1) **must** be generated during an epoch.\n\n## How Slot Leaders Elections Work\n\nSlot leaders are elected from the group of all stakeholders. Please note that not all\nstakeholders participate in this election, but only ones who have enough stake (for example, 2% of\nthe total stake). This group of stakeholders are known as “electors”.\n\nElectors elect slot leaders for the next epoch during the current epoch. Thus, at the end of epoch\n`N` it is already known who are slot leaders for the epoch `N+1`, and it cannot be\nchanged.\n\nYou can think of this election as a “fair lottery”; anyone from the group of stakeholders can\nbecome a slot leader. However, an important idea of PoS is that the more stake stakeholder has,\nthe more chances one has to be elected as a slot leader. \n\n**Note:** One stakeholder can be elected as a slot leader for more than one slot\nduring the same epoch.\n\n### Multiparty Computation\n\nOne of the fundamental problems of the slot leader election process is its unbiasedness.\nA certain degree of randomness is needed as a base for election, in this case, results of\nthis election are random and fair. So the question is where can this randomness be obtained\nfrom?\n\nA multiparty computation (MPC) approach is used to achieve this randomness where each elector\nindependently performs an action which is called “coin tossing” and after that shares results\nwith other electors. The idea is that results are randomly generated by each elector, but eventually\nthey agree on the same final value.\n\n#### Commitment Phase\n\nFirst of all, an elector generates a secret (or special random value). Next, an elector forms a\n“commitment” which is a message that contains encrypted shares (see an explanation below) and\nproof of secret.\n\nThe next step is when an elector signs this commitment with its secret key, specifies the epoch's\nnumber and attaches its public key. In this case, everybody can check who created this commitment\nand which epoch this commitment relates to.\n\nSubsequently, an elector sends its commitment to other electors, so eventually each elector collects\ncommitments from all other electors.\n\n**Note:** these commitments are put into the block, that is, they become a part of the blockchain.\n\n#### Reveal Phase\n\nThe reveal phase is where an elector sends an “opening”, or special value for opening a commitment.\nA commitment is like a locked box (with a secret in it), and the act of opening involves a key that\nopens the box retrieves the secret.\n\n**Note:** all openings are put into the block, that is, they become a part of the blockchain.\n\n#### Recovery Phase\n\nThe final phase in the process is called the recovery phase.\n\nEventually, an elector has both commitments and openings. Theoretically some electors can be an\nadversary and can publish its commitment but **not** publish its opening.\n\nIn this case, the honest electors can post all shares (mentioned above) to reconstruct the\nsecret. The idea is simple: an election finishes successfully even if some electors are adversaries.\n\nSubsequently, an elector verifies that commitments and openings match, and if so, extracts the\nsecrets from the commitments and forms a seed (randomly generated byte string) from these secrets.\nSo all electors get the same seed, and it will be used for Follow the Satoshi (FTS) algorithm.\n\n### Follow the Satoshi\n\nAt this moment, electors have the seed (randomness we need). Now they have to select a particular slot\nleaders for the next epoch. This is where the Follow the Satoshi (FTS) algorithm comes into effect:\n\n```\n         +-----+\nSEED --->| FTS |---> ELECTED_SLOT_LEADERS\n         +-----+\n```\n\nTo explain how a slot leader gets selected, think of the smallest, atomic piece\nof value as a coin called “[Lovelace](/glossary/#lovelace)”. Fundamentally, the ledger produces the\ndistribution of coins, and since slot leaders can only be selected from stakeholders distribution of\nstake. FTS is an algorithm that verifiably picks a coin, and when coin owned by stakeholder `S` selected,\n`S` become a slot leader. It is clear that the more coins `S` has, the higher the probability that one\nof his coins will be picked.\n\nThe reason why it is called “Follow the Satoshi” is that in bitcoin, an atomic piece of currency\nis called “Satoshi”, honoring Satoshi Nakamoto, the creator of bitcoin. \n\n## Honest Majority\n\nThe fundamental assumption of a protocol is known as **honest majority**. This means that\nparticipants owning at least 50% + 1 of the total stake are honest ones. In this\ncase we can **prove** that adversaries cannot break _persistence_ and _liveness_\nof the blockchain. For more information see the [paper](/glossary/#paper) (pages 2 and 3).\n",
        "type": "MarkdownRemark",
        "contentDigest": "f6a80329c27187609a9778adde581801",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "doc_title": "Ouroboros Proof of Stake Algorithm",
        "path": "/en/cardano/ouroboros-proof-of-stake-algorithm/",
        "group": "cardano",
        "visible": true,
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-01-proof-of-stake.en.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-01-proof-of-stake.en.md absPath of file"
      },
      "excerpt": "<!-- Reviewed at c4c45ce9a7a8f4aa6d88a32829755196a017f6a1 -->\n\n# Ouroboros Proof of Stake Algorithm\n\nThe Ouroboros Proof of Stake (PoS) Algorithm is the most important part of the protocol.\nIt defines the way in which nodes reach consensus about the state of [ledger](/glossary/#ledger).\n\nOuroboros is unique as it is the first blockchain protocol that is based on proof of\nstake and has been scientifically proven as secure.\n\n## Why Proof of Stake?\n\nThe most important thing about picking a Proof of Stake (PoS) algorithm over a Proof\nof Work (PoW) algorithm (as adopted by Bitcoin), is the energy consumption\nconsiderations. Running the bitcoin protocol is a very expensive endeavor which uses\nlarge amounts of energy. It is estimated that 3.8 American households can be powered\nfor a day by the energy that is spent to generate one bitcoin transaction. These energy\nrequirements for running the bitcoin protocol continue to grow as more and more bitcoin\nminers sink money into mining. In addition, more energy is needed as the difficulty\nof the problems that their computers or mining rigs, encounter increases. This is why\nresearchers have investigated alternative ways to reach consensus — such as using the\nso-called BFT (Byzantine Fault Tolerant), consensus algorithms and PoS algorithms.\n\n## What is Proof of Stake?\n\nProof of Stake is a novel approach to block generation. The core idea of Proof of Stake\nis that instead of wasting electricity on cracking computationally heavy problems, a node\nis selected to generate (or “mint”) a new block with a probability proportional to the\namount of coins this node has. If a node has positive (> 0) stake, it is called a “stakeholder”.\nIf a node eventually becomes chosen to mint a new block, it is called a “slot leader”.\n",
      "rawMarkdownBody": "<!-- Reviewed at c4c45ce9a7a8f4aa6d88a32829755196a017f6a1 -->\n\n# Ouroboros Proof of Stake Algorithm\n\nThe Ouroboros Proof of Stake (PoS) Algorithm is the most important part of the protocol.\nIt defines the way in which nodes reach consensus about the state of [ledger](/glossary/#ledger).\n\nOuroboros is unique as it is the first blockchain protocol that is based on proof of\nstake and has been scientifically proven as secure.\n\n## Why Proof of Stake?\n\nThe most important thing about picking a Proof of Stake (PoS) algorithm over a Proof\nof Work (PoW) algorithm (as adopted by Bitcoin), is the energy consumption\nconsiderations. Running the bitcoin protocol is a very expensive endeavor which uses\nlarge amounts of energy. It is estimated that 3.8 American households can be powered\nfor a day by the energy that is spent to generate one bitcoin transaction. These energy\nrequirements for running the bitcoin protocol continue to grow as more and more bitcoin\nminers sink money into mining. In addition, more energy is needed as the difficulty\nof the problems that their computers or mining rigs, encounter increases. This is why\nresearchers have investigated alternative ways to reach consensus — such as using the\nso-called BFT (Byzantine Fault Tolerant), consensus algorithms and PoS algorithms.\n\n## What is Proof of Stake?\n\nProof of Stake is a novel approach to block generation. The core idea of Proof of Stake\nis that instead of wasting electricity on cracking computationally heavy problems, a node\nis selected to generate (or “mint”) a new block with a probability proportional to the\namount of coins this node has. If a node has positive (> 0) stake, it is called a “stakeholder”.\nIf a node eventually becomes chosen to mint a new block, it is called a “slot leader”.\n<!-- end -->\n### Proof\n\nThe “proof” part of “proof of stake” refers to evidence that blocks of\ntransactions are legitimate.\n\n### Stake\n\nWhile “stake” means “the relative value held by addresses on the node”. By “relative\nvalue” we mean “all the total value held by wallets on a particular node divided by\nthe total value in the Cardano SL system”. For more information, please see:\n[Balance and Stake in Cardano SL](/cardano/balance-and-stake/)\n\n## About Slot Leaders\n\nNodes with a positive stake are called stakeholders, and only stakeholders may\nparticipate in running the protocol. Moreover, to be able to generate new blocks\nfor the blockchain, a stakeholder must be elected as a slot leader. The slot leader can\nlisten to transactions announced by other nodes, make a block of those transactions,\nsign this block with its secret key and publish it to the network.\n\nYou can think of a slot leader as a miner in bitcoin, but the above-mentioned consensus\ndefines who will be able to mine, when and how much.\n\n## Epochs and Slots\n\nThe Ouroboros protocol divides the physical time into **epochs**, and each epoch is\ndivided into **slots**. For example:\n\n```\n+----------+----------+-------+----------+--------------------> t\n|  slot 0  |  slot 1  |  ...  |  slot N  |\n\n \\                                      / \\\n  -------------- epoch M ---------------   -- epoch M+1 -- ...\n```\n\n**Note:** a slot is a relatively short period of time (for example, 20 seconds).\n\nEach slot has one and only one leader (slot leader, SL):\n\n```\n+----------+----------+-------+----------+----> t\n|  slot 0  |  slot 1  |  ...  |  slot N  |\n\n    SL 0       SL 1               SL N\n```\n\nThe slot leader has a (sole) right to produce one and only one block during his slot:\n\n```\n  +------+   +------+           +------+\n  | Bl 0 |<--| Bl 1 |<-- ... <--| Bl N |\n  +------+   +------+           +------+\n+----------+----------+-------+----------+----> t\n|  slot 0  |  slot 1  |  ...  |  slot N  |\n\n    SL 0       SL 1               SL N\n```\n\nIt means that the number of slot leaders is strictly equal to the number of slots\nin epoch (let's call this number `N`), so it is impossible to produce more than `N`\nblocks during an epoch.\n\nIf slot leader missed their slot (for example, when offline), the right to produce\na block is lost until they are elected again.\n\n**Note:** One or more slots can remain empty (without generated blocks), but the\nmajority of blocks (at least 50% + 1) **must** be generated during an epoch.\n\n## How Slot Leaders Elections Work\n\nSlot leaders are elected from the group of all stakeholders. Please note that not all\nstakeholders participate in this election, but only ones who have enough stake (for example, 2% of\nthe total stake). This group of stakeholders are known as “electors”.\n\nElectors elect slot leaders for the next epoch during the current epoch. Thus, at the end of epoch\n`N` it is already known who are slot leaders for the epoch `N+1`, and it cannot be\nchanged.\n\nYou can think of this election as a “fair lottery”; anyone from the group of stakeholders can\nbecome a slot leader. However, an important idea of PoS is that the more stake stakeholder has,\nthe more chances one has to be elected as a slot leader. \n\n**Note:** One stakeholder can be elected as a slot leader for more than one slot\nduring the same epoch.\n\n### Multiparty Computation\n\nOne of the fundamental problems of the slot leader election process is its unbiasedness.\nA certain degree of randomness is needed as a base for election, in this case, results of\nthis election are random and fair. So the question is where can this randomness be obtained\nfrom?\n\nA multiparty computation (MPC) approach is used to achieve this randomness where each elector\nindependently performs an action which is called “coin tossing” and after that shares results\nwith other electors. The idea is that results are randomly generated by each elector, but eventually\nthey agree on the same final value.\n\n#### Commitment Phase\n\nFirst of all, an elector generates a secret (or special random value). Next, an elector forms a\n“commitment” which is a message that contains encrypted shares (see an explanation below) and\nproof of secret.\n\nThe next step is when an elector signs this commitment with its secret key, specifies the epoch's\nnumber and attaches its public key. In this case, everybody can check who created this commitment\nand which epoch this commitment relates to.\n\nSubsequently, an elector sends its commitment to other electors, so eventually each elector collects\ncommitments from all other electors.\n\n**Note:** these commitments are put into the block, that is, they become a part of the blockchain.\n\n#### Reveal Phase\n\nThe reveal phase is where an elector sends an “opening”, or special value for opening a commitment.\nA commitment is like a locked box (with a secret in it), and the act of opening involves a key that\nopens the box retrieves the secret.\n\n**Note:** all openings are put into the block, that is, they become a part of the blockchain.\n\n#### Recovery Phase\n\nThe final phase in the process is called the recovery phase.\n\nEventually, an elector has both commitments and openings. Theoretically some electors can be an\nadversary and can publish its commitment but **not** publish its opening.\n\nIn this case, the honest electors can post all shares (mentioned above) to reconstruct the\nsecret. The idea is simple: an election finishes successfully even if some electors are adversaries.\n\nSubsequently, an elector verifies that commitments and openings match, and if so, extracts the\nsecrets from the commitments and forms a seed (randomly generated byte string) from these secrets.\nSo all electors get the same seed, and it will be used for Follow the Satoshi (FTS) algorithm.\n\n### Follow the Satoshi\n\nAt this moment, electors have the seed (randomness we need). Now they have to select a particular slot\nleaders for the next epoch. This is where the Follow the Satoshi (FTS) algorithm comes into effect:\n\n```\n         +-----+\nSEED --->| FTS |---> ELECTED_SLOT_LEADERS\n         +-----+\n```\n\nTo explain how a slot leader gets selected, think of the smallest, atomic piece\nof value as a coin called “[Lovelace](/glossary/#lovelace)”. Fundamentally, the ledger produces the\ndistribution of coins, and since slot leaders can only be selected from stakeholders distribution of\nstake. FTS is an algorithm that verifiably picks a coin, and when coin owned by stakeholder `S` selected,\n`S` become a slot leader. It is clear that the more coins `S` has, the higher the probability that one\nof his coins will be picked.\n\nThe reason why it is called “Follow the Satoshi” is that in bitcoin, an atomic piece of currency\nis called “Satoshi”, honoring Satoshi Nakamoto, the creator of bitcoin. \n\n## Honest Majority\n\nThe fundamental assumption of a protocol is known as **honest majority**. This means that\nparticipants owning at least 50% + 1 of the total stake are honest ones. In this\ncase we can **prove** that adversaries cannot break _persistence_ and _liveness_\nof the blockchain. For more information see the [paper](/glossary/#paper) (pages 2 and 3).\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-01-proof-of-stake.en.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-10-transactions.en.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-10-transactions.en.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-10-transactions.en.md absPath of file",
      "internal": {
        "content": "---\ndoc_title: Transactions\npath: /en/cardano/transactions/\ngroup: cardano\nlanguage: en\nlabel: docs\n---\n<!-- Reviewed at a6a1cdf72c7e167a13f500c0679c01fe4cfa0ca8 -->\n\n# Transactions in Cardano SL\n\n## Overview\n\nA transaction (*tx*) is a special data which represents the *act* of the value\ntransferring between nodes (from the user's point of view, transferring between\nwallets). Thus, when the user *Alice* sends money to the user *Bob*, the new\ntransaction emerges. Let's call this transaction `Tx1`, the node under *Alice*'\nwallet `N1`, and the node under *Bob*'s wallet `N2`.\n\nThus, the node `N1` does the following steps:\n\n1.  Creating transaction `Tx1` and signs it with its private key.\n2.  Sending it to all known nodes (i.e. neighbors).\n3.  Saving it in its local data.\n\nEach of `N1`'s neighbors sends `Tx1` transaction to its neighbors and so on, and\nsome slot leader will store this transaction in some block in the ledger. Please\nnote that if the network is under high load, it may take a lot of time for\ntransaction to be actually added to the block.\n<!-- end -->\n## Design\n\nEach transaction contains a list of *inputs* and a list of *outputs*; outputs of\nthe transaction `Tx0` can be used as inputs of the other transaction `Tx1`, and\nso on:\n\n                Tx0                           Tx1\n      +----------------------+      +----------------------+\n      |                      |      |                      |\n      |  Inputs     Outputs  |      |  Inputs     Outputs  |\n      | +------+   +-------+ |      | +------+   +-------+ |\n      | | In0  |   | Out0  + |      | | In0  |   | Out0  | |\n      | +------+   +-------+ |      | +------+   +-------+ |\n      | | In1  |   | Out1  | |      | | In1  |   | Out1  | |\n      | +------+   +-------+ |      | +------+   +-------+ |\n      | | ...  |   | ...   | |      | | ..   |   | ...   | |\n      | +------+   +-------+ |      | +------+   +-------+ |\n      | | InN  |   | OutM  | |      | | InN  |   | OutM  | |\n      | +------+   +-------+ |      | +------+   +-------+ |\n      |                      |      |                      |\n      +----------------------+      +----------------------+     ...\n\nInputs and outputs carry information about *money flow*: inputs inform where the\nmoney came from, and outputs inform where the money comes to. Please notice that\nthere's `N` and `M`, because the actual number of inputs and outputs can be\ndifferent.\n\nThus, each input contains:\n\n1.  An ID of transaction `TxN`, whose output is used for this input. Transaction\n    ID is a BLAKE2b-256 hash of the transaction, something like\n    `f9bcbe752aee4512457f1fd350200cf870906b7e6e836688c9a3779645c86c01`.\n2.  An index of the using output in `TxN`'s outputs.\n\nEach output contains:\n\n1.  An address of the node `N` we want to send a value to. An address is a\n    BLAKE2b-224 hash of the hash of the public key of the `N` node, something\n    like `1fsAhhf4E1LQDB8agSds8teuD4E7U8JsRESngEX52kinBhi`. Please read about\n    [Addresses in Cardano SL](/cardano/addresses/) for more info.\n2.  Amount of money we want to send. This value is 64-bit unsigned integer with\n    maximum value `45000000000000000`.\n\nFor example:\n\n      Tx 891971a4cc31e32..                           Tx f9bcbe752aee4512..\n    ------------------------+           +----------------------------------------------+\n    \\                       |           |                                              |\n    /        Outputs        |           |       Inputs                  Outputs        |\n    \\  +------------------+ |           | +-----------------+     +------------------+ |\n    /  | Out0             | |           | | In0             |     | Out0             | |\n    \\  | +--------------+ | |           | | +-------------+ |     | +--------------+ | |\n    /  | | Value        | | |           | | | Tx id       | |     | | Value        | | |\n    \\  | | 100 ADA      | | |           | | | 891971a4c.. | |     | | 100 ADA      | | |\n    /  | +--------------+------->>  ------>>+-------------+ |     | +--------------+------->>\n    \\  | | Node address | | |           | | | Out index   | |     | | Node address | | |\n    /  | | a00e4bb2..   | | |           | | | 0           | |     | | 88ca7f79..   | | |\n    \\  | +--------------+ | |           | | +-------------+ |     | +--------------+ | |\n    /  | ...              | |           | | ...             |     | ...              | |\n    \\  +------------------+ |           | +-----------------+     +------------------+ |\n    /                       |           |                                              |\n    ------------------------+           +----------------------------------------------+\n\nNode `a00e4bb2..` generates transaction `f9bcbe752aee4512..`, and this\ntransaction informs us that:\n\n1.  We want to send 100 ADA from the current node with address `a00e4bb2..` to\n    the node with address `88ca7f79..`.\n2.  This money corresponds to `0`th output of the previous transaction with an\n    ID `891971a4c..`.\n\n## Verification\n\nAs mentioned above, the transaction's output becomes the input of the other\ntransaction. In this case, we treat such output as *spent transaction output*.\nThus, an output `Out0` of the transaction `891971a4cc31e32..` is a spent output,\nbecause it already is an input of the `f9bcbe752aee4512..` transaction.\n\nBut such spendings do not occur immediately, so an output that *isn't yet* an\ninput of another transaction is called an *unspent transaction output*. Only\nunspent outputs can be used as inputs for other transactions, to prevent\n[double-spending](https://en.bitcoin.it/wiki/Double-spending).\n\nSo every node in the network not only accepts transactions, but also\nverifies them. To do it, every node has to keep track of unspent outputs, it\nallows to validate that inputs in a published transaction are indeed the unspent\noutputs. Actually, all unspent outputs called *utxo*, and this is a part of the\nspecial key-value database called *Global State*.\n\n## Proofs of Transaction Legitimacy\n\nEach transaction in Cardano SL is accompanied by a proof (also called a **witness**)\nthat this transaction is legitimate. Even if the output is an unspent one, we\nhave to prove that we have *a right* to spend it. Since a `TxN` transaction can\nhave many inputs, the witness for it consists of the witnesses of all `TxN`'s\ninputs, and only if all the inputs are legitimate, `TxN` is legitimate too. If a\nparticular transaction isn't legitimate, it will be rejected by the network.\n\nBecause of [two available types of node\naddress](/cardano/addresses/#what-does-an-address-look-like) we use two\ncorresponding versions of the witness: based on *public key* and based on\n*script*.\n\nFor example, the first option works with a public key `PK` and a transaction\nsignature: legitimate input must be signed with a private key corresponding to `PK`.\nSo it's possible to check this signature and either accept that input or reject it.\n\nWitnesses are stored in the blockchain and anybody can see, inspect and\nindependently verify them. But after some time a node may delete old proofs in\norder to save space. The technique of storing transactions separately from their\nproofs is called \"segregated witness\" (you may have heard of it being recently\n[implemented in\nBitcoin](https://bitcoincore.org/en/2016/01/26/segwit-benefits/)). Under this\nscheme, transactions and proofs are stored in two separate places in a block,\nand can be processed independently.\n\n## Stake Distribution\n\nStake distribution is another part of Cardano SL, not directly related to delegation,\nbut one we can exploit for its benefit.\n\nSome addresses have multiple owners, which poses a problem of stake computation as per\nFollow-the-Satoshi each coin should only be counted once towards each stakeholder's stake total.\nUnlike balance (real amount of coins on the balance), stake gives user power to control different\nalgorithm parts: being the slot leader, voting in Update system, taking part in MPC/SSC.\n\nStake distribution is a value associated with each address. Technically stake distribution is a value\nwhich is a part of address' attributes. This value corresponds to one of three different cases:\n\n1.  Bootstrap era distribution. This is a special value which is mandatory in Bootstrap era, but it can be used\n    after Bootstrap era as well.\n2.  Single key distribution, which means that all stake will go to the given stakeholder.\n    In this case distribution contains stakeholder's identifier.\n3.  Multiple key distribution, which means that stake will go to the multiple stakeholders (at least two).\n    In this case distribution contains pairs \"stakeholder's identifier - portion of an output\".\n    Transaction's output has a value, portion of this value is a stake.\n\nStake distributions are considered by both [slot-leader election process](https://cardanodocs.com/technical/leader-selection/)\nand Richmen Computations.\n\nThis feature can be used in similar way to [delegation](https://cardanodocs.com/technical/delegation/), but there\nare differences:\n\n1.  There is no certificate(s): to revoke stake delegation `A` has to move funds, providing\n    different stake distribution.\n2.  The portion of `A`'s stake can be delegated via distribution. On the contrary, delegation\n    requires you to delegate all funds of whole address at once.\n",
        "type": "MarkdownRemark",
        "contentDigest": "664b579a4a002eb671add8af93cb0d3b",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "doc_title": "Transactions",
        "path": "/en/cardano/transactions/",
        "group": "cardano",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-10-transactions.en.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-10-transactions.en.md absPath of file"
      },
      "excerpt": "<!-- Reviewed at a6a1cdf72c7e167a13f500c0679c01fe4cfa0ca8 -->\n\n# Transactions in Cardano SL\n\n## Overview\n\nA transaction (*tx*) is a special data which represents the *act* of the value\ntransferring between nodes (from the user's point of view, transferring between\nwallets). Thus, when the user *Alice* sends money to the user *Bob*, the new\ntransaction emerges. Let's call this transaction `Tx1`, the node under *Alice*'\nwallet `N1`, and the node under *Bob*'s wallet `N2`.\n\nThus, the node `N1` does the following steps:\n\n1.  Creating transaction `Tx1` and signs it with its private key.\n2.  Sending it to all known nodes (i.e. neighbors).\n3.  Saving it in its local data.\n\nEach of `N1`'s neighbors sends `Tx1` transaction to its neighbors and so on, and\nsome slot leader will store this transaction in some block in the ledger. Please\nnote that if the network is under high load, it may take a lot of time for\ntransaction to be actually added to the block.\n",
      "rawMarkdownBody": "<!-- Reviewed at a6a1cdf72c7e167a13f500c0679c01fe4cfa0ca8 -->\n\n# Transactions in Cardano SL\n\n## Overview\n\nA transaction (*tx*) is a special data which represents the *act* of the value\ntransferring between nodes (from the user's point of view, transferring between\nwallets). Thus, when the user *Alice* sends money to the user *Bob*, the new\ntransaction emerges. Let's call this transaction `Tx1`, the node under *Alice*'\nwallet `N1`, and the node under *Bob*'s wallet `N2`.\n\nThus, the node `N1` does the following steps:\n\n1.  Creating transaction `Tx1` and signs it with its private key.\n2.  Sending it to all known nodes (i.e. neighbors).\n3.  Saving it in its local data.\n\nEach of `N1`'s neighbors sends `Tx1` transaction to its neighbors and so on, and\nsome slot leader will store this transaction in some block in the ledger. Please\nnote that if the network is under high load, it may take a lot of time for\ntransaction to be actually added to the block.\n<!-- end -->\n## Design\n\nEach transaction contains a list of *inputs* and a list of *outputs*; outputs of\nthe transaction `Tx0` can be used as inputs of the other transaction `Tx1`, and\nso on:\n\n                Tx0                           Tx1\n      +----------------------+      +----------------------+\n      |                      |      |                      |\n      |  Inputs     Outputs  |      |  Inputs     Outputs  |\n      | +------+   +-------+ |      | +------+   +-------+ |\n      | | In0  |   | Out0  + |      | | In0  |   | Out0  | |\n      | +------+   +-------+ |      | +------+   +-------+ |\n      | | In1  |   | Out1  | |      | | In1  |   | Out1  | |\n      | +------+   +-------+ |      | +------+   +-------+ |\n      | | ...  |   | ...   | |      | | ..   |   | ...   | |\n      | +------+   +-------+ |      | +------+   +-------+ |\n      | | InN  |   | OutM  | |      | | InN  |   | OutM  | |\n      | +------+   +-------+ |      | +------+   +-------+ |\n      |                      |      |                      |\n      +----------------------+      +----------------------+     ...\n\nInputs and outputs carry information about *money flow*: inputs inform where the\nmoney came from, and outputs inform where the money comes to. Please notice that\nthere's `N` and `M`, because the actual number of inputs and outputs can be\ndifferent.\n\nThus, each input contains:\n\n1.  An ID of transaction `TxN`, whose output is used for this input. Transaction\n    ID is a BLAKE2b-256 hash of the transaction, something like\n    `f9bcbe752aee4512457f1fd350200cf870906b7e6e836688c9a3779645c86c01`.\n2.  An index of the using output in `TxN`'s outputs.\n\nEach output contains:\n\n1.  An address of the node `N` we want to send a value to. An address is a\n    BLAKE2b-224 hash of the hash of the public key of the `N` node, something\n    like `1fsAhhf4E1LQDB8agSds8teuD4E7U8JsRESngEX52kinBhi`. Please read about\n    [Addresses in Cardano SL](/cardano/addresses/) for more info.\n2.  Amount of money we want to send. This value is 64-bit unsigned integer with\n    maximum value `45000000000000000`.\n\nFor example:\n\n      Tx 891971a4cc31e32..                           Tx f9bcbe752aee4512..\n    ------------------------+           +----------------------------------------------+\n    \\                       |           |                                              |\n    /        Outputs        |           |       Inputs                  Outputs        |\n    \\  +------------------+ |           | +-----------------+     +------------------+ |\n    /  | Out0             | |           | | In0             |     | Out0             | |\n    \\  | +--------------+ | |           | | +-------------+ |     | +--------------+ | |\n    /  | | Value        | | |           | | | Tx id       | |     | | Value        | | |\n    \\  | | 100 ADA      | | |           | | | 891971a4c.. | |     | | 100 ADA      | | |\n    /  | +--------------+------->>  ------>>+-------------+ |     | +--------------+------->>\n    \\  | | Node address | | |           | | | Out index   | |     | | Node address | | |\n    /  | | a00e4bb2..   | | |           | | | 0           | |     | | 88ca7f79..   | | |\n    \\  | +--------------+ | |           | | +-------------+ |     | +--------------+ | |\n    /  | ...              | |           | | ...             |     | ...              | |\n    \\  +------------------+ |           | +-----------------+     +------------------+ |\n    /                       |           |                                              |\n    ------------------------+           +----------------------------------------------+\n\nNode `a00e4bb2..` generates transaction `f9bcbe752aee4512..`, and this\ntransaction informs us that:\n\n1.  We want to send 100 ADA from the current node with address `a00e4bb2..` to\n    the node with address `88ca7f79..`.\n2.  This money corresponds to `0`th output of the previous transaction with an\n    ID `891971a4c..`.\n\n## Verification\n\nAs mentioned above, the transaction's output becomes the input of the other\ntransaction. In this case, we treat such output as *spent transaction output*.\nThus, an output `Out0` of the transaction `891971a4cc31e32..` is a spent output,\nbecause it already is an input of the `f9bcbe752aee4512..` transaction.\n\nBut such spendings do not occur immediately, so an output that *isn't yet* an\ninput of another transaction is called an *unspent transaction output*. Only\nunspent outputs can be used as inputs for other transactions, to prevent\n[double-spending](https://en.bitcoin.it/wiki/Double-spending).\n\nSo every node in the network not only accepts transactions, but also\nverifies them. To do it, every node has to keep track of unspent outputs, it\nallows to validate that inputs in a published transaction are indeed the unspent\noutputs. Actually, all unspent outputs called *utxo*, and this is a part of the\nspecial key-value database called *Global State*.\n\n## Proofs of Transaction Legitimacy\n\nEach transaction in Cardano SL is accompanied by a proof (also called a **witness**)\nthat this transaction is legitimate. Even if the output is an unspent one, we\nhave to prove that we have *a right* to spend it. Since a `TxN` transaction can\nhave many inputs, the witness for it consists of the witnesses of all `TxN`'s\ninputs, and only if all the inputs are legitimate, `TxN` is legitimate too. If a\nparticular transaction isn't legitimate, it will be rejected by the network.\n\nBecause of [two available types of node\naddress](/cardano/addresses/#what-does-an-address-look-like) we use two\ncorresponding versions of the witness: based on *public key* and based on\n*script*.\n\nFor example, the first option works with a public key `PK` and a transaction\nsignature: legitimate input must be signed with a private key corresponding to `PK`.\nSo it's possible to check this signature and either accept that input or reject it.\n\nWitnesses are stored in the blockchain and anybody can see, inspect and\nindependently verify them. But after some time a node may delete old proofs in\norder to save space. The technique of storing transactions separately from their\nproofs is called \"segregated witness\" (you may have heard of it being recently\n[implemented in\nBitcoin](https://bitcoincore.org/en/2016/01/26/segwit-benefits/)). Under this\nscheme, transactions and proofs are stored in two separate places in a block,\nand can be processed independently.\n\n## Stake Distribution\n\nStake distribution is another part of Cardano SL, not directly related to delegation,\nbut one we can exploit for its benefit.\n\nSome addresses have multiple owners, which poses a problem of stake computation as per\nFollow-the-Satoshi each coin should only be counted once towards each stakeholder's stake total.\nUnlike balance (real amount of coins on the balance), stake gives user power to control different\nalgorithm parts: being the slot leader, voting in Update system, taking part in MPC/SSC.\n\nStake distribution is a value associated with each address. Technically stake distribution is a value\nwhich is a part of address' attributes. This value corresponds to one of three different cases:\n\n1.  Bootstrap era distribution. This is a special value which is mandatory in Bootstrap era, but it can be used\n    after Bootstrap era as well.\n2.  Single key distribution, which means that all stake will go to the given stakeholder.\n    In this case distribution contains stakeholder's identifier.\n3.  Multiple key distribution, which means that stake will go to the multiple stakeholders (at least two).\n    In this case distribution contains pairs \"stakeholder's identifier - portion of an output\".\n    Transaction's output has a value, portion of this value is a stake.\n\nStake distributions are considered by both [slot-leader election process](https://cardanodocs.com/technical/leader-selection/)\nand Richmen Computations.\n\nThis feature can be used in similar way to [delegation](https://cardanodocs.com/technical/delegation/), but there\nare differences:\n\n1.  There is no certificate(s): to revoke stake delegation `A` has to move funds, providing\n    different stake distribution.\n2.  The portion of `A`'s stake can be delegated via distribution. On the contrary, delegation\n    requires you to delegate all funds of whole address at once.\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-10-transactions.en.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-16-updating.en.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-16-updating.en.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-16-updating.en.md absPath of file",
      "internal": {
        "content": "---\ndoc_title: Update Mechanism\npath: /en/cardano/update-mechanism/\ngroup: cardano\nvisible: true\nlanguage: en\nlabel: docs\n---\n<!-- Reviewed at a6a1cdf72c7e167a13f500c0679c01fe4cfa0ca8 -->\n<!-- Updated at 6b5eda44e5942599a9781e5ad3f51eb820665b83 -->\n\n# Update Research Overview\n\nIn the Update Mechanism research, we have managed to propose an update system\nthat is capable of producing painless and almost seamless software updates as\nwell as providing stakeholders with an option to vote for hard forks\n(backwards-incompatible protocol updates) without the necessity to introduce any\nnon-protocol-level tools.\n\nWe propose to use stake for voting for soft and hard forks.\n<!-- end -->\n## Update System Model\n\nFor CSL, we decided to add some support for protocol updates at the protocol\nlayer itself. It introduces some overhead to blockchain processing, but has\nseveral important benefits:\n\n1.  For each client implementing the protocol, its latest version from\n    blockchain is known.\n2.  There is no central entity responsible for maintaining or distributing\n    updates, any such update is proposed under implicit or explicit agreement of\n    the majority of stake and then distributed in a decentralized way.\n3.  We do not rely upon clients updating the software on their PCs in time; this\n    is done automatically, and updates are announced directly via the\n    blockchain.\n4.  If any security flaws are detected in some version of the CSL protocol or in\n    some particular implementation, there would be a mechanism to distribute an\n    update rapidly (and still under agreement of the majority of stake).\n\n## Application Update: Sign and Announce\n\nHere we consider ways to update the application securely. Protocol updates are a\nseparate issue which is covered in the relevant section of this document.\n\nFor an update to be applied, its proposal needs be approved first. Update\nproposal can be approved if at least one of two agreements is reached:\n\n1.  **Explicit agreement**: it has positive votes from majority of total stake\n    (i. e. strictly greater than `50%`).\n2.  **Implicit agreement**: it has positive votes from more stake than negative\n    votes ﻿⁠⁠⁠and﻿⁠⁠⁠ it has been in blockchain for at least `U` slots.\n\nThis approach seems to fit naturally into the CSL model, as in a PoS\ncryptocurrency every stakeholder is responsible for maintaining the system\nproportionally to the relative size of their stake, and the blockchain is\nmaintained via consensus among stakeholders.\n\nSoftware updates are a part of this maintenance process too, so the stakeholders\nshould agree on whether to consider this update trusted.\n\n### Implicit Agreement\n\nThe fact that stakeholders are responsible for system updates does not restrict\nus to a system where every single update requires a signature from the majority\nof stake. We can introduce the concept of an **implicit agreement**.\n\nAn update has to have at least minimal bound (`updateProposalThd` in \n[configuration.yaml](https://github.com/input-output-hk/cardano-sl/blob/e26ad11397c87ce8b00f2a26d5e237f54d6ea90a/lib/configuration.yaml).) \nof the stake signatures to be published on\nthe blockchain. It is not enough for stakeholders to sign the update — they\nshould vote either for or against it.\n\n### Incorporation of Alternative Clients\n\nIOHK will maintain a single official client. But there is also room for\nthird-party alternative clients maintained by the community. One requires enough\ncollected signatures from stakeholders to publish their system update, which may\nbe not an «update», but a different client developed from scratch, or a fork of\nthe official client. As long as this update has enough signatures from\nstakeholders, the network considers it trusted, and it is updated via the same\nmechanisms as the official client.\n\n## Application Update: Deliver and Apply\n\nА list of HTTP mirrors ran by IOHK shall be sufficient for a start.\n\nIn process of time, we plan to maintain a Bittorrent-based or Bittorrent-like\nsolution to distribute updates. In general, P2P update distribution is a crucial\nbusiness requirement due to legal concerns. It is to be decided which\nBittorrent-like solution particular we will use.\n\nAlso, it’s interesting to note that the update itself does not require a secure\nand trusted channel to be used for delivery, as it is signed with some known in\nadvance and trusted key (or set of keys).\n\nApplication updates are prepared with\n[bsdiff](https://github.com/mendsley/bsdiff) and applied either directly or via\nan installer. We're considering migrating to\n[courgette](http://dev.chromium.org/developers/design-documents/software-updates-courgette)\nin the future.\n\n## Protocol Update\n\nFirst, we need to distinguish hard and soft protocol updates.\n\nA soft fork proposes modifying blockchain consensus rules so that the new\nversion blocks are still compatible with old version clients. A hard fork is one\nthat doesn’t maintain backward compatibility with the previous version.\n\n[BIP-99](https://github.com/bitcoin/bips/blob/ed283b05b332b85b6fd683be3a5d73fab6c15554/bip-0099.mediawiki)\nprovides excellent criteria to distinguish between these two fork types:\n\n-   A **soft fork** introduces new rules, or restrictions, on blocks. That way,\n    everything that was previously invalid remains invalid, while some blocks\n    that would have been previously considered valid become invalid.\n-   A **hard fork** is a fork that makes previously invalid blocks valid.\n\nSoft forks have some deployment advantages like backward compatibility, and they\ndon't require everyone's consensus, as the stake majority of users can impose\nthe new rules. By contrast, hard forks require all users to upgrade.\n\nIn theory, a hard fork may lead to a situation when a network splits into two\nparts, each maintaining a separate chain: one from the nodes that adopted the\nlatest system update, and another from the nodes that rejected to do that. This\nmeans some blocks from the first part are considered invalid by the other part,\nand vice versa.\n\nWe define **protocol version** as a tuple `(Maj, Min, Alt)`:\n\n-   Major version (2 bytes): to be changed rarely, changes are not\n    backward-compatible and would produce a hard fork.\n-   Minor version (2 bytes): integer to be adjusted for each update.\n    -   Changes should be backward-compatible in a sense that a block generated\n        by the new version shall be somehow accepted by old version.\n    -   A particular block may contain addresses of unknown type. For each case\n        like this, a concise workaround should be found in order not to affect\n        stability and correctness of the system.\n-   Alt version (1 byte): integer to manage several simultaneous protocol update\n    proposals.\n\nThe protocol version is to be announced in the application update, and is to be\nput later into each block created by updated software.\n\nA major version change triggers a hard fork in the future.\n\nA minor version change notifies the network that the subsequent application\nupdate modifies the protocol managed by a soft fork.\n\nAlt version is a marker of new features. It allows independent developers to\nintroduce multiple changes to the protocol simultaneously. For example, if one\nvendor decides to introduce feature X via a soft fork, and another proposes\nfeature Y (also via a soft fork), their software will be issuing blocks with\nversions `a.b.X` and `a.b.Y`, which can coexist in the blockchain. However, only\none will eventually be adopted.\n\n## Soft Fork Updates\n\nThere is a thin line between what we can do within a soft fork and what we\ncannot:\n\n1.  An old version of the client should always find recent blocks valid. (This\n    is what\n    [BIP-99](https://github.com/bitcoin/bips/blob/ed283b05b332b85b6fd683be3a5d73fab6c15554/bip-0099.mediawiki)\n    calls \"everything invalid remains invalid\").\n2.  Some blocks issued by an old version of the client may be considered invalid\n    by a newer version.\n\nObviously, imposing rule 2 as it is may cause the network to be split into two\nparts: a stakeholder with a stake large enough could update and maintain their\nown chain, rejecting blocks from others, but others would be still able to\nmaintain their chain, rejecting blocks from this stakeholder (since he does not\nhave a majority of stake, and therefore cannot catch up with the rest of the\ncrowd, so his chain is shorter). A simple resolution rule could go like this: if\n95% of the latest 2016 blocks have a newer block version, the blocks with the\nolder version are rejected.\n\n**NOTE**: **block version** here and later has the same meaning as the\n**protocol version**.\n\nIt may seem unclear why we would like to make some block version invalid at some\nmoment. The key insight here is that a new feature is actually a restriction on\nwhat we had had previously. For example, currently we have plain old\ntransactions which may contain either PublicKey-based addresses or Script-based\nones. Then at some point we decide to include a third address type (no matter\nwhat its purpose is). Which strategy do we need for verifying a block with a\ntransaction with an address of unknown type? Obviously the only option is not\nverifying this address.\n\nThen imagine somebody proposing a transaction to this address, possibly doing\nthat with an intention to secure funds from being spent until some conditions\nare met — and then watching them being spent in some other transaction in a\nblock with version 1. This is the point. We cannot make use of a restriction\nwithout waiting for the network to start assuming the old version to be\ndeprecated (since we can only start rejecting blocks when their version is\ndeprecated).\n\nWe also cannot bluntly accept all blocks with a version that is higher than the\none currently adopted, since in our implementation every block has a special field\nwhich is used for storing auxiliary information. An attacker can claim she uses a\nhigher version of the protocol and generate a block whose `attributes` are polluted\nwith meaningless keys. If we accept it, it will bloat the blockchain.\n\nThis is the motivation for the logic described below.\n\nIn our implementation, a block version can exist in the following states:\n\n-   **Adopted**, when the soft fork resolution rule (see below) for a confirmed\n    block version is triggered.\n-   **Confirmed**, when there is an update proposal that contains a confirmed\n    version of the software and this block version. Note that \"confirmed version\n    of the software\" is a technical term defined\n    [elsewhere](/cardano/update-mechanism/#soft-fork-updates). If there are\n    multiple block versions where corresponding software is confirmed, but these\n    versions aren't adopted, we call them **competing**. For instance, there\n    might be versions `2.0.0`, `2.0.1`, `1.2.0`, `1.2.1`, `1.1.1` and `1.1.2`,\n    with the last adopted version being `1.1.3`. In this case the versions that\n    are competing are `2.0.0`, `2.0.1`, `1.2.0` and `1.2.1`. The older versions\n    `1.1.1` and `1.1.2` aren't competing, because `1.1.3` is already adopted.\n-   Everything else. For example, a new block version is proposed, but the\n    software version isn't confirmed yet. There is no special name for this\n    state.\n\nThe soft fork resolution rule works as follows:\n\n-   Informally, a block version becomes *adopted* when a certain percentage of\n    stake (75% in the current implementation, but this may be different in the\n    mainnet) creates a block with version `X`.\n-   Formally, we do the following. First, recall that by design, our system does\n    not allow rollbacks of blockchain deeper than a certain fixed global\n    threshold `k`, which allows to define *stable* stake for each stakeholder as\n    their stake `k` blocks ago. When we process genesis block for epoch `e`, we\n    compute the stable stake of all leaders of all slots from the very beginning\n    of the network's existence. For each block with version `X` that is\n    currently *competing*, we take all created *stable* blocks with version `X`,\n    take set of all leaders of these blocks and accumulate their stakes. If one\n    of versions has ≥ 75%, it gets *adopted*. If more than one version has ≥\n    75%, we take one of them deterministically.\n\nNote that adopted block version can't be changed during epoch (only between\nepochs), so all blocks in an epoch are verified according to the same rules\n(because rules are defined by adopted block version). But it's wrong to assume\nthat *all* blocks in an epoch have the same block version. After block version\nis adopted, another block version can become competing and some nodes may create\nblocks with this new version.\n\nSo, gathering everything up:\n\n1.  Once the update is confirmed, the protocol version (say `0.5.0`) can be\n    used.\n2.  Behavior of nodes that *have* been updated (i.e. can issue and validate\n    blocks with the newer version):\n    1.  Before the soft fork is resolved (i.e. before the resolution rule is\n        triggered), issue blocks with the new version `0.5.0`, but do not\n        include any new `attributes` (if there are any). Treat and validate\n        blocks of version `0.5.0` as blocks of version `0.4.0`.\n    2.  Once the soft fork is resolved, issue and validate blocks per version\n        `0.5.0`, including the new `attributes`.\n3.  Behavior of nodes that *have not* been updated (i.e. cannot issue and\n    validate blocks with the newer version):\n    1.  Before the soft fork is resolved, issue and validate blocks per version\n        `0.4.0`. Among other things, a block is not accepted if it contains\n        unknown `attributes`.\n    2.  Once the soft fork is resolved, start accepting all blocks with version\n        `0.5.0`, including the ones with unknown `attributes`. Keep validating\n        them as version `0.4.0`.\n\n## Hard Fork Updates\n\nHard forks are resolved using modified proof of burn. As it is not implemented\nyet, we omit this section from this document and will publish it as a separate\ndocument.\n",
        "type": "MarkdownRemark",
        "contentDigest": "6807c5feac00c1d7e9cc350f13cf366c",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "doc_title": "Update Mechanism",
        "path": "/en/cardano/update-mechanism/",
        "group": "cardano",
        "visible": true,
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-16-updating.en.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-16-updating.en.md absPath of file"
      },
      "excerpt": "<!-- Reviewed at a6a1cdf72c7e167a13f500c0679c01fe4cfa0ca8 -->\n<!-- Updated at 6b5eda44e5942599a9781e5ad3f51eb820665b83 -->\n\n# Update Research Overview\n\nIn the Update Mechanism research, we have managed to propose an update system\nthat is capable of producing painless and almost seamless software updates as\nwell as providing stakeholders with an option to vote for hard forks\n(backwards-incompatible protocol updates) without the necessity to introduce any\nnon-protocol-level tools.\n\nWe propose to use stake for voting for soft and hard forks.\n",
      "rawMarkdownBody": "<!-- Reviewed at a6a1cdf72c7e167a13f500c0679c01fe4cfa0ca8 -->\n<!-- Updated at 6b5eda44e5942599a9781e5ad3f51eb820665b83 -->\n\n# Update Research Overview\n\nIn the Update Mechanism research, we have managed to propose an update system\nthat is capable of producing painless and almost seamless software updates as\nwell as providing stakeholders with an option to vote for hard forks\n(backwards-incompatible protocol updates) without the necessity to introduce any\nnon-protocol-level tools.\n\nWe propose to use stake for voting for soft and hard forks.\n<!-- end -->\n## Update System Model\n\nFor CSL, we decided to add some support for protocol updates at the protocol\nlayer itself. It introduces some overhead to blockchain processing, but has\nseveral important benefits:\n\n1.  For each client implementing the protocol, its latest version from\n    blockchain is known.\n2.  There is no central entity responsible for maintaining or distributing\n    updates, any such update is proposed under implicit or explicit agreement of\n    the majority of stake and then distributed in a decentralized way.\n3.  We do not rely upon clients updating the software on their PCs in time; this\n    is done automatically, and updates are announced directly via the\n    blockchain.\n4.  If any security flaws are detected in some version of the CSL protocol or in\n    some particular implementation, there would be a mechanism to distribute an\n    update rapidly (and still under agreement of the majority of stake).\n\n## Application Update: Sign and Announce\n\nHere we consider ways to update the application securely. Protocol updates are a\nseparate issue which is covered in the relevant section of this document.\n\nFor an update to be applied, its proposal needs be approved first. Update\nproposal can be approved if at least one of two agreements is reached:\n\n1.  **Explicit agreement**: it has positive votes from majority of total stake\n    (i. e. strictly greater than `50%`).\n2.  **Implicit agreement**: it has positive votes from more stake than negative\n    votes ﻿⁠⁠⁠and﻿⁠⁠⁠ it has been in blockchain for at least `U` slots.\n\nThis approach seems to fit naturally into the CSL model, as in a PoS\ncryptocurrency every stakeholder is responsible for maintaining the system\nproportionally to the relative size of their stake, and the blockchain is\nmaintained via consensus among stakeholders.\n\nSoftware updates are a part of this maintenance process too, so the stakeholders\nshould agree on whether to consider this update trusted.\n\n### Implicit Agreement\n\nThe fact that stakeholders are responsible for system updates does not restrict\nus to a system where every single update requires a signature from the majority\nof stake. We can introduce the concept of an **implicit agreement**.\n\nAn update has to have at least minimal bound (`updateProposalThd` in \n[configuration.yaml](https://github.com/input-output-hk/cardano-sl/blob/e26ad11397c87ce8b00f2a26d5e237f54d6ea90a/lib/configuration.yaml).) \nof the stake signatures to be published on\nthe blockchain. It is not enough for stakeholders to sign the update — they\nshould vote either for or against it.\n\n### Incorporation of Alternative Clients\n\nIOHK will maintain a single official client. But there is also room for\nthird-party alternative clients maintained by the community. One requires enough\ncollected signatures from stakeholders to publish their system update, which may\nbe not an «update», but a different client developed from scratch, or a fork of\nthe official client. As long as this update has enough signatures from\nstakeholders, the network considers it trusted, and it is updated via the same\nmechanisms as the official client.\n\n## Application Update: Deliver and Apply\n\nА list of HTTP mirrors ran by IOHK shall be sufficient for a start.\n\nIn process of time, we plan to maintain a Bittorrent-based or Bittorrent-like\nsolution to distribute updates. In general, P2P update distribution is a crucial\nbusiness requirement due to legal concerns. It is to be decided which\nBittorrent-like solution particular we will use.\n\nAlso, it’s interesting to note that the update itself does not require a secure\nand trusted channel to be used for delivery, as it is signed with some known in\nadvance and trusted key (or set of keys).\n\nApplication updates are prepared with\n[bsdiff](https://github.com/mendsley/bsdiff) and applied either directly or via\nan installer. We're considering migrating to\n[courgette](http://dev.chromium.org/developers/design-documents/software-updates-courgette)\nin the future.\n\n## Protocol Update\n\nFirst, we need to distinguish hard and soft protocol updates.\n\nA soft fork proposes modifying blockchain consensus rules so that the new\nversion blocks are still compatible with old version clients. A hard fork is one\nthat doesn’t maintain backward compatibility with the previous version.\n\n[BIP-99](https://github.com/bitcoin/bips/blob/ed283b05b332b85b6fd683be3a5d73fab6c15554/bip-0099.mediawiki)\nprovides excellent criteria to distinguish between these two fork types:\n\n-   A **soft fork** introduces new rules, or restrictions, on blocks. That way,\n    everything that was previously invalid remains invalid, while some blocks\n    that would have been previously considered valid become invalid.\n-   A **hard fork** is a fork that makes previously invalid blocks valid.\n\nSoft forks have some deployment advantages like backward compatibility, and they\ndon't require everyone's consensus, as the stake majority of users can impose\nthe new rules. By contrast, hard forks require all users to upgrade.\n\nIn theory, a hard fork may lead to a situation when a network splits into two\nparts, each maintaining a separate chain: one from the nodes that adopted the\nlatest system update, and another from the nodes that rejected to do that. This\nmeans some blocks from the first part are considered invalid by the other part,\nand vice versa.\n\nWe define **protocol version** as a tuple `(Maj, Min, Alt)`:\n\n-   Major version (2 bytes): to be changed rarely, changes are not\n    backward-compatible and would produce a hard fork.\n-   Minor version (2 bytes): integer to be adjusted for each update.\n    -   Changes should be backward-compatible in a sense that a block generated\n        by the new version shall be somehow accepted by old version.\n    -   A particular block may contain addresses of unknown type. For each case\n        like this, a concise workaround should be found in order not to affect\n        stability and correctness of the system.\n-   Alt version (1 byte): integer to manage several simultaneous protocol update\n    proposals.\n\nThe protocol version is to be announced in the application update, and is to be\nput later into each block created by updated software.\n\nA major version change triggers a hard fork in the future.\n\nA minor version change notifies the network that the subsequent application\nupdate modifies the protocol managed by a soft fork.\n\nAlt version is a marker of new features. It allows independent developers to\nintroduce multiple changes to the protocol simultaneously. For example, if one\nvendor decides to introduce feature X via a soft fork, and another proposes\nfeature Y (also via a soft fork), their software will be issuing blocks with\nversions `a.b.X` and `a.b.Y`, which can coexist in the blockchain. However, only\none will eventually be adopted.\n\n## Soft Fork Updates\n\nThere is a thin line between what we can do within a soft fork and what we\ncannot:\n\n1.  An old version of the client should always find recent blocks valid. (This\n    is what\n    [BIP-99](https://github.com/bitcoin/bips/blob/ed283b05b332b85b6fd683be3a5d73fab6c15554/bip-0099.mediawiki)\n    calls \"everything invalid remains invalid\").\n2.  Some blocks issued by an old version of the client may be considered invalid\n    by a newer version.\n\nObviously, imposing rule 2 as it is may cause the network to be split into two\nparts: a stakeholder with a stake large enough could update and maintain their\nown chain, rejecting blocks from others, but others would be still able to\nmaintain their chain, rejecting blocks from this stakeholder (since he does not\nhave a majority of stake, and therefore cannot catch up with the rest of the\ncrowd, so his chain is shorter). A simple resolution rule could go like this: if\n95% of the latest 2016 blocks have a newer block version, the blocks with the\nolder version are rejected.\n\n**NOTE**: **block version** here and later has the same meaning as the\n**protocol version**.\n\nIt may seem unclear why we would like to make some block version invalid at some\nmoment. The key insight here is that a new feature is actually a restriction on\nwhat we had had previously. For example, currently we have plain old\ntransactions which may contain either PublicKey-based addresses or Script-based\nones. Then at some point we decide to include a third address type (no matter\nwhat its purpose is). Which strategy do we need for verifying a block with a\ntransaction with an address of unknown type? Obviously the only option is not\nverifying this address.\n\nThen imagine somebody proposing a transaction to this address, possibly doing\nthat with an intention to secure funds from being spent until some conditions\nare met — and then watching them being spent in some other transaction in a\nblock with version 1. This is the point. We cannot make use of a restriction\nwithout waiting for the network to start assuming the old version to be\ndeprecated (since we can only start rejecting blocks when their version is\ndeprecated).\n\nWe also cannot bluntly accept all blocks with a version that is higher than the\none currently adopted, since in our implementation every block has a special field\nwhich is used for storing auxiliary information. An attacker can claim she uses a\nhigher version of the protocol and generate a block whose `attributes` are polluted\nwith meaningless keys. If we accept it, it will bloat the blockchain.\n\nThis is the motivation for the logic described below.\n\nIn our implementation, a block version can exist in the following states:\n\n-   **Adopted**, when the soft fork resolution rule (see below) for a confirmed\n    block version is triggered.\n-   **Confirmed**, when there is an update proposal that contains a confirmed\n    version of the software and this block version. Note that \"confirmed version\n    of the software\" is a technical term defined\n    [elsewhere](/cardano/update-mechanism/#soft-fork-updates). If there are\n    multiple block versions where corresponding software is confirmed, but these\n    versions aren't adopted, we call them **competing**. For instance, there\n    might be versions `2.0.0`, `2.0.1`, `1.2.0`, `1.2.1`, `1.1.1` and `1.1.2`,\n    with the last adopted version being `1.1.3`. In this case the versions that\n    are competing are `2.0.0`, `2.0.1`, `1.2.0` and `1.2.1`. The older versions\n    `1.1.1` and `1.1.2` aren't competing, because `1.1.3` is already adopted.\n-   Everything else. For example, a new block version is proposed, but the\n    software version isn't confirmed yet. There is no special name for this\n    state.\n\nThe soft fork resolution rule works as follows:\n\n-   Informally, a block version becomes *adopted* when a certain percentage of\n    stake (75% in the current implementation, but this may be different in the\n    mainnet) creates a block with version `X`.\n-   Formally, we do the following. First, recall that by design, our system does\n    not allow rollbacks of blockchain deeper than a certain fixed global\n    threshold `k`, which allows to define *stable* stake for each stakeholder as\n    their stake `k` blocks ago. When we process genesis block for epoch `e`, we\n    compute the stable stake of all leaders of all slots from the very beginning\n    of the network's existence. For each block with version `X` that is\n    currently *competing*, we take all created *stable* blocks with version `X`,\n    take set of all leaders of these blocks and accumulate their stakes. If one\n    of versions has ≥ 75%, it gets *adopted*. If more than one version has ≥\n    75%, we take one of them deterministically.\n\nNote that adopted block version can't be changed during epoch (only between\nepochs), so all blocks in an epoch are verified according to the same rules\n(because rules are defined by adopted block version). But it's wrong to assume\nthat *all* blocks in an epoch have the same block version. After block version\nis adopted, another block version can become competing and some nodes may create\nblocks with this new version.\n\nSo, gathering everything up:\n\n1.  Once the update is confirmed, the protocol version (say `0.5.0`) can be\n    used.\n2.  Behavior of nodes that *have* been updated (i.e. can issue and validate\n    blocks with the newer version):\n    1.  Before the soft fork is resolved (i.e. before the resolution rule is\n        triggered), issue blocks with the new version `0.5.0`, but do not\n        include any new `attributes` (if there are any). Treat and validate\n        blocks of version `0.5.0` as blocks of version `0.4.0`.\n    2.  Once the soft fork is resolved, issue and validate blocks per version\n        `0.5.0`, including the new `attributes`.\n3.  Behavior of nodes that *have not* been updated (i.e. cannot issue and\n    validate blocks with the newer version):\n    1.  Before the soft fork is resolved, issue and validate blocks per version\n        `0.4.0`. Among other things, a block is not accepted if it contains\n        unknown `attributes`.\n    2.  Once the soft fork is resolved, start accepting all blocks with version\n        `0.5.0`, including the ones with unknown `attributes`. Keep validating\n        them as version `0.4.0`.\n\n## Hard Fork Updates\n\nHard forks are resolved using modified proof of burn. As it is not implemented\nyet, we omit this section from this document and will publish it as a separate\ndocument.\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-16-updating.en.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-03-transaction-assurance.en.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-03-transaction-assurance.en.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-03-transaction-assurance.en.md absPath of file",
      "internal": {
        "content": "---\ndoc_title: Transaction Assurance Level\npath: /en/cardano/transaction-assurance-level/\ngroup: cardano\nlanguage: en\nlabel: docs\n---\n<!-- Reviewed at a6a1cdf72c7e167a13f500c0679c01fe4cfa0ca8 -->\n\n<style>\n.full-width {\n    width: 100%;\n}\n\n.r {\n    color: white;\n    background-color: #ef4e4e;\n    text-align: right;\n    font-weight: 400;\n}\n\n.y {\n    color: white;\n    background-color: #c09e0f;\n    text-align: right;\n    font-weight: 400;\n}\n\n.g {\n    color: white;\n    background-color: green;\n    text-align: right;\n    font-weight: 400;\n}\n\n.gr {\n    color: white;\n    background-color: #aaa;\n    font-weight: 700;\n}\n\n.rd {\n    background-color: #fca8a8;\n    text-align: right;\n    font-weight: 700;\n}\n\n.yd {\n    background-color: #eccd4a;\n    text-align: right;\n    font-weight: 700;\n}\n\n.gd {\n    background-color: #53d153;\n    text-align: right;\n    font-weight: 700;\n}\n\n.center {\n    text-align: center;\n}\n\n.pct25 {\n    width: 25%;\n}\n</style>\n# Transaction Assurance Level\n\nTables below show color-coded levels of assurance that a transaction won’t be\ncanceled by some fork.\n\nFor example, at normal security level, if the attacker’s stake is **10%** (or $6\nmillions for Cardano market capitalization of $60 millions), the levels of\nassurance for a user’s transaction are:\n\n1.  Lowest assurance (color-coded with red) — when the user’s block with coin\n    transfer transaction has depth less than **3** blocks.\n2.  Medium assurance (color-coded with yellow) — when the user’s block has depth\n    from **3** to **7** blocks.\n3.  High assurance (color-coded with green) — when the user’s block has depth\n    **9** or more blocks.\n<!-- end -->\n## Normal Security Level\n\nNormal level is for covert adversaries (the model is described in the latest\nversion of Ouroboros being prepared now to be shared). Values in the table\ncorrespond to Cardano market capitalization of $60 millions.\n\n<table class=\"full-width\">\n<tr>\n    <th class=\"center\">             Attackers' stake, %</th>\n    <th class=\"center pct25\">       Attackers’ stake, $ mln </th> \n    <th colspan=\"6\" class=\"center\"> Assurance level         </th>\n\n</tr>\n<tr class=\"center\">\n    <td></td>\n    <td></td>\n    <td> Low    </td>\n    <td> 0.950  </td>\n    <td> 0.990  </td>\n    <td> 0.995  </td>\n    <td> 0.999  </td>\n    <td> High   </td>\n\n</tr>\n<tr>\n    <td class=\"gr\"> 10          </td>\n    <td class=\"gr\"> 6           </td>\n    <td class=\"rd\"> &lt; 3      </td>\n    <td class=\"yd\"> 3           </td>\n    <td class=\"yd\"> 5           </td>\n    <td class=\"yd\"> 7           </td>\n    <td class=\"gd\"> 9           </td>\n    <td class=\"gd\"> 9 &lt;      </td>\n\n</tr>\n<tr>\n    <td>            15          </td>\n    <td>            9           </td>\n    <td class=\"r\">  &lt; 5      </td>\n    <td class=\"y\">  5           </td>\n    <td class=\"y\">  9           </td>\n    <td class=\"y\">  11          </td>\n    <td class=\"g\">  15          </td>\n    <td class=\"g\">  15 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            20          </td>\n    <td>            12          </td>\n    <td class=\"r\">  &lt; 7      </td>\n    <td class=\"y\">  7           </td>\n    <td class=\"y\">  13          </td>\n    <td class=\"y\">  15          </td>\n    <td class=\"g\">  21          </td>\n    <td class=\"g\">  21 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            25          </td>\n    <td>            15          </td>\n    <td class=\"r\">  &lt; 9      </td>\n    <td class=\"y\">  9           </td>\n    <td class=\"y\">  19          </td>\n    <td class=\"y\">  23          </td>\n    <td class=\"g\">  33          </td>\n    <td class=\"g\">  33 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            30          </td>\n    <td>            18          </td>\n    <td class=\"r\">  &lt; 17     </td>\n    <td class=\"y\">  17          </td>\n    <td class=\"y\">  31          </td>\n    <td class=\"y\">  39          </td>\n    <td class=\"g\">  55          </td>\n    <td class=\"g\">  55 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            35          </td>\n    <td>            21          </td>\n    <td class=\"r\">  &lt; 29     </td>\n    <td class=\"y\">  29          </td>\n    <td class=\"y\">  57          </td>\n    <td class=\"y\">  71          </td>\n    <td class=\"g\">  101         </td>\n    <td class=\"g\">  101 &lt;    </td>\n\n</tr>\n<tr>\n    <td>            40          </td>\n    <td>            24          </td>\n    <td class=\"r\">  &lt; 67     </td>\n    <td class=\"y\">  67          </td>\n    <td class=\"y\">  133         </td>\n    <td class=\"y\">  163         </td>\n    <td class=\"g\">  235         </td>\n    <td class=\"g\">  235 &lt;    </td>\n\n</tr>\n<tr>\n    <td>            45          </td>\n    <td>            27          </td>\n    <td class=\"r\">  &lt; 269    </td>\n    <td class=\"y\">  269         </td>\n    <td class=\"y\">  539         </td>\n    <td class=\"y\">  661         </td>\n    <td class=\"g\">  951         </td>\n    <td class=\"g\">  951 &lt;    </td>\n\n</tr>\n<tr>\n    <td>            46          </td>\n    <td>            27.6        </td>\n    <td class=\"r\">  &lt; 421    </td>\n    <td class=\"y\">  421         </td>\n    <td class=\"y\">  843         </td>\n    <td class=\"y\">  1033        </td>\n    <td class=\"g\">  1487        </td>\n    <td class=\"g\">  1487 &lt;   </td>\n\n</tr>\n<tr>\n    <td>            47          </td>\n    <td>            28.2        </td>\n    <td class=\"r\">  &lt; 751    </td>\n    <td class=\"y\">  751         </td>\n    <td class=\"y\">  1501        </td>\n    <td class=\"y\">  1841        </td>\n    <td class=\"g\">  2649        </td>\n    <td class=\"g\">  2649 &lt;   </td>\n\n</tr>\n<tr>\n    <td>            48          </td>\n    <td>            28.8        </td>\n    <td class=\"r\">  &lt; 1691   </td>\n    <td class=\"y\">  1691        </td>\n    <td class=\"y\">  3381        </td>\n    <td class=\"y\">  4143        </td>\n    <td class=\"g\">  5965        </td>\n    <td class=\"g\">  5965 &lt;   </td>\n\n</tr>\n<tr>\n    <td>            49          </td>\n    <td>            29.4        </td>\n    <td class=\"r\">  &lt; 6763   </td>\n    <td class=\"y\">  6763        </td>\n    <td class=\"y\">  13527       </td>\n    <td class=\"y\">  16585       </td>\n    <td class=\"g\">  23869       </td>\n    <td class=\"g\">  23869 &lt;  </td>\n\n</tr>\n</table>\n## Strict Security Level\n\nStrict security level protects against all types of adversaries (it requires\nmore block confirmations). Values in the table correspond to Cardano market\ncapitalization of $60 millions.\n\n<table class=\"full-width\">\n<tr>\n    <th class=\"center\">             Attackers' stake, %</th>\n    <th class=\"center pct25\">       Attackers’ stake, $ mln </th> \n    <th colspan=\"6\" class=\"center\"> Assurance level         </th>\n\n</tr>\n<tr class=\"center\">\n    <td></td>\n    <td></td>\n    <td> Low    </td>\n    <td> 0.950  </td>\n    <td> 0.990  </td>\n    <td> 0.995  </td>\n    <td> 0.999  </td>\n    <td> High   </td>\n\n</tr>\n<tr>\n    <td class=\"gr\"> 10          </td>\n    <td class=\"gr\"> 6           </td>\n    <td class=\"rd\"> &lt; 5      </td>\n    <td class=\"yd\"> 5           </td>\n    <td class=\"yd\"> 9           </td>\n    <td class=\"yd\"> 11          </td>\n    <td class=\"gd\"> 15          </td>\n    <td class=\"gd\"> 15 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            15          </td>\n    <td>            9           </td>\n    <td class=\"r\">  &lt; 7      </td>\n    <td class=\"y\">  7           </td>\n    <td class=\"y\">  14          </td>\n    <td class=\"y\">  16          </td>\n    <td class=\"g\">  23          </td>\n    <td class=\"g\">  23 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            20          </td>\n    <td>            12          </td>\n    <td class=\"r\">  &lt; 12     </td>\n    <td class=\"y\">  12          </td>\n    <td class=\"y\">  21          </td>\n    <td class=\"y\">  25          </td>\n    <td class=\"g\">  35          </td>\n    <td class=\"g\">  35 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            25          </td>\n    <td>            15          </td>\n    <td class=\"r\">  &lt; 19     </td>\n    <td class=\"y\">  19          </td>\n    <td class=\"y\">  34          </td>\n    <td class=\"y\">  40          </td>\n    <td class=\"g\">  55          </td>\n    <td class=\"g\">  55 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            30          </td>\n    <td>            18          </td>\n    <td class=\"r\">  &lt; 32     </td>\n    <td class=\"y\">  32          </td>\n    <td class=\"y\">  57          </td>\n    <td class=\"y\">  68          </td>\n    <td class=\"g\">  94          </td>\n    <td class=\"g\">  94 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            35          </td>\n    <td>            21          </td>\n    <td class=\"r\">  &lt; 63     </td>\n    <td class=\"y\">  63          </td>\n    <td class=\"y\">  111         </td>\n    <td class=\"y\">  132         </td>\n    <td class=\"g\">  181         </td>\n    <td class=\"g\">  181 &lt;    </td>\n\n</tr>\n<tr>\n    <td>            40          </td>\n    <td>            24          </td>\n    <td class=\"r\">  &lt; 157    </td>\n    <td class=\"y\">  157         </td>\n    <td class=\"y\">  274         </td>\n    <td class=\"y\">  325         </td>\n    <td class=\"g\">  443         </td>\n    <td class=\"g\">  443 &lt;    </td>\n\n</tr>\n<tr>\n    <td>            45          </td>\n    <td>            27          </td>\n    <td class=\"r\">  &lt; 729    </td>\n    <td class=\"y\">  729         </td>\n    <td class=\"y\">  1246         </td>\n    <td class=\"y\">  1470         </td>\n    <td class=\"g\">  1990         </td>\n    <td class=\"g\">  1990 &lt;    </td>\n\n</tr>\n<tr>\n    <td>            46          </td>\n    <td>            27.6        </td>\n    <td class=\"r\">  &lt; 1190   </td>\n    <td class=\"y\">  1190        </td>\n    <td class=\"y\">  2020        </td>\n    <td class=\"y\">  2379        </td>\n    <td class=\"g\">  3214        </td>\n    <td class=\"g\">  3214 &lt;   </td>\n\n</tr>\n<tr>\n    <td>            47          </td>\n    <td>            28.2        </td>\n    <td class=\"r\">  &lt; 2230   </td>\n    <td class=\"y\">  2230        </td>\n    <td class=\"y\">  3758        </td>\n    <td class=\"y\">  4418        </td>\n    <td class=\"g\">  5953        </td>\n    <td class=\"g\">  5953 &lt;   </td>\n\n</tr>\n<tr>\n    <td>            48          </td>\n    <td>            28.8        </td>\n    <td class=\"r\">  &lt; 5382   </td>\n    <td class=\"y\">  5382        </td>\n    <td class=\"y\">  8986        </td>\n    <td class=\"y\">  10542       </td>\n    <td class=\"g\">  14157       </td>\n    <td class=\"g\">  14157 &lt;  </td>\n\n</tr>\n<tr>\n    <td>            49          </td>\n    <td>            29.4        </td>\n    <td class=\"r\">  &lt; 24029  </td>\n    <td class=\"y\">  24029       </td>\n    <td class=\"y\">  39603       </td>\n    <td class=\"y\">  46320       </td>\n    <td class=\"g\">  61922       </td>\n    <td class=\"g\">  61922 &lt;  </td>\n\n</tr>\n</table>\n\n",
        "type": "MarkdownRemark",
        "contentDigest": "e966e4cc49d605c43d14850a92c3c224",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "doc_title": "Transaction Assurance Level",
        "path": "/en/cardano/transaction-assurance-level/",
        "group": "cardano",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-03-transaction-assurance.en.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-03-transaction-assurance.en.md absPath of file"
      },
      "excerpt": "<!-- Reviewed at a6a1cdf72c7e167a13f500c0679c01fe4cfa0ca8 -->\n\n<style>\n.full-width {\n    width: 100%;\n}\n\n.r {\n    color: white;\n    background-color: #ef4e4e;\n    text-align: right;\n    font-weight: 400;\n}\n\n.y {\n    color: white;\n    background-color: #c09e0f;\n    text-align: right;\n    font-weight: 400;\n}\n\n.g {\n    color: white;\n    background-color: green;\n    text-align: right;\n    font-weight: 400;\n}\n\n.gr {\n    color: white;\n    background-color: #aaa;\n    font-weight: 700;\n}\n\n.rd {\n    background-color: #fca8a8;\n    text-align: right;\n    font-weight: 700;\n}\n\n.yd {\n    background-color: #eccd4a;\n    text-align: right;\n    font-weight: 700;\n}\n\n.gd {\n    background-color: #53d153;\n    text-align: right;\n    font-weight: 700;\n}\n\n.center {\n    text-align: center;\n}\n\n.pct25 {\n    width: 25%;\n}\n</style>\n# Transaction Assurance Level\n\nTables below show color-coded levels of assurance that a transaction won’t be\ncanceled by some fork.\n\nFor example, at normal security level, if the attacker’s stake is **10%** (or $6\nmillions for Cardano market capitalization of $60 millions), the levels of\nassurance for a user’s transaction are:\n\n1.  Lowest assurance (color-coded with red) — when the user’s block with coin\n    transfer transaction has depth less than **3** blocks.\n2.  Medium assurance (color-coded with yellow) — when the user’s block has depth\n    from **3** to **7** blocks.\n3.  High assurance (color-coded with green) — when the user’s block has depth\n    **9** or more blocks.\n",
      "rawMarkdownBody": "<!-- Reviewed at a6a1cdf72c7e167a13f500c0679c01fe4cfa0ca8 -->\n\n<style>\n.full-width {\n    width: 100%;\n}\n\n.r {\n    color: white;\n    background-color: #ef4e4e;\n    text-align: right;\n    font-weight: 400;\n}\n\n.y {\n    color: white;\n    background-color: #c09e0f;\n    text-align: right;\n    font-weight: 400;\n}\n\n.g {\n    color: white;\n    background-color: green;\n    text-align: right;\n    font-weight: 400;\n}\n\n.gr {\n    color: white;\n    background-color: #aaa;\n    font-weight: 700;\n}\n\n.rd {\n    background-color: #fca8a8;\n    text-align: right;\n    font-weight: 700;\n}\n\n.yd {\n    background-color: #eccd4a;\n    text-align: right;\n    font-weight: 700;\n}\n\n.gd {\n    background-color: #53d153;\n    text-align: right;\n    font-weight: 700;\n}\n\n.center {\n    text-align: center;\n}\n\n.pct25 {\n    width: 25%;\n}\n</style>\n# Transaction Assurance Level\n\nTables below show color-coded levels of assurance that a transaction won’t be\ncanceled by some fork.\n\nFor example, at normal security level, if the attacker’s stake is **10%** (or $6\nmillions for Cardano market capitalization of $60 millions), the levels of\nassurance for a user’s transaction are:\n\n1.  Lowest assurance (color-coded with red) — when the user’s block with coin\n    transfer transaction has depth less than **3** blocks.\n2.  Medium assurance (color-coded with yellow) — when the user’s block has depth\n    from **3** to **7** blocks.\n3.  High assurance (color-coded with green) — when the user’s block has depth\n    **9** or more blocks.\n<!-- end -->\n## Normal Security Level\n\nNormal level is for covert adversaries (the model is described in the latest\nversion of Ouroboros being prepared now to be shared). Values in the table\ncorrespond to Cardano market capitalization of $60 millions.\n\n<table class=\"full-width\">\n<tr>\n    <th class=\"center\">             Attackers' stake, %</th>\n    <th class=\"center pct25\">       Attackers’ stake, $ mln </th> \n    <th colspan=\"6\" class=\"center\"> Assurance level         </th>\n\n</tr>\n<tr class=\"center\">\n    <td></td>\n    <td></td>\n    <td> Low    </td>\n    <td> 0.950  </td>\n    <td> 0.990  </td>\n    <td> 0.995  </td>\n    <td> 0.999  </td>\n    <td> High   </td>\n\n</tr>\n<tr>\n    <td class=\"gr\"> 10          </td>\n    <td class=\"gr\"> 6           </td>\n    <td class=\"rd\"> &lt; 3      </td>\n    <td class=\"yd\"> 3           </td>\n    <td class=\"yd\"> 5           </td>\n    <td class=\"yd\"> 7           </td>\n    <td class=\"gd\"> 9           </td>\n    <td class=\"gd\"> 9 &lt;      </td>\n\n</tr>\n<tr>\n    <td>            15          </td>\n    <td>            9           </td>\n    <td class=\"r\">  &lt; 5      </td>\n    <td class=\"y\">  5           </td>\n    <td class=\"y\">  9           </td>\n    <td class=\"y\">  11          </td>\n    <td class=\"g\">  15          </td>\n    <td class=\"g\">  15 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            20          </td>\n    <td>            12          </td>\n    <td class=\"r\">  &lt; 7      </td>\n    <td class=\"y\">  7           </td>\n    <td class=\"y\">  13          </td>\n    <td class=\"y\">  15          </td>\n    <td class=\"g\">  21          </td>\n    <td class=\"g\">  21 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            25          </td>\n    <td>            15          </td>\n    <td class=\"r\">  &lt; 9      </td>\n    <td class=\"y\">  9           </td>\n    <td class=\"y\">  19          </td>\n    <td class=\"y\">  23          </td>\n    <td class=\"g\">  33          </td>\n    <td class=\"g\">  33 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            30          </td>\n    <td>            18          </td>\n    <td class=\"r\">  &lt; 17     </td>\n    <td class=\"y\">  17          </td>\n    <td class=\"y\">  31          </td>\n    <td class=\"y\">  39          </td>\n    <td class=\"g\">  55          </td>\n    <td class=\"g\">  55 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            35          </td>\n    <td>            21          </td>\n    <td class=\"r\">  &lt; 29     </td>\n    <td class=\"y\">  29          </td>\n    <td class=\"y\">  57          </td>\n    <td class=\"y\">  71          </td>\n    <td class=\"g\">  101         </td>\n    <td class=\"g\">  101 &lt;    </td>\n\n</tr>\n<tr>\n    <td>            40          </td>\n    <td>            24          </td>\n    <td class=\"r\">  &lt; 67     </td>\n    <td class=\"y\">  67          </td>\n    <td class=\"y\">  133         </td>\n    <td class=\"y\">  163         </td>\n    <td class=\"g\">  235         </td>\n    <td class=\"g\">  235 &lt;    </td>\n\n</tr>\n<tr>\n    <td>            45          </td>\n    <td>            27          </td>\n    <td class=\"r\">  &lt; 269    </td>\n    <td class=\"y\">  269         </td>\n    <td class=\"y\">  539         </td>\n    <td class=\"y\">  661         </td>\n    <td class=\"g\">  951         </td>\n    <td class=\"g\">  951 &lt;    </td>\n\n</tr>\n<tr>\n    <td>            46          </td>\n    <td>            27.6        </td>\n    <td class=\"r\">  &lt; 421    </td>\n    <td class=\"y\">  421         </td>\n    <td class=\"y\">  843         </td>\n    <td class=\"y\">  1033        </td>\n    <td class=\"g\">  1487        </td>\n    <td class=\"g\">  1487 &lt;   </td>\n\n</tr>\n<tr>\n    <td>            47          </td>\n    <td>            28.2        </td>\n    <td class=\"r\">  &lt; 751    </td>\n    <td class=\"y\">  751         </td>\n    <td class=\"y\">  1501        </td>\n    <td class=\"y\">  1841        </td>\n    <td class=\"g\">  2649        </td>\n    <td class=\"g\">  2649 &lt;   </td>\n\n</tr>\n<tr>\n    <td>            48          </td>\n    <td>            28.8        </td>\n    <td class=\"r\">  &lt; 1691   </td>\n    <td class=\"y\">  1691        </td>\n    <td class=\"y\">  3381        </td>\n    <td class=\"y\">  4143        </td>\n    <td class=\"g\">  5965        </td>\n    <td class=\"g\">  5965 &lt;   </td>\n\n</tr>\n<tr>\n    <td>            49          </td>\n    <td>            29.4        </td>\n    <td class=\"r\">  &lt; 6763   </td>\n    <td class=\"y\">  6763        </td>\n    <td class=\"y\">  13527       </td>\n    <td class=\"y\">  16585       </td>\n    <td class=\"g\">  23869       </td>\n    <td class=\"g\">  23869 &lt;  </td>\n\n</tr>\n</table>\n## Strict Security Level\n\nStrict security level protects against all types of adversaries (it requires\nmore block confirmations). Values in the table correspond to Cardano market\ncapitalization of $60 millions.\n\n<table class=\"full-width\">\n<tr>\n    <th class=\"center\">             Attackers' stake, %</th>\n    <th class=\"center pct25\">       Attackers’ stake, $ mln </th> \n    <th colspan=\"6\" class=\"center\"> Assurance level         </th>\n\n</tr>\n<tr class=\"center\">\n    <td></td>\n    <td></td>\n    <td> Low    </td>\n    <td> 0.950  </td>\n    <td> 0.990  </td>\n    <td> 0.995  </td>\n    <td> 0.999  </td>\n    <td> High   </td>\n\n</tr>\n<tr>\n    <td class=\"gr\"> 10          </td>\n    <td class=\"gr\"> 6           </td>\n    <td class=\"rd\"> &lt; 5      </td>\n    <td class=\"yd\"> 5           </td>\n    <td class=\"yd\"> 9           </td>\n    <td class=\"yd\"> 11          </td>\n    <td class=\"gd\"> 15          </td>\n    <td class=\"gd\"> 15 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            15          </td>\n    <td>            9           </td>\n    <td class=\"r\">  &lt; 7      </td>\n    <td class=\"y\">  7           </td>\n    <td class=\"y\">  14          </td>\n    <td class=\"y\">  16          </td>\n    <td class=\"g\">  23          </td>\n    <td class=\"g\">  23 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            20          </td>\n    <td>            12          </td>\n    <td class=\"r\">  &lt; 12     </td>\n    <td class=\"y\">  12          </td>\n    <td class=\"y\">  21          </td>\n    <td class=\"y\">  25          </td>\n    <td class=\"g\">  35          </td>\n    <td class=\"g\">  35 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            25          </td>\n    <td>            15          </td>\n    <td class=\"r\">  &lt; 19     </td>\n    <td class=\"y\">  19          </td>\n    <td class=\"y\">  34          </td>\n    <td class=\"y\">  40          </td>\n    <td class=\"g\">  55          </td>\n    <td class=\"g\">  55 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            30          </td>\n    <td>            18          </td>\n    <td class=\"r\">  &lt; 32     </td>\n    <td class=\"y\">  32          </td>\n    <td class=\"y\">  57          </td>\n    <td class=\"y\">  68          </td>\n    <td class=\"g\">  94          </td>\n    <td class=\"g\">  94 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            35          </td>\n    <td>            21          </td>\n    <td class=\"r\">  &lt; 63     </td>\n    <td class=\"y\">  63          </td>\n    <td class=\"y\">  111         </td>\n    <td class=\"y\">  132         </td>\n    <td class=\"g\">  181         </td>\n    <td class=\"g\">  181 &lt;    </td>\n\n</tr>\n<tr>\n    <td>            40          </td>\n    <td>            24          </td>\n    <td class=\"r\">  &lt; 157    </td>\n    <td class=\"y\">  157         </td>\n    <td class=\"y\">  274         </td>\n    <td class=\"y\">  325         </td>\n    <td class=\"g\">  443         </td>\n    <td class=\"g\">  443 &lt;    </td>\n\n</tr>\n<tr>\n    <td>            45          </td>\n    <td>            27          </td>\n    <td class=\"r\">  &lt; 729    </td>\n    <td class=\"y\">  729         </td>\n    <td class=\"y\">  1246         </td>\n    <td class=\"y\">  1470         </td>\n    <td class=\"g\">  1990         </td>\n    <td class=\"g\">  1990 &lt;    </td>\n\n</tr>\n<tr>\n    <td>            46          </td>\n    <td>            27.6        </td>\n    <td class=\"r\">  &lt; 1190   </td>\n    <td class=\"y\">  1190        </td>\n    <td class=\"y\">  2020        </td>\n    <td class=\"y\">  2379        </td>\n    <td class=\"g\">  3214        </td>\n    <td class=\"g\">  3214 &lt;   </td>\n\n</tr>\n<tr>\n    <td>            47          </td>\n    <td>            28.2        </td>\n    <td class=\"r\">  &lt; 2230   </td>\n    <td class=\"y\">  2230        </td>\n    <td class=\"y\">  3758        </td>\n    <td class=\"y\">  4418        </td>\n    <td class=\"g\">  5953        </td>\n    <td class=\"g\">  5953 &lt;   </td>\n\n</tr>\n<tr>\n    <td>            48          </td>\n    <td>            28.8        </td>\n    <td class=\"r\">  &lt; 5382   </td>\n    <td class=\"y\">  5382        </td>\n    <td class=\"y\">  8986        </td>\n    <td class=\"y\">  10542       </td>\n    <td class=\"g\">  14157       </td>\n    <td class=\"g\">  14157 &lt;  </td>\n\n</tr>\n<tr>\n    <td>            49          </td>\n    <td>            29.4        </td>\n    <td class=\"r\">  &lt; 24029  </td>\n    <td class=\"y\">  24029       </td>\n    <td class=\"y\">  39603       </td>\n    <td class=\"y\">  46320       </td>\n    <td class=\"g\">  61922       </td>\n    <td class=\"g\">  61922 &lt;  </td>\n\n</tr>\n</table>\n\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-03-transaction-assurance.en.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-04-updater.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-04-updater.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-04-updater.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: Cardano SL Updater\npath: /en/technical/cardano-sl-updater/\ngroup: technical\nlanguage: en\nlabel: docs\n---\n<!-- Reviewed at ac0126b2753f1f5ca6fbfb555783fbeb1aa141bd -->\n\n<!-- Updated at 6b5eda44e5942599a9781e5ad3f51eb820665b83 -->\n\n# Cardano SL Updater Implementation Overview\n\nImplementation of the update system can be found in the\n[Pos.Update](https://github.com/input-output-hk/cardano-sl/tree/6b5eda44e5942599a9781e5ad3f51eb820665b83/src/Pos/Update)\nfamily of modules. The general approach to implementation is the same as in\nother subsystems of CSL, such as Txp, Ssc and Delegation. The update system has\nthe global state, stored in the database. The global state can be unambiguously\nderived from the information that is in the blockchain. The local state,\nsometimes referred to as “mempool”, is stored in the memory. The mempool is used\nfor data transfer and inclusion of transferred data into blocks. The network\nprotocol (built with standard [Inv/Req/Data\npattern](https://github.com/input-output-hk/cardano-sl/tree/43a2d079a026b90ba860e79b5be52d1337e26c6f/infra/Pos/Communication/Relay))\nis described in [Application-level\ndocument](/technical/protocols/csl-application-level/) with the binary protocol\ndescribed in [Binary protocols\ndocument](/technical/protocols/binary-protocols/).\n\nCurrently, everything is ready to add hard fork functionality via software\nupdate and then perform a hard fork as described in research section; soft forks\n(or software updates) are fully implemented.\n\n## Fields Updatable with a Soft Fork\n\nAn\n[UpdateProposal](https://github.com/input-output-hk/cardano-sl/blob/43a2d079a026b90ba860e79b5be52d1337e26c6f/update/Pos/Update/Core/Types.hs#L110)\ncontains fields for changing some parameters used by Cardano SL (for instance,\nslot duration). Specifically, `upBlockVersion` is used to signify that a\nproposal performs such changes; if `upBlockVersion` is greater than the last\nused block version, the changes from `upBlockVersionData` will be applied.\n\n`upBlockVersionData` has the type\n[BlockVersionData](https://github.com/input-output-hk/cardano-sl/blob/fe5e6a377ab63c506173545fd4d8633cd1afbdc6/core/Pos/Core/Types.hs#L206).\n\nIts fields are described below:\n\n-   `bvdScriptVersion` – a script language version used to validate script\n    transactions. If the proposal increases `upBlockVersion`, it must also\n    increase `bvdScriptVersion` by 1 (and can't leave it unchanged).\n-   `bvdSlotDuration` – slot duration (in milliseconds).\n-   `bvdMaxBlockSize` – block size limit (in bytes). A proposal can't increase\n    the block size limit more than twofold compared to the previous limit.\n-   `bvdMaxHeaderSize` - block header size limit (in bytes).\n-   `bvdMaxTxSize` – transaction size limit (in bytes, [currently\n    4096](https://github.com/input-output-hk/cardano-sl/blob/43a2d079a026b90ba860e79b5be52d1337e26c6f/core/constants.yaml#L17)),\n    limits size of\n    [TxAux](/technical/protocols/binary-protocols/#transaction-auxilary)\n\nThe checks described above are made in\n[verifyNextBVData](https://github.com/input-output-hk/cardano-sl/blob/893e3c838bf847613313e8dbf04330176a788af4/update/Pos/Update/Poll/Logic/Base.hs#L232).\n\nIn addition, there are some fields that are unused right now, but will be used\nin the future. Their meaning is briefly described below:\n\n-   `bvdMpcThd` – eligibility threshold for MPC.\n-   `bvdHeavyDelThd` – threshold for heavyweight delegation.\n-   `bvdUpdateVoteThd` – portion of total stake necessary to vote for or against\n    an update.\n-   `bvdUpdateProposalThd` – portion of total stake such that block containing\n    `UpdateProposal` must contain positive votes for this proposal from\n    stakeholders owning at least this amount of stake.\n-   `bvdUpdateImplicit` – number of slots after which an update is implicitly\n    approved (unless it has more negative votes than positive).\n-   `bvdUpdateSoftforkThd` – portion of total stake such that if total stake of\n    issuers of blocks with some block version is bigger than this portion, this\n    block version is adopted.\n\n## Mempool Structure\n\n[`MemPool`](https://github.com/input-output-hk/cardano-sl/blob/43a2d079a026b90ba860e79b5be52d1337e26c6f/update/Pos/Update/MemState/Types.hs#L29) consists of votes and proposals. Apart from that [`MemState`](https://github.com/input-output-hk/cardano-sl/blob/43a2d079a026b90ba860e79b5be52d1337e26c6f/update/Pos/Update/MemState/Types.hs#L39) contains\ntip, slot and `PollModifier` corresponding to `MemPool` (and to current\n`GState`, i. e. to application of `MemPool` to `GState`). No matter whether a\nchange in proposal state comes from the network/mempool, or from loading the\nblockchain, `PollModifier` represents modification of global state which will be\nmade if one applies mempool.\n\n### Updating the Mempool\n\nAs nodes deserialize [payloads of update system\nmessages](/technical/protocols/binary-protocols/#update-system), they modify\nmempool as implemented\n[here](https://github.com/input-output-hk/cardano-sl/blob/43a2d079a026b90ba860e79b5be52d1337e26c6f/update/Pos/Update/MemState/Functions.hs#L35).\n\n`MemPool` is updated in three cases:\n\n1.  **When a new proposal/vote is received**. In this case, one of the\n    [process](https://github.com/input-output-hk/cardano-sl/blob/763822c4fd906f36fa97b6b1f973d31d52342f3f/update/Pos/Update/Logic/Local.hs#L186)\n    functions is called, which in turn calls\n    [`verifyAndApplyUSPayload`](https://github.com/input-output-hk/cardano-sl/blob/dff5e00612c84af24964a98e5254602fa4f7fc17/update/Pos/Update/Poll/Logic/Apply.hs#L66)\n    and then updates current `PollModifier` and `MemPool`.\n2.  **When a new slot starts**. In this case some data in `MemPool` may become\n    invalid. In fact, it happens only when epoch changes. That can happen\n    because stable stake distribution changes and some votes may have not enough\n    stake for inclusion. It's done in the\n    [`processNewSlot`](https://github.com/input-output-hk/cardano-sl/blob/763822c4fd906f36fa97b6b1f973d31d52342f3f/update/Pos/Update/Logic/Local.hs#L283)\n    function.\n3.  **When `GState` is updated**. It is called\n    [`usNormalize`](https://github.com/input-output-hk/cardano-sl/blob/763822c4fd906f36fa97b6b1f973d31d52342f3f/update/Pos/Update/Logic/Local.hs#L248).\n    Some data may become invalid as a result of block(s) application or\n    rollback. For instance, we have a proposal in memory, apply block with this\n    proposal and it becomes invalid (because it's already in block). We should\n    drop such proposals. Or we have a vote for proposal from some block, then\n    rollback of this block happens and vote is no longer valid. It is\n    implemented by applying all local data to empty state, ignoring all data\n    which is no longer valid.\n\n### Proposal and Votes Accumulation\n\nTo vote for a proposal, nodes should send their\n[votes](https://github.com/input-output-hk/cardano-sl/blob/04dc8e4a640a62f0d82633f3a78ab3d8540fd5e6/update/Pos/Update/Core/Types.hs#L255).\nProposals and votes are stored in mempool (even if proposals don't have enough\nvotes for inclusion into blocks, this way votes can be collected automatically)\nor gathered from the blockchain in order to figure out which proposal is\nadopted.\n\n## Interaction With the Database\n\nIn order to verify update system data, we have to get this data from the global\nstate (database). To provide such interface, a well-documented type class\n[`MonadPollRead`](https://github.com/input-output-hk/cardano-sl/blob/446444070ee09857603797a90af970fff215c8c5/update/Pos/Update/Poll/Class.hs#L29)\nis presented. This type class is used not only for DB interaction, but also to\ntake mempool into account when the data received from the network are processed.\nIt is important that its implementation relies on functions found in\n[`Pos.Update.DB`](https://github.com/input-output-hk/cardano-sl/blob/04dc8e4a640a62f0d82633f3a78ab3d8540fd5e6/update/Pos/Update/DB.hs) module.\n\n## Core Types\n\nCore types are mentioned in the [Binary Protocols](/technical/protocols/binary-protocols/)\ndocument. Those types reflect the concepts from the research section in a straightforward way.\nPlease refer to the [core types\nmodule](https://github.com/input-output-hk/cardano-sl/blob/04dc8e4a640a62f0d82633f3a78ab3d8540fd5e6/update/Pos/Update/Core/Types.hs)\nfor more information.\n\n## Update Proposal Approval\n\nA very important part of implementation of the update mechanism is the part that\nworks with genesis blocks for epochs. This logic resides in\n[`processGenesisBlock`](https://github.com/input-output-hk/cardano-sl/blob/6b5eda44e5942599a9781e5ad3f51eb820665b83/src/Pos/Update/Poll/Logic/Softfork.hs#L68) function.\nThe terminology related to this process is explained below.\n\n### Threshold\n\nSuppose there is a block version `X`. And there are blocks with version `X`\ncreated in slots `S` (where `S` is a set of slots). If total relative stake of\nleaders of all slots in `S` is ≥ `softforkResolutionThreshold` (referred to as\n«threshold» in the code), then `X` becomes adopted. See the more detailed\ndescription in [research overview](/cardano/update-mechanism/#soft-fork-updates).\n\n### Proposal states\n\nUpdate proposal can be in one of the states described below.\n\n#### Undecided\n\nIt means that update proposal is contained in one of the blocks, but it doesn't\nhave `50%` votes for/against it (here `50%` means total stake of voters who are\nfor/against proposal relative to total stake of all stakeholders in system) and\nimplicit agreement rule hasn't been triggered yet.\n\n<!-- TODO: **Important remark:** when we are talking about stake, we need to be clear about\nwhich stake distribution we are talking about. For each epoch we know stable distribution\nfor this epoch. It used in leaders selection (follow-the-satoshi) and also in many other\ncases. Stable distribution is distribution as it was ﻿⁠⁠⁠⁠2k﻿⁠⁠⁠⁠ slots before the end of epoch.\nTo calculate stake of votes for proposal ﻿⁠⁠⁠⁠p﻿⁠⁠⁠⁠ we use stake distribution as per epoch in\nwhich ﻿⁠⁠⁠⁠p﻿⁠⁠⁠⁠ was added to blocks. I. e. distribution which was ﻿⁠⁠⁠⁠2k﻿⁠⁠⁠⁠ slots before the\nend of that epoch. This ensures that nobody can transfer his funds to another address\nand vote from that address to increase total stake of voters.\n\n**Another important remark:** when we are talking about stake, it's also important to be\nclear whether we consider delegated stake. I. e. if Alice delegated to Bob, do we consider\nthat Alice's funds belong to Bob or Alice? When we use stake for votes, we consider delegated\nstake, i. e. we consider that Alice's funds belong to Bob. Note that here we consider\nonly heavyweight delegation. I hope it's covered in documentation, but I am not sure. -->\n\n#### Approved\n\nIt means that proposal has more than `50%` votes for it or it was added to block\nlong ago (according to implicit agreement rule) and it has more positive votes\nthan negative (comparison by stake of course).\n\n#### Rejected\n\nA proposal is called **rejected** if that proposal has more than `50%` votes\nagainst it or it was added to block long ago (according to implicit agreement\nrule) and it has more negative votes than positive (again, comparison by stake).\n\n#### Confirmed\n\nAn **approved** proposal is called **confirmed** if at least `k` blocks ago\nproposal became **Approved**. At this point we can be sure that proposal won't\nbecome **rejected**, because rollbacks with depth more than `k` aren't possible.\n\n#### Discarded\n\nA **rejected** proposal is called **discarded**, if at least `k` blocks ago that\nproposal became **rejected**. At this point we can be sure that proposal won't\nbe approved, because rollbacks with depth more than `k` aren't possible.\n\n## Download New Version\n\nIn the\n[`Pos.Update.Download`](https://github.com/input-output-hk/cardano-sl/blob/04dc8e4a640a62f0d82633f3a78ab3d8540fd5e6/src/Pos/Update/Download.hs)\nmodule, the following algorithms are implemented. Downloaded updates are applied\nusing a tool called\n[`cardano-launcher`](https://github.com/input-output-hk/cardano-sl/blob/82ba83c3ffb670201b309ff47e3d0ab5f4a17455/src/launcher/Main.hs).\n\n### Download Confirmed Update\n\nTo download a confirmed update, we extract the update hash from\n[`ConfirmedProposalState`](https://github.com/input-output-hk/cardano-sl/blob/04dc8e4a640a62f0d82633f3a78ab3d8540fd5e6/update/Pos/Update/Poll/Types.hs#L114). It is extracted depending on whether or not we're\nusing an installer on given platform. If the update hash is extracted\nsuccessfully, the “Download Update by Hash” algorithm is invoked to download and\nsave the confirmed update.\n\n### Download Update by Hash\n\nTo [download an update by hash](https://github.com/input-output-hk/cardano-sl/blob/daa8b81785f38038187c45385c9a94510a5c3780/src/Pos/Update/Download.hs#L108), we loop through known update servers trying to\ndownload the update with given hash using `httpLBS` from HTTP. It's simple: in\nthe end, we will either have the update completely downloaded or server list\nexhausted and an error reported. URIs of the known update servers are defined\nusing `--update-server` argument of the `cardano-node` executable.\n",
        "type": "MarkdownRemark",
        "contentDigest": "8950917ab3496cc534bc3e070176ac12",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "Cardano SL Updater",
        "path": "/en/technical/cardano-sl-updater/",
        "group": "technical",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-04-updater.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-04-updater.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at ac0126b2753f1f5ca6fbfb555783fbeb1aa141bd -->\n\n<!-- Updated at 6b5eda44e5942599a9781e5ad3f51eb820665b83 -->\n\n# Cardano SL Updater Implementation Overview\n\nImplementation of the update system can be found in the\n[Pos.Update](https://github.com/input-output-hk/cardano-sl/tree/6b5eda44e5942599a9781e5ad3f51eb820665b83/src/Pos/Update)\nfamily of modules. The general approach to implementation is the same as in\nother subsystems of CSL, such as Txp, Ssc and Delegation. The update system has\nthe global state, stored in the database. The global state can be unambiguously\nderived from the information that is in the blockchain. The local state,\nsometimes referred to as “mempool”, is stored in the memory. The mempool is used\nfor data transfer and inclusion of transferred data into blocks. The network\nprotocol (built with standard [Inv/Req/Data\npattern](https://github.com/input-output-hk/cardano-sl/tree/43a2d079a026b90ba860e79b5be52d1337e26c6f/infra/Pos/Communication/Relay))\nis described in [Application-level\ndocument](/technical/protocols/csl-application-level/) with the binary protocol\ndescribed in [Binary protocols\ndocument](/technical/protocols/binary-protocols/).\n\nCurrently, everything is ready to add hard fork functionality via software\nupdate and then perform a hard fork as described in research section; soft forks\n(or software updates) are fully implemented.\n\n## Fields Updatable with a Soft Fork\n\nAn\n[UpdateProposal](https://github.com/input-output-hk/cardano-sl/blob/43a2d079a026b90ba860e79b5be52d1337e26c6f/update/Pos/Update/Core/Types.hs#L110)\ncontains fields for changing some parameters used by Cardano SL (for instance,\nslot duration). Specifically, `upBlockVersion` is used to signify that a\nproposal performs such changes; if `upBlockVersion` is greater than the last\nused block version, the changes from `upBlockVersionData` will be applied.\n\n`upBlockVersionData` has the type\n[BlockVersionData](https://github.com/input-output-hk/cardano-sl/blob/fe5e6a377ab63c506173545fd4d8633cd1afbdc6/core/Pos/Core/Types.hs#L206).\n\nIts fields are described below:\n\n-   `bvdScriptVersion` – a script language version used to validate script\n    transactions. If the proposal increases `upBlockVersion`, it must also\n    increase `bvdScriptVersion` by 1 (and can't leave it unchanged).\n-   `bvdSlotDuration` – slot duration (in milliseconds).\n-   `bvdMaxBlockSize` – block size limit (in bytes). A proposal can't increase\n    the block size limit more than twofold compared to the previous limit.\n-   `bvdMaxHeaderSize` - block header size limit (in bytes).\n-   `bvdMaxTxSize` – transaction size limit (in bytes, [currently\n    4096](https://github.com/input-output-hk/cardano-sl/blob/43a2d079a026b90ba860e79b5be52d1337e26c6f/core/constants.yaml#L17)),\n    limits size of\n    [TxAux](/technical/protocols/binary-protocols/#transaction-auxilary)\n\nThe checks described above are made in\n[verifyNextBVData](https://github.com/input-output-hk/cardano-sl/blob/893e3c838bf847613313e8dbf04330176a788af4/update/Pos/Update/Poll/Logic/Base.hs#L232).\n\nIn addition, there are some fields that are unused right now, but will be used\nin the future. Their meaning is briefly described below:\n\n-   `bvdMpcThd` – eligibility threshold for MPC.\n-   `bvdHeavyDelThd` – threshold for heavyweight delegation.\n-   `bvdUpdateVoteThd` – portion of total stake necessary to vote for or against\n    an update.\n-   `bvdUpdateProposalThd` – portion of total stake such that block containing\n    `UpdateProposal` must contain positive votes for this proposal from\n    stakeholders owning at least this amount of stake.\n-   `bvdUpdateImplicit` – number of slots after which an update is implicitly\n    approved (unless it has more negative votes than positive).\n-   `bvdUpdateSoftforkThd` – portion of total stake such that if total stake of\n    issuers of blocks with some block version is bigger than this portion, this\n    block version is adopted.\n\n## Mempool Structure\n\n[`MemPool`](https://github.com/input-output-hk/cardano-sl/blob/43a2d079a026b90ba860e79b5be52d1337e26c6f/update/Pos/Update/MemState/Types.hs#L29) consists of votes and proposals. Apart from that [`MemState`](https://github.com/input-output-hk/cardano-sl/blob/43a2d079a026b90ba860e79b5be52d1337e26c6f/update/Pos/Update/MemState/Types.hs#L39) contains\ntip, slot and `PollModifier` corresponding to `MemPool` (and to current\n`GState`, i. e. to application of `MemPool` to `GState`). No matter whether a\nchange in proposal state comes from the network/mempool, or from loading the\nblockchain, `PollModifier` represents modification of global state which will be\nmade if one applies mempool.\n\n### Updating the Mempool\n\nAs nodes deserialize [payloads of update system\nmessages](/technical/protocols/binary-protocols/#update-system), they modify\nmempool as implemented\n[here](https://github.com/input-output-hk/cardano-sl/blob/43a2d079a026b90ba860e79b5be52d1337e26c6f/update/Pos/Update/MemState/Functions.hs#L35).\n\n`MemPool` is updated in three cases:\n\n1.  **When a new proposal/vote is received**. In this case, one of the\n    [process](https://github.com/input-output-hk/cardano-sl/blob/763822c4fd906f36fa97b6b1f973d31d52342f3f/update/Pos/Update/Logic/Local.hs#L186)\n    functions is called, which in turn calls\n    [`verifyAndApplyUSPayload`](https://github.com/input-output-hk/cardano-sl/blob/dff5e00612c84af24964a98e5254602fa4f7fc17/update/Pos/Update/Poll/Logic/Apply.hs#L66)\n    and then updates current `PollModifier` and `MemPool`.\n2.  **When a new slot starts**. In this case some data in `MemPool` may become\n    invalid. In fact, it happens only when epoch changes. That can happen\n    because stable stake distribution changes and some votes may have not enough\n    stake for inclusion. It's done in the\n    [`processNewSlot`](https://github.com/input-output-hk/cardano-sl/blob/763822c4fd906f36fa97b6b1f973d31d52342f3f/update/Pos/Update/Logic/Local.hs#L283)\n    function.\n3.  **When `GState` is updated**. It is called\n    [`usNormalize`](https://github.com/input-output-hk/cardano-sl/blob/763822c4fd906f36fa97b6b1f973d31d52342f3f/update/Pos/Update/Logic/Local.hs#L248).\n    Some data may become invalid as a result of block(s) application or\n    rollback. For instance, we have a proposal in memory, apply block with this\n    proposal and it becomes invalid (because it's already in block). We should\n    drop such proposals. Or we have a vote for proposal from some block, then\n    rollback of this block happens and vote is no longer valid. It is\n    implemented by applying all local data to empty state, ignoring all data\n    which is no longer valid.\n\n### Proposal and Votes Accumulation\n\nTo vote for a proposal, nodes should send their\n[votes](https://github.com/input-output-hk/cardano-sl/blob/04dc8e4a640a62f0d82633f3a78ab3d8540fd5e6/update/Pos/Update/Core/Types.hs#L255).\nProposals and votes are stored in mempool (even if proposals don't have enough\nvotes for inclusion into blocks, this way votes can be collected automatically)\nor gathered from the blockchain in order to figure out which proposal is\nadopted.\n\n## Interaction With the Database\n\nIn order to verify update system data, we have to get this data from the global\nstate (database). To provide such interface, a well-documented type class\n[`MonadPollRead`](https://github.com/input-output-hk/cardano-sl/blob/446444070ee09857603797a90af970fff215c8c5/update/Pos/Update/Poll/Class.hs#L29)\nis presented. This type class is used not only for DB interaction, but also to\ntake mempool into account when the data received from the network are processed.\nIt is important that its implementation relies on functions found in\n[`Pos.Update.DB`](https://github.com/input-output-hk/cardano-sl/blob/04dc8e4a640a62f0d82633f3a78ab3d8540fd5e6/update/Pos/Update/DB.hs) module.\n\n## Core Types\n\nCore types are mentioned in the [Binary Protocols](/technical/protocols/binary-protocols/)\ndocument. Those types reflect the concepts from the research section in a straightforward way.\nPlease refer to the [core types\nmodule](https://github.com/input-output-hk/cardano-sl/blob/04dc8e4a640a62f0d82633f3a78ab3d8540fd5e6/update/Pos/Update/Core/Types.hs)\nfor more information.\n\n## Update Proposal Approval\n\nA very important part of implementation of the update mechanism is the part that\nworks with genesis blocks for epochs. This logic resides in\n[`processGenesisBlock`](https://github.com/input-output-hk/cardano-sl/blob/6b5eda44e5942599a9781e5ad3f51eb820665b83/src/Pos/Update/Poll/Logic/Softfork.hs#L68) function.\nThe terminology related to this process is explained below.\n\n### Threshold\n\nSuppose there is a block version `X`. And there are blocks with version `X`\ncreated in slots `S` (where `S` is a set of slots). If total relative stake of\nleaders of all slots in `S` is ≥ `softforkResolutionThreshold` (referred to as\n«threshold» in the code), then `X` becomes adopted. See the more detailed\ndescription in [research overview](/cardano/update-mechanism/#soft-fork-updates).\n\n### Proposal states\n\nUpdate proposal can be in one of the states described below.\n\n#### Undecided\n\nIt means that update proposal is contained in one of the blocks, but it doesn't\nhave `50%` votes for/against it (here `50%` means total stake of voters who are\nfor/against proposal relative to total stake of all stakeholders in system) and\nimplicit agreement rule hasn't been triggered yet.\n\n<!-- TODO: **Important remark:** when we are talking about stake, we need to be clear about\nwhich stake distribution we are talking about. For each epoch we know stable distribution\nfor this epoch. It used in leaders selection (follow-the-satoshi) and also in many other\ncases. Stable distribution is distribution as it was ﻿⁠⁠⁠⁠2k﻿⁠⁠⁠⁠ slots before the end of epoch.\nTo calculate stake of votes for proposal ﻿⁠⁠⁠⁠p﻿⁠⁠⁠⁠ we use stake distribution as per epoch in\nwhich ﻿⁠⁠⁠⁠p﻿⁠⁠⁠⁠ was added to blocks. I. e. distribution which was ﻿⁠⁠⁠⁠2k﻿⁠⁠⁠⁠ slots before the\nend of that epoch. This ensures that nobody can transfer his funds to another address\nand vote from that address to increase total stake of voters.\n\n**Another important remark:** when we are talking about stake, it's also important to be\nclear whether we consider delegated stake. I. e. if Alice delegated to Bob, do we consider\nthat Alice's funds belong to Bob or Alice? When we use stake for votes, we consider delegated\nstake, i. e. we consider that Alice's funds belong to Bob. Note that here we consider\nonly heavyweight delegation. I hope it's covered in documentation, but I am not sure. -->\n\n#### Approved\n\nIt means that proposal has more than `50%` votes for it or it was added to block\nlong ago (according to implicit agreement rule) and it has more positive votes\nthan negative (comparison by stake of course).\n\n#### Rejected\n\nA proposal is called **rejected** if that proposal has more than `50%` votes\nagainst it or it was added to block long ago (according to implicit agreement\nrule) and it has more negative votes than positive (again, comparison by stake).\n\n#### Confirmed\n\nAn **approved** proposal is called **confirmed** if at least `k` blocks ago\nproposal became **Approved**. At this point we can be sure that proposal won't\nbecome **rejected**, because rollbacks with depth more than `k` aren't possible.\n\n#### Discarded\n\nA **rejected** proposal is called **discarded**, if at least `k` blocks ago that\nproposal became **rejected**. At this point we can be sure that proposal won't\nbe approved, because rollbacks with depth more than `k` aren't possible.\n\n## Download New Version\n\nIn the\n[`Pos.Update.Download`](https://github.com/input-output-hk/cardano-sl/blob/04dc8e4a640a62f0d82633f3a78ab3d8540fd5e6/src/Pos/Update/Download.hs)\nmodule, the following algorithms are implemented. Downloaded updates are applied\nusing a tool called\n[`cardano-launcher`](https://github.com/input-output-hk/cardano-sl/blob/82ba83c3ffb670201b309ff47e3d0ab5f4a17455/src/launcher/Main.hs).\n\n### Download Confirmed Update\n\nTo download a confirmed update, we extract the update hash from\n[`ConfirmedProposalState`](https://github.com/input-output-hk/cardano-sl/blob/04dc8e4a640a62f0d82633f3a78ab3d8540fd5e6/update/Pos/Update/Poll/Types.hs#L114). It is extracted depending on whether or not we're\nusing an installer on given platform. If the update hash is extracted\nsuccessfully, the “Download Update by Hash” algorithm is invoked to download and\nsave the confirmed update.\n\n### Download Update by Hash\n\nTo [download an update by hash](https://github.com/input-output-hk/cardano-sl/blob/daa8b81785f38038187c45385c9a94510a5c3780/src/Pos/Update/Download.hs#L108), we loop through known update servers trying to\ndownload the update with given hash using `httpLBS` from HTTP. It's simple: in\nthe end, we will either have the update completely downloaded or server list\nexhausted and an error reported. URIs of the known update servers are defined\nusing `--update-server` argument of the `cardano-node` executable.\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-04-updater.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-07-blocks.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-07-blocks.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-07-blocks.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title:  Blocks in Cardano SL\npath: /en/technical/blocks-in-cardano-sl/\ngroup: technical\nlanguage: en\nlabel: docs\n---\n\n<!-- Reviewed at ac0126b2753f1f5ca6fbfb555783fbeb1aa141bd -->\n\n# Blocks in Cardano SL\n\nThis guide describes block design and the logic of the block handling.\n\nThe block-related types are defined in\n[Pos.Block.Core.Main.Types](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Main/Types.hs)\nmodule and\n[Pos.Block.Core.Genesis.Types](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Genesis/Types.hs).\nThe logic of work with blocks is defined in\n[Pos.Block.Logic.\\*](https://github.com/input-output-hk/cardano-sl/tree/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic)\nmodules.\n\n## Design\n\nA block is a fundamental part of the ledger. There are two types of blocks:\n[**main**](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Main/Types.hs#L110)\nblocks and\n[**genesis**](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Genesis/Types.hs#L66)\nblocks.\n\n### Main Block\n\nA main block consists of a *header* and a *body*. The\n[header](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/core/Pos/Core/Block.hs#L99)\ncontains meta-information about the block:\n\n1.  A pointer to the header of previous block block signature.\n2.  Proof of body.\n3.  Consensus data to verify consensus algorithm.\n4.  Some extra-data.\n\nThe [block's\nbody](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Main/Chain.hs#L64)\ncontains payloads and some extra-data as well. Payloads include:\n\n1.  [Transactions\n    payload](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Main/Chain.hs#L66).\n    This payload is the main one. Transactions are stored in the Merkle tree.\n    This payload includes [list of\n    witnesses](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Txp/Core/Types.hs#L283)\n    as well. Please read about [Transactions in Cardano\n    SL](/cardano/transactions/) for more info about transaction and witnesses.\n2.  [SSC\n    payload](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Main/Chain.hs#L68).\n    SSC (Shared Seed Computation) is used for the [Follow-the-Satoshi\n    algorithm](/cardano/proof-of-stake/#follow-the-satoshi). Within every epoch,\n    slot-leaders for the next epoch must be elected. These slot-leaders will be\n    able to generate new main blocks and add them to the ledger. So SSC is used\n    as a source of randomness for the leader election process.\n3.  [Delegation\n    payload](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Main/Chain.hs#L70).\n    This payload consists of a [list of heavyweight proxy signing\n    keys](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Delegation/Types.hs#L49).\n    Please read about [Stake Delegation in Cardano SL](/technical/delegation/)\n    for more info.\n4.  [Update\n    payload](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Main/Chain.hs#L72).\n    It contains a\n    [proposal](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/update/Pos/Update/Core/Types.hs#L300)\n    for software update and a [list of\n    votes](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/update/Pos/Update/Core/Types.hs#L301)\n    for the particular update. Please read about [Update System\n    Model](/cardano/update-mechanism/) for more info.\n\n### Genesis Block\n\nA genesis block doesn't contain transactions, and there is just one genesis\nblock for each epoch. Genesis blocks have a header and a body, just like main\nblocks. The body of the block contains:\n\n1.  [An index of the\n    epoch](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Genesis/Chain.hs#L33)\n    this block is associated with.\n2.  The list of slot-leaders for this epoch. This list [cannot be\n    empty](https://github.com/input-output-hk/cardano-sl/blob/b4b2c282b0e2a2e4415163e70dcb559396a2237c/core/Pos/Core/Types.hs#L272).\n3.  [Chain\n    difficulty](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Genesis/Chain.hs#L35).\n    It represents efforts necessary to generate a chain, it's the number of main\n    blocks in the chain.\n\n## Block Handling Logic\n\nWe work with blocks and block headers. Fundamentally, we can:\n\n-   create a block,\n-   verify a block,\n-   apply a block,\n-   rollback a block,\n\nand:\n\n-   get block headers by different criteria,\n-   classify block headers.\n\n## Block Creation\n\nAs mentioned above, there are two kinds of blocks: **main** blocks and\n**genesis** blocks. A main block is created with the\n[`createMainBlock`](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L156)\nfunction, and a genesis block is created with the\n[`createGenesisBlock`](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L92)\nfunction.\n\n### Main Block Creation\n\nWe try to create a new main block on top of the best chain if possible. A new\nblock can be created if the following conditions are met:\n\n-   We know the genesis block for the epoch from the given slot ID,\n-   The last known block is not more than\n    [`slotSecurityParam`](https://github.com/input-output-hk/cardano-sl/blob/f571087e5b5af339767198141981c850227ca99c/core/Pos/Core/Constants.hs#L86)\n    blocks away from given slot ID.\n\nThe value of `slotSecurityParam` (which actually is a number of slots) depends\non maximum number of blocks which can be rolled back. This [maximum\nnumber](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/core/Pos/Core/Constants.hs#L81)\nis a security parameter from the [paper](/glossary/#paper).\n\nFirst of all, we have to check whether our software can create a block\n[according to current global\nstate](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Update/Logic/Global.hs#L139).\nIf it can't, we\n[report](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L172)\nabout it. If it can, we [create and apply\nblock](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L206).\n\n### Genesis Block Creation\n\nA genesis block is created for the current epoch when the head of currently\nknown best chain is\n[`MainBlock`](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Main/Types.hs#L112)\ncorresponding to one of the last\n[`slotSecurityParam`](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/core/Pos/Core/Constants.hs#L81)\nslots of (i - 1)-th epoch.\n\nFirst of all, we try to get the slot-leaders. If there's [no\nleaders](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L99)\nor [not enough blocks for\nLRC](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L102)\n(Leaders and Richmen Computation), an error is reported. Otherwise we're trying\nto actually create [a new genesis\nblock](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L115).\nHowever, sometimes we [shouldn't create\none](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L106).\nFor example, we shouldn't do it [for the 0th\nepoch](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L108)\nbecause genesis block for 0th epoch is hardcoded.\n\n## Block Application\n\nWe apply blocks using the\n[`applyBlocks`](https://github.com/input-output-hk/cardano-sl/blob/09e4fcf8a7f1a5a587d0241aa93f23e2d72c7c70/src/Pos/Block/Logic/VAR.hs#L182)\nfunction. The sequence of blocks should be definitely valid: we must verify all\npredicates and data checks regarding blocks.\n\n**Important**: all blocks in that sequence must be of the same epoch!\n\nIf all conditions are met, we [actually apply\nblocks](https://github.com/input-output-hk/cardano-sl/blob/09e4fcf8a7f1a5a587d0241aa93f23e2d72c7c70/src/Pos/Block/Logic/Internal.hs#L107):\n\n-   [apply US (Update\n    System)](https://github.com/input-output-hk/cardano-sl/blob/09e4fcf8a7f1a5a587d0241aa93f23e2d72c7c70/src/Pos/Block/Logic/Internal.hs#L141),\n-   [apply\n    delegation](https://github.com/input-output-hk/cardano-sl/blob/09e4fcf8a7f1a5a587d0241aa93f23e2d72c7c70/src/Pos/Block/Logic/Internal.hs#L142),\n-   [apply\n    transactions](https://github.com/input-output-hk/cardano-sl/blob/09e4fcf8a7f1a5a587d0241aa93f23e2d72c7c70/src/Pos/Block/Logic/Internal.hs#L143).\n\nMoreover, we can verify blocks before application (i.e. apply blocks only if\nthey're valid). We use\n[`verifyAndApplyBlocks`](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/VAR.hs#L99)\nfunction for it. If some error occurred during application, there are two\noptions:\n\n1.  All blocks applied inside this function will be [rolled\n    back](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/VAR.hs#L137).\n2.  This function will try to apply [as many blocks as\n    possible](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/VAR.hs#L126).\n\n## Block Rollback\n\nYou can think about a rollback as the opposite of application: when a rollback\nis performed, all changes made by the application are cancelled. To do this, the\n[`rollbackBlocks`](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/VAR.hs#L208)\nfunction is used.\n\nWe get the tip and the first block to rollback. If they do not match, an error\nis reported. If they match, we [actually rollback the sequence of\nblocks](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Internal.hs#L167):\n\n-   [Rollback\n    delegation](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Internal.hs#L173),\n    erases mempool of certificates,\n-   [Rollback\n    US](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Internal.hs#L174),\n-   [Rollback\n    transactions](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Internal.hs#L172).\n\n## Block Headers Classification\n\nA header can be classified as:\n\n1.  [Continues](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L51),\n2.  [Alternative](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L54),\n3.  [Invalid](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L59),\n4.  [Useless](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L57).\n\nA header is treated as **continues** if [verification is\nsucceed](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L120):\nheader is a direct continuation of the main chain (i.e. its parent is our tip).\n\nA header is treated as **alternative** if header's parent is not our tip and\n[it's more difficult than our main\nchain](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L124).\n\nA header is treated as **invalid** if there are [any errors in the chain of\nheaders](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L170)\nor if there is [no block corresponding to parent of oldest element in chain\n(should be one of\ncheckpoints)](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L172).\n\nA header is treated as **useless** in different conditions (e.g. if header's\nslot is [less or equal than our tip's\nslot](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L94),\nor header [doesn't continue main chain and is not more\ndifficult](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L129)).\n",
        "type": "MarkdownRemark",
        "contentDigest": "34b7a140db59d9948a4bcbef8226e50c",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "Blocks in Cardano SL",
        "path": "/en/technical/blocks-in-cardano-sl/",
        "group": "technical",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-07-blocks.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-07-blocks.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n<!-- Reviewed at ac0126b2753f1f5ca6fbfb555783fbeb1aa141bd -->\n\n# Blocks in Cardano SL\n\nThis guide describes block design and the logic of the block handling.\n\nThe block-related types are defined in\n[Pos.Block.Core.Main.Types](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Main/Types.hs)\nmodule and\n[Pos.Block.Core.Genesis.Types](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Genesis/Types.hs).\nThe logic of work with blocks is defined in\n[Pos.Block.Logic.\\*](https://github.com/input-output-hk/cardano-sl/tree/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic)\nmodules.\n\n## Design\n\nA block is a fundamental part of the ledger. There are two types of blocks:\n[**main**](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Main/Types.hs#L110)\nblocks and\n[**genesis**](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Genesis/Types.hs#L66)\nblocks.\n\n### Main Block\n\nA main block consists of a *header* and a *body*. The\n[header](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/core/Pos/Core/Block.hs#L99)\ncontains meta-information about the block:\n\n1.  A pointer to the header of previous block block signature.\n2.  Proof of body.\n3.  Consensus data to verify consensus algorithm.\n4.  Some extra-data.\n\nThe [block's\nbody](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Main/Chain.hs#L64)\ncontains payloads and some extra-data as well. Payloads include:\n\n1.  [Transactions\n    payload](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Main/Chain.hs#L66).\n    This payload is the main one. Transactions are stored in the Merkle tree.\n    This payload includes [list of\n    witnesses](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Txp/Core/Types.hs#L283)\n    as well. Please read about [Transactions in Cardano\n    SL](/cardano/transactions/) for more info about transaction and witnesses.\n2.  [SSC\n    payload](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Main/Chain.hs#L68).\n    SSC (Shared Seed Computation) is used for the [Follow-the-Satoshi\n    algorithm](/cardano/proof-of-stake/#follow-the-satoshi). Within every epoch,\n    slot-leaders for the next epoch must be elected. These slot-leaders will be\n    able to generate new main blocks and add them to the ledger. So SSC is used\n    as a source of randomness for the leader election process.\n3.  [Delegation\n    payload](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Main/Chain.hs#L70).\n    This payload consists of a [list of heavyweight proxy signing\n    keys](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Delegation/Types.hs#L49).\n    Please read about [Stake Delegation in Cardano SL](/technical/delegation/)\n    for more info.\n4.  [Update\n    payload](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Main/Chain.hs#L72).\n    It contains a\n    [proposal](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/update/Pos/Update/Core/Types.hs#L300)\n    for software update and a [list of\n    votes](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/update/Pos/Update/Core/Types.hs#L301)\n    for the particular update. Please read about [Update System\n    Model](/cardano/update-mechanism/) for more info.\n\n### Genesis Block\n\nA genesis block doesn't contain transactions, and there is just one genesis\nblock for each epoch. Genesis blocks have a header and a body, just like main\nblocks. The body of the block contains:\n\n1.  [An index of the\n    epoch](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Genesis/Chain.hs#L33)\n    this block is associated with.\n2.  The list of slot-leaders for this epoch. This list [cannot be\n    empty](https://github.com/input-output-hk/cardano-sl/blob/b4b2c282b0e2a2e4415163e70dcb559396a2237c/core/Pos/Core/Types.hs#L272).\n3.  [Chain\n    difficulty](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Genesis/Chain.hs#L35).\n    It represents efforts necessary to generate a chain, it's the number of main\n    blocks in the chain.\n\n## Block Handling Logic\n\nWe work with blocks and block headers. Fundamentally, we can:\n\n-   create a block,\n-   verify a block,\n-   apply a block,\n-   rollback a block,\n\nand:\n\n-   get block headers by different criteria,\n-   classify block headers.\n\n## Block Creation\n\nAs mentioned above, there are two kinds of blocks: **main** blocks and\n**genesis** blocks. A main block is created with the\n[`createMainBlock`](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L156)\nfunction, and a genesis block is created with the\n[`createGenesisBlock`](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L92)\nfunction.\n\n### Main Block Creation\n\nWe try to create a new main block on top of the best chain if possible. A new\nblock can be created if the following conditions are met:\n\n-   We know the genesis block for the epoch from the given slot ID,\n-   The last known block is not more than\n    [`slotSecurityParam`](https://github.com/input-output-hk/cardano-sl/blob/f571087e5b5af339767198141981c850227ca99c/core/Pos/Core/Constants.hs#L86)\n    blocks away from given slot ID.\n\nThe value of `slotSecurityParam` (which actually is a number of slots) depends\non maximum number of blocks which can be rolled back. This [maximum\nnumber](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/core/Pos/Core/Constants.hs#L81)\nis a security parameter from the [paper](/glossary/#paper).\n\nFirst of all, we have to check whether our software can create a block\n[according to current global\nstate](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Update/Logic/Global.hs#L139).\nIf it can't, we\n[report](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L172)\nabout it. If it can, we [create and apply\nblock](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L206).\n\n### Genesis Block Creation\n\nA genesis block is created for the current epoch when the head of currently\nknown best chain is\n[`MainBlock`](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Main/Types.hs#L112)\ncorresponding to one of the last\n[`slotSecurityParam`](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/core/Pos/Core/Constants.hs#L81)\nslots of (i - 1)-th epoch.\n\nFirst of all, we try to get the slot-leaders. If there's [no\nleaders](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L99)\nor [not enough blocks for\nLRC](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L102)\n(Leaders and Richmen Computation), an error is reported. Otherwise we're trying\nto actually create [a new genesis\nblock](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L115).\nHowever, sometimes we [shouldn't create\none](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L106).\nFor example, we shouldn't do it [for the 0th\nepoch](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L108)\nbecause genesis block for 0th epoch is hardcoded.\n\n## Block Application\n\nWe apply blocks using the\n[`applyBlocks`](https://github.com/input-output-hk/cardano-sl/blob/09e4fcf8a7f1a5a587d0241aa93f23e2d72c7c70/src/Pos/Block/Logic/VAR.hs#L182)\nfunction. The sequence of blocks should be definitely valid: we must verify all\npredicates and data checks regarding blocks.\n\n**Important**: all blocks in that sequence must be of the same epoch!\n\nIf all conditions are met, we [actually apply\nblocks](https://github.com/input-output-hk/cardano-sl/blob/09e4fcf8a7f1a5a587d0241aa93f23e2d72c7c70/src/Pos/Block/Logic/Internal.hs#L107):\n\n-   [apply US (Update\n    System)](https://github.com/input-output-hk/cardano-sl/blob/09e4fcf8a7f1a5a587d0241aa93f23e2d72c7c70/src/Pos/Block/Logic/Internal.hs#L141),\n-   [apply\n    delegation](https://github.com/input-output-hk/cardano-sl/blob/09e4fcf8a7f1a5a587d0241aa93f23e2d72c7c70/src/Pos/Block/Logic/Internal.hs#L142),\n-   [apply\n    transactions](https://github.com/input-output-hk/cardano-sl/blob/09e4fcf8a7f1a5a587d0241aa93f23e2d72c7c70/src/Pos/Block/Logic/Internal.hs#L143).\n\nMoreover, we can verify blocks before application (i.e. apply blocks only if\nthey're valid). We use\n[`verifyAndApplyBlocks`](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/VAR.hs#L99)\nfunction for it. If some error occurred during application, there are two\noptions:\n\n1.  All blocks applied inside this function will be [rolled\n    back](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/VAR.hs#L137).\n2.  This function will try to apply [as many blocks as\n    possible](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/VAR.hs#L126).\n\n## Block Rollback\n\nYou can think about a rollback as the opposite of application: when a rollback\nis performed, all changes made by the application are cancelled. To do this, the\n[`rollbackBlocks`](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/VAR.hs#L208)\nfunction is used.\n\nWe get the tip and the first block to rollback. If they do not match, an error\nis reported. If they match, we [actually rollback the sequence of\nblocks](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Internal.hs#L167):\n\n-   [Rollback\n    delegation](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Internal.hs#L173),\n    erases mempool of certificates,\n-   [Rollback\n    US](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Internal.hs#L174),\n-   [Rollback\n    transactions](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Internal.hs#L172).\n\n## Block Headers Classification\n\nA header can be classified as:\n\n1.  [Continues](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L51),\n2.  [Alternative](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L54),\n3.  [Invalid](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L59),\n4.  [Useless](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L57).\n\nA header is treated as **continues** if [verification is\nsucceed](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L120):\nheader is a direct continuation of the main chain (i.e. its parent is our tip).\n\nA header is treated as **alternative** if header's parent is not our tip and\n[it's more difficult than our main\nchain](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L124).\n\nA header is treated as **invalid** if there are [any errors in the chain of\nheaders](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L170)\nor if there is [no block corresponding to parent of oldest element in chain\n(should be one of\ncheckpoints)](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L172).\n\nA header is treated as **useless** in different conditions (e.g. if header's\nslot is [less or equal than our tip's\nslot](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L94),\nor header [doesn't continue main chain and is not more\ndifficult](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L129)).\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-07-blocks.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-16-delegation.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-16-delegation.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-16-delegation.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: Stake Delegation in Cardano SL\npath: /en/technical/stake-delegation-in-cardano-sl/\ngroup: technical\nlanguage: en\nlabel: docs\n---\n<!-- Reviewed at c23493d7a33a82d559d5bd9d289486795cf6592f -->\n\n# Stake Delegation in Cardano SL\n\nThis chapter describes implementation details of the stake delegation process.\n\nAs described earlier, stakeholders selected as slot leaders must be online in\norder to generate new blocks. However, such a situation can be unattractive,\nbecause a majority of elected stakeholders must participate in the Coin Tossing\nprotocol for refreshing randomness (crucial attribute of the slot leader\nelection process). If there are a lot of elected stakeholders, this can put a\nstrain on the stakeholders and the network, since it might require broadcasting\nand storing a large number of commitments and shares.\n\nDelegation feature allows stakeholders called _issuers_ `I1...In` to transfer their\n\"committee participation\" to some _delegates_ `D1...Dm`. These delegates will represent\nstakeholders `S1...Sn` in the [Coin Tossing protocol](https://github.com/input-output-hk/cardano-sl/blob/4bd49d6b852e778c52c60a384a47681acec02d22/src/Pos/Ssc/GodTossing.hs). In this case the actual\nnumber of nodes participating in the Coin Tossing protocol can be much lower,\nsee [paper](/glossary/#paper), page 38.\n\nMoreover, delegates are able not only to generate new blocks or taking part in [MPC/SSC](/technical/leader-selection/#follow-the-satoshi), but also to vote in the [Update system](/cardano/update-mechanism/).\n\n## Schema\n\nThe slot leader can transfer its right to generate a new block to the delegate. To do\nit, the slot-leader uses a *delegation-by-proxy* scheme: the slot leader generates [a proxy\nsigning key](https://github.com/input-output-hk/cardano-sl/blob/4378a616654ff47faf828ef51ab2f455fa53d3a3/core/Pos/Crypto/SignTag.hs#L33), or PSK, and the delegate will use it [to\nsign](https://github.com/input-output-hk/cardano-sl/blob/ed6db6c8a44489e2919cd0e01582f638f4ad9b72/src/Pos/Delegation/Listeners.hs#L65)\nmessages to authenticate a block. There are two kinds of PSKs, heavyweight and\nlightweight (see below).\n\nSpecifically, the stakeholder forms a special certificate specifying the delegates\nidentity via its public key. So later the delegate can sign messages within the\nvalid message space by providing signatures for these messages under its own\npublic key along with the signed certificate.\n\nThis is the format of a [proxy\nsignature](https://github.com/input-output-hk/cardano-sl/blob/d01d392d49db8a25e17749173ec9bce057911191/core/Pos/Crypto/Signing.hs#L256).\nIt includes:\n\n1.  proxy secret key,\n2.  signature.\n\nThe proxy secret key includes:\n\n1.  omega value,\n2.  issuer's public key,\n3.  delegate's public key,\n4.  proxy certificate.\n\nOmega (or ω) is a special value from the [paper](/glossary/#paper). In our\nimplementation, it is a [pair of epochs'\nidentifiers](https://github.com/input-output-hk/cardano-sl/blob/f374a970dadef0fe62cf69e8b9a6b8cc606b5c7d/core/Pos/Core/Types.hs#L235). These identifiers define the delegation validity period: the produced block is\nvalid if its epoch index is inside this range.\n\n[Proxy certificate](https://github.com/input-output-hk/cardano-sl/blob/d01d392d49db8a25e17749173ec9bce057911191/core/Pos/Crypto/Signing.hs#L209)\nis a [signature](https://github.com/input-output-hk/cardano-crypto/blob/84f8c358463bbf6bb09168aac5ad990faa9d310a/src/Cardano/Crypto/Wallet.hs#L74)\nof omega and delegate's public key.\n\n## Heavyweight Delegation\n\nHeavyweight delegation is using stake threshold `T`. It means that stakeholder\nhas to posses not less than `T` in order to participate in heavyweight\ndelegation. The value of this threshold is defined in the [configuration file](https://github.com/input-output-hk/cardano-sl/blob/42f413b65eeacb59d0b439d04073edcc5adc2656/lib/configuration.yaml#L224). Thus, the value of threshold for Mainnet is 0.03% of\nthe total stake. This value can be changed by update system.\n\nProxy signing certificates from heavyweight delegation are stored within the blockchain.\nPlease note that issuer can post only one certificate per one epoch.\n\nPlease note that heavyweight delegation has transitive relation. Thus, if `A` delegates to `B`\nand after that `B` delegates to `C` then `C`'s delegated stake is equal to the sum `A + B`, not\njust `B`.\n\n### Expiration\n\nHeavyweight delegation certificates expire in the beginning of every epoch if\nstakeholder does not pass threshold `T` anymore. This is made to prevent delegation\npool bloat attacks where user commits a certificate and moves all his money (above threshold)\nto another account, and then repeats the operation.\n\n## Lightweight Delegation\n\n**WARNING: Currently, lightweight delegation is disabled and will be reworked in [Shelley release](https://cardanoroadmap.com/),\nso information below can be outdated.**\n\nIn contrast to heavyweight delegation, lightweight delegation doesn't require\nthat delegate posses `T`-or-more stake. So lightweight delegation is available\nfor any node. But proxy signing certificates for lightweight delegation are not\nstored in the blockchain, so lightweight delegation certificate must be broadcasted\nto reach delegate.\n\nLater lightweight PSK can be\n[verified](https://github.com/input-output-hk/cardano-sl/blob/42f413b65eeacb59d0b439d04073edcc5adc2656/lib/src/Pos/Delegation/Logic/Mempool.hs#L309)\ngiven issuer's public key, signature and message itself.\n\nPlease note that the rule \"only one certificate per epoch\" doesn't apply to lightweight delegation.\nSince lightweight delegation certificates are not stored in the blockchain it's possible to issue\na lot of lightweight certificates per epoch and blockchain won't be bloated.\n\n### Confirmation of proxy signature delivery\n\nThe delegate should take the proxy signing key he has and make a signature of PSK using\nPSK and delegate's key. If the signature is correct, then it was done by the delegate\n(guaranteed by the PSK scheme).\n\n## Why Two Delegations?\n\nYou can think of heavyweight and lightweight delegations as of strong and weak delegations correspondingly.\n\nHeavyweight certificates are stored in the blockchain, so delegated stake may participate in MPC\nby being added to the stake of delegate. So delegate by many heavyweight delegations may accumulate\nenough stake to pass eligibility threshold. Moreover, heavyweight delegates can participate in voting\nfor Cardano SL updates.\n\nOn the contrary, stake for lightweight delegation won't be counted in delegate's MPC-related stake. So\nlightweight delegation can be used for block generation only.\n\n## Revocation Certificate\n\nRevocation certificate is a special certificate that issuer creates to revoke delegation.\nBoth heavyweight and lightweight delegation can be revoked, but not in the same way.\n\nThe revocation certificate is the same as standard PSK where issuer and delegate are the same\n(in other words, issuer delegates to himself).\n\nTo revoke lightweight delegation issuer sends revocation certificate to the network and\n_asks_ to revoke delegation, but it cannot _enforce_ this revocation, since lightweight PSKs\nare not the part of the blockchain. So theoretically lightweight delegate can ignore revocation\ncertificate, and in this case it will remain a delegate until its delegation certificate expires.\nBut such a situation won't compromise the blockchain.\n\nRevocation of heavyweight delegation is handled other way. Since proxy signing certificates\nfrom heavyweight delegation are stored within the blockchain, revocation certificate will be\ncommitted in the blockchain as well. In this case the node removes heavyweight delegation\ncertificate which was issued before revocation certificate. But there are three important notes\nabout it:\n\n1.  If the committed heavyweight delegation certificate is in the node's memory pool, and revocation\n    certificate was committed as well, the delegation certificate will be removed from the memory pool.\n    Obviously, in this case delegation certificate will never be added to the blockchain.\n2.  If a user commits heavyweight delegation certificate and _after that_ he loses its money, he still\n    can revoke that delegation, even if by that time he does not have enough money (i.e. amount of money\n    he has is less than threshold `T` mentioned above).\n3.  Although an issuer can post only one certificate in the current epoch, he _can_ revoke his heavyweight\n    delegation in the same epoch.\n",
        "type": "MarkdownRemark",
        "contentDigest": "4fbbb522fd425950d8e95c4067addaac",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "Stake Delegation in Cardano SL",
        "path": "/en/technical/stake-delegation-in-cardano-sl/",
        "group": "technical",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-16-delegation.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-16-delegation.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at c23493d7a33a82d559d5bd9d289486795cf6592f -->\n\n# Stake Delegation in Cardano SL\n\nThis chapter describes implementation details of the stake delegation process.\n\nAs described earlier, stakeholders selected as slot leaders must be online in\norder to generate new blocks. However, such a situation can be unattractive,\nbecause a majority of elected stakeholders must participate in the Coin Tossing\nprotocol for refreshing randomness (crucial attribute of the slot leader\nelection process). If there are a lot of elected stakeholders, this can put a\nstrain on the stakeholders and the network, since it might require broadcasting\nand storing a large number of commitments and shares.\n\nDelegation feature allows stakeholders called _issuers_ `I1...In` to transfer their\n\"committee participation\" to some _delegates_ `D1...Dm`. These delegates will represent\nstakeholders `S1...Sn` in the [Coin Tossing protocol](https://github.com/input-output-hk/cardano-sl/blob/4bd49d6b852e778c52c60a384a47681acec02d22/src/Pos/Ssc/GodTossing.hs). In this case the actual\nnumber of nodes participating in the Coin Tossing protocol can be much lower,\nsee [paper](/glossary/#paper), page 38.\n\nMoreover, delegates are able not only to generate new blocks or taking part in [MPC/SSC](/technical/leader-selection/#follow-the-satoshi), but also to vote in the [Update system](/cardano/update-mechanism/).\n\n## Schema\n\nThe slot leader can transfer its right to generate a new block to the delegate. To do\nit, the slot-leader uses a *delegation-by-proxy* scheme: the slot leader generates [a proxy\nsigning key](https://github.com/input-output-hk/cardano-sl/blob/4378a616654ff47faf828ef51ab2f455fa53d3a3/core/Pos/Crypto/SignTag.hs#L33), or PSK, and the delegate will use it [to\nsign](https://github.com/input-output-hk/cardano-sl/blob/ed6db6c8a44489e2919cd0e01582f638f4ad9b72/src/Pos/Delegation/Listeners.hs#L65)\nmessages to authenticate a block. There are two kinds of PSKs, heavyweight and\nlightweight (see below).\n\nSpecifically, the stakeholder forms a special certificate specifying the delegates\nidentity via its public key. So later the delegate can sign messages within the\nvalid message space by providing signatures for these messages under its own\npublic key along with the signed certificate.\n\nThis is the format of a [proxy\nsignature](https://github.com/input-output-hk/cardano-sl/blob/d01d392d49db8a25e17749173ec9bce057911191/core/Pos/Crypto/Signing.hs#L256).\nIt includes:\n\n1.  proxy secret key,\n2.  signature.\n\nThe proxy secret key includes:\n\n1.  omega value,\n2.  issuer's public key,\n3.  delegate's public key,\n4.  proxy certificate.\n\nOmega (or ω) is a special value from the [paper](/glossary/#paper). In our\nimplementation, it is a [pair of epochs'\nidentifiers](https://github.com/input-output-hk/cardano-sl/blob/f374a970dadef0fe62cf69e8b9a6b8cc606b5c7d/core/Pos/Core/Types.hs#L235). These identifiers define the delegation validity period: the produced block is\nvalid if its epoch index is inside this range.\n\n[Proxy certificate](https://github.com/input-output-hk/cardano-sl/blob/d01d392d49db8a25e17749173ec9bce057911191/core/Pos/Crypto/Signing.hs#L209)\nis a [signature](https://github.com/input-output-hk/cardano-crypto/blob/84f8c358463bbf6bb09168aac5ad990faa9d310a/src/Cardano/Crypto/Wallet.hs#L74)\nof omega and delegate's public key.\n\n## Heavyweight Delegation\n\nHeavyweight delegation is using stake threshold `T`. It means that stakeholder\nhas to posses not less than `T` in order to participate in heavyweight\ndelegation. The value of this threshold is defined in the [configuration file](https://github.com/input-output-hk/cardano-sl/blob/42f413b65eeacb59d0b439d04073edcc5adc2656/lib/configuration.yaml#L224). Thus, the value of threshold for Mainnet is 0.03% of\nthe total stake. This value can be changed by update system.\n\nProxy signing certificates from heavyweight delegation are stored within the blockchain.\nPlease note that issuer can post only one certificate per one epoch.\n\nPlease note that heavyweight delegation has transitive relation. Thus, if `A` delegates to `B`\nand after that `B` delegates to `C` then `C`'s delegated stake is equal to the sum `A + B`, not\njust `B`.\n\n### Expiration\n\nHeavyweight delegation certificates expire in the beginning of every epoch if\nstakeholder does not pass threshold `T` anymore. This is made to prevent delegation\npool bloat attacks where user commits a certificate and moves all his money (above threshold)\nto another account, and then repeats the operation.\n\n## Lightweight Delegation\n\n**WARNING: Currently, lightweight delegation is disabled and will be reworked in [Shelley release](https://cardanoroadmap.com/),\nso information below can be outdated.**\n\nIn contrast to heavyweight delegation, lightweight delegation doesn't require\nthat delegate posses `T`-or-more stake. So lightweight delegation is available\nfor any node. But proxy signing certificates for lightweight delegation are not\nstored in the blockchain, so lightweight delegation certificate must be broadcasted\nto reach delegate.\n\nLater lightweight PSK can be\n[verified](https://github.com/input-output-hk/cardano-sl/blob/42f413b65eeacb59d0b439d04073edcc5adc2656/lib/src/Pos/Delegation/Logic/Mempool.hs#L309)\ngiven issuer's public key, signature and message itself.\n\nPlease note that the rule \"only one certificate per epoch\" doesn't apply to lightweight delegation.\nSince lightweight delegation certificates are not stored in the blockchain it's possible to issue\na lot of lightweight certificates per epoch and blockchain won't be bloated.\n\n### Confirmation of proxy signature delivery\n\nThe delegate should take the proxy signing key he has and make a signature of PSK using\nPSK and delegate's key. If the signature is correct, then it was done by the delegate\n(guaranteed by the PSK scheme).\n\n## Why Two Delegations?\n\nYou can think of heavyweight and lightweight delegations as of strong and weak delegations correspondingly.\n\nHeavyweight certificates are stored in the blockchain, so delegated stake may participate in MPC\nby being added to the stake of delegate. So delegate by many heavyweight delegations may accumulate\nenough stake to pass eligibility threshold. Moreover, heavyweight delegates can participate in voting\nfor Cardano SL updates.\n\nOn the contrary, stake for lightweight delegation won't be counted in delegate's MPC-related stake. So\nlightweight delegation can be used for block generation only.\n\n## Revocation Certificate\n\nRevocation certificate is a special certificate that issuer creates to revoke delegation.\nBoth heavyweight and lightweight delegation can be revoked, but not in the same way.\n\nThe revocation certificate is the same as standard PSK where issuer and delegate are the same\n(in other words, issuer delegates to himself).\n\nTo revoke lightweight delegation issuer sends revocation certificate to the network and\n_asks_ to revoke delegation, but it cannot _enforce_ this revocation, since lightweight PSKs\nare not the part of the blockchain. So theoretically lightweight delegate can ignore revocation\ncertificate, and in this case it will remain a delegate until its delegation certificate expires.\nBut such a situation won't compromise the blockchain.\n\nRevocation of heavyweight delegation is handled other way. Since proxy signing certificates\nfrom heavyweight delegation are stored within the blockchain, revocation certificate will be\ncommitted in the blockchain as well. In this case the node removes heavyweight delegation\ncertificate which was issued before revocation certificate. But there are three important notes\nabout it:\n\n1.  If the committed heavyweight delegation certificate is in the node's memory pool, and revocation\n    certificate was committed as well, the delegation certificate will be removed from the memory pool.\n    Obviously, in this case delegation certificate will never be added to the blockchain.\n2.  If a user commits heavyweight delegation certificate and _after that_ he loses its money, he still\n    can revoke that delegation, even if by that time he does not have enough money (i.e. amount of money\n    he has is less than threshold `T` mentioned above).\n3.  Although an issuer can post only one certificate in the current epoch, he _can_ revoke his heavyweight\n    delegation in the same epoch.\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-16-delegation.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-15-pvss.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-15-pvss.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-15-pvss.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: Cardano SL PVSS\npath: /en/technical/cardano-sl-pvss/\ngroup: technical\nlanguage: en\nlabel: docs\n---\n<!-- Reviewed at 18852484704ff4a7ce3fcac2791499c340eb8e02 -->\n\n# PVSS Implementation in Cardano SL\n\nPublicly Verifiable Secret Sharing (PVSS) Scheme used in Cardano SL is based on\n\"SCRAPE: Scalable Randomness Attested by Public Entities\", [paper](https://eprint.iacr.org/2017/216.pdf)\nby Ignacio Cascudo and Bernardo David. Further we'll refer to this paper's pages,\nfor example `[6]` means the 6-th page.\n\nThis guide describes implementation details of `pvss-haskell`\n[library](https://github.com/input-output-hk/pvss-haskell) used by\n[cardano-sl](https://github.com/input-output-hk/cardano-sl/blob/65e295599817ec1f52f225810264d856f882fbb7/core/Pos/Crypto/SecretSharing.hs#L1)\nlibrary.\n\n## What is PVSS\n\nThe core idea of VSS Scheme is an ability of participants to verify their own\nshares, for successful reconstruction of the secret (previously distributed by a\ndealer among the participants). But core idea of PVSS Scheme is that not just\nthe participants can verify their shares, but that anybody can verify that the\nparticipants received correct shares. So it's required (for our reconstruction\nprotocol) that participants not only release their shares but also that they\nprovide a proof of correctness for each share released (`[9]`).\n\nWe use `t-out-of-n` reconstruction scheme (`[8]`), where `n` is a number of\nparticipants and `t` is a threshold number, so any subset of `t+1` shares can be\nused to successfully recover the secret.\n\nSo, the protocol consists of four fundamental phases (`[8]`):\n\n1.  setup,\n2.  distribution,\n3.  verification,\n4.  reconstruction.\n\n## Setup\n\nEach participant `Pi` must generate its private key `SKi` and register its public key `PKi`.\n\n## Distribution\n\nFirst of all, we prepare a new escrowing context. To do it we need a\n[threshold](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L76)\nvalue mentioned above and a list of [public\nkeys](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L175)\nof participants. Result of this operation is\n[`Escrow`](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L120)\nvalue which includes:\n\n1.  [Extra generator](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L85),\n2.  [Polynomial](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/Polynomial.hs#L24),\n3.  [Secret](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L89),\n4.  [Proof](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/DLEQ.hs#L39).\n\nExtra generator is based on a\n[Point](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/ECC.hs#L92)\n([Elliptic Curve\nPoint](http://hackage.haskell.org/package/cryptonite-openssl-0.6/docs/Crypto-OpenSSL-ECC.html#t:EcPoint)).\nWe use `prime256v1` elliptic curve, see\n[RFC](https://www.ietf.org/rfc/rfc5480.txt).\n\nPolynomial is a group of coefficient starting from the smallest degree (these\ncoefficients are\n[Scalar](http://hackage.haskell.org/package/cryptonite-0.23/docs/Crypto-PubKey-ECC-P256.html#t:Scalar)\nvalues).\n\nSecret is based on a\n[Point](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/ECC.hs#L92)\nas well, actually it's the [first\nelement](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L140)\nof polynomial mentioned above.\n\nProof is\n[generated](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/DLEQ.hs#L62)\nfrom a\n[challenge](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L142),\n[raw\nsecret](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L140)\nand\n[DLEQ-parameters](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L143).\n\nChallenge is based on [cryptographic\nhash](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/ECC.hs#L125).\n\nAfter that we have to [finish escrow\ncreation](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L168).\nList of participants' public keys is used to [create encrypted\nshares](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L202)\nand\n[commitments](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L188).\nEncrypted share includes:\n\n1.  [Share ID](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L82),\n2.  [Value](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L99)\n    encrypted by participant's public key,\n3.  [Proof](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L99)\n    that this share is valid (`[8]`).\n\n## Verification\n\nNow commitments and encrypted shares can be published among participants. Due\nthe public nature of PVSS scheme anyone who knows public keys can [verify\ndecrypted\nshares](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L249)\nvia hashes matching (`[8]`).\n\n## Reconstruction\n\nFirst of all, participant must [decrypt encrypted\nshare](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L230)\nusing [keys\npair](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/ECC.hs#L59)\nwith its\n[private](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/ECC.hs#L80)\nand\n[public](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/ECC.hs#L84)\nkeys. To obtain DLEQ value, we use `prime256v1` [curve\ngenerator](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/ECC.hs#L156).\nAs a result, we get\n[`DecryptedShare`](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L109).\nIts structure is the same as encrypted share.\n\nSince decrypted share contains a proof, we can be sure that decrypted share is\nthe same as encrypted one, there's [verification\nfunction](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L260)\nfor it. To [do\nit](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/DLEQ.hs#L74)\nwe use DLEQ value and [proof from the decrypted\nshare](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L263).\nActual verifying is a\n[comparison](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/DLEQ.hs#L77)\nof the\n[hash](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/ECC.hs#L146)\nof DLEQ points.\n\nNow, if we have `t+1` decrypted shares we can [recover a\nsecret](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L285).\n\nRecovered secret can be\n[verified](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L267)\nas well, so we can be sure that secret recovered is the same escrow. To do it,\nwe need not just a proof and a secret, but\n[commitments](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L268)\nas well (actually, the [first\none](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L278).\n\n## VSS Certificate\n\nAs [said\nearlier](/cardano/differences/#coin-tossing-and-verifiable-secret-sharing), one\nof the challenges while using a PVSS scheme is associating the public key used\nfor signing with the [public\nkey](https://github.com/input-output-hk/cardano-sl/blob/fefc39f058f5a053fc1e59bc3594bdadf7699ca0/core/Pos/Crypto/SecretSharing.hs#L57)\nused for VSS scheme. This is solved by introducing [VSS\ncertificate](https://github.com/input-output-hk/cardano-sl/blob/f0de5f1dd31cc4afb0c67a24deca713cf6304814/core/Pos/Core/Vss/Types.hs#L46).\n\nVSS certificate includes:\n\n1.  Public key used for the VSS scheme (e.g. [VSS\n    key](https://github.com/input-output-hk/cardano-sl/blob/fefc39f058f5a053fc1e59bc3594bdadf7699ca0/core/Pos/Crypto/SecretSharing.hs#L57)).\n2.  Public key used for signing (e.g. [signing\n    key](https://github.com/input-output-hk/cardano-sl/blob/f0de5f1dd31cc4afb0c67a24deca713cf6304814/core/Pos/Core/Vss/Types.hs#L51)).\n3.  Index of an expiry epoch (e.g. the last epoch when this certificate was\n    valid).\n4.  Signature of a pair `(A,B)`, where `A` is a VSS key and `B` is an epoch\n    index.\n\nInitially, all stakeholders with enough stake to participate in randomness\ngeneration (we call them [richmen](/glossary/#richman)) [have their own\ncertificates](https://github.com/input-output-hk/cardano-sl/blob/35c6bff7409472352140f5207a7c79c59d8eaa8f/ssc/Pos/Ssc/GodTossing/Workers.hs#L163).\nWhen a new stakeholder having enough stake appears, or when an existing\ncertificate expires, a new certificate should be generated and [submitted to the\nnetwork](https://github.com/input-output-hk/cardano-sl/blob/35c6bff7409472352140f5207a7c79c59d8eaa8f/ssc/Pos/Ssc/GodTossing/Workers.hs#L166).\nOther nodes accept this certificate if it's valid and if the node has enough\nstake. Certificates are stored in blocks.\n\nPlease note that VSS certificate must be stable before usage! If an epoch we\nretrieve certificates for is the first one (i.e. has index `0`), stable\ncertificates are [genesis\nones](https://github.com/input-output-hk/cardano-sl/blob/35c6bff7409472352140f5207a7c79c59d8eaa8f/ssc/Pos/Ssc/GodTossing/Functions.hs#L139).\nOtherwise stable certificate are [non-expired certificates for the last known\nslot](https://github.com/input-output-hk/cardano-sl/blob/35c6bff7409472352140f5207a7c79c59d8eaa8f/ssc/Pos/Ssc/GodTossing/Functions.hs#L141).\n",
        "type": "MarkdownRemark",
        "contentDigest": "3e244b7c4c93b80a0e8266f5fd9ca01d",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "Cardano SL PVSS",
        "path": "/en/technical/cardano-sl-pvss/",
        "group": "technical",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-15-pvss.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-15-pvss.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at 18852484704ff4a7ce3fcac2791499c340eb8e02 -->\n\n# PVSS Implementation in Cardano SL\n\nPublicly Verifiable Secret Sharing (PVSS) Scheme used in Cardano SL is based on\n\"SCRAPE: Scalable Randomness Attested by Public Entities\", [paper](https://eprint.iacr.org/2017/216.pdf)\nby Ignacio Cascudo and Bernardo David. Further we'll refer to this paper's pages,\nfor example `[6]` means the 6-th page.\n\nThis guide describes implementation details of `pvss-haskell`\n[library](https://github.com/input-output-hk/pvss-haskell) used by\n[cardano-sl](https://github.com/input-output-hk/cardano-sl/blob/65e295599817ec1f52f225810264d856f882fbb7/core/Pos/Crypto/SecretSharing.hs#L1)\nlibrary.\n\n## What is PVSS\n\nThe core idea of VSS Scheme is an ability of participants to verify their own\nshares, for successful reconstruction of the secret (previously distributed by a\ndealer among the participants). But core idea of PVSS Scheme is that not just\nthe participants can verify their shares, but that anybody can verify that the\nparticipants received correct shares. So it's required (for our reconstruction\nprotocol) that participants not only release their shares but also that they\nprovide a proof of correctness for each share released (`[9]`).\n\nWe use `t-out-of-n` reconstruction scheme (`[8]`), where `n` is a number of\nparticipants and `t` is a threshold number, so any subset of `t+1` shares can be\nused to successfully recover the secret.\n\nSo, the protocol consists of four fundamental phases (`[8]`):\n\n1.  setup,\n2.  distribution,\n3.  verification,\n4.  reconstruction.\n\n## Setup\n\nEach participant `Pi` must generate its private key `SKi` and register its public key `PKi`.\n\n## Distribution\n\nFirst of all, we prepare a new escrowing context. To do it we need a\n[threshold](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L76)\nvalue mentioned above and a list of [public\nkeys](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L175)\nof participants. Result of this operation is\n[`Escrow`](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L120)\nvalue which includes:\n\n1.  [Extra generator](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L85),\n2.  [Polynomial](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/Polynomial.hs#L24),\n3.  [Secret](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L89),\n4.  [Proof](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/DLEQ.hs#L39).\n\nExtra generator is based on a\n[Point](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/ECC.hs#L92)\n([Elliptic Curve\nPoint](http://hackage.haskell.org/package/cryptonite-openssl-0.6/docs/Crypto-OpenSSL-ECC.html#t:EcPoint)).\nWe use `prime256v1` elliptic curve, see\n[RFC](https://www.ietf.org/rfc/rfc5480.txt).\n\nPolynomial is a group of coefficient starting from the smallest degree (these\ncoefficients are\n[Scalar](http://hackage.haskell.org/package/cryptonite-0.23/docs/Crypto-PubKey-ECC-P256.html#t:Scalar)\nvalues).\n\nSecret is based on a\n[Point](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/ECC.hs#L92)\nas well, actually it's the [first\nelement](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L140)\nof polynomial mentioned above.\n\nProof is\n[generated](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/DLEQ.hs#L62)\nfrom a\n[challenge](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L142),\n[raw\nsecret](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L140)\nand\n[DLEQ-parameters](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L143).\n\nChallenge is based on [cryptographic\nhash](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/ECC.hs#L125).\n\nAfter that we have to [finish escrow\ncreation](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L168).\nList of participants' public keys is used to [create encrypted\nshares](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L202)\nand\n[commitments](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L188).\nEncrypted share includes:\n\n1.  [Share ID](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L82),\n2.  [Value](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L99)\n    encrypted by participant's public key,\n3.  [Proof](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L99)\n    that this share is valid (`[8]`).\n\n## Verification\n\nNow commitments and encrypted shares can be published among participants. Due\nthe public nature of PVSS scheme anyone who knows public keys can [verify\ndecrypted\nshares](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L249)\nvia hashes matching (`[8]`).\n\n## Reconstruction\n\nFirst of all, participant must [decrypt encrypted\nshare](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L230)\nusing [keys\npair](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/ECC.hs#L59)\nwith its\n[private](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/ECC.hs#L80)\nand\n[public](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/ECC.hs#L84)\nkeys. To obtain DLEQ value, we use `prime256v1` [curve\ngenerator](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/ECC.hs#L156).\nAs a result, we get\n[`DecryptedShare`](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L109).\nIts structure is the same as encrypted share.\n\nSince decrypted share contains a proof, we can be sure that decrypted share is\nthe same as encrypted one, there's [verification\nfunction](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L260)\nfor it. To [do\nit](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/DLEQ.hs#L74)\nwe use DLEQ value and [proof from the decrypted\nshare](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L263).\nActual verifying is a\n[comparison](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/DLEQ.hs#L77)\nof the\n[hash](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/ECC.hs#L146)\nof DLEQ points.\n\nNow, if we have `t+1` decrypted shares we can [recover a\nsecret](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L285).\n\nRecovered secret can be\n[verified](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L267)\nas well, so we can be sure that secret recovered is the same escrow. To do it,\nwe need not just a proof and a secret, but\n[commitments](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L268)\nas well (actually, the [first\none](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L278).\n\n## VSS Certificate\n\nAs [said\nearlier](/cardano/differences/#coin-tossing-and-verifiable-secret-sharing), one\nof the challenges while using a PVSS scheme is associating the public key used\nfor signing with the [public\nkey](https://github.com/input-output-hk/cardano-sl/blob/fefc39f058f5a053fc1e59bc3594bdadf7699ca0/core/Pos/Crypto/SecretSharing.hs#L57)\nused for VSS scheme. This is solved by introducing [VSS\ncertificate](https://github.com/input-output-hk/cardano-sl/blob/f0de5f1dd31cc4afb0c67a24deca713cf6304814/core/Pos/Core/Vss/Types.hs#L46).\n\nVSS certificate includes:\n\n1.  Public key used for the VSS scheme (e.g. [VSS\n    key](https://github.com/input-output-hk/cardano-sl/blob/fefc39f058f5a053fc1e59bc3594bdadf7699ca0/core/Pos/Crypto/SecretSharing.hs#L57)).\n2.  Public key used for signing (e.g. [signing\n    key](https://github.com/input-output-hk/cardano-sl/blob/f0de5f1dd31cc4afb0c67a24deca713cf6304814/core/Pos/Core/Vss/Types.hs#L51)).\n3.  Index of an expiry epoch (e.g. the last epoch when this certificate was\n    valid).\n4.  Signature of a pair `(A,B)`, where `A` is a VSS key and `B` is an epoch\n    index.\n\nInitially, all stakeholders with enough stake to participate in randomness\ngeneration (we call them [richmen](/glossary/#richman)) [have their own\ncertificates](https://github.com/input-output-hk/cardano-sl/blob/35c6bff7409472352140f5207a7c79c59d8eaa8f/ssc/Pos/Ssc/GodTossing/Workers.hs#L163).\nWhen a new stakeholder having enough stake appears, or when an existing\ncertificate expires, a new certificate should be generated and [submitted to the\nnetwork](https://github.com/input-output-hk/cardano-sl/blob/35c6bff7409472352140f5207a7c79c59d8eaa8f/ssc/Pos/Ssc/GodTossing/Workers.hs#L166).\nOther nodes accept this certificate if it's valid and if the node has enough\nstake. Certificates are stored in blocks.\n\nPlease note that VSS certificate must be stable before usage! If an epoch we\nretrieve certificates for is the first one (i.e. has index `0`), stable\ncertificates are [genesis\nones](https://github.com/input-output-hk/cardano-sl/blob/35c6bff7409472352140f5207a7c79c59d8eaa8f/ssc/Pos/Ssc/GodTossing/Functions.hs#L139).\nOtherwise stable certificate are [non-expired certificates for the last known\nslot](https://github.com/input-output-hk/cardano-sl/blob/35c6bff7409472352140f5207a7c79c59d8eaa8f/ssc/Pos/Ssc/GodTossing/Functions.hs#L141).\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-15-pvss.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-10-transactions.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-10-transactions.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-10-transactions.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 转账\npath: /cn/cardano/transactions/\ngroup: cardano\nlanguage: cn\nlabel: docs\n---\n<!-- Reviewed at a6a1cdf72c7e167a13f500c0679c01fe4cfa0ca8 -->\n\n# 卡尔达诺结算层的转账\n\n## 概要\n\n一个交易（**tx**) 是一组特殊的数据，代表着节点间价值转移的*行为*（从用户的角度来看就是钱包之间价值的转移）。因此，当用户 Alice 汇款给用户 Bob 时，新的交易就产生了。\n让我们称该交易为 `Tx1`，Alice 钱包下的节点称为 `N1`，Bob 钱包下的节点称为 `N2`。\n\n节点 `N1` 会执行下面的步骤：\n\n* 创建一个 `Tx1` 交易然后用自己的私钥给交易签名。\n* 将交易发送给所有节点（也就是相邻节点）。\n* 将该交易保存到本地的数据中。\n\n`N1` 的每个相邻节点也会将 `Tx1` 发送给自己相邻的节点，依次类推。然后某个领导者会将该笔交易放入到账本中的某个区块里面。请注意，如果网络处于高负荷状态，可能需要很长的时间才能让交易真正地加入到某个区块中。\n\n## 设计\n\n每个交易都包含了一系列的*输入*和一系列的*输出*；交易 `Tx0` 的输出可以被当用来当做其他如 `Tx1` 交易的输入，以此类推：\n\n\n                Tx0                           Tx1\n      +----------------------+      +----------------------+\n      |                      |      |                      |\n      |  Inputs     Outputs  |      |  Inputs     Outputs  |\n      | +------+   +-------+ |      | +------+   +-------+ |\n      | | In0  |   | Out0  + |      | | In0  |   | Out0  | |\n      | +------+   +-------+ |      | +------+   +-------+ |\n      | | In1  |   | Out1  | |      | | In1  |   | Out1  | |\n      | +------+   +-------+ |      | +------+   +-------+ |\n      | | ...  |   | ...   | |      | | ..   |   | ...   | |\n      | +------+   +-------+ |      | +------+   +-------+ |\n      | | InN  |   | OutM  | |      | | InN  |   | OutM  | |\n      | +------+   +-------+ |      | +------+   +-------+ |\n      |                      |      |                      |\n      +----------------------+      +----------------------+     ...\n\n输入和输出携带着金钱走向的信息：输入告知金钱是从哪里来的，输出告知金钱往哪里去。请注意上面有 N 和 M，是因为实际的情况输入和输出的个数可能并不相同。\n\n每个输入包括：\n\n* 交易 `TxN` 的 ID，`TxN` 的输出就是该输入（每笔交易的输出就是另一笔交易的输入）。交易 ID 是一个 BLAKE2b-256 哈希值，就像这样：`f9bcbe752aee4512457f1fd350200cf870906b7e6e836688c9a3779645c86c01`。  \n* 在 `TxN` 的输出中使用的输出的索引。  \n\n\n每个输出包括：\n\n* 节点 `N` 的地址，该节点就是我们想要发送价值给它的节点。一个地址就是节点 `N` 的公钥的 BLAKE2b-224 哈希值，大概像这样：`1fsAhhf4E1LQDB8agSds8teuD4E7U8JsRESngEX52kinBhi`。请阅读[卡尔达诺结算层的地址](/cardano/addresses/)来获取更多信息。\n* 我们想要汇款的金额。这是一个64位，无符号的整形数字，最大值为 `45000000000000000`。\n\n例如：\n\n      Tx 891971a4cc31e32..                           Tx f9bcbe752aee4512..\n    ------------------------+           +----------------------------------------------+\n    \\                       |           |                                              |\n    /        Outputs        |           |       Inputs                  Outputs        |\n    \\  +------------------+ |           | +-----------------+     +------------------+ |\n    /  | Out0             | |           | | In0             |     | Out0             | |\n    \\  | +--------------+ | |           | | +-------------+ |     | +--------------+ | |\n    /  | | Value        | | |           | | | Tx id       | |     | | Value        | | |\n    \\  | | 100 ADA      | | |           | | | 891971a4c.. | |     | | 100 ADA      | | |\n    /  | +--------------+------->>  ------>>+-------------+ |     | +--------------+------->>\n    \\  | | Node address | | |           | | | Out index   | |     | | Node address | | |\n    /  | | a00e4bb2..   | | |           | | | 0           | |     | | 88ca7f79..   | | |\n    \\  | +--------------+ | |           | | +-------------+ |     | +--------------+ | |\n    /  | ...              | |           | | ...             |     | ...              | |\n    \\  +------------------+ |           | +-----------------+     +------------------+ |\n    /                       |           |                                              |\n    ------------------------+           +----------------------------------------------+\n\n\n节点 `a00e4bb2..` 生成交易 `f9bcbe752aee4512..`，这笔交易告诉我们：\n\n1. 我们想要从地址为 `a00e4bb2..` 的当前节点发送100 ADA 到地址 `88ca7f79..` 节点。  \n2. 这笔钱对应上笔 ID 为 `891971a4c..` 的交易的第0个输出。\n\n\n## 验证\n\n如上所述，一笔交易的输出会变成另一笔交易的输入。在这种情况下，我们把交易输出称为*成交的交易输出*。因为它已经是交易 `f9bcbe752aee4512..` 的输入。\n\n但这种成交不会立刻发生，一个*还未*成为其他交易输入的输出称为*未成交的交易输出*。为了防止[双重支付](https://en.bitcoin.it/wiki/Double-spending)，只有未成交的输出才能被用来当做其他交易的输入。\n\n因此在网络中的每个节点不仅仅接收交易，还会验证它们。为了验证交易，每个节点都必须保持对未成交输出的跟踪，这样就可以验证发布的交易中的输入是未成交的输出。所有未成交的输出叫做 *utxo*，它也是一个被称为*全球状态*的特殊键值数据库的一部分。\n\n\n## 交易合法性的证明\n\n在卡尔达诺结算层中的每笔交易都有一个证明（也叫做见证）来表明这笔交易是合法的。即使一个输出是一个未成交的输出，我们也应该有权来让它成交。由于一个 `TxN` 交易可以有多个输入，那么它的见证就包含了 `TxN` 中所有输入的见证，如果所有的输入都是合法的，`TxN` 就是合法的。如果某个交易不是合法的，那么网络就会拒绝这笔交易。\n\n因为有[两种可用的节点地址类型](/cardano/addresses/#what-does-an-address-look-like)，所以我们使用两种对应版本进行验证：基于公钥的和基于脚本的。\n\n例如，基于公钥的验证使用公钥 `PK` 和交易签名：合法的输入必须使用与 `PK` 相对应的私钥进行签名。以此来检查这个签名是被接收了还是被拒绝了。\n\n验证被存储在区块链中，每个人都可以看见，可以查看，单独验证。但经过一段时间后，节点为了节省空间可能会删除老的证明。分开存储交易和证明被称为『隔离见证』（你可能听到过它，最近在[比特币中实现](https://bitcoincore.org/en/2016/01/26/segwit-benefits/)了）。在这种策略下，交易和证明被存储在两个不同的地方，并且可以独立地进行处理。\n\n\n## 权益分配\n\n权益分配是卡尔达诺结算层另一个组成部分，虽然和委派没有直接关系，但都可以通过它来获取相应的利润分红。\n\n有些地址有多个拥有者，这也产生了一个权益计算的问题。因为追随中本聪算法的每个币对于每个股东的总权益而言只能计数一次。与余额（余额中的真实币数）不同，权益赋予用户控制算法不同部分的权利：成为领导者、投票更新系统、参加 MPC/SSC。\n\n权益分配关联了每个地址的值。技术上来说该值是地址属性的一部分，该值对应于下面三种情况的某一种：\n\n1. Bootstrap 时代分配。这是一个特殊的值，它是 Bootstrap 时代里的受托者，但是它在 Bootstrap 时代之后还可以使用。 \n2. 单密钥分配，这是指所有的权益会被分配给一个指定的股东。在这种分配情况下会包含股东的身份。\n3。 多个密钥分配，这是指权益会被分配给多个股东（至少两个）。在这种分配情况下包含了一对『股东身份-输出部分』的信息。交易的输出有一个值，该值的一部分就是权益。\n\n[领导者选举过程](http://cardanodocs.com/technical/leader-selection/cn)和富人计算两者都考虑了权益分配。\n\n这个特性可以以类似的方式用在[委派](http://cardanodocs.com/technical/delegation/cn)中，但是有点区别：\n\n1. 没有凭证。要撤销委派 `A` 必须移动资金，提供不同的权益分配。  \n2. `A` 的部分权益可以通过分配来委托。相反的是，委托需要你同时委托全部地址的资金。\n",
        "type": "MarkdownRemark",
        "contentDigest": "31f68ac6641d719ec5d79409593d4cd5",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "转账",
        "path": "/cn/cardano/transactions/",
        "group": "cardano",
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-10-transactions.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-10-transactions.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at a6a1cdf72c7e167a13f500c0679c01fe4cfa0ca8 -->\n\n# 卡尔达诺结算层的转账\n\n## 概要\n\n一个交易（**tx**) 是一组特殊的数据，代表着节点间价值转移的*行为*（从用户的角度来看就是钱包之间价值的转移）。因此，当用户 Alice 汇款给用户 Bob 时，新的交易就产生了。\n让我们称该交易为 `Tx1`，Alice 钱包下的节点称为 `N1`，Bob 钱包下的节点称为 `N2`。\n\n节点 `N1` 会执行下面的步骤：\n\n* 创建一个 `Tx1` 交易然后用自己的私钥给交易签名。\n* 将交易发送给所有节点（也就是相邻节点）。\n* 将该交易保存到本地的数据中。\n\n`N1` 的每个相邻节点也会将 `Tx1` 发送给自己相邻的节点，依次类推。然后某个领导者会将该笔交易放入到账本中的某个区块里面。请注意，如果网络处于高负荷状态，可能需要很长的时间才能让交易真正地加入到某个区块中。\n\n## 设计\n\n每个交易都包含了一系列的*输入*和一系列的*输出*；交易 `Tx0` 的输出可以被当用来当做其他如 `Tx1` 交易的输入，以此类推：\n\n\n                Tx0                           Tx1\n      +----------------------+      +----------------------+\n      |                      |      |                      |\n      |  Inputs     Outputs  |      |  Inputs     Outputs  |\n      | +------+   +-------+ |      | +------+   +-------+ |\n      | | In0  |   | Out0  + |      | | In0  |   | Out0  | |\n      | +------+   +-------+ |      | +------+   +-------+ |\n      | | In1  |   | Out1  | |      | | In1  |   | Out1  | |\n      | +------+   +-------+ |      | +------+   +-------+ |\n      | | ...  |   | ...   | |      | | ..   |   | ...   | |\n      | +------+   +-------+ |      | +------+   +-------+ |\n      | | InN  |   | OutM  | |      | | InN  |   | OutM  | |\n      | +------+   +-------+ |      | +------+   +-------+ |\n      |                      |      |                      |\n      +----------------------+      +----------------------+     ...\n\n输入和输出携带着金钱走向的信息：输入告知金钱是从哪里来的，输出告知金钱往哪里去。请注意上面有 N 和 M，是因为实际的情况输入和输出的个数可能并不相同。\n\n每个输入包括：\n\n* 交易 `TxN` 的 ID，`TxN` 的输出就是该输入（每笔交易的输出就是另一笔交易的输入）。交易 ID 是一个 BLAKE2b-256 哈希值，就像这样：`f9bcbe752aee4512457f1fd350200cf870906b7e6e836688c9a3779645c86c01`。  \n* 在 `TxN` 的输出中使用的输出的索引。  \n\n\n每个输出包括：\n\n* 节点 `N` 的地址，该节点就是我们想要发送价值给它的节点。一个地址就是节点 `N` 的公钥的 BLAKE2b-224 哈希值，大概像这样：`1fsAhhf4E1LQDB8agSds8teuD4E7U8JsRESngEX52kinBhi`。请阅读[卡尔达诺结算层的地址](/cardano/addresses/)来获取更多信息。\n* 我们想要汇款的金额。这是一个64位，无符号的整形数字，最大值为 `45000000000000000`。\n\n例如：\n\n      Tx 891971a4cc31e32..                           Tx f9bcbe752aee4512..\n    ------------------------+           +----------------------------------------------+\n    \\                       |           |                                              |\n    /        Outputs        |           |       Inputs                  Outputs        |\n    \\  +------------------+ |           | +-----------------+     +------------------+ |\n    /  | Out0             | |           | | In0             |     | Out0             | |\n    \\  | +--------------+ | |           | | +-------------+ |     | +--------------+ | |\n    /  | | Value        | | |           | | | Tx id       | |     | | Value        | | |\n    \\  | | 100 ADA      | | |           | | | 891971a4c.. | |     | | 100 ADA      | | |\n    /  | +--------------+------->>  ------>>+-------------+ |     | +--------------+------->>\n    \\  | | Node address | | |           | | | Out index   | |     | | Node address | | |\n    /  | | a00e4bb2..   | | |           | | | 0           | |     | | 88ca7f79..   | | |\n    \\  | +--------------+ | |           | | +-------------+ |     | +--------------+ | |\n    /  | ...              | |           | | ...             |     | ...              | |\n    \\  +------------------+ |           | +-----------------+     +------------------+ |\n    /                       |           |                                              |\n    ------------------------+           +----------------------------------------------+\n\n\n节点 `a00e4bb2..` 生成交易 `f9bcbe752aee4512..`，这笔交易告诉我们：\n\n1. 我们想要从地址为 `a00e4bb2..` 的当前节点发送100 ADA 到地址 `88ca7f79..` 节点。  \n2. 这笔钱对应上笔 ID 为 `891971a4c..` 的交易的第0个输出。\n\n\n## 验证\n\n如上所述，一笔交易的输出会变成另一笔交易的输入。在这种情况下，我们把交易输出称为*成交的交易输出*。因为它已经是交易 `f9bcbe752aee4512..` 的输入。\n\n但这种成交不会立刻发生，一个*还未*成为其他交易输入的输出称为*未成交的交易输出*。为了防止[双重支付](https://en.bitcoin.it/wiki/Double-spending)，只有未成交的输出才能被用来当做其他交易的输入。\n\n因此在网络中的每个节点不仅仅接收交易，还会验证它们。为了验证交易，每个节点都必须保持对未成交输出的跟踪，这样就可以验证发布的交易中的输入是未成交的输出。所有未成交的输出叫做 *utxo*，它也是一个被称为*全球状态*的特殊键值数据库的一部分。\n\n\n## 交易合法性的证明\n\n在卡尔达诺结算层中的每笔交易都有一个证明（也叫做见证）来表明这笔交易是合法的。即使一个输出是一个未成交的输出，我们也应该有权来让它成交。由于一个 `TxN` 交易可以有多个输入，那么它的见证就包含了 `TxN` 中所有输入的见证，如果所有的输入都是合法的，`TxN` 就是合法的。如果某个交易不是合法的，那么网络就会拒绝这笔交易。\n\n因为有[两种可用的节点地址类型](/cardano/addresses/#what-does-an-address-look-like)，所以我们使用两种对应版本进行验证：基于公钥的和基于脚本的。\n\n例如，基于公钥的验证使用公钥 `PK` 和交易签名：合法的输入必须使用与 `PK` 相对应的私钥进行签名。以此来检查这个签名是被接收了还是被拒绝了。\n\n验证被存储在区块链中，每个人都可以看见，可以查看，单独验证。但经过一段时间后，节点为了节省空间可能会删除老的证明。分开存储交易和证明被称为『隔离见证』（你可能听到过它，最近在[比特币中实现](https://bitcoincore.org/en/2016/01/26/segwit-benefits/)了）。在这种策略下，交易和证明被存储在两个不同的地方，并且可以独立地进行处理。\n\n\n## 权益分配\n\n权益分配是卡尔达诺结算层另一个组成部分，虽然和委派没有直接关系，但都可以通过它来获取相应的利润分红。\n\n有些地址有多个拥有者，这也产生了一个权益计算的问题。因为追随中本聪算法的每个币对于每个股东的总权益而言只能计数一次。与余额（余额中的真实币数）不同，权益赋予用户控制算法不同部分的权利：成为领导者、投票更新系统、参加 MPC/SSC。\n\n权益分配关联了每个地址的值。技术上来说该值是地址属性的一部分，该值对应于下面三种情况的某一种：\n\n1. Bootstrap 时代分配。这是一个特殊的值，它是 Bootstrap 时代里的受托者，但是它在 Bootstrap 时代之后还可以使用。 \n2. 单密钥分配，这是指所有的权益会被分配给一个指定的股东。在这种分配情况下会包含股东的身份。\n3。 多个密钥分配，这是指权益会被分配给多个股东（至少两个）。在这种分配情况下包含了一对『股东身份-输出部分』的信息。交易的输出有一个值，该值的一部分就是权益。\n\n[领导者选举过程](http://cardanodocs.com/technical/leader-selection/cn)和富人计算两者都考虑了权益分配。\n\n这个特性可以以类似的方式用在[委派](http://cardanodocs.com/technical/delegation/cn)中，但是有点区别：\n\n1. 没有凭证。要撤销委派 `A` 必须移动资金，提供不同的权益分配。  \n2. `A` 的部分权益可以通过分配来委托。相反的是，委托需要你同时委托全部地址的资金。\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-10-transactions.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-16-updating.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-16-updating.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-16-updating.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 更新机制\npath: /cn/cardano/update-mechanism/\ngroup: cardano\nvisible: true\nlanguage: cn\nlabel: docs\n---\n<!-- Reviewed at a6a1cdf72c7e167a13f500c0679c01fe4cfa0ca8 -->\n<!-- Updated at 6b5eda44e5942599a9781e5ad3f51eb820665b83 -->\n\n# 更新研究概览\n\n在更新机制研究中，我们设法提出了一个更新系统，它能够进行不影响生产环境的，几乎无缝的软件更新，并为权益所有人提供投票选择硬分叉（向后不兼容的协议更新）的选项，无需引入任何非协议级别的工具。\n\n我们建议使用权益来对软硬分叉进行投票。\n\n## 更新系统模型\n\n对于 CSL，我们决定在协议层本身增加对协议更新的支持。它给区块链处理带来了一些开销，但有几个重要的好处：\n\n1. 对于每个实现该协议的用户，其最新版本的区块链是已知的。\n2. 没有中央实体负责维护或分发更新，任何此类更新都是在大多数权益的默认或明确同意下提出的，然后以分布式的方式分发。\n3. 我们不依赖客户及时更新 PC 上的软件；这是自动完成的，更新通过区块链直接发布。\n4. 如果在某些版本的 CSL 协议或某些特定实现中检查到任何安全漏洞，将会有一种机制来快速分发更新（仍然在大多数权益的同意下）\n\n\n## 应用程序更新：签署和宣布\n\n这里，我们考虑如何安全地更新应用。协议更新是本文档相关部分涵盖的一个独立问题。\n\n要进行更新，首先需要批准其提案。至少有一个协议达成，更新提案才能通过。\n\n1. **明确通过**：它拥有权益的大部分肯定投票（即严格大于 50%）。\n2. **隐式通过**：权益的肯定投票大于否定投票，并且至少在 `U` 个 slot 的区块链中。\n\n这个方法似乎自然地适用于 CSL 模型，就像 PoS 加密货币一样。每个权益相关者都负责按照他们股权的相对比例维护系统，区块链则通过权益所有人之间的共识来维持。\n\n软件更新也是这个维护过程的一部分，所以权益相关者应该考虑这个可信更新。\n\n### 隐式通过\n\n权益所有人负责系统更新的事实并不会限制我们每个更新都需要大部分股权签名的系统。我们可以介绍一个**隐式通过**的概念。\n\n更新必须至少有在区块链发布的权益签名的最小限度（[configuration.yaml](https://github.com/input-output-hk/cardano-sl/blob/e26ad11397c87ce8b00f2a26d5e237f54d6ea90a/lib/configuration.yaml) 中的 `updateProposalThd`）。权益所有人签署更新是不够的，他们应该赞成或反对。\n\n\n### 接入第三方客户\n\nIOHK 将维护一个唯一的官方客户端。但社区维护的第三方客户端也有生存空间。人们需要从权益所有人收集足够多签名来发布他们的系统更新，当然也有可能不是一个『更新』，而是一个从头开始的不同的客户端，或者是官方客户端的一个分支。只要这个更新有足够多的权益所有人的签名，网络就认为它是可信的，可以通过与官方客户端相同的机制进行更新。\n\n## 应用更新：分发和应用\n\nIOHK 维护的一系列 HTTP 的镜像足够作为开始。\n\n在这个过程中，我们计划维护一个基于 Bittorrent 的，或类似 Bittorrent 的解决方案来分发更新。总的来说，基于法律上的考虑，P2P 分发更新是一个至关重要的业务需求。这决定我们将使用哪种类似于 Bittorrent 的解决方案。\n\n此外，有趣的是，更新本身并不需要安全且可信的通道来分发，因为它已经预先知道了一些已知的可信密钥（或一组密钥）。\n\n应用更新通过 [bsdiff](https://github.com/mendsley/bsdiff) 准备，可以直接或通过安装程序更新。我们正在考虑将来转移到 [courgette](http://dev.chromium.org/developers/design-documents/software-updates-courgette)。\n\n## 协议更新\n\n首先，我们需要区分软硬协议更新。\n\n软分叉会修改区块链共识规则，以便新版本仍然与旧版本客户端兼容，硬分叉则不会与旧版本保持向前兼容。\n\n[BIP-99](https://github.com/bitcoin/bips/blob/ed283b05b332b85b6fd683be3a5d73fab6c15554/bip-0099.mediawiki) 提供了很好的标准来区分这两种分叉。\n\n- 一个**软分叉**引入新的规则，对区块进行限制。这样一来，之前无效的仍然无效，而之前有效的一些区块也会变成无效。 \n- 硬分叉是一个让之前无效区块变成有效的分叉。\n\n软分叉具有向后兼容等部署优势，不需要大家的共识，因为大多数用户可以添加新的规则。相比之下，硬分叉需要所有用户升级。\n\n理论上，硬分叉可能会导致网络分裂为两个部分的情况，每部分都维护一个单独的链：一个来自采用最新系统更新的节点，另一个则来自拒绝这样做的节点。这意味着第一部分的一些区块被另一部分认为是无效的，反之亦然。\n\n我们将**协议版本定义为一个元组 `(Maj, Min, Alt)`**：\n\n- 主版本号（2字节）：很少修改，改变不是向后兼容的，会产生一个硬分叉。\n- 次版本号（2字节）：每个更新需要调整的整数\n    - 更新应该是向后兼容的，因为新版本生成的区块应该被旧版本以某种方式接受。\n    - 一个特定的区块可能包含未知类型的地址。对于这种情况，应该找到一个简洁的解决方法，以免影响系统的稳定性和正确性。\n- 替代版本（1字节）：管理多个同时存在的协议更新版本。\n\n协议版本将在应用程序更新中公布，稍后将放入到由更新的软件创建的每个区块中。\n\n主版本号的改变会在将来触发硬分叉的问题。\n\n次版本的版本更新通知网络后续应用程序更新修改了软分叉的协议。\n\n替代版本是新功能的标志。它允许独立开发人员向协议引入多个更改。例如，如果一个供应商决定经由软分叉引入特性 X，另一个引入特性 Y（经过软分叉），他们的软件将以版本 `a.b.X` 和版本 `a.b.Y` 生成区块，其可以在区块链上共存，但是，最终只有一个会被采纳。\n\n\n## 软分叉更新\n\n在软分叉中，我们可以做什么，不可以做什么，有一条细线：\n\n1. 老版本的客户端应该总是能找到最近的有效区块。（这是 [BIP-99](https://github.com/bitcoin/bips/blob/ed283b05b332b85b6fd683be3a5d73fab6c15554/bip-0099.mediawiki) 所说的『一些无效仍然无效』）\n2. 较旧版本的客户端发出的某些模块可能会被认为是无效的。\n\n显然，强行推行规则2可能会导致网络分为两部分：一个权益所有人的股份足够大，可以更新，维护自己的链，拒绝其他链，但其他权益所有人还是能够维持链，拒绝这个权益所有人的区块（因为他没有占多数的股份，因此不能追上其他人，所以他的链更短）。一个简单的解决方案规则可能是这样的：如果最新的2016个区块有95%具有较新的区块版本，则旧版本会被拒绝。\n\n**注意**：此处和之后的**区块版本**和协议版本具有相同的含义。\n\n为什么我们想在某个时刻想让某个块版本无效这一点可能不是很清楚。这里关键的一点是，一个新的功能实际上是对我们之前所做的一个限制。例如，目前我们可能有基于公钥或基于脚本的普通旧提交。然后在某个时候，我们决定包含第三种地址类型（不管目的是什么）。我们使用哪种策略来验证具有未知类型地址的提交的区块？显然唯一的选择是不验证这个地址。\n\n想象有人提出一个交易到这个地址，可能这么做是带着满足一些条件之前保障资金的意图，一旦条件满足，它们在版本1上的区块花费了其他交易，这是关键的一点。如果网络没有假定旧版本被启用了（因为我们只能在启用旧版本时开始拒绝区块），我们就不能使用限制。（TODO)\n\n我们也不能接受所有高于目前所采用的区块的区块，因为在我们的实现中，每个区块都有一个专门用于存储辅助信息的字段。攻击者可以生成她使用了更高版本的协议，并生成一个 `attributes` 被无意义密钥污染的区块。如果我们接受它，它会使我们的区块链变得臃肿。\n\n这是下面要描述的逻辑的动机。\n\n在我们实现中，区块版本可以以下面的状态存在：\n\n- **已采用**，确认区块版本的软分叉规则被触发了（见下文）\n- **已确认**，当有包含软件的确认版本和此区块版本的更新提案时。注意，『软件的确认版本』是[其他地方](/cardano/update-mechanism/#soft-fork-updates)的技术术语。如果有多个区块版本，相应的软件被确认，但这些版本不被采用，我们称之为竞争。举例来说，有可能有版本 `2.0.0`, `2.0.1`, `1.2.0`, `1.2.1`, `1.1.1` 和 `1.1.2`，最后通过的版本是 `1.1.3`。在这种情况，那些竞争的版本是 `2.0.0`, `2.0.1`, `1.2.0` 和 `1.2.1`。旧版本 `1.1.1` 和 `1.1.2` 没有竞争，因为 `1.1.3` 已经被采纳。\n- 其他情况。举例来说，提出一个新的区块版本，但软件版本没有确认。这种状态没有特殊的名字。\n\n软分叉的工作原理如下：\n\n- 非正式的，当一个确定比例的权益以版本 `X` 创建区块，区块版本变成*已采用*。\n- 正式的，我们做以下事情。首先回顾一下，我们的系统在设计上，不允许回滚超过某个固定的全局阈值 `k`，这样可以为每个权益所有者确定稳定的股权。当我们处理创始块 `e` 时，我们从网络的一开始就计算所有 slot 的所有领导者的稳定股权。对于版本 `X` 的区块当前竞争的版本，我们取所有版本 `X` 的稳定版本，收集这些领导者的区块，统计他们的股权。如果其中一个版本大于 75%，则被采纳。如果多于一个版本大于 75%，我们采用其中一个（TODO）。\n\n请注意，采用的区块版本在 epoch 期间（只在 epoch 之间）是不可变的，因此在一个 epoch 中的所有区块都根据相同的规则进行验证（因为规则是由采用的区块版本定义的）。但假设一个 epoch 中的所有区块都具有相同的区块版本是错误的。在采用区块版本之后，另一个区块版本可以竞争，并且一些节点可以使用这个新版本创建区块。\n\n\n所以，总结一下：\n\n1. 一旦确认了更新，协议的版本（比如说 `0.5.0`）就可以使用了。\n2. 该节点的行为*已*被更新（即可以发出，验证新版本的区块）：\n    1. 在软分叉解决之前（即在解析规则被出发之前），使用新版本 `0.5.0` 发布区块，但不包括任何新的 `attributes`（如果有的话）。同区块版本 `0.4.0` 一样验证 `0.5.0`。\n    2. 一旦软分叉解决，发布和验证每个版本为 `0.5.0` 的区块，包括新的 `attributes`\n3. 该节点的行为*还没有*被更新（即不能发出并使用新版本验证模块）：\n    1. 软分叉解决之前，发行并验证每个版本为 `0.4.0` 的区块。除此之外，任何包含未知 `attributes` 的区块都不会被接受\n    2. 一旦软分叉解决，开始接收所有版本为 `0.5.0` 的区块，包括有未知 `attributes` 的区块。同时也验证 `0.4.0` 的版本。\n\n## 硬分叉更新\n\n硬分叉通过修改后的 PoB（proof of burn）来解决。由于尚未实现，我们从本文中省略本节，并将其作为单独的文档发布。\n\n",
        "type": "MarkdownRemark",
        "contentDigest": "5f032e9d5e73a16198c9632581cf9dd8",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "更新机制",
        "path": "/cn/cardano/update-mechanism/",
        "group": "cardano",
        "visible": true,
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-16-updating.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-16-updating.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at a6a1cdf72c7e167a13f500c0679c01fe4cfa0ca8 -->\n<!-- Updated at 6b5eda44e5942599a9781e5ad3f51eb820665b83 -->\n\n# 更新研究概览\n\n在更新机制研究中，我们设法提出了一个更新系统，它能够进行不影响生产环境的，几乎无缝的软件更新，并为权益所有人提供投票选择硬分叉（向后不兼容的协议更新）的选项，无需引入任何非协议级别的工具。\n\n我们建议使用权益来对软硬分叉进行投票。\n\n## 更新系统模型\n\n对于 CSL，我们决定在协议层本身增加对协议更新的支持。它给区块链处理带来了一些开销，但有几个重要的好处：\n\n1. 对于每个实现该协议的用户，其最新版本的区块链是已知的。\n2. 没有中央实体负责维护或分发更新，任何此类更新都是在大多数权益的默认或明确同意下提出的，然后以分布式的方式分发。\n3. 我们不依赖客户及时更新 PC 上的软件；这是自动完成的，更新通过区块链直接发布。\n4. 如果在某些版本的 CSL 协议或某些特定实现中检查到任何安全漏洞，将会有一种机制来快速分发更新（仍然在大多数权益的同意下）\n\n\n## 应用程序更新：签署和宣布\n\n这里，我们考虑如何安全地更新应用。协议更新是本文档相关部分涵盖的一个独立问题。\n\n要进行更新，首先需要批准其提案。至少有一个协议达成，更新提案才能通过。\n\n1. **明确通过**：它拥有权益的大部分肯定投票（即严格大于 50%）。\n2. **隐式通过**：权益的肯定投票大于否定投票，并且至少在 `U` 个 slot 的区块链中。\n\n这个方法似乎自然地适用于 CSL 模型，就像 PoS 加密货币一样。每个权益相关者都负责按照他们股权的相对比例维护系统，区块链则通过权益所有人之间的共识来维持。\n\n软件更新也是这个维护过程的一部分，所以权益相关者应该考虑这个可信更新。\n\n### 隐式通过\n\n权益所有人负责系统更新的事实并不会限制我们每个更新都需要大部分股权签名的系统。我们可以介绍一个**隐式通过**的概念。\n\n更新必须至少有在区块链发布的权益签名的最小限度（[configuration.yaml](https://github.com/input-output-hk/cardano-sl/blob/e26ad11397c87ce8b00f2a26d5e237f54d6ea90a/lib/configuration.yaml) 中的 `updateProposalThd`）。权益所有人签署更新是不够的，他们应该赞成或反对。\n\n\n### 接入第三方客户\n\nIOHK 将维护一个唯一的官方客户端。但社区维护的第三方客户端也有生存空间。人们需要从权益所有人收集足够多签名来发布他们的系统更新，当然也有可能不是一个『更新』，而是一个从头开始的不同的客户端，或者是官方客户端的一个分支。只要这个更新有足够多的权益所有人的签名，网络就认为它是可信的，可以通过与官方客户端相同的机制进行更新。\n\n## 应用更新：分发和应用\n\nIOHK 维护的一系列 HTTP 的镜像足够作为开始。\n\n在这个过程中，我们计划维护一个基于 Bittorrent 的，或类似 Bittorrent 的解决方案来分发更新。总的来说，基于法律上的考虑，P2P 分发更新是一个至关重要的业务需求。这决定我们将使用哪种类似于 Bittorrent 的解决方案。\n\n此外，有趣的是，更新本身并不需要安全且可信的通道来分发，因为它已经预先知道了一些已知的可信密钥（或一组密钥）。\n\n应用更新通过 [bsdiff](https://github.com/mendsley/bsdiff) 准备，可以直接或通过安装程序更新。我们正在考虑将来转移到 [courgette](http://dev.chromium.org/developers/design-documents/software-updates-courgette)。\n\n## 协议更新\n\n首先，我们需要区分软硬协议更新。\n\n软分叉会修改区块链共识规则，以便新版本仍然与旧版本客户端兼容，硬分叉则不会与旧版本保持向前兼容。\n\n[BIP-99](https://github.com/bitcoin/bips/blob/ed283b05b332b85b6fd683be3a5d73fab6c15554/bip-0099.mediawiki) 提供了很好的标准来区分这两种分叉。\n\n- 一个**软分叉**引入新的规则，对区块进行限制。这样一来，之前无效的仍然无效，而之前有效的一些区块也会变成无效。 \n- 硬分叉是一个让之前无效区块变成有效的分叉。\n\n软分叉具有向后兼容等部署优势，不需要大家的共识，因为大多数用户可以添加新的规则。相比之下，硬分叉需要所有用户升级。\n\n理论上，硬分叉可能会导致网络分裂为两个部分的情况，每部分都维护一个单独的链：一个来自采用最新系统更新的节点，另一个则来自拒绝这样做的节点。这意味着第一部分的一些区块被另一部分认为是无效的，反之亦然。\n\n我们将**协议版本定义为一个元组 `(Maj, Min, Alt)`**：\n\n- 主版本号（2字节）：很少修改，改变不是向后兼容的，会产生一个硬分叉。\n- 次版本号（2字节）：每个更新需要调整的整数\n    - 更新应该是向后兼容的，因为新版本生成的区块应该被旧版本以某种方式接受。\n    - 一个特定的区块可能包含未知类型的地址。对于这种情况，应该找到一个简洁的解决方法，以免影响系统的稳定性和正确性。\n- 替代版本（1字节）：管理多个同时存在的协议更新版本。\n\n协议版本将在应用程序更新中公布，稍后将放入到由更新的软件创建的每个区块中。\n\n主版本号的改变会在将来触发硬分叉的问题。\n\n次版本的版本更新通知网络后续应用程序更新修改了软分叉的协议。\n\n替代版本是新功能的标志。它允许独立开发人员向协议引入多个更改。例如，如果一个供应商决定经由软分叉引入特性 X，另一个引入特性 Y（经过软分叉），他们的软件将以版本 `a.b.X` 和版本 `a.b.Y` 生成区块，其可以在区块链上共存，但是，最终只有一个会被采纳。\n\n\n## 软分叉更新\n\n在软分叉中，我们可以做什么，不可以做什么，有一条细线：\n\n1. 老版本的客户端应该总是能找到最近的有效区块。（这是 [BIP-99](https://github.com/bitcoin/bips/blob/ed283b05b332b85b6fd683be3a5d73fab6c15554/bip-0099.mediawiki) 所说的『一些无效仍然无效』）\n2. 较旧版本的客户端发出的某些模块可能会被认为是无效的。\n\n显然，强行推行规则2可能会导致网络分为两部分：一个权益所有人的股份足够大，可以更新，维护自己的链，拒绝其他链，但其他权益所有人还是能够维持链，拒绝这个权益所有人的区块（因为他没有占多数的股份，因此不能追上其他人，所以他的链更短）。一个简单的解决方案规则可能是这样的：如果最新的2016个区块有95%具有较新的区块版本，则旧版本会被拒绝。\n\n**注意**：此处和之后的**区块版本**和协议版本具有相同的含义。\n\n为什么我们想在某个时刻想让某个块版本无效这一点可能不是很清楚。这里关键的一点是，一个新的功能实际上是对我们之前所做的一个限制。例如，目前我们可能有基于公钥或基于脚本的普通旧提交。然后在某个时候，我们决定包含第三种地址类型（不管目的是什么）。我们使用哪种策略来验证具有未知类型地址的提交的区块？显然唯一的选择是不验证这个地址。\n\n想象有人提出一个交易到这个地址，可能这么做是带着满足一些条件之前保障资金的意图，一旦条件满足，它们在版本1上的区块花费了其他交易，这是关键的一点。如果网络没有假定旧版本被启用了（因为我们只能在启用旧版本时开始拒绝区块），我们就不能使用限制。（TODO)\n\n我们也不能接受所有高于目前所采用的区块的区块，因为在我们的实现中，每个区块都有一个专门用于存储辅助信息的字段。攻击者可以生成她使用了更高版本的协议，并生成一个 `attributes` 被无意义密钥污染的区块。如果我们接受它，它会使我们的区块链变得臃肿。\n\n这是下面要描述的逻辑的动机。\n\n在我们实现中，区块版本可以以下面的状态存在：\n\n- **已采用**，确认区块版本的软分叉规则被触发了（见下文）\n- **已确认**，当有包含软件的确认版本和此区块版本的更新提案时。注意，『软件的确认版本』是[其他地方](/cardano/update-mechanism/#soft-fork-updates)的技术术语。如果有多个区块版本，相应的软件被确认，但这些版本不被采用，我们称之为竞争。举例来说，有可能有版本 `2.0.0`, `2.0.1`, `1.2.0`, `1.2.1`, `1.1.1` 和 `1.1.2`，最后通过的版本是 `1.1.3`。在这种情况，那些竞争的版本是 `2.0.0`, `2.0.1`, `1.2.0` 和 `1.2.1`。旧版本 `1.1.1` 和 `1.1.2` 没有竞争，因为 `1.1.3` 已经被采纳。\n- 其他情况。举例来说，提出一个新的区块版本，但软件版本没有确认。这种状态没有特殊的名字。\n\n软分叉的工作原理如下：\n\n- 非正式的，当一个确定比例的权益以版本 `X` 创建区块，区块版本变成*已采用*。\n- 正式的，我们做以下事情。首先回顾一下，我们的系统在设计上，不允许回滚超过某个固定的全局阈值 `k`，这样可以为每个权益所有者确定稳定的股权。当我们处理创始块 `e` 时，我们从网络的一开始就计算所有 slot 的所有领导者的稳定股权。对于版本 `X` 的区块当前竞争的版本，我们取所有版本 `X` 的稳定版本，收集这些领导者的区块，统计他们的股权。如果其中一个版本大于 75%，则被采纳。如果多于一个版本大于 75%，我们采用其中一个（TODO）。\n\n请注意，采用的区块版本在 epoch 期间（只在 epoch 之间）是不可变的，因此在一个 epoch 中的所有区块都根据相同的规则进行验证（因为规则是由采用的区块版本定义的）。但假设一个 epoch 中的所有区块都具有相同的区块版本是错误的。在采用区块版本之后，另一个区块版本可以竞争，并且一些节点可以使用这个新版本创建区块。\n\n\n所以，总结一下：\n\n1. 一旦确认了更新，协议的版本（比如说 `0.5.0`）就可以使用了。\n2. 该节点的行为*已*被更新（即可以发出，验证新版本的区块）：\n    1. 在软分叉解决之前（即在解析规则被出发之前），使用新版本 `0.5.0` 发布区块，但不包括任何新的 `attributes`（如果有的话）。同区块版本 `0.4.0` 一样验证 `0.5.0`。\n    2. 一旦软分叉解决，发布和验证每个版本为 `0.5.0` 的区块，包括新的 `attributes`\n3. 该节点的行为*还没有*被更新（即不能发出并使用新版本验证模块）：\n    1. 软分叉解决之前，发行并验证每个版本为 `0.4.0` 的区块。除此之外，任何包含未知 `attributes` 的区块都不会被接受\n    2. 一旦软分叉解决，开始接收所有版本为 `0.5.0` 的区块，包括有未知 `attributes` 的区块。同时也验证 `0.4.0` 的版本。\n\n## 硬分叉更新\n\n硬分叉通过修改后的 PoB（proof of burn）来解决。由于尚未实现，我们从本文中省略本节，并将其作为单独的文档发布。\n\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-16-updating.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-03-transaction-assurance.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-03-transaction-assurance.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-03-transaction-assurance.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 交易确认层级\npath: /cn/cardano/transaction-assurance/\ngroup: cardano\nlanguage: cn\nlabel: docs\n---\n<!-- Reviewed at a6a1cdf72c7e167a13f500c0679c01fe4cfa0ca8 -->\n\n<style>\n.full-width {\n    width: 100%;\n}\n\n.r {\n    color: white;\n    background-color: #ef4e4e;\n    text-align: right;\n    font-weight: 400;\n}\n\n.y {\n    color: white;\n    background-color: #c09e0f;\n    text-align: right;\n    font-weight: 400;\n}\n\n.g {\n    color: white;\n    background-color: green;\n    text-align: right;\n    font-weight: 400;\n}\n\n.gr {\n    color: white;\n    background-color: #aaa;\n    font-weight: 700;\n}\n\n.rd {\n    background-color: #fca8a8;\n    text-align: right;\n    font-weight: 700;\n}\n\n.yd {\n    background-color: #eccd4a;\n    text-align: right;\n    font-weight: 700;\n}\n\n.gd {\n    background-color: #53d153;\n    text-align: right;\n    font-weight: 700;\n}\n\n.center {\n    text-align: center;\n}\n\n.pct25 {\n    width: 25%;\n}\n</style>\n\n# 交易确认层级\n\n下面的表格基于颜色表示确认层级，以确保交易不会被某些分叉取消。\n\n举个例子，在正常的安全级别，如果攻击者的份额是10％（或600万美元，卡尔达诺市值6000万美元），则用户交易的确认级别是：\n\n1. 最低确认（用红色编码） - 当用户的转账确认数小于**3**个区块时。\n2. 中等确认（用黄色编码） - 用用户的转账确认数为**3**到**7**块。\n3. 高度确认（用绿色编码） - 当用户的转账具有**9**个或更多区块的确认时。\n\n## 正常安全层级\n\n正常级别可以防攻击（这个模型将包含在最新版本的乌洛波罗斯算法中），表中的数值对应6亿美元的卡尔达诺市值。\n\n\n<table class=\"full-width\">\n<tr>\n    <th class=\"center\">             攻击者的份额，%</th>\n    <th class=\"center pct25\">       攻击者的份额，$ mln </th> \n    <th colspan=\"6\" class=\"center\"> 确认水平         </th>\n\n</tr>\n<tr class=\"center\">\n    <td></td>\n    <td></td>\n    <td> Low    </td>\n    <td> 0.950  </td>\n    <td> 0.990  </td>\n    <td> 0.995  </td>\n    <td> 0.999  </td>\n    <td> High   </td>\n\n</tr>\n<tr>\n    <td class=\"gr\"> 10          </td>\n    <td class=\"gr\"> 6           </td>\n    <td class=\"rd\"> &lt; 3      </td>\n    <td class=\"yd\"> 3           </td>\n    <td class=\"yd\"> 5           </td>\n    <td class=\"yd\"> 7           </td>\n    <td class=\"gd\"> 9           </td>\n    <td class=\"gd\"> 9 &lt;      </td>\n\n</tr>\n<tr>\n    <td>            15          </td>\n    <td>            9           </td>\n    <td class=\"r\">  &lt; 5      </td>\n    <td class=\"y\">  5           </td>\n    <td class=\"y\">  9           </td>\n    <td class=\"y\">  11          </td>\n    <td class=\"g\">  15          </td>\n    <td class=\"g\">  15 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            20          </td>\n    <td>            12          </td>\n    <td class=\"r\">  &lt; 7      </td>\n    <td class=\"y\">  7           </td>\n    <td class=\"y\">  13          </td>\n    <td class=\"y\">  15          </td>\n    <td class=\"g\">  21          </td>\n    <td class=\"g\">  21 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            25          </td>\n    <td>            15          </td>\n    <td class=\"r\">  &lt; 9      </td>\n    <td class=\"y\">  9           </td>\n    <td class=\"y\">  19          </td>\n    <td class=\"y\">  23          </td>\n    <td class=\"g\">  33          </td>\n    <td class=\"g\">  33 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            30          </td>\n    <td>            18          </td>\n    <td class=\"r\">  &lt; 17     </td>\n    <td class=\"y\">  17          </td>\n    <td class=\"y\">  31          </td>\n    <td class=\"y\">  39          </td>\n    <td class=\"g\">  55          </td>\n    <td class=\"g\">  55 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            35          </td>\n    <td>            21          </td>\n    <td class=\"r\">  &lt; 29     </td>\n    <td class=\"y\">  29          </td>\n    <td class=\"y\">  57          </td>\n    <td class=\"y\">  71          </td>\n    <td class=\"g\">  101         </td>\n    <td class=\"g\">  101 &lt;    </td>\n\n</tr>\n<tr>\n    <td>            40          </td>\n    <td>            24          </td>\n    <td class=\"r\">  &lt; 67     </td>\n    <td class=\"y\">  67          </td>\n    <td class=\"y\">  133         </td>\n    <td class=\"y\">  163         </td>\n    <td class=\"g\">  235         </td>\n    <td class=\"g\">  235 &lt;    </td>\n\n</tr>\n<tr>\n    <td>            45          </td>\n    <td>            27          </td>\n    <td class=\"r\">  &lt; 269    </td>\n    <td class=\"y\">  269         </td>\n    <td class=\"y\">  539         </td>\n    <td class=\"y\">  661         </td>\n    <td class=\"g\">  951         </td>\n    <td class=\"g\">  951 &lt;    </td>\n\n</tr>\n<tr>\n    <td>            46          </td>\n    <td>            27.6        </td>\n    <td class=\"r\">  &lt; 421    </td>\n    <td class=\"y\">  421         </td>\n    <td class=\"y\">  843         </td>\n    <td class=\"y\">  1033        </td>\n    <td class=\"g\">  1487        </td>\n    <td class=\"g\">  1487 &lt;   </td>\n\n</tr>\n<tr>\n    <td>            47          </td>\n    <td>            28.2        </td>\n    <td class=\"r\">  &lt; 751    </td>\n    <td class=\"y\">  751         </td>\n    <td class=\"y\">  1501        </td>\n    <td class=\"y\">  1841        </td>\n    <td class=\"g\">  2649        </td>\n    <td class=\"g\">  2649 &lt;   </td>\n\n</tr>\n<tr>\n    <td>            48          </td>\n    <td>            28.8        </td>\n    <td class=\"r\">  &lt; 1691   </td>\n    <td class=\"y\">  1691        </td>\n    <td class=\"y\">  3381        </td>\n    <td class=\"y\">  4143        </td>\n    <td class=\"g\">  5965        </td>\n    <td class=\"g\">  5965 &lt;   </td>\n\n</tr>\n<tr>\n    <td>            49          </td>\n    <td>            29.4        </td>\n    <td class=\"r\">  &lt; 6763   </td>\n    <td class=\"y\">  6763        </td>\n    <td class=\"y\">  13527       </td>\n    <td class=\"y\">  16585       </td>\n    <td class=\"g\">  23869       </td>\n    <td class=\"g\">  23869 &lt;  </td>\n\n</tr>\n</table>\n## 严格安全层级\n\n严格的安全层级可以防止所有的攻击（它需要更多的块确认）。表中的数值对应6亿美元的卡尔达诺市值。\n\n\n<table class=\"full-width\">\n<tr>\n    <th class=\"center\">             攻击者的份额，%</th>\n    <th class=\"center pct25\">       攻击者的份额，$ mln </th> \n    <th colspan=\"6\" class=\"center\"> 确认水平         </th>\n\n</tr>\n<tr class=\"center\">\n    <td></td>\n    <td></td>\n    <td> Low    </td>\n    <td> 0.950  </td>\n    <td> 0.990  </td>\n    <td> 0.995  </td>\n    <td> 0.999  </td>\n    <td> High   </td>\n\n</tr>\n<tr>\n    <td class=\"gr\"> 10          </td>\n    <td class=\"gr\"> 6           </td>\n    <td class=\"rd\"> &lt; 5      </td>\n    <td class=\"yd\"> 5           </td>\n    <td class=\"yd\"> 9           </td>\n    <td class=\"yd\"> 11          </td>\n    <td class=\"gd\"> 15          </td>\n    <td class=\"gd\"> 15 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            15          </td>\n    <td>            9           </td>\n    <td class=\"r\">  &lt; 7      </td>\n    <td class=\"y\">  7           </td>\n    <td class=\"y\">  14          </td>\n    <td class=\"y\">  16          </td>\n    <td class=\"g\">  23          </td>\n    <td class=\"g\">  23 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            20          </td>\n    <td>            12          </td>\n    <td class=\"r\">  &lt; 12     </td>\n    <td class=\"y\">  12          </td>\n    <td class=\"y\">  21          </td>\n    <td class=\"y\">  25          </td>\n    <td class=\"g\">  35          </td>\n    <td class=\"g\">  35 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            25          </td>\n    <td>            15          </td>\n    <td class=\"r\">  &lt; 19     </td>\n    <td class=\"y\">  19          </td>\n    <td class=\"y\">  34          </td>\n    <td class=\"y\">  40          </td>\n    <td class=\"g\">  55          </td>\n    <td class=\"g\">  55 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            30          </td>\n    <td>            18          </td>\n    <td class=\"r\">  &lt; 32     </td>\n    <td class=\"y\">  32          </td>\n    <td class=\"y\">  57          </td>\n    <td class=\"y\">  68          </td>\n    <td class=\"g\">  94          </td>\n    <td class=\"g\">  94 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            35          </td>\n    <td>            21          </td>\n    <td class=\"r\">  &lt; 63     </td>\n    <td class=\"y\">  63          </td>\n    <td class=\"y\">  111         </td>\n    <td class=\"y\">  132         </td>\n    <td class=\"g\">  181         </td>\n    <td class=\"g\">  181 &lt;    </td>\n\n</tr>\n<tr>\n    <td>            40          </td>\n    <td>            24          </td>\n    <td class=\"r\">  &lt; 157    </td>\n    <td class=\"y\">  157         </td>\n    <td class=\"y\">  274         </td>\n    <td class=\"y\">  325         </td>\n    <td class=\"g\">  443         </td>\n    <td class=\"g\">  443 &lt;    </td>\n\n</tr>\n<tr>\n    <td>            45          </td>\n    <td>            27          </td>\n    <td class=\"r\">  &lt; 729    </td>\n    <td class=\"y\">  729         </td>\n    <td class=\"y\">  1246         </td>\n    <td class=\"y\">  1470         </td>\n    <td class=\"g\">  1990         </td>\n    <td class=\"g\">  1990 &lt;    </td>\n\n</tr>\n<tr>\n    <td>            46          </td>\n    <td>            27.6        </td>\n    <td class=\"r\">  &lt; 1190   </td>\n    <td class=\"y\">  1190        </td>\n    <td class=\"y\">  2020        </td>\n    <td class=\"y\">  2379        </td>\n    <td class=\"g\">  3214        </td>\n    <td class=\"g\">  3214 &lt;   </td>\n\n</tr>\n<tr>\n    <td>            47          </td>\n    <td>            28.2        </td>\n    <td class=\"r\">  &lt; 2230   </td>\n    <td class=\"y\">  2230        </td>\n    <td class=\"y\">  3758        </td>\n    <td class=\"y\">  4418        </td>\n    <td class=\"g\">  5953        </td>\n    <td class=\"g\">  5953 &lt;   </td>\n\n</tr>\n<tr>\n    <td>            48          </td>\n    <td>            28.8        </td>\n    <td class=\"r\">  &lt; 5382   </td>\n    <td class=\"y\">  5382        </td>\n    <td class=\"y\">  8986        </td>\n    <td class=\"y\">  10542       </td>\n    <td class=\"g\">  14157       </td>\n    <td class=\"g\">  14157 &lt;  </td>\n\n</tr>\n<tr>\n    <td>            49          </td>\n    <td>            29.4        </td>\n    <td class=\"r\">  &lt; 24029  </td>\n    <td class=\"y\">  24029       </td>\n    <td class=\"y\">  39603       </td>\n    <td class=\"y\">  46320       </td>\n    <td class=\"g\">  61922       </td>\n    <td class=\"g\">  61922 &lt;  </td>\n\n</tr>\n</table>\n\n",
        "type": "MarkdownRemark",
        "contentDigest": "cbaece119ee20a4bd5bfe3f27b88ed5d",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "交易确认层级",
        "path": "/cn/cardano/transaction-assurance/",
        "group": "cardano",
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-03-transaction-assurance.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-03-transaction-assurance.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at a6a1cdf72c7e167a13f500c0679c01fe4cfa0ca8 -->\n\n<style>\n.full-width {\n    width: 100%;\n}\n\n.r {\n    color: white;\n    background-color: #ef4e4e;\n    text-align: right;\n    font-weight: 400;\n}\n\n.y {\n    color: white;\n    background-color: #c09e0f;\n    text-align: right;\n    font-weight: 400;\n}\n\n.g {\n    color: white;\n    background-color: green;\n    text-align: right;\n    font-weight: 400;\n}\n\n.gr {\n    color: white;\n    background-color: #aaa;\n    font-weight: 700;\n}\n\n.rd {\n    background-color: #fca8a8;\n    text-align: right;\n    font-weight: 700;\n}\n\n.yd {\n    background-color: #eccd4a;\n    text-align: right;\n    font-weight: 700;\n}\n\n.gd {\n    background-color: #53d153;\n    text-align: right;\n    font-weight: 700;\n}\n\n.center {\n    text-align: center;\n}\n\n.pct25 {\n    width: 25%;\n}\n</style>\n\n# 交易确认层级\n\n下面的表格基于颜色表示确认层级，以确保交易不会被某些分叉取消。\n\n举个例子，在正常的安全级别，如果攻击者的份额是10％（或600万美元，卡尔达诺市值6000万美元），则用户交易的确认级别是：\n\n1. 最低确认（用红色编码） - 当用户的转账确认数小于**3**个区块时。\n2. 中等确认（用黄色编码） - 用用户的转账确认数为**3**到**7**块。\n3. 高度确认（用绿色编码） - 当用户的转账具有**9**个或更多区块的确认时。\n\n## 正常安全层级\n\n正常级别可以防攻击（这个模型将包含在最新版本的乌洛波罗斯算法中），表中的数值对应6亿美元的卡尔达诺市值。\n\n\n<table class=\"full-width\">\n<tr>\n    <th class=\"center\">             攻击者的份额，%</th>\n    <th class=\"center pct25\">       攻击者的份额，$ mln </th> \n    <th colspan=\"6\" class=\"center\"> 确认水平         </th>\n\n</tr>\n<tr class=\"center\">\n    <td></td>\n    <td></td>\n    <td> Low    </td>\n    <td> 0.950  </td>\n    <td> 0.990  </td>\n    <td> 0.995  </td>\n    <td> 0.999  </td>\n    <td> High   </td>\n\n</tr>\n<tr>\n    <td class=\"gr\"> 10          </td>\n    <td class=\"gr\"> 6           </td>\n    <td class=\"rd\"> &lt; 3      </td>\n    <td class=\"yd\"> 3           </td>\n    <td class=\"yd\"> 5           </td>\n    <td class=\"yd\"> 7           </td>\n    <td class=\"gd\"> 9           </td>\n    <td class=\"gd\"> 9 &lt;      </td>\n\n</tr>\n<tr>\n    <td>            15          </td>\n    <td>            9           </td>\n    <td class=\"r\">  &lt; 5      </td>\n    <td class=\"y\">  5           </td>\n    <td class=\"y\">  9           </td>\n    <td class=\"y\">  11          </td>\n    <td class=\"g\">  15          </td>\n    <td class=\"g\">  15 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            20          </td>\n    <td>            12          </td>\n    <td class=\"r\">  &lt; 7      </td>\n    <td class=\"y\">  7           </td>\n    <td class=\"y\">  13          </td>\n    <td class=\"y\">  15          </td>\n    <td class=\"g\">  21          </td>\n    <td class=\"g\">  21 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            25          </td>\n    <td>            15          </td>\n    <td class=\"r\">  &lt; 9      </td>\n    <td class=\"y\">  9           </td>\n    <td class=\"y\">  19          </td>\n    <td class=\"y\">  23          </td>\n    <td class=\"g\">  33          </td>\n    <td class=\"g\">  33 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            30          </td>\n    <td>            18          </td>\n    <td class=\"r\">  &lt; 17     </td>\n    <td class=\"y\">  17          </td>\n    <td class=\"y\">  31          </td>\n    <td class=\"y\">  39          </td>\n    <td class=\"g\">  55          </td>\n    <td class=\"g\">  55 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            35          </td>\n    <td>            21          </td>\n    <td class=\"r\">  &lt; 29     </td>\n    <td class=\"y\">  29          </td>\n    <td class=\"y\">  57          </td>\n    <td class=\"y\">  71          </td>\n    <td class=\"g\">  101         </td>\n    <td class=\"g\">  101 &lt;    </td>\n\n</tr>\n<tr>\n    <td>            40          </td>\n    <td>            24          </td>\n    <td class=\"r\">  &lt; 67     </td>\n    <td class=\"y\">  67          </td>\n    <td class=\"y\">  133         </td>\n    <td class=\"y\">  163         </td>\n    <td class=\"g\">  235         </td>\n    <td class=\"g\">  235 &lt;    </td>\n\n</tr>\n<tr>\n    <td>            45          </td>\n    <td>            27          </td>\n    <td class=\"r\">  &lt; 269    </td>\n    <td class=\"y\">  269         </td>\n    <td class=\"y\">  539         </td>\n    <td class=\"y\">  661         </td>\n    <td class=\"g\">  951         </td>\n    <td class=\"g\">  951 &lt;    </td>\n\n</tr>\n<tr>\n    <td>            46          </td>\n    <td>            27.6        </td>\n    <td class=\"r\">  &lt; 421    </td>\n    <td class=\"y\">  421         </td>\n    <td class=\"y\">  843         </td>\n    <td class=\"y\">  1033        </td>\n    <td class=\"g\">  1487        </td>\n    <td class=\"g\">  1487 &lt;   </td>\n\n</tr>\n<tr>\n    <td>            47          </td>\n    <td>            28.2        </td>\n    <td class=\"r\">  &lt; 751    </td>\n    <td class=\"y\">  751         </td>\n    <td class=\"y\">  1501        </td>\n    <td class=\"y\">  1841        </td>\n    <td class=\"g\">  2649        </td>\n    <td class=\"g\">  2649 &lt;   </td>\n\n</tr>\n<tr>\n    <td>            48          </td>\n    <td>            28.8        </td>\n    <td class=\"r\">  &lt; 1691   </td>\n    <td class=\"y\">  1691        </td>\n    <td class=\"y\">  3381        </td>\n    <td class=\"y\">  4143        </td>\n    <td class=\"g\">  5965        </td>\n    <td class=\"g\">  5965 &lt;   </td>\n\n</tr>\n<tr>\n    <td>            49          </td>\n    <td>            29.4        </td>\n    <td class=\"r\">  &lt; 6763   </td>\n    <td class=\"y\">  6763        </td>\n    <td class=\"y\">  13527       </td>\n    <td class=\"y\">  16585       </td>\n    <td class=\"g\">  23869       </td>\n    <td class=\"g\">  23869 &lt;  </td>\n\n</tr>\n</table>\n## 严格安全层级\n\n严格的安全层级可以防止所有的攻击（它需要更多的块确认）。表中的数值对应6亿美元的卡尔达诺市值。\n\n\n<table class=\"full-width\">\n<tr>\n    <th class=\"center\">             攻击者的份额，%</th>\n    <th class=\"center pct25\">       攻击者的份额，$ mln </th> \n    <th colspan=\"6\" class=\"center\"> 确认水平         </th>\n\n</tr>\n<tr class=\"center\">\n    <td></td>\n    <td></td>\n    <td> Low    </td>\n    <td> 0.950  </td>\n    <td> 0.990  </td>\n    <td> 0.995  </td>\n    <td> 0.999  </td>\n    <td> High   </td>\n\n</tr>\n<tr>\n    <td class=\"gr\"> 10          </td>\n    <td class=\"gr\"> 6           </td>\n    <td class=\"rd\"> &lt; 5      </td>\n    <td class=\"yd\"> 5           </td>\n    <td class=\"yd\"> 9           </td>\n    <td class=\"yd\"> 11          </td>\n    <td class=\"gd\"> 15          </td>\n    <td class=\"gd\"> 15 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            15          </td>\n    <td>            9           </td>\n    <td class=\"r\">  &lt; 7      </td>\n    <td class=\"y\">  7           </td>\n    <td class=\"y\">  14          </td>\n    <td class=\"y\">  16          </td>\n    <td class=\"g\">  23          </td>\n    <td class=\"g\">  23 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            20          </td>\n    <td>            12          </td>\n    <td class=\"r\">  &lt; 12     </td>\n    <td class=\"y\">  12          </td>\n    <td class=\"y\">  21          </td>\n    <td class=\"y\">  25          </td>\n    <td class=\"g\">  35          </td>\n    <td class=\"g\">  35 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            25          </td>\n    <td>            15          </td>\n    <td class=\"r\">  &lt; 19     </td>\n    <td class=\"y\">  19          </td>\n    <td class=\"y\">  34          </td>\n    <td class=\"y\">  40          </td>\n    <td class=\"g\">  55          </td>\n    <td class=\"g\">  55 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            30          </td>\n    <td>            18          </td>\n    <td class=\"r\">  &lt; 32     </td>\n    <td class=\"y\">  32          </td>\n    <td class=\"y\">  57          </td>\n    <td class=\"y\">  68          </td>\n    <td class=\"g\">  94          </td>\n    <td class=\"g\">  94 &lt;     </td>\n\n</tr>\n<tr>\n    <td>            35          </td>\n    <td>            21          </td>\n    <td class=\"r\">  &lt; 63     </td>\n    <td class=\"y\">  63          </td>\n    <td class=\"y\">  111         </td>\n    <td class=\"y\">  132         </td>\n    <td class=\"g\">  181         </td>\n    <td class=\"g\">  181 &lt;    </td>\n\n</tr>\n<tr>\n    <td>            40          </td>\n    <td>            24          </td>\n    <td class=\"r\">  &lt; 157    </td>\n    <td class=\"y\">  157         </td>\n    <td class=\"y\">  274         </td>\n    <td class=\"y\">  325         </td>\n    <td class=\"g\">  443         </td>\n    <td class=\"g\">  443 &lt;    </td>\n\n</tr>\n<tr>\n    <td>            45          </td>\n    <td>            27          </td>\n    <td class=\"r\">  &lt; 729    </td>\n    <td class=\"y\">  729         </td>\n    <td class=\"y\">  1246         </td>\n    <td class=\"y\">  1470         </td>\n    <td class=\"g\">  1990         </td>\n    <td class=\"g\">  1990 &lt;    </td>\n\n</tr>\n<tr>\n    <td>            46          </td>\n    <td>            27.6        </td>\n    <td class=\"r\">  &lt; 1190   </td>\n    <td class=\"y\">  1190        </td>\n    <td class=\"y\">  2020        </td>\n    <td class=\"y\">  2379        </td>\n    <td class=\"g\">  3214        </td>\n    <td class=\"g\">  3214 &lt;   </td>\n\n</tr>\n<tr>\n    <td>            47          </td>\n    <td>            28.2        </td>\n    <td class=\"r\">  &lt; 2230   </td>\n    <td class=\"y\">  2230        </td>\n    <td class=\"y\">  3758        </td>\n    <td class=\"y\">  4418        </td>\n    <td class=\"g\">  5953        </td>\n    <td class=\"g\">  5953 &lt;   </td>\n\n</tr>\n<tr>\n    <td>            48          </td>\n    <td>            28.8        </td>\n    <td class=\"r\">  &lt; 5382   </td>\n    <td class=\"y\">  5382        </td>\n    <td class=\"y\">  8986        </td>\n    <td class=\"y\">  10542       </td>\n    <td class=\"g\">  14157       </td>\n    <td class=\"g\">  14157 &lt;  </td>\n\n</tr>\n<tr>\n    <td>            49          </td>\n    <td>            29.4        </td>\n    <td class=\"r\">  &lt; 24029  </td>\n    <td class=\"y\">  24029       </td>\n    <td class=\"y\">  39603       </td>\n    <td class=\"y\">  46320       </td>\n    <td class=\"g\">  61922       </td>\n    <td class=\"g\">  61922 &lt;  </td>\n\n</tr>\n</table>\n\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-03-transaction-assurance.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-04-updater.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-04-updater.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-04-updater.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 卡尔达诺结算层更新器\npath: /cn/technical/updater/\ngroup: technical\nvisible: true\nlanguage: cn\nlabel: docs\n---\n<!-- Reviewed at ac0126b2753f1f5ca6fbfb555783fbeb1aa141bd -->\n\n<!-- Updated at 6b5eda44e5942599a9781e5ad3f51eb820665b83 -->\n\n# 卡尔达诺结算层更新器概览\n\n更新系统的实现可以从 [Pos.Update](https://github.com/input-output-hk/cardano-sl/tree/6b5eda44e5942599a9781e5ad3f51eb820665b83/src/Pos/Update) 系列模块中找到。实现的方法与 CSL 的其他子系统相同，比如 Txp, Ssc 和委派。更新系统有一个全局状态，存储在数据库中。全局状态可以从区块链中明确导出。本地状态，有时候也被称为『内存池』，被存储在内存中。内存池用于数据传输，将传输的数据保存到区块中。在[二进制文档](/technical/protocols/binary-protocols/)中描述的二进制协议在[应用级文档](/technical/protocols/csl-application-level/)中描述了网络协议（使用标准的 [Inv/Req/Data\npattern](https://github.com/input-output-hk/cardano-sl/tree/43a2d079a026b90ba860e79b5be52d1337e26c6f/infra/Pos/Communication/Relay) 模式构建)。\n\n目前，通过软件更新，执行研究部分所述的硬分叉来增加硬分叉的功能已经准备好了；软分叉（或者说软件更新）已经完全实现。\n\n\n## 软分叉可更新字段\n\n一个 [UpdateProposal](https://github.com/input-output-hk/cardano-sl/blob/43a2d079a026b90ba860e79b5be52d1337e26c6f/update/Pos/Update/Core/Types.hs#L110) 包含用于修改由卡尔达诺结算层使用的一些参数（例如 slot 持续时间）的字段。具体来说，`upBlockVersion` 用于提议协议有了一些修改；如果 `upBlockVersion` 比上一次使用的区块还新，`upBlockVersionData` 的修改就会被采用。\n\n`upBlockVersionData` 具有 [BlockVersionData](https://github.com/input-output-hk/cardano-sl/blob/fe5e6a377ab63c506173545fd4d8633cd1afbdc6/core/Pos/Core/Types.hs#L206) 的类型。\n\n这些字段如下所述：\n\n- `bvdScriptVersion` - 用于验证脚本转账的脚本语言版本，如果协议中 `upBlockVersion` 增加了，它必须也给增加 `upBlockVersion` 1（不能保持不变）。\n- `bvdSlotDuration` - slot 持续时间（以毫秒为单位）。\n- `bvdMaxBlockSize` - 区块大小限制（以字节为单位）。与上一个限制相比而言，协议不能将区块的大小限制增加两倍以上。\n- `bvdMaxHeaderSize` - 区块大小限制（以字节为单位）。\n- `bvdMaxTxSize` - 转账大小限制（以字节为单位，[当前为4096字节](https://github.com/input-output-hk/cardano-sl/blob/43a2d079a026b90ba860e79b5be52d1337e26c6f/core/constants.yaml#L17))，限制 [TxAux](/technical/protocols/binary-protocols/#transaction-auxilary) 的大小。\n\n\n这些检查在 [verifyNextBVData](https://github.com/input-output-hk/cardano-sl/blob/893e3c838bf847613313e8dbf04330176a788af4/update/Pos/Update/Poll/Logic/Base.hs#L232) 中进行。\n\n\n此外，有一些现在未被使用，但将来会被使用的字段。以下是它们的简要说明：\n\n- `bvdMpcThd` MPC 的资格临界值。\n- `bvdHeavyDelThd` 重量级委派的临界值。\n- `bvdUpdateVoteThd` 投赞成票和反对更新所需的股份份额。\n- `bvdUpdateProposalThd` 所有股份的一个份额，要让区块拥有 `UpdateProposal`，权益所有人的投票份额必须大于这一份额。\n- `bvdUpdateImplicit` 静默更新之后的 slot 数（除非它有更多的否定票数）。\n- `bvdUpdateSoftforkThd` 所有股份的一个份额，如果某些区块权益所有人的总持股比例比该数值大，则采用该区块版本。\n\n## 内存池结构\n\n[`内存池`](https://github.com/input-output-hk/cardano-sl/blob/43a2d079a026b90ba860e79b5be52d1337e26c6f/update/Pos/Update/MemState/Types.hs#L29) 由投票和提案组成。除此以外，[`内存池`](https://github.com/input-output-hk/cardano-sl/blob/43a2d079a026b90ba860e79b5be52d1337e26c6f/update/Pos/Update/MemState/Types.hs#L39) 还包含 tip，slot 以及 `MemPool` 对应的 `PollModifier`（当前 `GState`，即应用的 `MemPool` 对应 `GState`）。无论是来自网络/内存池提案状态改变，还是来自区块链加载的提案状态改变，`PollModifier` 都表示全局状态的改变，会被应用到内存池。\n\n\n### 更新内存池\n\n随着节点反序列化[更新系统消息的数据](/technical/protocols/binary-protocols/#update-system)，内存池会被更新，实现在[这里](https://github.com/input-output-hk/cardano-sl/blob/43a2d079a026b90ba860e79b5be52d1337e26c6f/update/Pos/Update/MemState/Functions.hs#L35)。\n\n\n\n`MemPool` 在三种情况下会被更新：\n\n1. **当收到新的提案/表决时**。在这种情况下，调用一个[处理函数](https://github.com/input-output-hk/cardano-sl/blob/763822c4fd906f36fa97b6b1f973d31d52342f3f/update/Pos/Update/Logic/Local.hs#L186)，然后调用 [`verifyAndApplyUSPayload`](https://github.com/input-output-hk/cardano-sl/blob/dff5e00612c84af24964a98e5254602fa4f7fc17/update/Pos/Update/Poll/Logic/Apply.hs#L66) 并更新当前 `PollModifier` 和 `MemPool`。  \n\n2. **当一个新 slot 开始时**。在这种情况下，一些内存池的数据可能会失效。事实上，只有 epoch 发生变化时才会发生这种情况。这种情况可能会发生是因为稳定的股份分配发生了变化，有些投票可能没有足够的股份。这是 [`processNewSlot`](https://github.com/input-output-hk/cardano-sl/blob/763822c4fd906f36fa97b6b1f973d31d52342f3f/update/Pos/Update/Logic/Local.hs#L283) 方法实现的。\n\n3. **当 `GState` 更新时**。它被称为 [`usNormalize`](https://github.com/input-output-hk/cardano-sl/blob/763822c4fd906f36fa97b6b1f973d31d52342f3f/update/Pos/Update/Logic/Local.hs#L248)。有些数据可能由于区块应用程序或回滚而变得无效。例如，我们在内存中有个提案，将这个提案应用于区块，然后它变无效了（因为它已经在区块中）。我们应该放弃这个提案。或者我们从某个区块对提案进行投票，然后回滚这个区块，然后投票变得无效。它通过将所有本地数据应用于空状态来实现的，忽略所有不再有效的数据。\n\n### 提案和投票累计\n\n要为提案投票，节点应该发送它们的[投票](https://github.com/input-output-hk/cardano-sl/blob/04dc8e4a640a62f0d82633f3a78ab3d8540fd5e6/update/Pos/Update/Core/Types.hs#L255)。提案和投票存储在内存池（即使没有足够的选票加入区块，这种方式也可以自动收集投票），或者从区块链收集，以确定哪个方案通过。\n\n\n## 与数据库的交互\n\n为了验证更新系统数据，我们必须从全局状态（数据库）获取这些数据。有一个文档详实的类型类 [`MonadPollRead`](https://github.com/input-output-hk/cardano-sl/blob/446444070ee09857603797a90af970fff215c8c5/update/Pos/Update/Poll/Class.hs#L29) 提供这样的接口。这种类型不但用于数据库交互，还用于在处理从网络接收到的数据时将内存池写入账户。非常重要的一点是，它的实现依赖于 [`Pos.Update.DB`](https://github.com/input-output-hk/cardano-sl/blob/04dc8e4a640a62f0d82633f3a78ab3d8540fd5e6/update/Pos/Update/DB.hs) 模块中的函数。\n\n\n## 核心类型\n\n核心类型在[二进制协议](/technical/protocols/binary-protocols/)文档中提到。这些类型直接反映了研究章节的概念，有关更多信息，请参阅[核心类型模块](https://github.com/input-output-hk/cardano-sl/blob/04dc8e4a640a62f0d82633f3a78ab3d8540fd5e6/update/Pos/Update/Core/Types.hs)。\n\n\n## 更新提案批准\n\n更新机制实现的一个很重要的部分是创始块的部分。这个逻辑在 [`processGenesisBlock`](https://github.com/input-output-hk/cardano-sl/blob/6b5eda44e5942599a9781e5ad3f51eb820665b83/src/Pos/Update/Poll/Logic/Softfork.hs#L68) 中。下面将解释与该过程有关的术语。\n\n\n### 阈值\n\n假设有一个区块版本 `X`。以及在 slots `S` 中创建的版本为 `X` 的区块（其中 `S` 是一组 slots）。如果所有 slot 的领导者的总相对资产 `S` ≥ `softforkResolutionThreshold` (在代码中被称为阈值)，则 `X` 被采纳。请参阅[研究概述](/cardano/update-mechanism/#soft-fork-updates)获取更详细说明。\n\n\n### 提案状态\n\n更新的提案状态可处于下面的状态之一。\n\n\n#### 未定\n\n这意味着更新提案被包含在其中一个区块中，但是它没有 `50%` 的赞成/反对票（这里的 `50%` 的意义是赞成/反对提案选民总数相对于系统所有权益相关者的总股权），默认赞同规则还没有触发。\n\n\n<!-- TODO: **Important remark:** when we are talking about stake, we need to be clear about\nwhich stake distribution we are talking about. For each epoch we know stable distribution\nfor this epoch. It used in leaders selection (follow-the-satoshi) and also in many other\ncases. Stable distribution is distribution as it was ﻿⁠⁠⁠⁠2k﻿⁠⁠⁠⁠ slots before the end of epoch.\nTo calculate stake of votes for proposal ﻿⁠⁠⁠⁠p﻿⁠⁠⁠⁠ we use stake distribution as per epoch in\nwhich ﻿⁠⁠⁠⁠p﻿⁠⁠⁠⁠ was added to blocks. I. e. distribution which was ﻿⁠⁠⁠⁠2k﻿⁠⁠⁠⁠ slots before the\nend of that epoch. This ensures that nobody can transfer his funds to another address\nand vote from that address to increase total stake of voters.\n\n**Another important remark:** when we are talking about stake, it's also important to be\nclear whether we consider delegated stake. I. e. if Alice delegated to Bob, do we consider\nthat Alice's funds belong to Bob or Alice? When we use stake for votes, we consider delegated\nstake, i. e. we consider that Alice's funds belong to Bob. Note that here we consider\nonly heavyweight delegation. I hope it's covered in documentation, but I am not sure. -->\n\n#### 批准\n\n这意味着这个提案有超过 `50%` 的投票或很久之前加入了区块（根据默认批准规则），赞同的票数比反对的票数更多（与股权比较）。\n\n\n#### 拒绝\n\n如果反对该提案的投票超过 `50%`，或很久之前加入了区块（根据默认批准规则），反对的票数比赞同的票数更多（再次与股权比较）。\n\n#### 确认\n\n如果至少 `k` 个区块提案通过，那么这个**批准**的提案被称为**确认**。这时候我们可以确定该提案不会被拒绝。因为深度超过 `k` 的回滚是不可能的。\n\n#### 废弃\n\n如果至少 `k` 个区块提案未通过，那么这个**拒绝**的提案被**废弃**。这时候我们可以确定该提案不会被通过。因为深度超过 `k` 的回滚是不可能的。\n\n## 下载新版本\n\n在 [`Pos.Update.Download`](https://github.com/input-output-hk/cardano-sl/blob/04dc8e4a640a62f0d82633f3a78ab3d8540fd5e6/src/Pos/Update/Download.hs) 模块中，实现了以下算法。已下载的更新通过一个叫做 [`cardano-launcher`](https://github.com/input-output-hk/cardano-sl/blob/82ba83c3ffb670201b309ff47e3d0ab5f4a17455/src/launcher/Main.hs) 的工具操作。\n\n\n### 下载更新的版本\n\n要下载更新的版本，我们从 [`ConfirmedProposalState`](https://github.com/input-output-hk/cardano-sl/blob/04dc8e4a640a62f0d82633f3a78ab3d8540fd5e6/update/Pos/Update/Poll/Types.hs#L114) 提取更新的哈希值。如果更新哈希值成功提取了，则调用『下载更新哈希值』算法以下载保存更新的版本，这取决于我们是否在给定的平台使用安装程序。\n\n### 通过哈希值下载更新\n\n为了[通过哈希值下载更新](https://github.com/input-output-hk/cardano-sl/blob/daa8b81785f38038187c45385c9a94510a5c3780/src/Pos/Update/Download.hs#L108)，我们会使用 HTTP 中的 `httpLBS`，遍历已知的更新服务器，用给定的哈希值下载更新。很简单：最后，我们要么完成了更新的下载，要么遍历完服务器清单，上报错误信息。已知更新服务器的 URI 使用 `cardano-node` 可执行文件的 `--update-server` 参数定义。\n\n",
        "type": "MarkdownRemark",
        "contentDigest": "edb31bb3f30dbe1390102d00318901d7",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "卡尔达诺结算层更新器",
        "path": "/cn/technical/updater/",
        "group": "technical",
        "visible": true,
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-04-updater.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-04-updater.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at ac0126b2753f1f5ca6fbfb555783fbeb1aa141bd -->\n\n<!-- Updated at 6b5eda44e5942599a9781e5ad3f51eb820665b83 -->\n\n# 卡尔达诺结算层更新器概览\n\n更新系统的实现可以从 [Pos.Update](https://github.com/input-output-hk/cardano-sl/tree/6b5eda44e5942599a9781e5ad3f51eb820665b83/src/Pos/Update) 系列模块中找到。实现的方法与 CSL 的其他子系统相同，比如 Txp, Ssc 和委派。更新系统有一个全局状态，存储在数据库中。全局状态可以从区块链中明确导出。本地状态，有时候也被称为『内存池』，被存储在内存中。内存池用于数据传输，将传输的数据保存到区块中。在[二进制文档](/technical/protocols/binary-protocols/)中描述的二进制协议在[应用级文档](/technical/protocols/csl-application-level/)中描述了网络协议（使用标准的 [Inv/Req/Data\npattern](https://github.com/input-output-hk/cardano-sl/tree/43a2d079a026b90ba860e79b5be52d1337e26c6f/infra/Pos/Communication/Relay) 模式构建)。\n\n目前，通过软件更新，执行研究部分所述的硬分叉来增加硬分叉的功能已经准备好了；软分叉（或者说软件更新）已经完全实现。\n\n\n## 软分叉可更新字段\n\n一个 [UpdateProposal](https://github.com/input-output-hk/cardano-sl/blob/43a2d079a026b90ba860e79b5be52d1337e26c6f/update/Pos/Update/Core/Types.hs#L110) 包含用于修改由卡尔达诺结算层使用的一些参数（例如 slot 持续时间）的字段。具体来说，`upBlockVersion` 用于提议协议有了一些修改；如果 `upBlockVersion` 比上一次使用的区块还新，`upBlockVersionData` 的修改就会被采用。\n\n`upBlockVersionData` 具有 [BlockVersionData](https://github.com/input-output-hk/cardano-sl/blob/fe5e6a377ab63c506173545fd4d8633cd1afbdc6/core/Pos/Core/Types.hs#L206) 的类型。\n\n这些字段如下所述：\n\n- `bvdScriptVersion` - 用于验证脚本转账的脚本语言版本，如果协议中 `upBlockVersion` 增加了，它必须也给增加 `upBlockVersion` 1（不能保持不变）。\n- `bvdSlotDuration` - slot 持续时间（以毫秒为单位）。\n- `bvdMaxBlockSize` - 区块大小限制（以字节为单位）。与上一个限制相比而言，协议不能将区块的大小限制增加两倍以上。\n- `bvdMaxHeaderSize` - 区块大小限制（以字节为单位）。\n- `bvdMaxTxSize` - 转账大小限制（以字节为单位，[当前为4096字节](https://github.com/input-output-hk/cardano-sl/blob/43a2d079a026b90ba860e79b5be52d1337e26c6f/core/constants.yaml#L17))，限制 [TxAux](/technical/protocols/binary-protocols/#transaction-auxilary) 的大小。\n\n\n这些检查在 [verifyNextBVData](https://github.com/input-output-hk/cardano-sl/blob/893e3c838bf847613313e8dbf04330176a788af4/update/Pos/Update/Poll/Logic/Base.hs#L232) 中进行。\n\n\n此外，有一些现在未被使用，但将来会被使用的字段。以下是它们的简要说明：\n\n- `bvdMpcThd` MPC 的资格临界值。\n- `bvdHeavyDelThd` 重量级委派的临界值。\n- `bvdUpdateVoteThd` 投赞成票和反对更新所需的股份份额。\n- `bvdUpdateProposalThd` 所有股份的一个份额，要让区块拥有 `UpdateProposal`，权益所有人的投票份额必须大于这一份额。\n- `bvdUpdateImplicit` 静默更新之后的 slot 数（除非它有更多的否定票数）。\n- `bvdUpdateSoftforkThd` 所有股份的一个份额，如果某些区块权益所有人的总持股比例比该数值大，则采用该区块版本。\n\n## 内存池结构\n\n[`内存池`](https://github.com/input-output-hk/cardano-sl/blob/43a2d079a026b90ba860e79b5be52d1337e26c6f/update/Pos/Update/MemState/Types.hs#L29) 由投票和提案组成。除此以外，[`内存池`](https://github.com/input-output-hk/cardano-sl/blob/43a2d079a026b90ba860e79b5be52d1337e26c6f/update/Pos/Update/MemState/Types.hs#L39) 还包含 tip，slot 以及 `MemPool` 对应的 `PollModifier`（当前 `GState`，即应用的 `MemPool` 对应 `GState`）。无论是来自网络/内存池提案状态改变，还是来自区块链加载的提案状态改变，`PollModifier` 都表示全局状态的改变，会被应用到内存池。\n\n\n### 更新内存池\n\n随着节点反序列化[更新系统消息的数据](/technical/protocols/binary-protocols/#update-system)，内存池会被更新，实现在[这里](https://github.com/input-output-hk/cardano-sl/blob/43a2d079a026b90ba860e79b5be52d1337e26c6f/update/Pos/Update/MemState/Functions.hs#L35)。\n\n\n\n`MemPool` 在三种情况下会被更新：\n\n1. **当收到新的提案/表决时**。在这种情况下，调用一个[处理函数](https://github.com/input-output-hk/cardano-sl/blob/763822c4fd906f36fa97b6b1f973d31d52342f3f/update/Pos/Update/Logic/Local.hs#L186)，然后调用 [`verifyAndApplyUSPayload`](https://github.com/input-output-hk/cardano-sl/blob/dff5e00612c84af24964a98e5254602fa4f7fc17/update/Pos/Update/Poll/Logic/Apply.hs#L66) 并更新当前 `PollModifier` 和 `MemPool`。  \n\n2. **当一个新 slot 开始时**。在这种情况下，一些内存池的数据可能会失效。事实上，只有 epoch 发生变化时才会发生这种情况。这种情况可能会发生是因为稳定的股份分配发生了变化，有些投票可能没有足够的股份。这是 [`processNewSlot`](https://github.com/input-output-hk/cardano-sl/blob/763822c4fd906f36fa97b6b1f973d31d52342f3f/update/Pos/Update/Logic/Local.hs#L283) 方法实现的。\n\n3. **当 `GState` 更新时**。它被称为 [`usNormalize`](https://github.com/input-output-hk/cardano-sl/blob/763822c4fd906f36fa97b6b1f973d31d52342f3f/update/Pos/Update/Logic/Local.hs#L248)。有些数据可能由于区块应用程序或回滚而变得无效。例如，我们在内存中有个提案，将这个提案应用于区块，然后它变无效了（因为它已经在区块中）。我们应该放弃这个提案。或者我们从某个区块对提案进行投票，然后回滚这个区块，然后投票变得无效。它通过将所有本地数据应用于空状态来实现的，忽略所有不再有效的数据。\n\n### 提案和投票累计\n\n要为提案投票，节点应该发送它们的[投票](https://github.com/input-output-hk/cardano-sl/blob/04dc8e4a640a62f0d82633f3a78ab3d8540fd5e6/update/Pos/Update/Core/Types.hs#L255)。提案和投票存储在内存池（即使没有足够的选票加入区块，这种方式也可以自动收集投票），或者从区块链收集，以确定哪个方案通过。\n\n\n## 与数据库的交互\n\n为了验证更新系统数据，我们必须从全局状态（数据库）获取这些数据。有一个文档详实的类型类 [`MonadPollRead`](https://github.com/input-output-hk/cardano-sl/blob/446444070ee09857603797a90af970fff215c8c5/update/Pos/Update/Poll/Class.hs#L29) 提供这样的接口。这种类型不但用于数据库交互，还用于在处理从网络接收到的数据时将内存池写入账户。非常重要的一点是，它的实现依赖于 [`Pos.Update.DB`](https://github.com/input-output-hk/cardano-sl/blob/04dc8e4a640a62f0d82633f3a78ab3d8540fd5e6/update/Pos/Update/DB.hs) 模块中的函数。\n\n\n## 核心类型\n\n核心类型在[二进制协议](/technical/protocols/binary-protocols/)文档中提到。这些类型直接反映了研究章节的概念，有关更多信息，请参阅[核心类型模块](https://github.com/input-output-hk/cardano-sl/blob/04dc8e4a640a62f0d82633f3a78ab3d8540fd5e6/update/Pos/Update/Core/Types.hs)。\n\n\n## 更新提案批准\n\n更新机制实现的一个很重要的部分是创始块的部分。这个逻辑在 [`processGenesisBlock`](https://github.com/input-output-hk/cardano-sl/blob/6b5eda44e5942599a9781e5ad3f51eb820665b83/src/Pos/Update/Poll/Logic/Softfork.hs#L68) 中。下面将解释与该过程有关的术语。\n\n\n### 阈值\n\n假设有一个区块版本 `X`。以及在 slots `S` 中创建的版本为 `X` 的区块（其中 `S` 是一组 slots）。如果所有 slot 的领导者的总相对资产 `S` ≥ `softforkResolutionThreshold` (在代码中被称为阈值)，则 `X` 被采纳。请参阅[研究概述](/cardano/update-mechanism/#soft-fork-updates)获取更详细说明。\n\n\n### 提案状态\n\n更新的提案状态可处于下面的状态之一。\n\n\n#### 未定\n\n这意味着更新提案被包含在其中一个区块中，但是它没有 `50%` 的赞成/反对票（这里的 `50%` 的意义是赞成/反对提案选民总数相对于系统所有权益相关者的总股权），默认赞同规则还没有触发。\n\n\n<!-- TODO: **Important remark:** when we are talking about stake, we need to be clear about\nwhich stake distribution we are talking about. For each epoch we know stable distribution\nfor this epoch. It used in leaders selection (follow-the-satoshi) and also in many other\ncases. Stable distribution is distribution as it was ﻿⁠⁠⁠⁠2k﻿⁠⁠⁠⁠ slots before the end of epoch.\nTo calculate stake of votes for proposal ﻿⁠⁠⁠⁠p﻿⁠⁠⁠⁠ we use stake distribution as per epoch in\nwhich ﻿⁠⁠⁠⁠p﻿⁠⁠⁠⁠ was added to blocks. I. e. distribution which was ﻿⁠⁠⁠⁠2k﻿⁠⁠⁠⁠ slots before the\nend of that epoch. This ensures that nobody can transfer his funds to another address\nand vote from that address to increase total stake of voters.\n\n**Another important remark:** when we are talking about stake, it's also important to be\nclear whether we consider delegated stake. I. e. if Alice delegated to Bob, do we consider\nthat Alice's funds belong to Bob or Alice? When we use stake for votes, we consider delegated\nstake, i. e. we consider that Alice's funds belong to Bob. Note that here we consider\nonly heavyweight delegation. I hope it's covered in documentation, but I am not sure. -->\n\n#### 批准\n\n这意味着这个提案有超过 `50%` 的投票或很久之前加入了区块（根据默认批准规则），赞同的票数比反对的票数更多（与股权比较）。\n\n\n#### 拒绝\n\n如果反对该提案的投票超过 `50%`，或很久之前加入了区块（根据默认批准规则），反对的票数比赞同的票数更多（再次与股权比较）。\n\n#### 确认\n\n如果至少 `k` 个区块提案通过，那么这个**批准**的提案被称为**确认**。这时候我们可以确定该提案不会被拒绝。因为深度超过 `k` 的回滚是不可能的。\n\n#### 废弃\n\n如果至少 `k` 个区块提案未通过，那么这个**拒绝**的提案被**废弃**。这时候我们可以确定该提案不会被通过。因为深度超过 `k` 的回滚是不可能的。\n\n## 下载新版本\n\n在 [`Pos.Update.Download`](https://github.com/input-output-hk/cardano-sl/blob/04dc8e4a640a62f0d82633f3a78ab3d8540fd5e6/src/Pos/Update/Download.hs) 模块中，实现了以下算法。已下载的更新通过一个叫做 [`cardano-launcher`](https://github.com/input-output-hk/cardano-sl/blob/82ba83c3ffb670201b309ff47e3d0ab5f4a17455/src/launcher/Main.hs) 的工具操作。\n\n\n### 下载更新的版本\n\n要下载更新的版本，我们从 [`ConfirmedProposalState`](https://github.com/input-output-hk/cardano-sl/blob/04dc8e4a640a62f0d82633f3a78ab3d8540fd5e6/update/Pos/Update/Poll/Types.hs#L114) 提取更新的哈希值。如果更新哈希值成功提取了，则调用『下载更新哈希值』算法以下载保存更新的版本，这取决于我们是否在给定的平台使用安装程序。\n\n### 通过哈希值下载更新\n\n为了[通过哈希值下载更新](https://github.com/input-output-hk/cardano-sl/blob/daa8b81785f38038187c45385c9a94510a5c3780/src/Pos/Update/Download.hs#L108)，我们会使用 HTTP 中的 `httpLBS`，遍历已知的更新服务器，用给定的哈希值下载更新。很简单：最后，我们要么完成了更新的下载，要么遍历完服务器清单，上报错误信息。已知更新服务器的 URI 使用 `cardano-node` 可执行文件的 `--update-server` 参数定义。\n\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-04-updater.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-07-blocks.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-07-blocks.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-07-blocks.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 卡尔达诺结算层区块\npath: /cn/technical/blocks/\ngroup: technical\nlanguage: cn\nlabel: docs\n---\n\n<!-- Reviewed at ac0126b2753f1f5ca6fbfb555783fbeb1aa141bd -->\n\n# 卡尔达诺清算层的区块\n\n这份指南介绍区块设计和区块处理的逻辑。\n\n区块相关类型在 [Pos.Block.Core.Main.Types](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Main/Types.hs) 模块和 [Pos.Block.Core.Genesis.Types](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Genesis/Types.hs) 模块中定义。在\n[Pos.Block.Logic.\\*](https://github.com/input-output-hk/cardano-sl/tree/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic) 模块中定义了使用区块的逻辑。\n\n## 设计\n\n区块是账本的基础部分。有两种类型的区块：[**主块**](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Main/Types.hs#L110)和[**生成块**](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Genesis/Types.hs#L66)。\n\n### 主区块\n\n一个主区块由*头*和*主体*组成。[区块头](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/core/Pos/Core/Block.hs#L99)包含块的元信息：\n\n1. 指向前一个区块签名的头。\n2. 区块主体信息的验证。\n3. 验证共识算法的共识数据。\n4. 一些额外的数据。\n\n区块主体包含的有效载荷和一些额外的数据也是如此。有效载荷包括：\n\n1. [转账有效载荷](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Main/Chain.hs#L66)。这个有效载荷是最主要的。事务存储在 Merkle 树中。这个有效载荷也包括[见证名单](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Txp/Core/Types.hs#L283)，请阅读[卡尔达诺结算层](/cardano/transactions/)的交易，了解交易和见证的更多信息。\n2. [SSC 有效载荷](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Main/Chain.hs#L68)。按照跟随[中本聪算法](/cardano/proof-of-stake/#follow-the-satoshi)使用 SSC（共享种子计算）。在每一个 epoch 中，必须选出下一个 epoch 的领导者。这些 slot 的领导者将能够生成主区块并加入到账本中。所以 SSC 被用作领导者选举过程的随机来源。\n3. [委派的有效载荷](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Main/Chain.hs#L70)。该有效载荷由[重量级代理签名密钥列表](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Delegation/Types.hs#L49)组成。请阅读关于[卡尔达诺结算层的股权委派](/technical/delegation/)获取更多信息。\n4. [更新有效载荷](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Main/Chain.hs#L72)。它包含软件更新的[建议](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/update/Pos/Update/Core/Types.hs#L300)和特定更新的选项列表。请阅读[更新系统模型](/cardano/update-mechanism/)获得更多信息。\n\n### 创世块\n\n一个创始块不包含交易，每个 epoch 我们都只有一个创始块。创始块就像主区块一样，只有一个区块头和一个区块主体。该块的主题包括：\n\n1. 与该区块相关的 [epoch 索引](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Genesis/Chain.hs#L33)。\n2. 这个 epoch 的 slot 领导者列表。该列表[不能为空](https://github.com/input-output-hk/cardano-sl/blob/b4b2c282b0e2a2e4415163e70dcb559396a2237c/core/Pos/Core/Types.hs#L272)。\n3. 链复杂度。他表示生成一个链的复杂度，它是链中主块的数量。\n\n\n## 区块处理逻辑\n\n我们根据区块和区块头进行处理。基本上，我们可以：\n\n* 创建一个区块\n* 验证一个区块\n* 申请块\n* 回滚一个块\n\n以及：\n\n* 按不同的标准获取块头\n* 给区块头分类\n\n\n## 创建区块\n\n如上所述，有两种区块：**主**区块和**生成**块。主区块由 [`createMainBlock`](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L156) 函数创建，生成块由 [`createGenesisBlock`](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L92) 创建。\n\n### 主区块创建\n\n如果可能的话，我们尝试在最佳链的顶部创建一个新的主区块。如果满足以下条件，可以创建一个新区块：\n\n- 我们知道 epoch 给定 slot ID 的主区块，\n- 最后一个已知的区块不超过给定的 slot 的 [`slotSecurityParam`](https://github.com/input-output-hk/cardano-sl/blob/f571087e5b5af339767198141981c850227ca99c/core/Pos/Core/Constants.hs#L86) 个区块。\n\n`slotSecurityParam`（实际上是 slot 的数量）的值取决于可被回滚区块的最大数量。这个[最大数量](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/core/Pos/Core/Constants.hs#L81)来自[论文](/glossary/#paper)中的安全参数。\n\n\n首先，我们必须检查我们的软件是否可以[根据当前的全局状态](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Update/Logic/Global.hs#L139)创建一个区块，如果不能，我们会[报告](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L172)。如果可以的话，我们[创建并应用区块](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L206)。\n\n### 创世纪块的创建\n\n当当前已知最佳链的头 [`MainBlock`](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Main/Types.hs#L112)  对应于 [`slotSecurityParam`](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/core/Pos/Core/Constants.hs#L81) （i-1）个时期的最后一个 slot 之一时，为当前时期创建一个生成块。\n\n首先，我们试图获得 slot 领导者，如果[没有领导者](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L99)或 [LRC 没有足够的区块](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L102)，则会报告错误。否则，我们试图创建一个[新的创始块](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L115)。然而有时候我们[不应该创建](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L106)。例如，我们不应该在第 0 个 epoch 做这件事情，因为[第 0 个 epoch](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L108) 的生成块是硬编码的。\n\n\n## 区块应用\n\n我们使用 [`applyBlocks`](https://github.com/input-output-hk/cardano-sl/blob/09e4fcf8a7f1a5a587d0241aa93f23e2d72c7c70/src/Pos/Block/Logic/VAR.hs#L182) 函数应用区块。区块的顺序应该是绝对有效的：我们必须验证关于块的所有谓词和数据检查。\n\n**重要**： 在这个序列中的所有区块都必须是相同的 epoch！\n\n如果所有的条件都满足了，我们[真正应用区块](https://github.com/input-output-hk/cardano-sl/blob/09e4fcf8a7f1a5a587d0241aa93f23e2d72c7c70/src/Pos/Block/Logic/Internal.hs#L107)：\n\n- [应用 US (更新系统)](https://github.com/input-output-hk/cardano-sl/blob/09e4fcf8a7f1a5a587d0241aa93f23e2d72c7c70/src/Pos/Block/Logic/Internal.hs#L141)，\n- [应用委派](https://github.com/input-output-hk/cardano-sl/blob/09e4fcf8a7f1a5a587d0241aa93f23e2d72c7c70/src/Pos/Block/Logic/Internal.hs#L142)，\n- [应用转账](https://github.com/input-output-hk/cardano-sl/blob/09e4fcf8a7f1a5a587d0241aa93f23e2d72c7c70/src/Pos/Block/Logic/Internal.hs#L143)。\n\n而且，我们可以在应用程序之前验证区块（即只有在区块有效时才应用区块）。我们使用 [`verifyAndApplyBlocks`](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/VAR.hs#L99) 函数的功能，如果在应用程序发生错误，有两个选项：\n\n1. 在这个函数中应用的所有区块都将[回滚](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/VAR.hs#L137)。\n2. 这个函数将尝试[尽可能地多应用区块](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/VAR.hs#L126)\n\n\n## 区块回滚\n\n您可以把回滚视为应用程序的对立面：当执行回滚时，应用程序所做的所有修改都将被取消，为此，我们使用 [`rollbackBlocks`](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/VAR.hs#L208) 函数的功能。\n\nget the tip？第一个区块将回滚。如果他们不匹配，则报告错误。如果他们匹配，我们实际上回滚区块的顺序为：\n\n- [回滚委派](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Internal.hs#L173)，抹掉内存池中的认证。\n- [回滚 US](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Internal.hs#L174)\n- [回滚交易](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Internal.hs#L172)\n\n\n## 区块头分类\n\n区块头部可以分为：\n\n1.  [继续](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L51)。\n2.  [可选](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L54)。\n3.  [无效](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L59)。\n4.  [无用](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L57)。\n\n\n如果[验证成功](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L120)，则头部为**继续**：头部是主链的直接延续（即，其服务是我们的 tip）。\n\n如果头部的父亲不是我们的 tip，[它不太可能是我们的主链](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L124)，头部为**可选**。\n\n\n如果[头部链中有任何错误](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L170)，或者[没有对应链中最老元素（应该是检查点之一）](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L172)的父亲的块，那么头部被视为**无效**。\n\n\n如果在不同的条件下（例如，头部的 slot [小于或等于我们 tip 的 slot](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L94)，或者[头部与主链不连续，复杂度更大](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L129)），头部为**无用**。\n\n\n",
        "type": "MarkdownRemark",
        "contentDigest": "8ccc9064c89f4f9a0958b5755a1455a5",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "卡尔达诺结算层区块",
        "path": "/cn/technical/blocks/",
        "group": "technical",
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-07-blocks.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-07-blocks.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n<!-- Reviewed at ac0126b2753f1f5ca6fbfb555783fbeb1aa141bd -->\n\n# 卡尔达诺清算层的区块\n\n这份指南介绍区块设计和区块处理的逻辑。\n\n区块相关类型在 [Pos.Block.Core.Main.Types](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Main/Types.hs) 模块和 [Pos.Block.Core.Genesis.Types](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Genesis/Types.hs) 模块中定义。在\n[Pos.Block.Logic.\\*](https://github.com/input-output-hk/cardano-sl/tree/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic) 模块中定义了使用区块的逻辑。\n\n## 设计\n\n区块是账本的基础部分。有两种类型的区块：[**主块**](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Main/Types.hs#L110)和[**生成块**](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Genesis/Types.hs#L66)。\n\n### 主区块\n\n一个主区块由*头*和*主体*组成。[区块头](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/core/Pos/Core/Block.hs#L99)包含块的元信息：\n\n1. 指向前一个区块签名的头。\n2. 区块主体信息的验证。\n3. 验证共识算法的共识数据。\n4. 一些额外的数据。\n\n区块主体包含的有效载荷和一些额外的数据也是如此。有效载荷包括：\n\n1. [转账有效载荷](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Main/Chain.hs#L66)。这个有效载荷是最主要的。事务存储在 Merkle 树中。这个有效载荷也包括[见证名单](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Txp/Core/Types.hs#L283)，请阅读[卡尔达诺结算层](/cardano/transactions/)的交易，了解交易和见证的更多信息。\n2. [SSC 有效载荷](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Main/Chain.hs#L68)。按照跟随[中本聪算法](/cardano/proof-of-stake/#follow-the-satoshi)使用 SSC（共享种子计算）。在每一个 epoch 中，必须选出下一个 epoch 的领导者。这些 slot 的领导者将能够生成主区块并加入到账本中。所以 SSC 被用作领导者选举过程的随机来源。\n3. [委派的有效载荷](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Main/Chain.hs#L70)。该有效载荷由[重量级代理签名密钥列表](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Delegation/Types.hs#L49)组成。请阅读关于[卡尔达诺结算层的股权委派](/technical/delegation/)获取更多信息。\n4. [更新有效载荷](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Main/Chain.hs#L72)。它包含软件更新的[建议](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/update/Pos/Update/Core/Types.hs#L300)和特定更新的选项列表。请阅读[更新系统模型](/cardano/update-mechanism/)获得更多信息。\n\n### 创世块\n\n一个创始块不包含交易，每个 epoch 我们都只有一个创始块。创始块就像主区块一样，只有一个区块头和一个区块主体。该块的主题包括：\n\n1. 与该区块相关的 [epoch 索引](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Genesis/Chain.hs#L33)。\n2. 这个 epoch 的 slot 领导者列表。该列表[不能为空](https://github.com/input-output-hk/cardano-sl/blob/b4b2c282b0e2a2e4415163e70dcb559396a2237c/core/Pos/Core/Types.hs#L272)。\n3. 链复杂度。他表示生成一个链的复杂度，它是链中主块的数量。\n\n\n## 区块处理逻辑\n\n我们根据区块和区块头进行处理。基本上，我们可以：\n\n* 创建一个区块\n* 验证一个区块\n* 申请块\n* 回滚一个块\n\n以及：\n\n* 按不同的标准获取块头\n* 给区块头分类\n\n\n## 创建区块\n\n如上所述，有两种区块：**主**区块和**生成**块。主区块由 [`createMainBlock`](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L156) 函数创建，生成块由 [`createGenesisBlock`](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L92) 创建。\n\n### 主区块创建\n\n如果可能的话，我们尝试在最佳链的顶部创建一个新的主区块。如果满足以下条件，可以创建一个新区块：\n\n- 我们知道 epoch 给定 slot ID 的主区块，\n- 最后一个已知的区块不超过给定的 slot 的 [`slotSecurityParam`](https://github.com/input-output-hk/cardano-sl/blob/f571087e5b5af339767198141981c850227ca99c/core/Pos/Core/Constants.hs#L86) 个区块。\n\n`slotSecurityParam`（实际上是 slot 的数量）的值取决于可被回滚区块的最大数量。这个[最大数量](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/core/Pos/Core/Constants.hs#L81)来自[论文](/glossary/#paper)中的安全参数。\n\n\n首先，我们必须检查我们的软件是否可以[根据当前的全局状态](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Update/Logic/Global.hs#L139)创建一个区块，如果不能，我们会[报告](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L172)。如果可以的话，我们[创建并应用区块](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L206)。\n\n### 创世纪块的创建\n\n当当前已知最佳链的头 [`MainBlock`](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Core/Main/Types.hs#L112)  对应于 [`slotSecurityParam`](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/core/Pos/Core/Constants.hs#L81) （i-1）个时期的最后一个 slot 之一时，为当前时期创建一个生成块。\n\n首先，我们试图获得 slot 领导者，如果[没有领导者](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L99)或 [LRC 没有足够的区块](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L102)，则会报告错误。否则，我们试图创建一个[新的创始块](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L115)。然而有时候我们[不应该创建](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L106)。例如，我们不应该在第 0 个 epoch 做这件事情，因为[第 0 个 epoch](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Creation.hs#L108) 的生成块是硬编码的。\n\n\n## 区块应用\n\n我们使用 [`applyBlocks`](https://github.com/input-output-hk/cardano-sl/blob/09e4fcf8a7f1a5a587d0241aa93f23e2d72c7c70/src/Pos/Block/Logic/VAR.hs#L182) 函数应用区块。区块的顺序应该是绝对有效的：我们必须验证关于块的所有谓词和数据检查。\n\n**重要**： 在这个序列中的所有区块都必须是相同的 epoch！\n\n如果所有的条件都满足了，我们[真正应用区块](https://github.com/input-output-hk/cardano-sl/blob/09e4fcf8a7f1a5a587d0241aa93f23e2d72c7c70/src/Pos/Block/Logic/Internal.hs#L107)：\n\n- [应用 US (更新系统)](https://github.com/input-output-hk/cardano-sl/blob/09e4fcf8a7f1a5a587d0241aa93f23e2d72c7c70/src/Pos/Block/Logic/Internal.hs#L141)，\n- [应用委派](https://github.com/input-output-hk/cardano-sl/blob/09e4fcf8a7f1a5a587d0241aa93f23e2d72c7c70/src/Pos/Block/Logic/Internal.hs#L142)，\n- [应用转账](https://github.com/input-output-hk/cardano-sl/blob/09e4fcf8a7f1a5a587d0241aa93f23e2d72c7c70/src/Pos/Block/Logic/Internal.hs#L143)。\n\n而且，我们可以在应用程序之前验证区块（即只有在区块有效时才应用区块）。我们使用 [`verifyAndApplyBlocks`](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/VAR.hs#L99) 函数的功能，如果在应用程序发生错误，有两个选项：\n\n1. 在这个函数中应用的所有区块都将[回滚](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/VAR.hs#L137)。\n2. 这个函数将尝试[尽可能地多应用区块](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/VAR.hs#L126)\n\n\n## 区块回滚\n\n您可以把回滚视为应用程序的对立面：当执行回滚时，应用程序所做的所有修改都将被取消，为此，我们使用 [`rollbackBlocks`](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/VAR.hs#L208) 函数的功能。\n\nget the tip？第一个区块将回滚。如果他们不匹配，则报告错误。如果他们匹配，我们实际上回滚区块的顺序为：\n\n- [回滚委派](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Internal.hs#L173)，抹掉内存池中的认证。\n- [回滚 US](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Internal.hs#L174)\n- [回滚交易](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Internal.hs#L172)\n\n\n## 区块头分类\n\n区块头部可以分为：\n\n1.  [继续](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L51)。\n2.  [可选](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L54)。\n3.  [无效](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L59)。\n4.  [无用](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L57)。\n\n\n如果[验证成功](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L120)，则头部为**继续**：头部是主链的直接延续（即，其服务是我们的 tip）。\n\n如果头部的父亲不是我们的 tip，[它不太可能是我们的主链](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L124)，头部为**可选**。\n\n\n如果[头部链中有任何错误](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L170)，或者[没有对应链中最老元素（应该是检查点之一）](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L172)的父亲的块，那么头部被视为**无效**。\n\n\n如果在不同的条件下（例如，头部的 slot [小于或等于我们 tip 的 slot](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L94)，或者[头部与主链不连续，复杂度更大](https://github.com/input-output-hk/cardano-sl/blob/11fdc35884368ba61ec32e3277c037e20dc1c266/src/Pos/Block/Logic/Header.hs#L129)），头部为**无用**。\n\n\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-07-blocks.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-15-pvss.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-15-pvss.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-15-pvss.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 卡尔达诺结算层 PVSS\npath: /cn/technical/pvss/\ngroup: technical\nvisible: true\nlanguage: cn\nlabel: docs\n---\n<!-- Reviewed at 18852484704ff4a7ce3fcac2791499c340eb8e02 -->\n\n# 卡尔达诺结算层中 PVSS 的实现 \n\n卡尔达诺结算层使用公开验证密钥共享模式，它基于『SCRAPE：可扩展的随机性公共实体证明』这篇由 Ignacio Cascudo 和 Bernardo David 写的[论文](https://eprint.iacr.org/2017/216.pdf)。接下来我们将引用论文中的页，比如 `[6]` 表示第6页。\n\n本指南介绍了[卡尔达诺结算层](https://github.com/input-output-hk/cardano-sl/blob/65e295599817ec1f52f225810264d856f882fbb7/core/Pos/Crypto/SecretSharing.hs#L1)中 `pvss-haskell` [库](https://github.com/input-output-hk/pvss-haskell)的实现细节。\n\n## 什么是 PVSS\n\nVSS 模式的核心思想是参与者验证自己的份额，成功构建密钥（之前由参与者中的经销商分发（TODO））的能力。而 PVSS 模式的核心思想是，参与者不仅可以验证其股权，而且任何人都可以验证参与者是否收到了正确的股权。因此（参考我们的重建协议），参与者不仅要发行他们的股权，还要为每个发行的股票提供一个正确地证明(`[9]`)。（TODO）\n\n我们使用 `t-out-of-n` 重建方案(`[8]`)，其中 `n` 是参与者的数量，`t` 是一个阈值。所以任何 `t+1` 份额的子集可以用来成功恢复密钥。\n\n所以，协议有四个基本阶段(`[8]`)组成：\n\n1. 建立，\n2. 分配，\n3. 验证，\n4. 重建。\n\n## 建立\n\n每个参与者 `Pi` 必须生成器私钥 `SKi` 并注册其公钥 `PKi`。\n\n## 分配\n\n首先，我们准备一个新的托管环境。要做到这一点，我们需要上面提到的[阈值](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L76)和参与者的[公钥清单](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L175)。该操作的结果是 [`Escrow`](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L120)，它包括：\n\n1.  [额外的生成器](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L85)，\n2.  [多项式](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/Polynomial.hs#L24)，\n3.  [密钥](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L89)，\n4.  [证明](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/DLEQ.hs#L39)。\n\n额外的生成器基于一个[点](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/ECC.hs#L92)（[椭圆曲线点](http://hackage.haskell.org/package/cryptonite-openssl-0.6/docs/Crypto-OpenSSL-ECC.html#t:EcPoint)）。我们使用 `prime256v1` 椭圆曲线，参见 [RFC](https://www.ietf.org/rfc/rfc5480.txt)。\n\n多项式是一组从 smallest degree 开始的一组系数（这些系统是[标](http://hackage.haskell.org/package/cryptonite-0.23/docs/Crypto-PubKey-ECC-P256.html#t:Scalar)值）。\n\n密钥也基于一个[点](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/ECC.hs#L92)，实际上它是上面提到的多项式的第一个[元素](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L140)。\n\n证明从[挑战](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L142)，[原始密钥](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L140)，[DEEQ-参数生成](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L143)中[生成](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/DLEQ.hs#L62)。\n\n挑战是基于[加密哈希](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/ECC.hs#L125)。\n\n之后，我们必须[完成托管创建](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L168)。参与者的公共密钥列表被用于[创建加密股份](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L202)和[承诺](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L202)。加密的股份包括：\n\n1.  [分享 ID](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L82)，\n2.  通过参与者公钥加密的 [Value](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L99)，\n3.  [证明](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L99)这个股份是有效的 (`[8]`)。\n\n## 验证\n\n现在可以在参与者之间发布承诺和加密的股份。由于 PVSS 模式的公共性质，任何知道公共密钥的人都可以通过散列匹配来[验证加密的股份](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L249)。\n\n## 重建\n\n首先，参与者必须使用[公钥](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/ECC.hs#L84)，[私钥](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/ECC.hs#L80)密钥对[解密加密的股份](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L230)。为了获得 DLEQ 的值，我们使用 `prime256v1` [曲线生成器](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/ECC.hs#L156)。结果，我们得到 [`DecryptedShare`](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L109)，其结构与加密股份相同。\n\n由于解密的股份包含一个证明，所以我们可以确定解密的股份和加密的股份是一样的，并且有[验证功能](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L260)。要[做到这一点](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/DLEQ.hs#L74)，我们使用 DLEQ 值和来自[解密股份的证明](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L263)。实际的验证是 DLEQ 点的[散列](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/ECC.hs#L146)的[比较](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/DLEQ.hs#L77)。\n\n现在，如果我们有 `t+1` 解密股份，我们可以[恢复一个密钥](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L285)。\n\n恢复的密钥也可以被[验证](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L267)。所以我们可以确定恢复的密钥是相同的托管。要做到这一点，我们不仅需要一个证明和一个密钥，还需要[承诺](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L268)（实际上是[第一个](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L278)）。\n\n## VSS 证书\n\n正如[前面所说的](/cardano/differences/#coin-tossing-and-verifiable-secret-sharing)，同时使用 PVSS 方案的挑战之一是相关联的用于与签名的公钥用于 VSS 方案。这是通过引入 [VSS 证书](https://github.com/input-output-hk/cardano-sl/blob/f0de5f1dd31cc4afb0c67a24deca713cf6304814/core/Pos/Core/Vss/Types.hs#L46)来解决的。\n\nVSS 证书包括：\n\n1. 用于 VSS 方案的公钥（例如 [VSS 密钥](https://github.com/input-output-hk/cardano-sl/blob/fefc39f058f5a053fc1e59bc3594bdadf7699ca0/core/Pos/Crypto/SecretSharing.hs#L57))。\n2. 用于签名的公钥（[例如签名密钥](https://github.com/input-output-hk/cardano-sl/blob/f0de5f1dd31cc4afb0c67a24deca713cf6304814/core/Pos/Core/Vss/Types.hs#L51)）。\n3. 过期 epoch 的索引（例如，在 epoch 的最后，证书是有效的）。\n4. 签名对 `(A,B)`，其中 `A` 是一个 VSS 键，`B` 是一个 epoch 索引。\n\n最初，拥有足够股份参与随机生成的所有权益相关者（我们成为[富人](/glossary/#richman)）[拥有自己的证书](https://github.com/input-output-hk/cardano-sl/blob/35c6bff7409472352140f5207a7c79c59d8eaa8f/ssc/Pos/Ssc/GodTossing/Workers.hs#L163)。当出现一个拥有足够多股权的新利益相关者时，或者现有证书过期时，应该生成一个新的证书并[提交给网络](https://github.com/input-output-hk/cardano-sl/blob/35c6bff7409472352140f5207a7c79c59d8eaa8f/ssc/Pos/Ssc/GodTossing/Workers.hs#L166)。其他节点接受此证书，如果该证书有效并且该节点具有足够的股权。证书存储在区块中。\n\n请注意 VSS 证书在使用前必须是稳定的。如果我们检索证书的 epoch 是第一个（即有索引 `0`)，稳定的证书是[起始证书](https://github.com/input-output-hk/cardano-sl/blob/35c6bff7409472352140f5207a7c79c59d8eaa8f/ssc/Pos/Ssc/GodTossing/Functions.hs#L139)，否则，稳定的证书是[最后一个已知 slot 的未到期证书](https://github.com/input-output-hk/cardano-sl/blob/35c6bff7409472352140f5207a7c79c59d8eaa8f/ssc/Pos/Ssc/GodTossing/Functions.hs#L141)。\n",
        "type": "MarkdownRemark",
        "contentDigest": "6462e6975586c9ff94da1b596e81e593",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "卡尔达诺结算层 PVSS",
        "path": "/cn/technical/pvss/",
        "group": "technical",
        "visible": true,
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-15-pvss.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-15-pvss.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at 18852484704ff4a7ce3fcac2791499c340eb8e02 -->\n\n# 卡尔达诺结算层中 PVSS 的实现 \n\n卡尔达诺结算层使用公开验证密钥共享模式，它基于『SCRAPE：可扩展的随机性公共实体证明』这篇由 Ignacio Cascudo 和 Bernardo David 写的[论文](https://eprint.iacr.org/2017/216.pdf)。接下来我们将引用论文中的页，比如 `[6]` 表示第6页。\n\n本指南介绍了[卡尔达诺结算层](https://github.com/input-output-hk/cardano-sl/blob/65e295599817ec1f52f225810264d856f882fbb7/core/Pos/Crypto/SecretSharing.hs#L1)中 `pvss-haskell` [库](https://github.com/input-output-hk/pvss-haskell)的实现细节。\n\n## 什么是 PVSS\n\nVSS 模式的核心思想是参与者验证自己的份额，成功构建密钥（之前由参与者中的经销商分发（TODO））的能力。而 PVSS 模式的核心思想是，参与者不仅可以验证其股权，而且任何人都可以验证参与者是否收到了正确的股权。因此（参考我们的重建协议），参与者不仅要发行他们的股权，还要为每个发行的股票提供一个正确地证明(`[9]`)。（TODO）\n\n我们使用 `t-out-of-n` 重建方案(`[8]`)，其中 `n` 是参与者的数量，`t` 是一个阈值。所以任何 `t+1` 份额的子集可以用来成功恢复密钥。\n\n所以，协议有四个基本阶段(`[8]`)组成：\n\n1. 建立，\n2. 分配，\n3. 验证，\n4. 重建。\n\n## 建立\n\n每个参与者 `Pi` 必须生成器私钥 `SKi` 并注册其公钥 `PKi`。\n\n## 分配\n\n首先，我们准备一个新的托管环境。要做到这一点，我们需要上面提到的[阈值](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L76)和参与者的[公钥清单](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L175)。该操作的结果是 [`Escrow`](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L120)，它包括：\n\n1.  [额外的生成器](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L85)，\n2.  [多项式](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/Polynomial.hs#L24)，\n3.  [密钥](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L89)，\n4.  [证明](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/DLEQ.hs#L39)。\n\n额外的生成器基于一个[点](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/ECC.hs#L92)（[椭圆曲线点](http://hackage.haskell.org/package/cryptonite-openssl-0.6/docs/Crypto-OpenSSL-ECC.html#t:EcPoint)）。我们使用 `prime256v1` 椭圆曲线，参见 [RFC](https://www.ietf.org/rfc/rfc5480.txt)。\n\n多项式是一组从 smallest degree 开始的一组系数（这些系统是[标](http://hackage.haskell.org/package/cryptonite-0.23/docs/Crypto-PubKey-ECC-P256.html#t:Scalar)值）。\n\n密钥也基于一个[点](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/ECC.hs#L92)，实际上它是上面提到的多项式的第一个[元素](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L140)。\n\n证明从[挑战](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L142)，[原始密钥](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L140)，[DEEQ-参数生成](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L143)中[生成](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/DLEQ.hs#L62)。\n\n挑战是基于[加密哈希](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/ECC.hs#L125)。\n\n之后，我们必须[完成托管创建](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L168)。参与者的公共密钥列表被用于[创建加密股份](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L202)和[承诺](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L202)。加密的股份包括：\n\n1.  [分享 ID](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L82)，\n2.  通过参与者公钥加密的 [Value](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L99)，\n3.  [证明](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L99)这个股份是有效的 (`[8]`)。\n\n## 验证\n\n现在可以在参与者之间发布承诺和加密的股份。由于 PVSS 模式的公共性质，任何知道公共密钥的人都可以通过散列匹配来[验证加密的股份](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L249)。\n\n## 重建\n\n首先，参与者必须使用[公钥](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/ECC.hs#L84)，[私钥](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/ECC.hs#L80)密钥对[解密加密的股份](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L230)。为了获得 DLEQ 的值，我们使用 `prime256v1` [曲线生成器](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/ECC.hs#L156)。结果，我们得到 [`DecryptedShare`](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L109)，其结构与加密股份相同。\n\n由于解密的股份包含一个证明，所以我们可以确定解密的股份和加密的股份是一样的，并且有[验证功能](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L260)。要[做到这一点](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/DLEQ.hs#L74)，我们使用 DLEQ 值和来自[解密股份的证明](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L263)。实际的验证是 DLEQ 点的[散列](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/ECC.hs#L146)的[比较](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS/DLEQ.hs#L77)。\n\n现在，如果我们有 `t+1` 解密股份，我们可以[恢复一个密钥](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L285)。\n\n恢复的密钥也可以被[验证](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L267)。所以我们可以确定恢复的密钥是相同的托管。要做到这一点，我们不仅需要一个证明和一个密钥，还需要[承诺](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L268)（实际上是[第一个](https://github.com/input-output-hk/pvss-haskell/blob/3c3926142c017255aa683256a1c8dd0c36cb9365/src/Crypto/PVSS.hs#L278)）。\n\n## VSS 证书\n\n正如[前面所说的](/cardano/differences/#coin-tossing-and-verifiable-secret-sharing)，同时使用 PVSS 方案的挑战之一是相关联的用于与签名的公钥用于 VSS 方案。这是通过引入 [VSS 证书](https://github.com/input-output-hk/cardano-sl/blob/f0de5f1dd31cc4afb0c67a24deca713cf6304814/core/Pos/Core/Vss/Types.hs#L46)来解决的。\n\nVSS 证书包括：\n\n1. 用于 VSS 方案的公钥（例如 [VSS 密钥](https://github.com/input-output-hk/cardano-sl/blob/fefc39f058f5a053fc1e59bc3594bdadf7699ca0/core/Pos/Crypto/SecretSharing.hs#L57))。\n2. 用于签名的公钥（[例如签名密钥](https://github.com/input-output-hk/cardano-sl/blob/f0de5f1dd31cc4afb0c67a24deca713cf6304814/core/Pos/Core/Vss/Types.hs#L51)）。\n3. 过期 epoch 的索引（例如，在 epoch 的最后，证书是有效的）。\n4. 签名对 `(A,B)`，其中 `A` 是一个 VSS 键，`B` 是一个 epoch 索引。\n\n最初，拥有足够股份参与随机生成的所有权益相关者（我们成为[富人](/glossary/#richman)）[拥有自己的证书](https://github.com/input-output-hk/cardano-sl/blob/35c6bff7409472352140f5207a7c79c59d8eaa8f/ssc/Pos/Ssc/GodTossing/Workers.hs#L163)。当出现一个拥有足够多股权的新利益相关者时，或者现有证书过期时，应该生成一个新的证书并[提交给网络](https://github.com/input-output-hk/cardano-sl/blob/35c6bff7409472352140f5207a7c79c59d8eaa8f/ssc/Pos/Ssc/GodTossing/Workers.hs#L166)。其他节点接受此证书，如果该证书有效并且该节点具有足够的股权。证书存储在区块中。\n\n请注意 VSS 证书在使用前必须是稳定的。如果我们检索证书的 epoch 是第一个（即有索引 `0`)，稳定的证书是[起始证书](https://github.com/input-output-hk/cardano-sl/blob/35c6bff7409472352140f5207a7c79c59d8eaa8f/ssc/Pos/Ssc/GodTossing/Functions.hs#L139)，否则，稳定的证书是[最后一个已知 slot 的未到期证书](https://github.com/input-output-hk/cardano-sl/blob/35c6bff7409472352140f5207a7c79c59d8eaa8f/ssc/Pos/Ssc/GodTossing/Functions.hs#L141)。\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-15-pvss.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-07-time-warp-nt.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-07-time-warp-nt.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-07-time-warp-nt.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: Time-Warp-NT Layer\npath: /en/technical/protocols/time-warp-nt/\ngroup: technical-protocols\nlanguage: en\nlabel: docs\n---\n<!-- Reviewed at dcf5509d8fc93ac4c221726d076dafe632d32b70 -->\n\n# Time-Warp-NT Layer\n\n[`time-warp`](https://github.com/serokell/time-warp-nt/) is developed to provide\na reliable networking layer with different levels of abstractions. Another\nimportant objective of `time-warp` is to provide an easy way to write and run\ntests for distributed systems using emulation mode, which should be flexible\nenough to support various scenarios (tunable network delays, disconnects,\nother real-time conditions).\n\n`time-warp` is split up into two main parts:\n\n1.  `Mockable` interfaces.\n2.  Network functionality.\n\n## Mockable\n\n[`Mockable`](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Mockable/Class.hs#L30)\ninterfaces allow to abstract from language-specific details of implementation\nof the basic functions.\n\nThey are split into several categories. For instance, [`Mockable Delay`](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Mockable/Monad.hs#L21) contains\n`delay` operation, while [`Mockable Fork`](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Mockable/Monad.hs#L23) keeps elementary functions to manipulate threads.\n\nThis innovation allows to launch the same code both in production and testing\nenvironment, where the latter allows to emulate time, threads, networking, etc.\n\n[`Production`](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Mockable/Production.hs#L42) implements [all those interfaces](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Mockable/Production.hs#L54-L219) with references to respective prototypes of the functions.\n\n## Networking\n\nThis layer is written on top of [network-transport](https://github.com/serokell/network-transport/)\nand provides network capabilities for the application layer. It is split up into two sub-layers:\n**lower** and **upper**.\n\n### Lower Layer\n\nThis sub-layer is a direct wrapper over [`network-transport`](https://github.com/serokell/network-transport/)\npackage, and it provides a convenient interface which allows to initiate lightweight\nconnection and send/receive data on it. Please read [Network Transport Layer\nguide](/technical/protocols/network-transport) for more info.\n\nIt supports two types of connections, **unidirectional** and **bidirectional**.\n\n#### Unidirectional Connections\n\nUnidirectional connections allow to send a stream of bytes without waiting for\npeer's response.\n\nThe function [`withOutChannel`](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1465) executes given action, providing it with [one-shot\nlightweight connection](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1828).\n\nUpon unidirectional connection initialization, node [sends `U`](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1376):\n\n    +------------------+\n    |       UNI        |\n    +------------------+\n\n    |   'U' :: Word8   |\n\n`Word8` represents 8-bit unsigned integer value.\n\n#### Bidirectional Сonnections\n\nBidirectional connections allow both nodes to send and receive bytes to each\nother.\n\nThe function [`withInOutChannel`](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1405) establishes connection, executes given action\nwith given handle to send and receive bytes on connection, and automatically\ncloses connection on action's end. Its usage requires a handshake, which\ncontains the following steps.\n\nFirst, the initiator [sends](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1443) a **connection request**, which has the following\nstructure:\n\n    +------------------+-----------------+\n    |     `BI_SYN`     |      Nonce      |\n    +------------------+-----------------+\n\n    |   'S' :: Word8   |   Word64 (BE)   |\n\nwhere `Nonce` is [randomly generated](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1421).\n\nThen the peer [sends](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1072) **acknowledgement**, with the following structure:\n\n    +------------------+-----------------+--------------+\n    |     `BI_ACK`     |      Nonce      |   PeerData   |\n    +------------------+-----------------+--------------+\n\n    |   'A' :: Word8   |   Word64 (BE)   |   Generic    |\n\nwhere `Nonce` is the [same nonce which came from request](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1067).\n\nIf the initiator receives the acknowledgement with correct nonce, a conversation\nis started.\n\nThe opposite case could take place if the node have never sent any request on\nthat nonce (peer made a protocol error). It could also be that the node did send\nthe `BI_SYN`, but its handler for that conversation had already finished. That's\nnormal, and the node should ignore this acknowledgement.\n\n[`PeerData`](https://github.com/input-output-hk/cardano-sl/blob/4378a616654ff47faf828ef51ab2f455fa53d3a3/infra/Pos/Communication/Types/Protocol.hs#L58) is some additional information that is sent from the peer and parsed\nby the initiator. `time-warp` gives you an ability to provide some binary data\nduring handshake which then can be used by your application in different ways.\nThe structure of this data is generic. [*Application Level*\nsection](/technical/protocols/csl-application-level/#message-names) describes\nhow Cardano SL uses `PeerData`.\n\n### Messaging\n\nBefore talking about upper layer, let's describe messaging.\n\nIn order to specify different handlers for various message types, sent messages\nshould implement [`Message`](https://github.com/serokell/time-warp-nt/blob/724769fe102752050e31ed8f609316a8a3e59589/src/Node/Message/Class.hs#L54) interface, defining two methods:\n\n1.  `messageName`, it returns unique message identifier, which is sent along\n    with the message itself and allows receiver to select correct handler to\n    process this message.\n2.  `formatMessage`, it provides description of message, for debug purposes.\n\nPlease see `Message` [instance](https://github.com/serokell/time-warp-nt/blob/8a4c8792049a589cdc3e87f6a863b026430b266e/test/Test/Util.hs#L133) for the [`Parcel` data type](https://github.com/serokell/time-warp-nt/blob/8a4c8792049a589cdc3e87f6a863b026430b266e/test/Test/Util.hs#L127) as an example.\n\n### Upper Layer\n\nThis sub-layer enables message exchange. It provides *conversation style* of\ncommunication. This style uses capabilities of bidirectional connection and allows\nto send/receive messages (one or more). For a single conversation, types of incoming\nand outgoing messages are fixed. In this case, the initiator node sends the message\nname once, and then both the initiator and the peer send required messages.\n\nNetwork events processing is initiated by [`node`](https://github.com/serokell/time-warp-nt/blob/e39f6b2c4a2aaaab308eddb9efee0503af73d927/src/Node.hs#L366) function. This function uses two important concepts: worker\nand listener.\n\n***Worker*** is some action which performs as the initiator of all\ncommunication, being supplied with [`SendActions` type](https://github.com/serokell/time-warp-nt/blob/e39f6b2c4a2aaaab308eddb9efee0503af73d927/src/Node.hs#L160) which provides\nfunction [`withConnectionTo`](https://github.com/serokell/time-warp-nt/blob/8a4c8792049a589cdc3e87f6a863b026430b266e/src/Node.hs#L163).\nThis function initiates *conversation*, executing given action with\n[`ConversationActions`](https://github.com/serokell/time-warp-nt/blob/8a4c8792049a589cdc3e87f6a863b026430b266e/src/Node/Conversation.hs#L26)\nprovided and closing conversation once action completes. In turn,\n`ConversationActions` provides [`send`](https://github.com/serokell/time-warp-nt/blob/8a4c8792049a589cdc3e87f6a863b026430b266e/src/Node/Conversation.hs#L28) and [`recv`](https://github.com/serokell/time-warp-nt/blob/8a4c8792049a589cdc3e87f6a863b026430b266e/src/Node/Conversation.hs#L35) functions to communicate with peer.\n\n***Listener*** is a [handler](https://github.com/serokell/time-warp-nt/blob/8a4c8792049a589cdc3e87f6a863b026430b266e/src/Node.hs#L117)\nfor a message. Each listener remembers type of related message, and\nseveral listeners with non-overlapping message types could be defined.\n\nPlease see [complete example](https://github.com/serokell/time-warp-nt/blob/e39f6b2c4a2aaaab308eddb9efee0503af73d927/examples/PingPong.hs) for technical details.\n\n### Serialization\n\n`time-warp` doesn't rely on any predefined serialization strategy, but rather\nallows users to use their own.\n\nTo define custom serialization, a user should create special data type, the\nso-called *packing type*, and implement [`Serializable`](https://github.com/serokell/time-warp-nt/blob/724769fe102752050e31ed8f609316a8a3e59589/src/Node/Message/Class.hs#L77) interface for it. This interface defines\ntwo methods:\n\n1.  `packMsg`, represents the way how to pack the data to raw bytestring.\n2.  `unpackMsg`, represents the way how to unpack the data.\n\nPlease see `Serializable` [instance](https://github.com/serokell/time-warp-nt/blob/fef2c9943d279403386d204554b1c08fc357f196/src/Node/Message/Binary.hs#L43) for the [`BinaryP` data type](https://github.com/serokell/time-warp-nt/blob/fef2c9943d279403386d204554b1c08fc357f196/src/Node/Message/Binary.hs#L20) as an example.\n",
        "type": "MarkdownRemark",
        "contentDigest": "d9db194894d5dd0e520b17cb972b6b25",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "Time-Warp-NT Layer",
        "path": "/en/technical/protocols/time-warp-nt/",
        "group": "technical-protocols",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-07-time-warp-nt.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-07-time-warp-nt.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at dcf5509d8fc93ac4c221726d076dafe632d32b70 -->\n\n# Time-Warp-NT Layer\n\n[`time-warp`](https://github.com/serokell/time-warp-nt/) is developed to provide\na reliable networking layer with different levels of abstractions. Another\nimportant objective of `time-warp` is to provide an easy way to write and run\ntests for distributed systems using emulation mode, which should be flexible\nenough to support various scenarios (tunable network delays, disconnects,\nother real-time conditions).\n\n`time-warp` is split up into two main parts:\n\n1.  `Mockable` interfaces.\n2.  Network functionality.\n\n## Mockable\n\n[`Mockable`](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Mockable/Class.hs#L30)\ninterfaces allow to abstract from language-specific details of implementation\nof the basic functions.\n\nThey are split into several categories. For instance, [`Mockable Delay`](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Mockable/Monad.hs#L21) contains\n`delay` operation, while [`Mockable Fork`](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Mockable/Monad.hs#L23) keeps elementary functions to manipulate threads.\n\nThis innovation allows to launch the same code both in production and testing\nenvironment, where the latter allows to emulate time, threads, networking, etc.\n\n[`Production`](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Mockable/Production.hs#L42) implements [all those interfaces](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Mockable/Production.hs#L54-L219) with references to respective prototypes of the functions.\n\n## Networking\n\nThis layer is written on top of [network-transport](https://github.com/serokell/network-transport/)\nand provides network capabilities for the application layer. It is split up into two sub-layers:\n**lower** and **upper**.\n\n### Lower Layer\n\nThis sub-layer is a direct wrapper over [`network-transport`](https://github.com/serokell/network-transport/)\npackage, and it provides a convenient interface which allows to initiate lightweight\nconnection and send/receive data on it. Please read [Network Transport Layer\nguide](/technical/protocols/network-transport) for more info.\n\nIt supports two types of connections, **unidirectional** and **bidirectional**.\n\n#### Unidirectional Connections\n\nUnidirectional connections allow to send a stream of bytes without waiting for\npeer's response.\n\nThe function [`withOutChannel`](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1465) executes given action, providing it with [one-shot\nlightweight connection](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1828).\n\nUpon unidirectional connection initialization, node [sends `U`](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1376):\n\n    +------------------+\n    |       UNI        |\n    +------------------+\n\n    |   'U' :: Word8   |\n\n`Word8` represents 8-bit unsigned integer value.\n\n#### Bidirectional Сonnections\n\nBidirectional connections allow both nodes to send and receive bytes to each\nother.\n\nThe function [`withInOutChannel`](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1405) establishes connection, executes given action\nwith given handle to send and receive bytes on connection, and automatically\ncloses connection on action's end. Its usage requires a handshake, which\ncontains the following steps.\n\nFirst, the initiator [sends](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1443) a **connection request**, which has the following\nstructure:\n\n    +------------------+-----------------+\n    |     `BI_SYN`     |      Nonce      |\n    +------------------+-----------------+\n\n    |   'S' :: Word8   |   Word64 (BE)   |\n\nwhere `Nonce` is [randomly generated](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1421).\n\nThen the peer [sends](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1072) **acknowledgement**, with the following structure:\n\n    +------------------+-----------------+--------------+\n    |     `BI_ACK`     |      Nonce      |   PeerData   |\n    +------------------+-----------------+--------------+\n\n    |   'A' :: Word8   |   Word64 (BE)   |   Generic    |\n\nwhere `Nonce` is the [same nonce which came from request](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1067).\n\nIf the initiator receives the acknowledgement with correct nonce, a conversation\nis started.\n\nThe opposite case could take place if the node have never sent any request on\nthat nonce (peer made a protocol error). It could also be that the node did send\nthe `BI_SYN`, but its handler for that conversation had already finished. That's\nnormal, and the node should ignore this acknowledgement.\n\n[`PeerData`](https://github.com/input-output-hk/cardano-sl/blob/4378a616654ff47faf828ef51ab2f455fa53d3a3/infra/Pos/Communication/Types/Protocol.hs#L58) is some additional information that is sent from the peer and parsed\nby the initiator. `time-warp` gives you an ability to provide some binary data\nduring handshake which then can be used by your application in different ways.\nThe structure of this data is generic. [*Application Level*\nsection](/technical/protocols/csl-application-level/#message-names) describes\nhow Cardano SL uses `PeerData`.\n\n### Messaging\n\nBefore talking about upper layer, let's describe messaging.\n\nIn order to specify different handlers for various message types, sent messages\nshould implement [`Message`](https://github.com/serokell/time-warp-nt/blob/724769fe102752050e31ed8f609316a8a3e59589/src/Node/Message/Class.hs#L54) interface, defining two methods:\n\n1.  `messageName`, it returns unique message identifier, which is sent along\n    with the message itself and allows receiver to select correct handler to\n    process this message.\n2.  `formatMessage`, it provides description of message, for debug purposes.\n\nPlease see `Message` [instance](https://github.com/serokell/time-warp-nt/blob/8a4c8792049a589cdc3e87f6a863b026430b266e/test/Test/Util.hs#L133) for the [`Parcel` data type](https://github.com/serokell/time-warp-nt/blob/8a4c8792049a589cdc3e87f6a863b026430b266e/test/Test/Util.hs#L127) as an example.\n\n### Upper Layer\n\nThis sub-layer enables message exchange. It provides *conversation style* of\ncommunication. This style uses capabilities of bidirectional connection and allows\nto send/receive messages (one or more). For a single conversation, types of incoming\nand outgoing messages are fixed. In this case, the initiator node sends the message\nname once, and then both the initiator and the peer send required messages.\n\nNetwork events processing is initiated by [`node`](https://github.com/serokell/time-warp-nt/blob/e39f6b2c4a2aaaab308eddb9efee0503af73d927/src/Node.hs#L366) function. This function uses two important concepts: worker\nand listener.\n\n***Worker*** is some action which performs as the initiator of all\ncommunication, being supplied with [`SendActions` type](https://github.com/serokell/time-warp-nt/blob/e39f6b2c4a2aaaab308eddb9efee0503af73d927/src/Node.hs#L160) which provides\nfunction [`withConnectionTo`](https://github.com/serokell/time-warp-nt/blob/8a4c8792049a589cdc3e87f6a863b026430b266e/src/Node.hs#L163).\nThis function initiates *conversation*, executing given action with\n[`ConversationActions`](https://github.com/serokell/time-warp-nt/blob/8a4c8792049a589cdc3e87f6a863b026430b266e/src/Node/Conversation.hs#L26)\nprovided and closing conversation once action completes. In turn,\n`ConversationActions` provides [`send`](https://github.com/serokell/time-warp-nt/blob/8a4c8792049a589cdc3e87f6a863b026430b266e/src/Node/Conversation.hs#L28) and [`recv`](https://github.com/serokell/time-warp-nt/blob/8a4c8792049a589cdc3e87f6a863b026430b266e/src/Node/Conversation.hs#L35) functions to communicate with peer.\n\n***Listener*** is a [handler](https://github.com/serokell/time-warp-nt/blob/8a4c8792049a589cdc3e87f6a863b026430b266e/src/Node.hs#L117)\nfor a message. Each listener remembers type of related message, and\nseveral listeners with non-overlapping message types could be defined.\n\nPlease see [complete example](https://github.com/serokell/time-warp-nt/blob/e39f6b2c4a2aaaab308eddb9efee0503af73d927/examples/PingPong.hs) for technical details.\n\n### Serialization\n\n`time-warp` doesn't rely on any predefined serialization strategy, but rather\nallows users to use their own.\n\nTo define custom serialization, a user should create special data type, the\nso-called *packing type*, and implement [`Serializable`](https://github.com/serokell/time-warp-nt/blob/724769fe102752050e31ed8f609316a8a3e59589/src/Node/Message/Class.hs#L77) interface for it. This interface defines\ntwo methods:\n\n1.  `packMsg`, represents the way how to pack the data to raw bytestring.\n2.  `unpackMsg`, represents the way how to unpack the data.\n\nPlease see `Serializable` [instance](https://github.com/serokell/time-warp-nt/blob/fef2c9943d279403386d204554b1c08fc357f196/src/Node/Message/Binary.hs#L43) for the [`BinaryP` data type](https://github.com/serokell/time-warp-nt/blob/fef2c9943d279403386d204554b1c08fc357f196/src/Node/Message/Binary.hs#L20) as an example.\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-07-time-warp-nt.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-04-p2p.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-04-p2p.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-04-p2p.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: P2P 层\npath: /cn/technical/protocols/p2p/\ngroup: protocols\nlanguage: cn\nlabel: docs\n---\n<!-- Reviewed at ef835a2334888eda7384da707c4077a8b576b192 -->\n\n# P2P 层\n\n要与其他节点开始进行通信，节点必须加入网络，为此，节点必须知道已经参与到协议的其他节点；这个节点被称为*启动节点*（bootstrap node）。\n\n连接到启动节点后，我们收到一个我们将用于网络通信的对等体列表。那些同伴被称为邻节点。邻节点列表以这些节点在线的方式进行维护，来自网络的任何节点都可以收到我们的信息。而且，信息应该被有效地传递。\n\n为实现这一点，卡尔达诺结算层使用 *Kademlia* DHT 协议，尽管 Kademlia 提供了更多的功能，我们只是将其作为对等发现的一种方法。\n\n\n## Kademlia 协议概述\n\n*另请参阅：[P2P 网络部分](/technical#p2p-network)的技术概览* （TOREVIEW）\n\n在 Kademlia 中，每个节点都与一个32字节的 ID（详细信息见 [ID 结构](#id-structure)）相关联。这些 ID 用于标识节点，但不必参考其网络地址。用于在 Kademlia 存储值的键也是32字节的标识符。\n\nKademlia 使用 XOR 度量来定义节点之间的距离。键值对存储在 ID 与『密钥』接近的节点中。这个距离也被用来有效地定位给定 ID 的节点。\n\n在开始时，应该为 Kademlia 提供引导节点以加入网络。在实现中，该节点的地址可以是硬编码或由用户选择。之后，节点将尝试通过查询其邻节点（从引导节点发出的对等端的初始列表）来查找更多对等端。节点向对等节点发送信息，消息重新发送到靠近该 ID/key 的对等体。对等体的列表在启动之间保留。\n\n完成之后，我们用 `(Host, Port, ID)` 表示*地址*，而用 `(Host, Port)` 表示*网络地址*。\n\nKademlia 使用 UDP 协议传输消息。\n\n要详细了解如何实现 Kademlia，请参考 [Kademlia: 基于 XOR 度量的 P2P 信息系统](https://pdos.csail.mit.edu/~petar/papers/maymounkov-kademlia-lncs.pdf)。\n\n## Kademlia 中使用的消息\n\n每条消息被表示为一个最长长度为[1200 字节](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Config.hs#L61) 的二进制字符串（因此它不会超过 IPv6 数据包大小）。一个特殊情况是 `RETURN_NODES`：如果超过1200字节，节点列表被分成几个消息。消息的数量用一个字节表示。请参阅 [`serialize`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Protocol.hs#L41) 功能的更多细节。\n\n\n### IDs, 键和值\n\n在 Kademlia 中，ID 和键用相同的叫做 [`HashId`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/HashNodeId.hs#L32) 的结构表示：\n\n\n<a name=\"id-structure\"></a>\n\n| 字段大小\t | 描述                                        |\n|------------|----------------------------------------------------|\n| 18         | *Hash* - *PBKDF2* key generated from *Nonce*       |\n| 14         | *Nonce* - an arbitrary 14-bytes long binary string |\n\n\n请阅读[地址部分](#addressing)了解更多详情。\n\n卡尔达诺结算层不使用 Kademlia 作为键值存储。因此，我们只使用空字符串作为值。\n\n### PING\n\n检查一个对等点是否仍然可以访问。在发送这个消息之后，节点期望收到 *PONG* 消息作为回复。Kademlia 周期性地 PING 每一个对等点来维护一个对等点网络。\n\n\n| 字段大小\t | 值 | 描述                            |\n|------------|-------|----------------------------------------|\n| 1          | 0     | 1-byte value to determine message type |\n| 32         |       | ID of our node                         |\n\n### PONG\n\n用做对 `PING` 消息的回复。\n\n| Field size | 值 | 描述                            |\n|------------|-------|----------------------------------------|\n| 1          | 1     | 1-byte value to determine message type |\n| 32         |       | ID of our node                         |\n\n### STORE\n\n在 Kademlia 中存储给定的值。该消息被禁用，并被节点忽略。\n\n| 字段大小 | 值 | 描述                            |\n|------------|-------|----------------------------------------|\n| 1          | 2     | 1-byte value to determine message type |\n| 32         |       | ID of our node                         |\n| 32         |       | Key                                    |\n| 0          |       | Value (empty string in Cardano SL)     |\n\n### FIND\\_NODE\n\n请求给定 ID 节点的网络地址。在发送这个消息之后，节点希望收到一个 `RETURN_NODES` 消息，其中包含最接近请求消息的节点列表（包括请求的节点本身）\n\n\n| 字段大小 | 值 | 描述                            |\n|------------|-------|----------------------------------------|\n| 1          | 3     | 1-byte value to determine message type |\n| 32         |       | ID of our node                         |\n| 32         |       | ID of node we are looking for          |\n\n### RETURN\\_NODES\n\n发送一些节点的网络地址回复给 `FIND_VALUE` 的 `FIND_NODE`。答案被分成几个消息，因为节点列表可以超过 IPv6 数据包大小。\n\n首先，我们描述一个对等体的二进制表示：\n\n| 字段大小 | 值 | 描述                                       |\n|------------|-------|---------------------------------------------------|\n| 32         |       | Peer ID                                           |\n| 1-255      |       | Peer host name                                    |\n| 1          | 32    | Ascii code of \" \" to separate host name from port |\n| 2          |       | Peer port                                         |\n\n现在我们来描述 `RETURN_NODES` 消息的二进制表示。\n\n|   字段大小 | 值 | 描述                                                                                   |\n|--------------|-------|-----------------------------------------------------------------------------------------------|\n|            1 | 4     | 1-byte value to determine message type                                                        |\n|           32 |       | ID of our node                                                                                |\n|            1 |       | Total number of `RETURN_NODES` messages sent as answer to this request                        |\n|           32 |       | ID of node that requested nodes                                                               |\n| at most 1136 |       | Several peers close to the requested ID (at most 1136 bytes to not exceed IPv6 datagram size) |\n\n### FIND\\_VALUE\n\n除了在查找成功的情况下也收到响应之外，其行为与 `FIND_NODE` 相同。目前它只用于卡尔达诺结算层寻找对等体。当节点开始工作时，它会生成一个随机密钥，并要求 Kademlia 找到他；这个搜索总是失败，但是它让节点发现一些初始的对等地址。\n\n| 字段大小 | 值 | 描述                            |\n|------------|-------|----------------------------------------|\n| 1          | 5     | 1-byte value to determine message type |\n| 32         |       | ID of our node                         |\n| 32         |       | Key we are looking for                 |\n\n### RETURN\\_VALUE\n\n对 `STORE` 请求的回复。卡尔达诺结算层没有使用此信息，因为它不会 Kademlia 中存储任何值。\n\n| 字段大小 | 值 | 描述                            |\n|------------|-------|----------------------------------------|\n| 1          | 6     | 1-byte value to determine message type |\n| 32         |       | ID of our node                         |\n| 32         |       | ID of node that requested value        |\n| 0          |       | Value (empty string in Cardano SL)     |\n\n## 安全\n\n因为 Kademlia 是开放式 P2P 网络协议，因此必须通过几种方式修改才能变得相当安全。\n\n### 可能的攻击\n\n**eclipse 攻击**是节点被攻击者节点包围的情况。\n\n在 Kademlia 中，eclipse 攻击（针对特定的网络参与者）很难执行，但有可能。首先，启动靠近目标节点 ID 的100个节点 ID。这些节点将填充最低的 `k`（最初是空的），然后对目标节点 `k` 进行 DDoS 攻击（如果网络的拓扑结构变化不大，可以确定这些节点已经启动）。在成功的 DDoS 攻击之后，节点的剩余邻节点将称为攻击者代理。\n\n请注意，Kademlia 的结构意味着靠近目标的引导节点不足以将其噬灭，节点列表由节点存储在 `k`-buckets 里（第 i 个 `k` 节点包含的节点数量不超过相对距离 `2^i-1 < d < 2^i`），只有当这些对应的 bucket 不满的时候，才会将新节点添加到相应的 bucket 中。Kademlia 更乐于长期在列表中的节点，看着它们还在线。没有一些节点下线，不太可能噬灭一个节点。\n\n这种攻击是棘手的，在实践中不太可能发生，[解决](#解决)中的修改使得它更难。\n\n**100500攻击**是一个比当前P2P网络节点数量大得多的攻击，或者说为了噬灭一些节点或通过泛洪网络拒绝服务的攻击。这种攻击不会对旧节点造成任何问题（不包括可能的网络开销），因为旧的节点保存它们的路由。但当一个新的节点加入到网络时，它就会被噬灭（孤立在敌对的子网中），因为旧的诚实的节点不会把它添加到它的 bucket 中（因为这些 bucket 已经被其他节点填充了），并且新的节点会只有攻击者才知道。\n\n防止100500攻击仍然是一个悬而未决的问题，现在，我们通过一个复杂的禁止系统/攻击者检测来让它们几乎不可行。\n\n### 解决\n\n我们使用所谓的 `HashId` 作为节点 ID。由于它[包含](#id-structure)一个散列，因此为自己分配一个任意的 ID 是不可能的，这意味着100500攻击是进行噬灭攻击的唯一方法。\n\n\n#### 实现 Notes\n\n`HashId` 是一个固定长度（32字节）的二进制字符串，如下所示：\n\n    +---------------+------------+\n    |    Hashing    |    Nonce   |\n    +---------------+------------+\n\n    |   18 bytes    |  14 bytes  |\n\n其中：\n\n- `Nonce` 只是随机的14个字节（来自系统的熵源）。\n- `Hashing` 是哈希数据。\n\n哈希数据基于 `DerivingKey` 和 `Salt`，其中：\n\n- `DerivingKey` 由 PBKDF2 ([基于密码的密钥推导函数2](https://en.wikipedia.org/wiki/PBKDF2)) 生成。\n- `Salt` 是上面提到的 `Nonce` 的 SHA-512摘要。\n\n为生成 `DerivingKey`，我们使用这些参数：\n\n- `prfPassword` - 使用 HMAC（[基于哈希的消息认证码](https://en.wikipedia.org/wiki/Hash-based_message_authentication_code)）和 SHA-256 算法为 PBKDF2 提供 PRF（伪随机函数） \n- `parameters` - PBKDF2 参数：500次迭代，32字节作为结果输出。\n- `Nonce` 如上所述 - 如 `password`。\n- `Salt` 如上所述 - 如 `Salt`。\n\n### 路由数据防伪\n\n在 Kademlia 中，一个节点向其邻节点请求一个对等体列表，并接受它收到的第一个消息。攻击者可以伪造这些答复，提供攻击者节点的地址作为给定 ID 的最近节点。为了解决这个问题，我们让节点等待一段时间来收集尽可能多的回复，然后，这些回复被合并，`k` 节点从结果集合中选择最近的节点。这样，攻击者就被不得不为了伪造它所接收的对等体列表而噬灭一个节点。\n\n#### 实现笔记\n\n为实现这个想法，我们在每个 [lookup](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Implementation.hs#L48)（`lookup` 是一个被 `FIND_NODE` 或 `FIND_VALUE` 用来找 `k` 个离给定 ID 最近的节点的函数）增加 `k` 个邻节点的[待处理](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Implementation.hs#L243)集合中。当我们收到 `RETURN_NODES` 信息，我们更新[已知](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Implementation.hs#L242)列表，使其包含当前最接近目标 ID 的 `k` 个节点。当没有挂起的节点时，该循环结束。我们在任何时期都不收集邻节点的答复。如果任何邻节点不给我们 `RETURN_NODES` 答复，我们收到 `Timeout` 信号，这个邻节点会由 [`waitForReply`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Implementation.hs#L286)  函数处理。\n\n请参阅 [`continueLookup`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Implementation.hs#L371)  功能。这是 *pending* 和 *known* 字段更新的地方，因此也是这个特性的核心逻辑。\n\n### 路由表共享\n\n当一个节点刚刚加入到网络时，它会请求一个邻节点列表（最靠近它的一组节点）。我们修改了 Kademlia，在这个列表中包含了一些额外的节点。具体来说，目前我们会随同邻节点选择一些随机节点并返回它们。这让被攻击节点包围的节点有额外的信息来恢复。\n\n#### 实现笔记\n\n在我们的 Kademlia 实现中，有一个 [`findClosest`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Tree.hs#L195) 函数来寻找给定 ID 节点的 `k` 个节点。增加了 [`pickupRandom`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Tree.hs#L180) 功能。这个函数从 Kademlia 树中获取给定数量的随机节点。共享随机节点的确切数量是通过 Kademlia 配置中的 [`routingSharingN`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Config.hs#L63) 字段来获得的。这样，`RETURN_NODES` 包含了 `findClosest` 和 `pickupRandom` 调用的结果。\n\n### 禁止节点\n\n我们为 Kademlia 引入了禁止节点的功能。当我们检测到恶意行为时，我们将使用这个来禁止节点。\n\n#### 实现笔记\n\n节点有三种可能的状态：\n\n1.  `NoBan`，\n2.  `BanTill`，\n3.  `BanForever`。\n\n请看 [`BanState`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Instance.hs#L66)  类型。这种类型的值会传给 [`banNode`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Instance.hs#L165) 函数。\n\n`NoBan` 用于接触已经被禁止的节点。但是，该操作不会将此节点重新插入到树结构，但可以使次节点再次出现在同级中。\n\n`BanTill` 禁止某个节点（定义为 POSIX 时间）。\n\n`BanForever` 永远禁止一个节点。\n\n`banNode` 添加给定的节点到 [`KademliaState`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Instance.hs#L73) 类型的 `banned` 字段，并从树中删除它。[`isNodeBanned`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Instance.hs#L150) 功能检查当前是否禁止节点，如果节点已经解除禁止，或禁止已经过期，则删除节点。\n\n如何处理禁止的节点：\n\n- 我们不能使用它作为我们的引导节点加入网络。请查看 [`joinNetwork`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Implementation.hs#L152)  功能。\n- 我们忽略从禁止的节点收到的所有消息。请看 [`waitForReply`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Implementation.hs#L286)  功能。\n- 我们不会把这个节点包含在树中，不会发任何消息给它，也不会把这个节点加入到 `RETURN_NODES` 消息中。\n\n",
        "type": "MarkdownRemark",
        "contentDigest": "9e75d580f5a1ce0ef439805bef10e4e1",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "P2P 层",
        "path": "/cn/technical/protocols/p2p/",
        "group": "protocols",
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-04-p2p.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-04-p2p.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at ef835a2334888eda7384da707c4077a8b576b192 -->\n\n# P2P 层\n\n要与其他节点开始进行通信，节点必须加入网络，为此，节点必须知道已经参与到协议的其他节点；这个节点被称为*启动节点*（bootstrap node）。\n\n连接到启动节点后，我们收到一个我们将用于网络通信的对等体列表。那些同伴被称为邻节点。邻节点列表以这些节点在线的方式进行维护，来自网络的任何节点都可以收到我们的信息。而且，信息应该被有效地传递。\n\n为实现这一点，卡尔达诺结算层使用 *Kademlia* DHT 协议，尽管 Kademlia 提供了更多的功能，我们只是将其作为对等发现的一种方法。\n\n\n## Kademlia 协议概述\n\n*另请参阅：[P2P 网络部分](/technical#p2p-network)的技术概览* （TOREVIEW）\n\n在 Kademlia 中，每个节点都与一个32字节的 ID（详细信息见 [ID 结构](#id-structure)）相关联。这些 ID 用于标识节点，但不必参考其网络地址。用于在 Kademlia 存储值的键也是32字节的标识符。\n\nKademlia 使用 XOR 度量来定义节点之间的距离。键值对存储在 ID 与『密钥』接近的节点中。这个距离也被用来有效地定位给定 ID 的节点。\n\n在开始时，应该为 Kademlia 提供引导节点以加入网络。在实现中，该节点的地址可以是硬编码或由用户选择。之后，节点将尝试通过查询其邻节点（从引导节点发出的对等端的初始列表）来查找更多对等端。节点向对等节点发送信息，消息重新发送到靠近该 ID/key 的对等体。对等体的列表在启动之间保留。\n\n完成之后，我们用 `(Host, Port, ID)` 表示*地址*，而用 `(Host, Port)` 表示*网络地址*。\n\nKademlia 使用 UDP 协议传输消息。\n\n要详细了解如何实现 Kademlia，请参考 [Kademlia: 基于 XOR 度量的 P2P 信息系统](https://pdos.csail.mit.edu/~petar/papers/maymounkov-kademlia-lncs.pdf)。\n\n## Kademlia 中使用的消息\n\n每条消息被表示为一个最长长度为[1200 字节](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Config.hs#L61) 的二进制字符串（因此它不会超过 IPv6 数据包大小）。一个特殊情况是 `RETURN_NODES`：如果超过1200字节，节点列表被分成几个消息。消息的数量用一个字节表示。请参阅 [`serialize`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Protocol.hs#L41) 功能的更多细节。\n\n\n### IDs, 键和值\n\n在 Kademlia 中，ID 和键用相同的叫做 [`HashId`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/HashNodeId.hs#L32) 的结构表示：\n\n\n<a name=\"id-structure\"></a>\n\n| 字段大小\t | 描述                                        |\n|------------|----------------------------------------------------|\n| 18         | *Hash* - *PBKDF2* key generated from *Nonce*       |\n| 14         | *Nonce* - an arbitrary 14-bytes long binary string |\n\n\n请阅读[地址部分](#addressing)了解更多详情。\n\n卡尔达诺结算层不使用 Kademlia 作为键值存储。因此，我们只使用空字符串作为值。\n\n### PING\n\n检查一个对等点是否仍然可以访问。在发送这个消息之后，节点期望收到 *PONG* 消息作为回复。Kademlia 周期性地 PING 每一个对等点来维护一个对等点网络。\n\n\n| 字段大小\t | 值 | 描述                            |\n|------------|-------|----------------------------------------|\n| 1          | 0     | 1-byte value to determine message type |\n| 32         |       | ID of our node                         |\n\n### PONG\n\n用做对 `PING` 消息的回复。\n\n| Field size | 值 | 描述                            |\n|------------|-------|----------------------------------------|\n| 1          | 1     | 1-byte value to determine message type |\n| 32         |       | ID of our node                         |\n\n### STORE\n\n在 Kademlia 中存储给定的值。该消息被禁用，并被节点忽略。\n\n| 字段大小 | 值 | 描述                            |\n|------------|-------|----------------------------------------|\n| 1          | 2     | 1-byte value to determine message type |\n| 32         |       | ID of our node                         |\n| 32         |       | Key                                    |\n| 0          |       | Value (empty string in Cardano SL)     |\n\n### FIND\\_NODE\n\n请求给定 ID 节点的网络地址。在发送这个消息之后，节点希望收到一个 `RETURN_NODES` 消息，其中包含最接近请求消息的节点列表（包括请求的节点本身）\n\n\n| 字段大小 | 值 | 描述                            |\n|------------|-------|----------------------------------------|\n| 1          | 3     | 1-byte value to determine message type |\n| 32         |       | ID of our node                         |\n| 32         |       | ID of node we are looking for          |\n\n### RETURN\\_NODES\n\n发送一些节点的网络地址回复给 `FIND_VALUE` 的 `FIND_NODE`。答案被分成几个消息，因为节点列表可以超过 IPv6 数据包大小。\n\n首先，我们描述一个对等体的二进制表示：\n\n| 字段大小 | 值 | 描述                                       |\n|------------|-------|---------------------------------------------------|\n| 32         |       | Peer ID                                           |\n| 1-255      |       | Peer host name                                    |\n| 1          | 32    | Ascii code of \" \" to separate host name from port |\n| 2          |       | Peer port                                         |\n\n现在我们来描述 `RETURN_NODES` 消息的二进制表示。\n\n|   字段大小 | 值 | 描述                                                                                   |\n|--------------|-------|-----------------------------------------------------------------------------------------------|\n|            1 | 4     | 1-byte value to determine message type                                                        |\n|           32 |       | ID of our node                                                                                |\n|            1 |       | Total number of `RETURN_NODES` messages sent as answer to this request                        |\n|           32 |       | ID of node that requested nodes                                                               |\n| at most 1136 |       | Several peers close to the requested ID (at most 1136 bytes to not exceed IPv6 datagram size) |\n\n### FIND\\_VALUE\n\n除了在查找成功的情况下也收到响应之外，其行为与 `FIND_NODE` 相同。目前它只用于卡尔达诺结算层寻找对等体。当节点开始工作时，它会生成一个随机密钥，并要求 Kademlia 找到他；这个搜索总是失败，但是它让节点发现一些初始的对等地址。\n\n| 字段大小 | 值 | 描述                            |\n|------------|-------|----------------------------------------|\n| 1          | 5     | 1-byte value to determine message type |\n| 32         |       | ID of our node                         |\n| 32         |       | Key we are looking for                 |\n\n### RETURN\\_VALUE\n\n对 `STORE` 请求的回复。卡尔达诺结算层没有使用此信息，因为它不会 Kademlia 中存储任何值。\n\n| 字段大小 | 值 | 描述                            |\n|------------|-------|----------------------------------------|\n| 1          | 6     | 1-byte value to determine message type |\n| 32         |       | ID of our node                         |\n| 32         |       | ID of node that requested value        |\n| 0          |       | Value (empty string in Cardano SL)     |\n\n## 安全\n\n因为 Kademlia 是开放式 P2P 网络协议，因此必须通过几种方式修改才能变得相当安全。\n\n### 可能的攻击\n\n**eclipse 攻击**是节点被攻击者节点包围的情况。\n\n在 Kademlia 中，eclipse 攻击（针对特定的网络参与者）很难执行，但有可能。首先，启动靠近目标节点 ID 的100个节点 ID。这些节点将填充最低的 `k`（最初是空的），然后对目标节点 `k` 进行 DDoS 攻击（如果网络的拓扑结构变化不大，可以确定这些节点已经启动）。在成功的 DDoS 攻击之后，节点的剩余邻节点将称为攻击者代理。\n\n请注意，Kademlia 的结构意味着靠近目标的引导节点不足以将其噬灭，节点列表由节点存储在 `k`-buckets 里（第 i 个 `k` 节点包含的节点数量不超过相对距离 `2^i-1 < d < 2^i`），只有当这些对应的 bucket 不满的时候，才会将新节点添加到相应的 bucket 中。Kademlia 更乐于长期在列表中的节点，看着它们还在线。没有一些节点下线，不太可能噬灭一个节点。\n\n这种攻击是棘手的，在实践中不太可能发生，[解决](#解决)中的修改使得它更难。\n\n**100500攻击**是一个比当前P2P网络节点数量大得多的攻击，或者说为了噬灭一些节点或通过泛洪网络拒绝服务的攻击。这种攻击不会对旧节点造成任何问题（不包括可能的网络开销），因为旧的节点保存它们的路由。但当一个新的节点加入到网络时，它就会被噬灭（孤立在敌对的子网中），因为旧的诚实的节点不会把它添加到它的 bucket 中（因为这些 bucket 已经被其他节点填充了），并且新的节点会只有攻击者才知道。\n\n防止100500攻击仍然是一个悬而未决的问题，现在，我们通过一个复杂的禁止系统/攻击者检测来让它们几乎不可行。\n\n### 解决\n\n我们使用所谓的 `HashId` 作为节点 ID。由于它[包含](#id-structure)一个散列，因此为自己分配一个任意的 ID 是不可能的，这意味着100500攻击是进行噬灭攻击的唯一方法。\n\n\n#### 实现 Notes\n\n`HashId` 是一个固定长度（32字节）的二进制字符串，如下所示：\n\n    +---------------+------------+\n    |    Hashing    |    Nonce   |\n    +---------------+------------+\n\n    |   18 bytes    |  14 bytes  |\n\n其中：\n\n- `Nonce` 只是随机的14个字节（来自系统的熵源）。\n- `Hashing` 是哈希数据。\n\n哈希数据基于 `DerivingKey` 和 `Salt`，其中：\n\n- `DerivingKey` 由 PBKDF2 ([基于密码的密钥推导函数2](https://en.wikipedia.org/wiki/PBKDF2)) 生成。\n- `Salt` 是上面提到的 `Nonce` 的 SHA-512摘要。\n\n为生成 `DerivingKey`，我们使用这些参数：\n\n- `prfPassword` - 使用 HMAC（[基于哈希的消息认证码](https://en.wikipedia.org/wiki/Hash-based_message_authentication_code)）和 SHA-256 算法为 PBKDF2 提供 PRF（伪随机函数） \n- `parameters` - PBKDF2 参数：500次迭代，32字节作为结果输出。\n- `Nonce` 如上所述 - 如 `password`。\n- `Salt` 如上所述 - 如 `Salt`。\n\n### 路由数据防伪\n\n在 Kademlia 中，一个节点向其邻节点请求一个对等体列表，并接受它收到的第一个消息。攻击者可以伪造这些答复，提供攻击者节点的地址作为给定 ID 的最近节点。为了解决这个问题，我们让节点等待一段时间来收集尽可能多的回复，然后，这些回复被合并，`k` 节点从结果集合中选择最近的节点。这样，攻击者就被不得不为了伪造它所接收的对等体列表而噬灭一个节点。\n\n#### 实现笔记\n\n为实现这个想法，我们在每个 [lookup](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Implementation.hs#L48)（`lookup` 是一个被 `FIND_NODE` 或 `FIND_VALUE` 用来找 `k` 个离给定 ID 最近的节点的函数）增加 `k` 个邻节点的[待处理](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Implementation.hs#L243)集合中。当我们收到 `RETURN_NODES` 信息，我们更新[已知](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Implementation.hs#L242)列表，使其包含当前最接近目标 ID 的 `k` 个节点。当没有挂起的节点时，该循环结束。我们在任何时期都不收集邻节点的答复。如果任何邻节点不给我们 `RETURN_NODES` 答复，我们收到 `Timeout` 信号，这个邻节点会由 [`waitForReply`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Implementation.hs#L286)  函数处理。\n\n请参阅 [`continueLookup`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Implementation.hs#L371)  功能。这是 *pending* 和 *known* 字段更新的地方，因此也是这个特性的核心逻辑。\n\n### 路由表共享\n\n当一个节点刚刚加入到网络时，它会请求一个邻节点列表（最靠近它的一组节点）。我们修改了 Kademlia，在这个列表中包含了一些额外的节点。具体来说，目前我们会随同邻节点选择一些随机节点并返回它们。这让被攻击节点包围的节点有额外的信息来恢复。\n\n#### 实现笔记\n\n在我们的 Kademlia 实现中，有一个 [`findClosest`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Tree.hs#L195) 函数来寻找给定 ID 节点的 `k` 个节点。增加了 [`pickupRandom`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Tree.hs#L180) 功能。这个函数从 Kademlia 树中获取给定数量的随机节点。共享随机节点的确切数量是通过 Kademlia 配置中的 [`routingSharingN`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Config.hs#L63) 字段来获得的。这样，`RETURN_NODES` 包含了 `findClosest` 和 `pickupRandom` 调用的结果。\n\n### 禁止节点\n\n我们为 Kademlia 引入了禁止节点的功能。当我们检测到恶意行为时，我们将使用这个来禁止节点。\n\n#### 实现笔记\n\n节点有三种可能的状态：\n\n1.  `NoBan`，\n2.  `BanTill`，\n3.  `BanForever`。\n\n请看 [`BanState`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Instance.hs#L66)  类型。这种类型的值会传给 [`banNode`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Instance.hs#L165) 函数。\n\n`NoBan` 用于接触已经被禁止的节点。但是，该操作不会将此节点重新插入到树结构，但可以使次节点再次出现在同级中。\n\n`BanTill` 禁止某个节点（定义为 POSIX 时间）。\n\n`BanForever` 永远禁止一个节点。\n\n`banNode` 添加给定的节点到 [`KademliaState`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Instance.hs#L73) 类型的 `banned` 字段，并从树中删除它。[`isNodeBanned`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Instance.hs#L150) 功能检查当前是否禁止节点，如果节点已经解除禁止，或禁止已经过期，则删除节点。\n\n如何处理禁止的节点：\n\n- 我们不能使用它作为我们的引导节点加入网络。请查看 [`joinNetwork`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Implementation.hs#L152)  功能。\n- 我们忽略从禁止的节点收到的所有消息。请看 [`waitForReply`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Implementation.hs#L286)  功能。\n- 我们不会把这个节点包含在树中，不会发任何消息给它，也不会把这个节点加入到 `RETURN_NODES` 消息中。\n\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-04-p2p.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-10-network-transport.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-10-network-transport.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-10-network-transport.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 网络传输层\npath: /cn/technical/protocols/network-transport/\ngroup: protocols\nlanguage: cn\nlabel: docs\n---\n<!-- Reviewed at ef835a2334888eda7384da707c4077a8b576b192 -->\n\n# 网络传输层\n\n本指南适用于想为卡尔达诺结算层构建自己的客户端的开发人员。请阅读[卡尔达诺结算层实现概述](/technical/)了解更多信息。本指南涵盖了卡尔达诺结算层节点中使用的网络传输层。\n\n传输层是一个位于 TCP 和应用程序级协议的层。原则上独立于应用程序协议（事实上，参考实现被具有不同应用程序级协议的多个不同应用程序使用）。\n\n传输层的重点在于它提供了在单个 TCP 连接上复用的多个轻量级逻辑连接。每个轻量级连接都是单向的，并提供可靠的有序消息传输（即，它在 TCP 之上提供数据帧）\n\n传输协议的属性：\n\n- **单个 TCP 连接**。任何一对对等点之间一次只能使用一个 TCP 连接。这些连接可能是长期存在的。一旦建立了与对等节点的连接，它将用于发送/接收信息，直到 TCP 连接被*明确*关闭或发生一些不可恢复的错误。\n\n实现的属性：\n\n- **报告网络故障**。网络故障不会从应用程序层隐藏。如果 TCP 连接意外断开，传输层应通知应用层。在卡尔达诺结算层中，策略是尝试重新连接，如果重新连接也失败，则只声明对等方无法访问。\n\n## 概要\n\n传输层的典型用途包括：\n\n1. 监听来自对等点的 TCP 连接。\n2. 建立到其他对等点的 TCP 连接。\n3. 在建立的 TCP 连接上创建轻型连接。\n4. 发送消息到对等节点（在一个或多个轻量级连接上）。\n5. 接收来自对等节点（在一个或多个轻量级连接上）的消息。\n6. 关闭轻量级连接\n7. 关闭 TCP 连接。\n\n在卡尔达诺结算层中，使用多个轻量级连接来支持应用程序级的消息传递协议。可以同时发送多个应用程序级别的消息，多个对话可以一次进行。大多数应用程序消息是在新创建的轻量级连接上发送的，如果需要的话，较大的应用程序级别消息被分解为多个传输级别消息以便于传输，其他应用程序级别的消息是作为一对单向轻量级连接组成的对话的一部分发送的。\n\n\n## 概观\n\n传输层的基本概念有：\n\n- 传输\n- 接入点\n- 连接\n- 事件\n- 错误\n\n传输指本文档描述的整个层和协议。\n\n**传输**是指本文档描述的整个层和协议。一个传输实例指的是传输实现的配置和状态，特别是包括绑定到本地网络特定接口的TCP监听套接字，如 `192.168.0.1:3010`。\n\n**接入点**是传输实例的逻辑端点。这意味着它又有一个地址，连接在端点之间。在实践中，它只是一个 TCP/IP 的简单抽象，通过主机名和端口进行寻址。\n\n端口地址是具有结构如 `HOST:PORT:LOCAL_ID` 的二进制字符串，例如 `192.168.0.1:3010:0`。\n\n注意，传输实例监听单个端口时，原则上在单个传输实例中可能有多个可寻址的接入点，这就是 `LOCAL_ID` 的作用，然而，卡尔达诺结算层目前还没有这个功能，所以它总是使用 `LOCAL_ID` 0。\n\n**重量级连接**是指两个端点之前的 TCP 连接。两个接入点只使用一次 TCP 连接。\n\n**连接**（或者更明确地说是*轻量级连接*）是端点之前的单向连接。端点之前的所有轻量级连接都在单个重量级连接（即单个TCP连接上）进行复用。\n\n轻量级连接是在 TCP 之上分层的逻辑概念。每个连接都有一个整数 ID。原则上可以在单个重量级 TCP 连接上复用数千个轻量级连接。\n\n典型的操作方式是应用层希望建立到端点的轻量级连接，如果还没有重量级连接，则创建一个。同样，当最后一个轻量级连接关闭时，真正的 TCP 连接将被彻底关闭。\n\n轻量级连接时单向的：轻量级连接上的消息仅在一个方向流动。但是，轻量级连接可以在任何方向上建立。同样的重量级连接用于双向的轻量级连接；哪个端点先建立重量级连接并不重要。\n\n双向会话可以通过使用一对单向轻量级连接来建立。卡尔达诺结算层遵循这种模式。请查阅 `time-warp-nt` 获取详细信息。但请注意，这个传输层没有双向对话的特殊概念，只有单向连接的集合。\n\n## 网络字节顺序\n\n在一下对控制消息的描述中，所有整数都是按[网络字节顺序](https://en.wikipedia.org/wiki/Endianness#Networking)编码的。\n\n下面的消息定义使用的 `Int32` 指的是32位的以网络字节顺序的整数值。\n\n## 设置传输实例\n\n每个传输实例都必须建立一个 TCP 监听套接字。使用的本地端口和端口号由使用传输的应用程序确定。\n\n实现可以随时接收新的 TCP 连接（可能受限于资源策略），然后执行下面描述的新重量级连接的初始步骤。\n\n## 建立重量级连接（初始化）\n\n假设在接入点 A，B 之前建立重量级连接，端点 A 发起连接。两个端点都有端点地址，如前所述，端点地址是这种形式：`HOST:PORT:LOCAL_ID`。\n\n从 A 到 B 建立的一个重量级连接的过程如下。首先 A 必须在本地记录它正在初始化一个到 B 的重量级连接。在交叉连接请求的情况下（见下文）这是必须的，由端点 A 向端点 B 打开 `HOST` 和 `PORT` 连接。\n\n端点 A 发送具有如下结构的**连接请求**消息：\n\n\n    +-----------+-------------+--------------------+\n    |   B-LID   |   A-EIDlen  |       A-EID        |\n    +-----------+-------------+--------------------+\n    |   Int32   |   Int32     |       bytes        |\n\n其中：\n\n-   `B-LID` - `B` 端点的本地 ID；\n-   `A-EIDlen` - `A` 端点的地址；\n-   `A-EID` - `A` 端口的地址。\n\n因此 A 发送它希望连接的本地接入点 ID，它自身的地址来初始化节点。A 发送的地址应该是规范化的公共地址。主机部分可以是 IP 地址或 DNS 名称。它用于避免在端点之间建立多个 TCP 连接。在卡尔达诺结算层协议中，本地端点 ID 始终为0。\n\n然后接入点 A 期望一个**连接请求响应**信息，它是下面的响应之一，一个简单的 `Int32` 编码。\n\n当本地接入点 ID 所标识的端点不存在时，会返回 `ConnectionRequestInvalid` 响应。例如，如果 A 发送给 B，它希望连接到本地接入点 ID 1，那么只有 ID 0 存在时才会发生。在这种情况下，两个端点必须关闭 TCP 连接。\n\n当端点 B 确定 A 与 B 之间或 B 与 A 之间，或两者同时有了一个 TCP 连接，会返回 `ConnectionRequestCrossed` 响应。在这种情况下，两个端点都必须关闭 TCP 连接。\n\n## 建立重量级连接 (接收)\n\n假设如前所述，在标记为 A 和 B 的端点之前建立重量级连接，并且端点 A 发起连接。我们现在从端点 B 的角度来考虑这个问题。\n\n两个端点都有 `HOST:PORT:LOCAL_ID` 形式的接入点地址。具体来说，假设 B 只有一个接入点，其中 `LOCAL_ID` 为 0。\n\nB 的传输实例在对应的接入点 IDs 上相应的 host 和 port 有监听套接字。它接受来自某个对等点的新的 TCP 连接。期望在该 TCP 连接上接收**连接请求**信息（以上述格式）。\n\n传输实例 B 必须根据以下规则以**连接请求响应**消息（采用上述格式）进行响应。\n\n如果连接请求要求本地接入点 ID 不存在（在本例中即不是0），则它必须以 `ConnectionRequestInvalid` 响应并关闭 TCP 连接。\n\n`ConnectionRequestCrossed` 的规则将在下面更详细地描述。\n\n否则，当接入点 ID 有效并且没有现有的 TCP 连接时，它应该以 `ConnectionRequestAccepted` 回复，并记录它已经与 A 建立了重量级连接的本地状态。然后它就可以继续协议的主要部分。\n\n## 交叉连接请求\n\n如前所述，该协议试图确保在两个接入点之间只使用一个 TCP 连接。典型的情况是，端点可以简单地确定它是否具有与对等体的重量级连接。因为它启动它或接收它，并且知道现有的 TCP 连接是否仍然打开。难处理的情况是两个端点*同时*建立重量级连接（分布式系统意义上的『同一时间』）。\n\n每个端点初始化重量级连接的过程都记录在本地状态中。每个端点都将照常发送连接请求消息。当每个端点接受传入的 TCP 连接时，它会从连接请求消息获取端点 ID。\n\n额外的规则是，它必须在其本地状态查到，对等点的连接1. 已经建立（TODO）2. 已经完全确立。在第一种情况下，我们处于交叉连接的情况。第二种情况是当一个对等房发现现有的 TCP 连接失败（即它的端点被关闭），并且正尝试建立一个新的 TCP 连接，而其他的对等点没有发现已有的 TCP 连接已经失效了。\n\n### 交叉连接情况\n\n在交叉连接的情况下，到目前为止，这在端点之间是完全对称的，但我们必须打破对称来解决使用哪个 TCP 连接以及需要关闭哪个。协议用来打破对称性的解决方案的对端点地址进行排序（以二进制字符串形式按字典顺序排序）。因此，每个节点必须采用的用来决定是否接受传入连接请求的规则是：`ConnectionRequestAccepted`，如果对等点的 ID 小于本地端点 ID，则应答，否则回复 `ConnectionRequestCrossed`，关闭 TCP 连接。\n\n### 连接断开/重建请求\n\n在第二种情况下，处理传入 TCP 连接的端点已经确定在两个端点之前已经存在已建立的连接，该协议如下。发送一个 `ConnectionRequestCrossed` 回复，关闭 TCP 连接。此外，端点尝试验证现有连接的活跃性，目的是验证它是否处于活动状态，或确定它不是为了关闭断开的链接（这将允许打开新连接）。\n\n为了验证活跃性，接入点发送一个 **ProbeSocket** 信息。如果在实现定义的时间段内未收到 **ProbeSocket** 消息，则接入点应关闭 TCP 连接并相应地更新其本地状态，以使端点能够建立新的连接。\n\n接收 ProbeSocket 消息的接入点应该使用 ProbeSocketAck 回复。\n\n这些消息的编码很简单：\n\n    +-------------+\n    | ProbeSocket |\n    +-------------+\n    |    Int32    |\n\n    +----------------+\n    | ProbeSocketAck |\n    +----------------+\n    |     Int32      |\n\n其中控制头消息的值分别是 4 和 5。\n\n## 协议主体\n\n一旦在两个端点之间建立了一个重量级连接，协议的主要部分就开始了。\n\n两个端点之间的主要协议包括发送/接收一系列消息：控制消息和数据消息。每个都有一个标识消息的头部和适合消息类的主体部分。主协议的消息是用于创建和关闭轻量级连接的控制消息，以及用于在轻量级连接上发送数据的数据消息。\n\n轻量级连接时单向的。在 TCP 连接的每个方向都有独立的轻量级连接集合。*发送方*管理每个方向的轻量级连接。接收方不能直接控制轻量级连接的分配。\n\n轻量级连接由轻量级连接 ID 区分，这是一个 32 位的有符号整数。轻量级连接 ID 必须大于1024。轻量级连接 ID 号应该按顺序使用。\n\n用于创建或关闭轻量级连接的控制消息只是简单的区分它们所处的轻量级连接 ID。同样，数据消息根据正在发送的轻量级连接标识 ID。\n\n用于不同连接 ID 的消息可以任意交织（实现不同轻量级连接的复用）。唯一的约束是很显然的：对于任意连接 ID，消息序列必须是创建的连接消息，任意数量的数据消息以及关闭连接消息。\n\n这些消息的格式如下：\n\n    +-----------+-----------+\n    | CreateCon |   LWCId   |\n    +-----------+-----------+\n    |   Int32   |   Int32   |\n\n    +-----------+-----------+\n    |  CloseCon |   LWCId   |\n    +-----------+-----------+\n    |   Int32   |   Int32   |\n\n    +-----------+-----------+-------------------+\n    |   LWCId   |    Len    |       Data        |\n    +-----------+-----------+-------------------+\n    |   Int32   |   Int32   |     Len-bytes     |\n\n其中：\n\n- CreateCon 控制头是 0；\n- CloseCon 控制头是 1；\n- LWCId 是轻量级的连接ID, 它 &gt;= 1024。\n\n头部 Int32 是控制消息头部和数据消息的轻量级连接 ID 的别名，这就是为什么连接 ID 必须是1024或更大的原因。\n\n数据消息由轻量级连接 ID 和以长度为前缀的数据帧组成。这个协议的实现可能希望最大化这些数据帧，例如为了因资源考虑而确保连接之前合理的复用。\n\n请注意，这些数据边界和 TCP 套接字或数据包上的读取/写入之间不需要直接对应。为性能和网络效率考虑，在单一的写中管理连接开启，小数据消息和连接关闭是合理的。\n\n## 关闭重量级连接\n\n关闭重量级连接并不简单。这是因为只有在两个方向上的轻量级连接都关闭时，才能关闭重量级连接。鉴于轻量级连接的分配由每个端点独立控制，因此两个端点之间需要进行一些同步，以便两个端点在任意方向上不再有轻量级连接达到一致。\n\n当一个端点确定它没有更多的输出的轻量级连接，并且它知道传入的连接集是空的，那么它可以启动协议来关闭重量级连接。它通过发送一个 **CloseSocket** 来实现。该信息携带了该端点能看到的最大传入轻量级连接 ID：即由本地端点迄今为止已看到的远程端点分配的最高连接 ID。本地端点更新它用于跟踪远程端点的状态，以表明它现在正在关闭。如果本地端点现在收到来自远程端点的创建连接消息，而远程端点被标记为处于关闭过程中，则它将状态重置为正常连接建立状态。如果远程端点在收到关闭套接字消息之前打开一个新的轻量级连接，则会发生这种情况，因此应该尝试关闭应被禁止的套接字。\n\n当一个端点收到 **CloseSocket** 消息，检查其本地状态，已检查出站轻量级连接的数量以及它用于传出连接的最大轻量级连接 ID。如果仍然有出站连接，则关闭套接字消息将被忽略。此外，如果本地节点到目前为止使用的最大出站轻量级连接 ID 高于关闭套接字消息中收到的最大出站轻量级连接 ID，则关闭套接字消息将被忽略。即使出站连接数目前为零，如果出站连接被创建并在关闭套接字消息到达之前被关闭，也会发生这种情况。在这两种情况下发生的事情是，重量级连接再次变得活跃，而一方则由于不活跃而试图关闭它，因此放弃尝试关闭它是合适的。\n\n另一方面，如果没有出站连接，并且远程端点看到的最后一个新的连接 ID 与本地相同，则双方都同意，并且应该关闭 TCP 连接。\n\n消息结构是：\n\n    +-------------+-----------+\n    | CloseSocket |   LWCId   |\n    +-------------+-----------|\n    |    Int32    |   Int32   |\n\n其中：\n\n-   `CloseSocket` - 关闭连接控制消息，值为 `2`;\n-   `LWCId` - 迄今使用的最大轻量级连接 ID。\n\n## 流量控制和背压（TODO）\n\n轻量级连接不提供任何超出 TCP 提供的流量控制。该协议不提供任何设施来拒绝传入的轻量级连接。任何这样的设施都必须在顶层，在应用层或另一个中间层。\n\n实现应该考虑背压和头部堵塞问题。Head of line？是许多 TCP 协议层面的共同问题，例如 HTTP 1.x，其中一个较大的响应可以『阻塞』其他 URL 的较小的响应，因为这些响应式按顺序发送的。这个问题在这个传输协议中没那么严重，因为连接是复用的，所以小消息不需要被大消息阻塞。尽管如此，还是必须按顺序接收所有连接的多路复用数据流：不可能在整个重量级连接上返回一个轻量级连接。\n",
        "type": "MarkdownRemark",
        "contentDigest": "f8f302a9db41711d2168d89152c4d29c",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "网络传输层",
        "path": "/cn/technical/protocols/network-transport/",
        "group": "protocols",
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-10-network-transport.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-10-network-transport.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at ef835a2334888eda7384da707c4077a8b576b192 -->\n\n# 网络传输层\n\n本指南适用于想为卡尔达诺结算层构建自己的客户端的开发人员。请阅读[卡尔达诺结算层实现概述](/technical/)了解更多信息。本指南涵盖了卡尔达诺结算层节点中使用的网络传输层。\n\n传输层是一个位于 TCP 和应用程序级协议的层。原则上独立于应用程序协议（事实上，参考实现被具有不同应用程序级协议的多个不同应用程序使用）。\n\n传输层的重点在于它提供了在单个 TCP 连接上复用的多个轻量级逻辑连接。每个轻量级连接都是单向的，并提供可靠的有序消息传输（即，它在 TCP 之上提供数据帧）\n\n传输协议的属性：\n\n- **单个 TCP 连接**。任何一对对等点之间一次只能使用一个 TCP 连接。这些连接可能是长期存在的。一旦建立了与对等节点的连接，它将用于发送/接收信息，直到 TCP 连接被*明确*关闭或发生一些不可恢复的错误。\n\n实现的属性：\n\n- **报告网络故障**。网络故障不会从应用程序层隐藏。如果 TCP 连接意外断开，传输层应通知应用层。在卡尔达诺结算层中，策略是尝试重新连接，如果重新连接也失败，则只声明对等方无法访问。\n\n## 概要\n\n传输层的典型用途包括：\n\n1. 监听来自对等点的 TCP 连接。\n2. 建立到其他对等点的 TCP 连接。\n3. 在建立的 TCP 连接上创建轻型连接。\n4. 发送消息到对等节点（在一个或多个轻量级连接上）。\n5. 接收来自对等节点（在一个或多个轻量级连接上）的消息。\n6. 关闭轻量级连接\n7. 关闭 TCP 连接。\n\n在卡尔达诺结算层中，使用多个轻量级连接来支持应用程序级的消息传递协议。可以同时发送多个应用程序级别的消息，多个对话可以一次进行。大多数应用程序消息是在新创建的轻量级连接上发送的，如果需要的话，较大的应用程序级别消息被分解为多个传输级别消息以便于传输，其他应用程序级别的消息是作为一对单向轻量级连接组成的对话的一部分发送的。\n\n\n## 概观\n\n传输层的基本概念有：\n\n- 传输\n- 接入点\n- 连接\n- 事件\n- 错误\n\n传输指本文档描述的整个层和协议。\n\n**传输**是指本文档描述的整个层和协议。一个传输实例指的是传输实现的配置和状态，特别是包括绑定到本地网络特定接口的TCP监听套接字，如 `192.168.0.1:3010`。\n\n**接入点**是传输实例的逻辑端点。这意味着它又有一个地址，连接在端点之间。在实践中，它只是一个 TCP/IP 的简单抽象，通过主机名和端口进行寻址。\n\n端口地址是具有结构如 `HOST:PORT:LOCAL_ID` 的二进制字符串，例如 `192.168.0.1:3010:0`。\n\n注意，传输实例监听单个端口时，原则上在单个传输实例中可能有多个可寻址的接入点，这就是 `LOCAL_ID` 的作用，然而，卡尔达诺结算层目前还没有这个功能，所以它总是使用 `LOCAL_ID` 0。\n\n**重量级连接**是指两个端点之前的 TCP 连接。两个接入点只使用一次 TCP 连接。\n\n**连接**（或者更明确地说是*轻量级连接*）是端点之前的单向连接。端点之前的所有轻量级连接都在单个重量级连接（即单个TCP连接上）进行复用。\n\n轻量级连接是在 TCP 之上分层的逻辑概念。每个连接都有一个整数 ID。原则上可以在单个重量级 TCP 连接上复用数千个轻量级连接。\n\n典型的操作方式是应用层希望建立到端点的轻量级连接，如果还没有重量级连接，则创建一个。同样，当最后一个轻量级连接关闭时，真正的 TCP 连接将被彻底关闭。\n\n轻量级连接时单向的：轻量级连接上的消息仅在一个方向流动。但是，轻量级连接可以在任何方向上建立。同样的重量级连接用于双向的轻量级连接；哪个端点先建立重量级连接并不重要。\n\n双向会话可以通过使用一对单向轻量级连接来建立。卡尔达诺结算层遵循这种模式。请查阅 `time-warp-nt` 获取详细信息。但请注意，这个传输层没有双向对话的特殊概念，只有单向连接的集合。\n\n## 网络字节顺序\n\n在一下对控制消息的描述中，所有整数都是按[网络字节顺序](https://en.wikipedia.org/wiki/Endianness#Networking)编码的。\n\n下面的消息定义使用的 `Int32` 指的是32位的以网络字节顺序的整数值。\n\n## 设置传输实例\n\n每个传输实例都必须建立一个 TCP 监听套接字。使用的本地端口和端口号由使用传输的应用程序确定。\n\n实现可以随时接收新的 TCP 连接（可能受限于资源策略），然后执行下面描述的新重量级连接的初始步骤。\n\n## 建立重量级连接（初始化）\n\n假设在接入点 A，B 之前建立重量级连接，端点 A 发起连接。两个端点都有端点地址，如前所述，端点地址是这种形式：`HOST:PORT:LOCAL_ID`。\n\n从 A 到 B 建立的一个重量级连接的过程如下。首先 A 必须在本地记录它正在初始化一个到 B 的重量级连接。在交叉连接请求的情况下（见下文）这是必须的，由端点 A 向端点 B 打开 `HOST` 和 `PORT` 连接。\n\n端点 A 发送具有如下结构的**连接请求**消息：\n\n\n    +-----------+-------------+--------------------+\n    |   B-LID   |   A-EIDlen  |       A-EID        |\n    +-----------+-------------+--------------------+\n    |   Int32   |   Int32     |       bytes        |\n\n其中：\n\n-   `B-LID` - `B` 端点的本地 ID；\n-   `A-EIDlen` - `A` 端点的地址；\n-   `A-EID` - `A` 端口的地址。\n\n因此 A 发送它希望连接的本地接入点 ID，它自身的地址来初始化节点。A 发送的地址应该是规范化的公共地址。主机部分可以是 IP 地址或 DNS 名称。它用于避免在端点之间建立多个 TCP 连接。在卡尔达诺结算层协议中，本地端点 ID 始终为0。\n\n然后接入点 A 期望一个**连接请求响应**信息，它是下面的响应之一，一个简单的 `Int32` 编码。\n\n当本地接入点 ID 所标识的端点不存在时，会返回 `ConnectionRequestInvalid` 响应。例如，如果 A 发送给 B，它希望连接到本地接入点 ID 1，那么只有 ID 0 存在时才会发生。在这种情况下，两个端点必须关闭 TCP 连接。\n\n当端点 B 确定 A 与 B 之间或 B 与 A 之间，或两者同时有了一个 TCP 连接，会返回 `ConnectionRequestCrossed` 响应。在这种情况下，两个端点都必须关闭 TCP 连接。\n\n## 建立重量级连接 (接收)\n\n假设如前所述，在标记为 A 和 B 的端点之前建立重量级连接，并且端点 A 发起连接。我们现在从端点 B 的角度来考虑这个问题。\n\n两个端点都有 `HOST:PORT:LOCAL_ID` 形式的接入点地址。具体来说，假设 B 只有一个接入点，其中 `LOCAL_ID` 为 0。\n\nB 的传输实例在对应的接入点 IDs 上相应的 host 和 port 有监听套接字。它接受来自某个对等点的新的 TCP 连接。期望在该 TCP 连接上接收**连接请求**信息（以上述格式）。\n\n传输实例 B 必须根据以下规则以**连接请求响应**消息（采用上述格式）进行响应。\n\n如果连接请求要求本地接入点 ID 不存在（在本例中即不是0），则它必须以 `ConnectionRequestInvalid` 响应并关闭 TCP 连接。\n\n`ConnectionRequestCrossed` 的规则将在下面更详细地描述。\n\n否则，当接入点 ID 有效并且没有现有的 TCP 连接时，它应该以 `ConnectionRequestAccepted` 回复，并记录它已经与 A 建立了重量级连接的本地状态。然后它就可以继续协议的主要部分。\n\n## 交叉连接请求\n\n如前所述，该协议试图确保在两个接入点之间只使用一个 TCP 连接。典型的情况是，端点可以简单地确定它是否具有与对等体的重量级连接。因为它启动它或接收它，并且知道现有的 TCP 连接是否仍然打开。难处理的情况是两个端点*同时*建立重量级连接（分布式系统意义上的『同一时间』）。\n\n每个端点初始化重量级连接的过程都记录在本地状态中。每个端点都将照常发送连接请求消息。当每个端点接受传入的 TCP 连接时，它会从连接请求消息获取端点 ID。\n\n额外的规则是，它必须在其本地状态查到，对等点的连接1. 已经建立（TODO）2. 已经完全确立。在第一种情况下，我们处于交叉连接的情况。第二种情况是当一个对等房发现现有的 TCP 连接失败（即它的端点被关闭），并且正尝试建立一个新的 TCP 连接，而其他的对等点没有发现已有的 TCP 连接已经失效了。\n\n### 交叉连接情况\n\n在交叉连接的情况下，到目前为止，这在端点之间是完全对称的，但我们必须打破对称来解决使用哪个 TCP 连接以及需要关闭哪个。协议用来打破对称性的解决方案的对端点地址进行排序（以二进制字符串形式按字典顺序排序）。因此，每个节点必须采用的用来决定是否接受传入连接请求的规则是：`ConnectionRequestAccepted`，如果对等点的 ID 小于本地端点 ID，则应答，否则回复 `ConnectionRequestCrossed`，关闭 TCP 连接。\n\n### 连接断开/重建请求\n\n在第二种情况下，处理传入 TCP 连接的端点已经确定在两个端点之前已经存在已建立的连接，该协议如下。发送一个 `ConnectionRequestCrossed` 回复，关闭 TCP 连接。此外，端点尝试验证现有连接的活跃性，目的是验证它是否处于活动状态，或确定它不是为了关闭断开的链接（这将允许打开新连接）。\n\n为了验证活跃性，接入点发送一个 **ProbeSocket** 信息。如果在实现定义的时间段内未收到 **ProbeSocket** 消息，则接入点应关闭 TCP 连接并相应地更新其本地状态，以使端点能够建立新的连接。\n\n接收 ProbeSocket 消息的接入点应该使用 ProbeSocketAck 回复。\n\n这些消息的编码很简单：\n\n    +-------------+\n    | ProbeSocket |\n    +-------------+\n    |    Int32    |\n\n    +----------------+\n    | ProbeSocketAck |\n    +----------------+\n    |     Int32      |\n\n其中控制头消息的值分别是 4 和 5。\n\n## 协议主体\n\n一旦在两个端点之间建立了一个重量级连接，协议的主要部分就开始了。\n\n两个端点之间的主要协议包括发送/接收一系列消息：控制消息和数据消息。每个都有一个标识消息的头部和适合消息类的主体部分。主协议的消息是用于创建和关闭轻量级连接的控制消息，以及用于在轻量级连接上发送数据的数据消息。\n\n轻量级连接时单向的。在 TCP 连接的每个方向都有独立的轻量级连接集合。*发送方*管理每个方向的轻量级连接。接收方不能直接控制轻量级连接的分配。\n\n轻量级连接由轻量级连接 ID 区分，这是一个 32 位的有符号整数。轻量级连接 ID 必须大于1024。轻量级连接 ID 号应该按顺序使用。\n\n用于创建或关闭轻量级连接的控制消息只是简单的区分它们所处的轻量级连接 ID。同样，数据消息根据正在发送的轻量级连接标识 ID。\n\n用于不同连接 ID 的消息可以任意交织（实现不同轻量级连接的复用）。唯一的约束是很显然的：对于任意连接 ID，消息序列必须是创建的连接消息，任意数量的数据消息以及关闭连接消息。\n\n这些消息的格式如下：\n\n    +-----------+-----------+\n    | CreateCon |   LWCId   |\n    +-----------+-----------+\n    |   Int32   |   Int32   |\n\n    +-----------+-----------+\n    |  CloseCon |   LWCId   |\n    +-----------+-----------+\n    |   Int32   |   Int32   |\n\n    +-----------+-----------+-------------------+\n    |   LWCId   |    Len    |       Data        |\n    +-----------+-----------+-------------------+\n    |   Int32   |   Int32   |     Len-bytes     |\n\n其中：\n\n- CreateCon 控制头是 0；\n- CloseCon 控制头是 1；\n- LWCId 是轻量级的连接ID, 它 &gt;= 1024。\n\n头部 Int32 是控制消息头部和数据消息的轻量级连接 ID 的别名，这就是为什么连接 ID 必须是1024或更大的原因。\n\n数据消息由轻量级连接 ID 和以长度为前缀的数据帧组成。这个协议的实现可能希望最大化这些数据帧，例如为了因资源考虑而确保连接之前合理的复用。\n\n请注意，这些数据边界和 TCP 套接字或数据包上的读取/写入之间不需要直接对应。为性能和网络效率考虑，在单一的写中管理连接开启，小数据消息和连接关闭是合理的。\n\n## 关闭重量级连接\n\n关闭重量级连接并不简单。这是因为只有在两个方向上的轻量级连接都关闭时，才能关闭重量级连接。鉴于轻量级连接的分配由每个端点独立控制，因此两个端点之间需要进行一些同步，以便两个端点在任意方向上不再有轻量级连接达到一致。\n\n当一个端点确定它没有更多的输出的轻量级连接，并且它知道传入的连接集是空的，那么它可以启动协议来关闭重量级连接。它通过发送一个 **CloseSocket** 来实现。该信息携带了该端点能看到的最大传入轻量级连接 ID：即由本地端点迄今为止已看到的远程端点分配的最高连接 ID。本地端点更新它用于跟踪远程端点的状态，以表明它现在正在关闭。如果本地端点现在收到来自远程端点的创建连接消息，而远程端点被标记为处于关闭过程中，则它将状态重置为正常连接建立状态。如果远程端点在收到关闭套接字消息之前打开一个新的轻量级连接，则会发生这种情况，因此应该尝试关闭应被禁止的套接字。\n\n当一个端点收到 **CloseSocket** 消息，检查其本地状态，已检查出站轻量级连接的数量以及它用于传出连接的最大轻量级连接 ID。如果仍然有出站连接，则关闭套接字消息将被忽略。此外，如果本地节点到目前为止使用的最大出站轻量级连接 ID 高于关闭套接字消息中收到的最大出站轻量级连接 ID，则关闭套接字消息将被忽略。即使出站连接数目前为零，如果出站连接被创建并在关闭套接字消息到达之前被关闭，也会发生这种情况。在这两种情况下发生的事情是，重量级连接再次变得活跃，而一方则由于不活跃而试图关闭它，因此放弃尝试关闭它是合适的。\n\n另一方面，如果没有出站连接，并且远程端点看到的最后一个新的连接 ID 与本地相同，则双方都同意，并且应该关闭 TCP 连接。\n\n消息结构是：\n\n    +-------------+-----------+\n    | CloseSocket |   LWCId   |\n    +-------------+-----------|\n    |    Int32    |   Int32   |\n\n其中：\n\n-   `CloseSocket` - 关闭连接控制消息，值为 `2`;\n-   `LWCId` - 迄今使用的最大轻量级连接 ID。\n\n## 流量控制和背压（TODO）\n\n轻量级连接不提供任何超出 TCP 提供的流量控制。该协议不提供任何设施来拒绝传入的轻量级连接。任何这样的设施都必须在顶层，在应用层或另一个中间层。\n\n实现应该考虑背压和头部堵塞问题。Head of line？是许多 TCP 协议层面的共同问题，例如 HTTP 1.x，其中一个较大的响应可以『阻塞』其他 URL 的较小的响应，因为这些响应式按顺序发送的。这个问题在这个传输协议中没那么严重，因为连接是复用的，所以小消息不需要被大消息阻塞。尽管如此，还是必须按顺序接收所有连接的多路复用数据流：不可能在整个重量级连接上返回一个轻量级连接。\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-10-network-transport.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-07-time-warp-nt.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-07-time-warp-nt.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-07-time-warp-nt.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: Time-Warp-NT 层\npath: /cn/technical/protocols/time-warp-nt/\ngroup: protocols\nlanguage: cn\nlabel: docs\n---\n<!-- Reviewed at dcf5509d8fc93ac4c221726d076dafe632d32b70 -->\n\n# Time-Warp-NT 层\n\n[`time-warp`](https://github.com/serokell/time-warp-nt/) 是为提供不同抽象层次方法的可靠网络层而开发的。`time-warp` 另一个重要的目标是提供一种使用仿真模式编写和运行分布式系统测试的简单方法，该模式可以足够灵活地支持各种情况（可调节网络延迟，断开连接和其他实时情况）。\n\n`time-warp` 主要分为两个部分：\n\n1. `Mockable` 接口。\n2. 网络功能。\n\n## Mockable\n\n[`Mockable`](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Mockable/Class.hs#L30) 接口允许从基本功能实现的语言特定细节中抽象出来。\n\n他们分成几个类别。例如，[`Mockable Delay`](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Mockable/Monad.hs#L21) 包含 `delay` 操作，而 [`Mockable Fork`](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Mockable/Monad.hs#L23)  保留基本功能来操作线程。\n\n这个创新允许在生产和测试环境中启动相同的代码，后者允许模拟时间，线程，网络等。\n\n[`Production`](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Mockable/Production.hs#L42) [实现了这些接口](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Mockable/Production.hs#L54-L219) ，并引用了各自功能的原型。\n\n## 网络\n\n该层写在[网络传输](https://github.com/serokell/network-transport/)之上，为应用层提供网络功能。它被分成两个子层：**低层**和**高层**。\n\n### 低层\n\n这个子层是 [`network-transport`](https://github.com/serokell/network-transport/) 包的直接封装，它提供了一个方便的接口，允许发起轻量级的链接和发送/接收数据。请阅读[网络层传输指南](/technical/protocols/network-transport)了解更多信息。\n\n它支持两种类型的连接，**单向**和**双向**。\n\n#### 单向连接\n\n单向连接允许发送一个字节流而不用等待对方的响应。\n\n[`withOutChannel`](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1465) 功能执行给定的操作，为其提供[一次性的轻量级连接](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1828)。\n\n单向连接初始化时，节点[发送 `U`](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1376)。\n\n    +------------------+\n    |       UNI        |\n    +------------------+\n\n    |   'U' :: Word8   |\n\n`Word8` 表示8位无符号整数值。\n\n#### 双向连接\n\n双向连接允许两个节点相互发送和接收字节。\n\n[`withInOutChannel`](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1405)  函数建立连接，用给定的句柄执行给定的动作，以在连接上发送和接收字节，并在动作结束时自动关闭连接。它的使用需要握手，其中包含以下步骤。\n\n首先，发起者[发送](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1443)一个**连接请求**，其具有以下结构：\n\n    +------------------+-----------------+\n    |     `BI_SYN`     |      Nonce      |\n    +------------------+-----------------+\n\n    |   'S' :: Word8   |   Word64 (BE)   |\n\n其中 `Nonce` 是[随机生成的](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1421)。\n\n\n然后对方[发送](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1072)以如下结构发送**确认**：\n\n\n    +------------------+-----------------+--------------+\n    |     `BI_ACK`     |      Nonce      |   PeerData   |\n    +------------------+-----------------+--------------+\n\n    |   'A' :: Word8   |   Word64 (BE)   |   Generic    |\n\n其中 `Nonce` 是[来自请求的相同随机数](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1067)\n\n如果发起者已正确地随机数接收到确认，则开始对话。\n\n如果节点从未发送过任何请求（对等点发生协议错误），则会发生相反的情况。也有可能是节点确实发送了 `BI_SYN`，但对话的处理程序已经完成了。这是正常的，节点应该忽略这个确认。\n\n\n[`PeerData`](https://github.com/input-output-hk/cardano-sl/blob/4378a616654ff47faf828ef51ab2f455fa53d3a3/infra/Pos/Communication/Types/Protocol.hs#L58)  是由对等体发送并由发起者解析的一些附加信息。`time-warp` 使您能够在握手过程中提供一些二进制数据，然后以不同的方式使用您的应用程序。这个数据的结构是互通的，[*应用程序级别*\n章节](/technical/protocols/csl-application-level/#message-names)描述了卡尔达诺结算层如何使用 `PeerData`。\n\n### 消息\n\n在讨论上层之前，我们来描述消息。\n\n为了让不同的消息类型指定不同的处理程序，发送的消息应该实现 [`Message`](https://github.com/serokell/time-warp-nt/blob/724769fe102752050e31ed8f609316a8a3e59589/src/Node/Message/Class.hs#L54)  接口，定义两种方法：\n1. `messageName`，它将返回唯一的消息标识符，该标识符与消息本身一起发送，并允许接收者选择正确的处理程序来处理此消息。\n2. `formatMessage`， 它提供消息的描述，用于调试。\n\n请查看 `Message` [实例](https://github.com/serokell/time-warp-nt/blob/8a4c8792049a589cdc3e87f6a863b026430b266e/test/Test/Util.hs#L133)的 [`Parcel` 数据类型](https://github.com/serokell/time-warp-nt/blob/8a4c8792049a589cdc3e87f6a863b026430b266e/test/Test/Util.hs#L127)作为例子。\n\n\n### 上层\n\n这个子层实现了数据交换。它提供了交流的*沟通方式*。该类型使用双向连接的功能，并允许发送/接收信息（一个或多个）。对于单个对话，输入和输出消息的类型是固定的。在这种情况下，发起方节点只发送一次消息名称，然后发起方和对方发送所需的消息。\n\n网络事件处理由 [`node`](https://github.com/serokell/time-warp-nt/blob/e39f6b2c4a2aaaab308eddb9efee0503af73d927/src/Node.hs#L366) 功能启动。这个函数使用了两个重要的概念：worker\n和 listener。\n\n**Worker** 是作为所有通信发起者执行的一些动作，被用于提供提供 [`withConnectionTo`](https://github.com/serokell/time-warp-nt/blob/8a4c8792049a589cdc3e87f6a863b026430b266e/src/Node.hs#L163) 功能的 [`SendActions` 类型](https://github.com/serokell/time-warp-nt/blob/e39f6b2c4a2aaaab308eddb9efee0503af73d927/src/Node.hs#L160)。这个函数启动*对话*，执行 [`ConversationActions`](https://github.com/serokell/time-warp-nt/blob/8a4c8792049a589cdc3e87f6a863b026430b266e/src/Node/Conversation.hs#L26) 给定的动作，一旦动作完成关闭会话。反过来，`ConversationActions` 提供 [`send`](https://github.com/serokell/time-warp-nt/blob/8a4c8792049a589cdc3e87f6a863b026430b266e/src/Node/Conversation.hs#L28) 和 [`recv`](https://github.com/serokell/time-warp-nt/blob/8a4c8792049a589cdc3e87f6a863b026430b266e/src/Node/Conversation.hs#L35) 功能来与对等点对话。\n\n***Listener*** 是一个消息的 [handler](https://github.com/serokell/time-warp-nt/blob/8a4c8792049a589cdc3e87f6a863b026430b266e/src/Node.hs#L117)。每个相关消息的 listener 成员类型，以及几个不重复消息类型的 listeners 可以被定义。\n\n请查看[完整例子](https://github.com/serokell/time-warp-nt/blob/e39f6b2c4a2aaaab308eddb9efee0503af73d927/examples/PingPong.hs)获取技术细节。\n\n### 序列化\n\n`time-warp` 不依赖任何预定义的序列化策略，而是允许用户使用自己的。\n\n要定义自定义序列化，用户应该可以创建特殊的数据类型，即所谓的*打包类型*，并为其实现 [`Serializable`](https://github.com/serokell/time-warp-nt/blob/724769fe102752050e31ed8f609316a8a3e59589/src/Node/Message/Class.hs#L77)  接口。这个接口定义了两个方法：\n\n1.  `packMsg`，展示将数据压缩到原始字符串。\n2.  `unpackMsg`， 展示将数据解压缩。\n\n\n请查阅 `Serializable` [实例](https://github.com/serokell/time-warp-nt/blob/fef2c9943d279403386d204554b1c08fc357f196/src/Node/Message/Binary.hs#L43)作为 [`BinaryP` 数据类型](https://github.com/serokell/time-warp-nt/blob/fef2c9943d279403386d204554b1c08fc357f196/src/Node/Message/Binary.hs#L20)的例子。\n\n",
        "type": "MarkdownRemark",
        "contentDigest": "9be292ff866ca2b60ceb66980c02153d",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "Time-Warp-NT 层",
        "path": "/cn/technical/protocols/time-warp-nt/",
        "group": "protocols",
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-07-time-warp-nt.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-07-time-warp-nt.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at dcf5509d8fc93ac4c221726d076dafe632d32b70 -->\n\n# Time-Warp-NT 层\n\n[`time-warp`](https://github.com/serokell/time-warp-nt/) 是为提供不同抽象层次方法的可靠网络层而开发的。`time-warp` 另一个重要的目标是提供一种使用仿真模式编写和运行分布式系统测试的简单方法，该模式可以足够灵活地支持各种情况（可调节网络延迟，断开连接和其他实时情况）。\n\n`time-warp` 主要分为两个部分：\n\n1. `Mockable` 接口。\n2. 网络功能。\n\n## Mockable\n\n[`Mockable`](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Mockable/Class.hs#L30) 接口允许从基本功能实现的语言特定细节中抽象出来。\n\n他们分成几个类别。例如，[`Mockable Delay`](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Mockable/Monad.hs#L21) 包含 `delay` 操作，而 [`Mockable Fork`](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Mockable/Monad.hs#L23)  保留基本功能来操作线程。\n\n这个创新允许在生产和测试环境中启动相同的代码，后者允许模拟时间，线程，网络等。\n\n[`Production`](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Mockable/Production.hs#L42) [实现了这些接口](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Mockable/Production.hs#L54-L219) ，并引用了各自功能的原型。\n\n## 网络\n\n该层写在[网络传输](https://github.com/serokell/network-transport/)之上，为应用层提供网络功能。它被分成两个子层：**低层**和**高层**。\n\n### 低层\n\n这个子层是 [`network-transport`](https://github.com/serokell/network-transport/) 包的直接封装，它提供了一个方便的接口，允许发起轻量级的链接和发送/接收数据。请阅读[网络层传输指南](/technical/protocols/network-transport)了解更多信息。\n\n它支持两种类型的连接，**单向**和**双向**。\n\n#### 单向连接\n\n单向连接允许发送一个字节流而不用等待对方的响应。\n\n[`withOutChannel`](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1465) 功能执行给定的操作，为其提供[一次性的轻量级连接](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1828)。\n\n单向连接初始化时，节点[发送 `U`](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1376)。\n\n    +------------------+\n    |       UNI        |\n    +------------------+\n\n    |   'U' :: Word8   |\n\n`Word8` 表示8位无符号整数值。\n\n#### 双向连接\n\n双向连接允许两个节点相互发送和接收字节。\n\n[`withInOutChannel`](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1405)  函数建立连接，用给定的句柄执行给定的动作，以在连接上发送和接收字节，并在动作结束时自动关闭连接。它的使用需要握手，其中包含以下步骤。\n\n首先，发起者[发送](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1443)一个**连接请求**，其具有以下结构：\n\n    +------------------+-----------------+\n    |     `BI_SYN`     |      Nonce      |\n    +------------------+-----------------+\n\n    |   'S' :: Word8   |   Word64 (BE)   |\n\n其中 `Nonce` 是[随机生成的](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1421)。\n\n\n然后对方[发送](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1072)以如下结构发送**确认**：\n\n\n    +------------------+-----------------+--------------+\n    |     `BI_ACK`     |      Nonce      |   PeerData   |\n    +------------------+-----------------+--------------+\n\n    |   'A' :: Word8   |   Word64 (BE)   |   Generic    |\n\n其中 `Nonce` 是[来自请求的相同随机数](https://github.com/serokell/time-warp-nt/blob/dfefb3ccbcd746909b10048e9f49641e1885a4ec/src/Node/Internal.hs#L1067)\n\n如果发起者已正确地随机数接收到确认，则开始对话。\n\n如果节点从未发送过任何请求（对等点发生协议错误），则会发生相反的情况。也有可能是节点确实发送了 `BI_SYN`，但对话的处理程序已经完成了。这是正常的，节点应该忽略这个确认。\n\n\n[`PeerData`](https://github.com/input-output-hk/cardano-sl/blob/4378a616654ff47faf828ef51ab2f455fa53d3a3/infra/Pos/Communication/Types/Protocol.hs#L58)  是由对等体发送并由发起者解析的一些附加信息。`time-warp` 使您能够在握手过程中提供一些二进制数据，然后以不同的方式使用您的应用程序。这个数据的结构是互通的，[*应用程序级别*\n章节](/technical/protocols/csl-application-level/#message-names)描述了卡尔达诺结算层如何使用 `PeerData`。\n\n### 消息\n\n在讨论上层之前，我们来描述消息。\n\n为了让不同的消息类型指定不同的处理程序，发送的消息应该实现 [`Message`](https://github.com/serokell/time-warp-nt/blob/724769fe102752050e31ed8f609316a8a3e59589/src/Node/Message/Class.hs#L54)  接口，定义两种方法：\n1. `messageName`，它将返回唯一的消息标识符，该标识符与消息本身一起发送，并允许接收者选择正确的处理程序来处理此消息。\n2. `formatMessage`， 它提供消息的描述，用于调试。\n\n请查看 `Message` [实例](https://github.com/serokell/time-warp-nt/blob/8a4c8792049a589cdc3e87f6a863b026430b266e/test/Test/Util.hs#L133)的 [`Parcel` 数据类型](https://github.com/serokell/time-warp-nt/blob/8a4c8792049a589cdc3e87f6a863b026430b266e/test/Test/Util.hs#L127)作为例子。\n\n\n### 上层\n\n这个子层实现了数据交换。它提供了交流的*沟通方式*。该类型使用双向连接的功能，并允许发送/接收信息（一个或多个）。对于单个对话，输入和输出消息的类型是固定的。在这种情况下，发起方节点只发送一次消息名称，然后发起方和对方发送所需的消息。\n\n网络事件处理由 [`node`](https://github.com/serokell/time-warp-nt/blob/e39f6b2c4a2aaaab308eddb9efee0503af73d927/src/Node.hs#L366) 功能启动。这个函数使用了两个重要的概念：worker\n和 listener。\n\n**Worker** 是作为所有通信发起者执行的一些动作，被用于提供提供 [`withConnectionTo`](https://github.com/serokell/time-warp-nt/blob/8a4c8792049a589cdc3e87f6a863b026430b266e/src/Node.hs#L163) 功能的 [`SendActions` 类型](https://github.com/serokell/time-warp-nt/blob/e39f6b2c4a2aaaab308eddb9efee0503af73d927/src/Node.hs#L160)。这个函数启动*对话*，执行 [`ConversationActions`](https://github.com/serokell/time-warp-nt/blob/8a4c8792049a589cdc3e87f6a863b026430b266e/src/Node/Conversation.hs#L26) 给定的动作，一旦动作完成关闭会话。反过来，`ConversationActions` 提供 [`send`](https://github.com/serokell/time-warp-nt/blob/8a4c8792049a589cdc3e87f6a863b026430b266e/src/Node/Conversation.hs#L28) 和 [`recv`](https://github.com/serokell/time-warp-nt/blob/8a4c8792049a589cdc3e87f6a863b026430b266e/src/Node/Conversation.hs#L35) 功能来与对等点对话。\n\n***Listener*** 是一个消息的 [handler](https://github.com/serokell/time-warp-nt/blob/8a4c8792049a589cdc3e87f6a863b026430b266e/src/Node.hs#L117)。每个相关消息的 listener 成员类型，以及几个不重复消息类型的 listeners 可以被定义。\n\n请查看[完整例子](https://github.com/serokell/time-warp-nt/blob/e39f6b2c4a2aaaab308eddb9efee0503af73d927/examples/PingPong.hs)获取技术细节。\n\n### 序列化\n\n`time-warp` 不依赖任何预定义的序列化策略，而是允许用户使用自己的。\n\n要定义自定义序列化，用户应该可以创建特殊的数据类型，即所谓的*打包类型*，并为其实现 [`Serializable`](https://github.com/serokell/time-warp-nt/blob/724769fe102752050e31ed8f609316a8a3e59589/src/Node/Message/Class.hs#L77)  接口。这个接口定义了两个方法：\n\n1.  `packMsg`，展示将数据压缩到原始字符串。\n2.  `unpackMsg`， 展示将数据解压缩。\n\n\n请查阅 `Serializable` [实例](https://github.com/serokell/time-warp-nt/blob/fef2c9943d279403386d204554b1c08fc357f196/src/Node/Message/Binary.hs#L43)作为 [`BinaryP` 数据类型](https://github.com/serokell/time-warp-nt/blob/fef2c9943d279403386d204554b1c08fc357f196/src/Node/Message/Binary.hs#L20)的例子。\n\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-07-time-warp-nt.cn.md"
    },
    "SearchIndex < Site": {
      "id": "SearchIndex < Site",
      "parent": "___SOURCE___",
      "children": [],
      "pages": [
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/content/welcome-text.en.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/content/welcome-text.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-01-index.en.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-04-installation.en.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-13-for-contributors.en.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/content/intro.en.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-19-glossary.en.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/AAA.en.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-01-index.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-04-installation.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/content/intro.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-13-for-contributors.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-19-glossary.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-04-differences.en.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-07-addresses.en.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-13-balance-and-stake.en.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-19-topology.en.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-01-monetary-policy.en.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-02-transaction-fees.en.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-05-explorer.en.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/for-contributors/2017-01-01-building-from-source.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-02-launcher.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/for-contributors/2017-01-03-haddock.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-06-explorer.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-14-leader-selection.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-16-specification-wallet-backend.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-01-testnet.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-02-bootstrap.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-15-wallet-backend.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-14-hd-wallets.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-04-differences.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-07-addresses.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-13-balance-and-stake.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-19-topology.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-01-monetary-policy.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-02-transaction-fees.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-16-wallet-frontend.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-05-explorer.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-03-reward.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-01-proof-of-stake.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-02-launcher.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-06-explorer.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-14-leader-selection.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-16-delegation.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/contributors/2017-01-03-haddock.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-14-hd-wallets.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-16-wallet-frontend.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-15-wallet-backend.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/contributors/2017-01-01-building-from-source.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-01-testnet.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-02-bootstrap.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-03-reward.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-01-introduction.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-02-types.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-03-examples.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/wallet/2018-03-14-api-docs.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-02-types.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-01-introduction.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-03-examples.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-10-technical.en.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-10-technical.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-01-proof-of-stake.en.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-10-transactions.en.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-16-updating.en.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-03-transaction-assurance.en.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-04-updater.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-07-blocks.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-16-delegation.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-15-pvss.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-10-transactions.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-16-updating.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-03-transaction-assurance.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-04-updater.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-07-blocks.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-15-pvss.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-07-time-warp-nt.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-04-p2p.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-10-network-transport.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-07-time-warp-nt.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-01-application-level.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-01-application-level.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-04-p2p.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-10-network-transport.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-01-cli-options.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-01-cli-options.cn.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-13-binary.md absPath of file >>> MarkdownRemark",
        "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-13-binary.cn.md absPath of file >>> MarkdownRemark"
      ],
      "internal": {
        "type": "SiteSearchIndex",
        "content": "\"/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-13-binary.cn.md absPath of file >>> MarkdownRemark\"",
        "contentDigest": "63bd8f4adefd80ad3efd0c71d344b5cd",
        "owner": "@andrew-codes/gatsby-plugin-elasticlunr-search"
      }
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-01-application-level.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-01-application-level.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-01-application-level.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: CSL Application Level\npath: /en/technical/protocols/csl-application-level/\ngroup: technical-protocols\nlanguage: en\nlabel: docs\n---\n<!-- Reviewed at 721474b760466b888cf26545b52b35989b2162de -->\n\n# CSL Application-Level Messaging\n\nIn this chapter we explore messaging in Cardano SL. The goal of this chapter\nis to explain how all the pieces, such as Time-Warp, Network-Transport, and\nKademlia DHT, click together and make implementing a full Cardano SL node\npossible.\n\n## Message Typeclass and Message Types\n\nWhen reading the source code, you often encounter things like\n[this](https://github.com/input-output-hk/cardano-sl/blob/c8620af754252ebb71b1f5bc369b4f672f46d537/src/Pos/Block/Network/Types.hs#L42)\n\n``` haskell\n-- | 'GetHeaders' message (see protocol specification).\ndata MsgGetHeaders = MsgGetHeaders\n    { -- not guaranteed to be in any particular order\n      mghFrom :: ![HeaderHash]\n    , mghTo   :: !(Maybe HeaderHash)\n    } deriving (Generic, Show, Eq)\n\ninstance Message MsgGetHeaders where\n    messageName _ = varIntMName 4\n    formatMessage _ = \"GetHeaders\"\n```\n\nHow do you read this? First, let's examine the `instance` part. This particular\nsnippet says that the data structure defined by type `MsgGetHeaders` is used as\na message payload. The name of such message is `\"GetHeaders\"`.\n\nIn this particular case, the data structure has two fields: `mghFrom` and\n`mghTo`. Prefixes like `mgh` are used because Haskell puts symbols for record\nfields in the global namespace, so it is programmer's duty to avoid clashes.\n\nIt should be noted that sometimes you see messages that are parametrized with a\ntype variable `ssc`. That is done for the code to be polymorphic with respect to\nthe way we carry out shared seed computation.\n[Here](https://github.com/input-output-hk/cardano-sl/blob/04dc8e4a640a62f0d82633f3a78ab3d8540fd5e6/src/Pos/Block/Network/Types.hs#L65-L67) is an example of a message that sends newest headers first, minding `ssc`.\n\nThe way messages are serialized can be seen in\n[`Pos.Binary.Communication`](https://github.com/input-output-hk/cardano-sl/blob/04dc8e4a640a62f0d82633f3a78ab3d8540fd5e6/src/Pos/Binary/Communication.hs) module.\n\nEvery message type should have an instance of the `Message` typeclass. Please\nsee [Time-Warp-NT guide](/technical/protocols/time-warp-nt/#messaging) for more info.\n\n## Inv/Req/Data and MessagePart\n\nMost of messages in Cardano SL are generalized with `Inv/Req/Data` standard (see\n[`Pos.Communication.Relay`](https://github.com/input-output-hk/cardano-sl/blob/4378a616654ff47faf828ef51ab2f455fa53d3a3/infra/Pos/Communication/Types/Relay.hs#L23)\nmodule). Within this framework we define three data types:\n\n``` haskell\n-- | Inventory message. Can be used to announce the fact that you have\n-- some data.\ndata InvMsg key = InvMsg\n    { imKey :: !key\n    }\n    deriving (Show, Eq)\n\n-- | Request message. Can be used to request data (ideally data which\n-- was previously announced by inventory message).\ndata ReqMsg key = ReqMsg\n    { rmKey :: !key\n    }\n    deriving (Show, Eq)\n\n-- | Data message. Can be used to send actual data.\ndata DataMsg contents = DataMsg\n    { dmContents :: !contents\n    }\n    deriving (Show, Eq)\n```\n\nHere:\n\n-   `key` is a type representing the node identifier.\n-   `contents` is a type representing actual message payload.\n\nTo introduce a new message using `Inv/Req/Data` one should create two types: `key`\ntype and `contents` type for this message, and then implement [`MessagePart`](https://github.com/input-output-hk/cardano-sl/blob/69e896143cb02612514352e286403852264f0ba3/infra/Pos/Communication/MessagePart.hs#L9)\ntypeclass for both of them.\n\n``` haskell\nclass MessagePart a where\n    pMessageName :: Proxy a -> MessageName\n```\n\nHere, `pMessageName` is an identifier for a particular message type.\n\n`Message` typeclass for `InvMsg key`, `ReqMsg key` and `DataMsg contents`\nis automatically derived from the `MessagePart` typeclass for particular\nkey and contents.\n\nPlease see\n[`Pos.Communication.Message`](https://github.com/input-output-hk/cardano-sl/blob/3d695fd804814647f50abe452a81a678aad080cc/src/Pos/Communication/Message.hs)\nmodule for the examples of messages that are using `Inv/Req/Data`.\n\n## Block Exchange Messages\n\n<!-- Updated at 3b657302dede832b908f7ba792a164c83b362712 -->\n\nThis table explains\n[`Pos.Block.Network.Types`](https://github.com/input-output-hk/cardano-sl/blob/309142c899ed898eaa877d959818a06fbbb37db0/src/Pos/Block/Network/Types.hs)\nmodule.\n\n| Message type    | Payload                                                            | Comments                       |\n|-----------------|--------------------------------------------------------------------|--------------------------------|\n| `MsgGetHeaders` | Header hash checkpoints (optional newest hash we're interested in) | Expect newest header first     |\n| `MsgGetBlocks`  | Oldest header hash (newest hash)                                   | Both hashes have to be present |\n| `MsgHeaders`    | Non-empty collection of block headers, newest first                | Polymorphic in `ssc`           |\n| `MsgBlock`      | A single block                                                     | Polymorphic in `ssc`           |\n\nFor more details please see [binary\nprotocols](/technical/protocols/binary-protocols/#block-exchange-messages).\n\n## Message names\n\nAll messages are given custom names, since using full type names would be\nexcessive. Each name is concatenation of one or two encoded `UnsignedVarInt`s.\n\nThis table contains names for all used messages/message parts. These names could also\nbe found in\n[`Pos.Communication.Message`](https://github.com/input-output-hk/cardano-sl/blob/0906d8abc8e4ba8e1366defc3af0f5363e530146/src/Pos/Communication/Message.hs)\nmodule. To distinguish from integers addition, concatenation is denoted here as\n`(++)`.\n\n| Message type     | Message name                    |\n|------------------|---------------------------------|\n| MsgGetHeaders    | `4`                             |\n| MsgHeaders       | `5`                             |\n| MsgGetBlocks     | `6`                             |\n| MsgBlock         | `7`                             |\n| ReqMsg           | `9` ++ `pMessageName key`       |\n| MempoolMsg       | `10` ++ `pMessageName tag`      |\n| DataMsg          | `11` ++ `pMessageName contents` |\n| InvMsg           | `12` ++ `pMessageName key`      |\n\n| Message part type                    | Name |\n|--------------------------------------|------|\n| `TxMsgContents`                      | `0`  |\n| (`UpdateProposal`, \\[`UpdateVote`\\]) | `1`  |\n| `UpdateVote`                         | `2`  |\n\nHence `cardano-sl` is shipped with Update system protocol, and message formats also\ncan be changed. So nodes should be aware of the protocol other peers are\nrunning. Knowing this information, nodes can choose a message name to send to a\npeer. This message name table is sent as\n[`PeerData`](/technical/protocols/time-warp-nt/#bidirectional-сonnections) during\nhandshake before every conversation action between handshake. The exact binary\nformat of `PeerData` is described in [binary protocols](/technical/protocols/binary-protocols/#peer-data)\nchapter.\n\n## Message limits\n\nMessages have maximum length limits. Different types of messages have different limits, as defined in [`Pos.Communication.Limits`](https://github.com/input-output-hk/cardano-sl/blob/895619d7056fe397e9c2a56d88994f167263c397/src/Pos/Communication/Limits.hs) module.\n\n## Delegation Messages\n\n*Delegation* is a feature that allows one stakeholder, called *issuer*, to let\nanother stakeholder, called *delegate*, generate blocks on her behalf.\n\nTo do this, issuer should create *proxy signing key* that allows delegate to\nsign blocks instead of issuer. Any stakeholder can verify that a proxy signing\nkey was actually issued by a specific stakeholder to a specific delegate and\nthat this key is valid at time.\n\nDelegation can be of two types: per-epoch delegation and delegation with\nrevocable long-lived certificates. Per-epoch delegation is called “lightweight”,\nand the long-lived delegation is called “heavyweight”.\n\nPlease read about [Stake Delegation in Cardano SL](/technical/delegation/) for\nmore information.\n\n### Lightweight Delegation\n\n**WARNING: Currently, lightweight delegation is disabled and will be reworked in\n[Shelley release](https://cardanoroadmap.com/), so information below can be outdated.**\n\nLightweight delegation allows delegate to sign blocks instead of issuer for some\nrange of epochs (this range is specified for a signing key created).\n\nTo do this, issuer should send message containing time range, issuer public key,\ndelegate public key and certificate over network. Every node from network\nreceives this message and can check later if the one who generated the block had\nright for it. Lightweight delegation data is stored in memory and gets deleted\nafter some time [defined in configuration file](https://github.com/input-output-hk/cardano-sl/blob/acc53f53a20c7985d6550b4812117e44db08a70b/core/constants.yaml#L55).\n\nThis delegation type can be used to delegate blocks generating right to some\ntrusted node when an issuer knows it will be absent in some time range.\n\n### Heavyweight Delegation\n\nHeavyweight delegation serves two purposes:\n\n1.  Delegate block generation right, like lightweight delegation.\n2.  Share stake with some delegate, thus allowing delegate to take part in\n    [Follow-The-Satoshi](/glossary/#follow-the-satoshi). No real money is transferred; stake of issuer is added\n    to stake of delegate when calculating stakeholders for [Follow-The-Satoshi](/glossary/#follow-the-satoshi).\n\nEvery particular stakeholder can share stake with one and only one delegate. To\nrevoke certificate, a node should create a new certificate and put itself as\nboth issuer and delegate.\n\n### Messages table\n\nThere are delegation-related messages, found in\n[`Pos.Delegation.Types`](https://github.com/input-output-hk/cardano-sl/blob/6e8f8a98fd1537d084341a27a843e08dacc9f1eb/src/Pos/Delegation/Types.hs)\nmodule. The format of delegation messages is described in\n[binary protocols](/technical/protocols/binary-protocols/#delegation)\nchapter.\n\n## Update System Messages\n\nYou can see how system messages are implemented under `WorkMode`\nin [`Pos.Communication.Methods`](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Communication/Methods.hs) module.\n\n| Message type     | Comments                                           |\n|------------------|----------------------------------------------------|\n| `UpdateProposal` | Serialized update proposal, sent to a DHT peers    |\n| `UpdateVote`     | Message, payload of which contains the actual vote |\n       \nPlea see [`sendUpdateProposal`](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Communication/Methods.hs#L47)\nand [`sendVote`](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Communication/Methods.hs#L40)\nfunctions for more details.\n\n# Workers, Listeners and Handlers\n\nYou can think about them as «operating personnel» for messages.\n\n**Workers** initiate messages exchange, so a worker is an *active* communication\npart of Cardano SL. **Listeners** accept messages from the workers and may send\nsome messages as answers, so a listener is a *passive* communication part of\nCardano SL. After a message was received, a listener uses the function called\n**handler** to actually perform the corresponding job. A particular handler is\nused based on the type of received message (as it has been said above, messages\nhave different types).\n\nTo be able to perform necessary actions, all workers and handlers work in the\n`WorkMode`'s constraints (see below).\n\n## Block Processing\n\nBlock exchange messages are described above.\n\n### Block Processing Workers\n\nBlock acquisition is handled in\n[`Pos.Block.Network.Retrieval`](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Block/Network/Retrieval.hs)\nmodule.\n\nThe [`retrievalWorker`](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Block/Network/Retrieval.hs#L50)\nfunction is very important: it's a server that operates on [block retrieval\nqueue](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Block/Network/Retrieval.hs#L84)\nvalidating headers, and these blocks form a proper chain. Thus, at [this\npoint](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Block/Network/Retrieval.hs#L284)\nit sends a message of type `MsgGetBlocks` to the listener, and at [this\npoint](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Block/Network/Retrieval.hs#L345)\nit receives an answer from this listener, a message of `MsgBlock` type.\n\nHere's another example — the [`requestHeaders`](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Block/Network/Logic.hs#L261) function. This function handles\nexpected block headers, tracking them locally. So at [this\npoint](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Block/Network/Logic.hs#L271)\nit sends a message of type `MsgGetHeaders` to the listener, and at [this\npoint](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Block/Network/Logic.hs#L275)\nit receives an answer from that listener, a message of `MsgHeaders` type.\n\nAdditional worker for the block processing is defined in\n[`Pos.Block.Worker`](https://github.com/input-output-hk/cardano-sl/blob/d564b3f5a7e03e086b62c88212870b5ea89f5e8b/src/Pos/Block/Worker.hs)\nmodule. We reuse [`retrievalWorker`] described above and define a\n[well-documented](https://github.com/input-output-hk/cardano-sl/blob/a5f7991ff03a1e45114b901bfbbbb1ee3cd4d194/src/Pos/Block/Worker.hs#L82)\n`blkOnNewSlot` worker. It represents an action which should be done when a new\nslot starts. This action includes the following steps:\n\n1.  [Generating a genesis block](https://github.com/input-output-hk/cardano-sl/blob/a5f7991ff03a1e45114b901bfbbbb1ee3cd4d194/src/Pos/Block/Worker.hs#L100), if necessary.\n2.  [Getting leaders](https://github.com/input-output-hk/cardano-sl/blob/a5f7991ff03a1e45114b901bfbbbb1ee3cd4d194/src/Pos/Block/Worker.hs#L110) for the current epoch.\n3.  [Initiation block generation](https://github.com/input-output-hk/cardano-sl/blob/a5f7991ff03a1e45114b901bfbbbb1ee3cd4d194/src/Pos/Block/Worker.hs#L114), if we're the slot leader or we're delegated to\n    do so (optional).\n\n### Logic\n\nThe way in which blocks are processed is specified in the\n[`Pos.Block.Logic`](https://github.com/input-output-hk/cardano-sl/tree/a5f7991ff03a1e45114b901bfbbbb1ee3cd4d194/src/Pos/Block/Logic)\nmodules. Please read about [blocks in Cardano SL](/technical/blocks/) for more\ninfo.\n\n### Block Processing Listeners\n\nListeners for the block processing are defined in\n[`Pos.Block.Network.Listeners`](https://github.com/input-output-hk/cardano-sl/blob/a5f7991ff03a1e45114b901bfbbbb1ee3cd4d194/src/Pos/Block/Network/Listeners.hs)\nmodule.\n\nHandler\n[`handleGetHeaders`](https://github.com/input-output-hk/cardano-sl/blob/fa5d01c08124934f01f2df22f2bc8784198f56c0/src/Pos/Block/Network/Listeners.hs#L46)\nsends out the block headers: at [this\npoint](https://github.com/input-output-hk/cardano-sl/blob/fa5d01c08124934f01f2df22f2bc8784198f56c0/src/Pos/Block/Network/Listeners.hs#L89)\nit receives a message of type `MsgGetHeaders` from the worker, [get the\nheaders](https://github.com/input-output-hk/cardano-sl/blob/fa5d01c08124934f01f2df22f2bc8784198f56c0/src/Pos/Block/Network/Listeners.hs#L95)\nand then, at [this\npoint](https://github.com/input-output-hk/cardano-sl/blob/92cf690dc3be9af29502f493cbf9e8072b56cb67/src/Pos/Block/Network/Logic.hs#L140),\nit sends a response message of type `MsgHeaders` to that worker.\n\nA handler\n[`handleGetBlocks`](https://github.com/input-output-hk/cardano-sl/blob/fa5d01c08124934f01f2df22f2bc8784198f56c0/src/Pos/Block/Network/Listeners.hs#L54)\nsends out blocks. This handler corresponds to\n[`retrieveBlocks`](https://github.com/input-output-hk/cardano-sl/blob/08fa863502baeb399e15f525540050a117430d95/src/Pos/Block/Network/Retrieval.hs#L319)\nfrom main\n[`retrievalWorker`](https://github.com/input-output-hk/cardano-sl/blob/08fa863502baeb399e15f525540050a117430d95/src/Pos/Block/Network/Retrieval.hs#L50).\nThus, it receives a message of type `MsgGetBlocks` from the worker\n[here](https://github.com/input-output-hk/cardano-sl/blob/a5f7991ff03a1e45114b901bfbbbb1ee3cd4d194/src/Pos/Block/Network/Listeners.hs#L60),\n[gets corresponding\nheaders](https://github.com/input-output-hk/cardano-sl/blob/7fdf6c8d0d2f62948f4685b923b7671db137d7b3/src/Pos/Block/Logic/Header.hs#L331),\nand then it sends response message of type `MsgBlock` to that worker\n[here](https://github.com/input-output-hk/cardano-sl/blob/a5f7991ff03a1e45114b901bfbbbb1ee3cd4d194/src/Pos/Block/Network/Listeners.hs#L71).\n\nA handler\n[`handleBlockHeaders`](https://github.com/input-output-hk/cardano-sl/blob/0d28e6133bd6349f5236bcebab39ea6bfc4c2b7e/src/Pos/Block/Network/Listeners.hs#L85)\nsends out block headers for unsolicited use case in a similar way: it receives a\nmessage of\n[`MsgHeaders`](https://github.com/input-output-hk/cardano-sl/blob/0d28e6133bd6349f5236bcebab39ea6bfc4c2b7e/src/Pos/Block/Network/Listeners.hs#L95)\ntype from the worker and handles it.\n\n## Delegation\n\nAnother example is working with delegation messages described above.\n\n### Workers\n\nWorkers for delegation messages are defined in\n[`Pos.Delegation.Worker`](https://github.com/input-output-hk/cardano-sl/blob/0d28e6133bd6349f5236bcebab39ea6bfc4c2b7e/src/Pos/Delegation/Worker.hs)\nmodule.\n\nAll these workers do not send messages to one particular node. They send\nmessages to all neighbors.\n\n### Listeners\n\nListeners for delegation messages are defined in\n[`Pos.Delegation.Listeners`](https://github.com/input-output-hk/cardano-sl/blob/0d28e6133bd6349f5236bcebab39ea6bfc4c2b7e/src/Pos/Delegation/Listeners.hs)\nmodule.\n\n## Security\n\nWorkers for security operations are defined in\n[`Pos.Security.Workers`](https://github.com/input-output-hk/cardano-sl/blob/0d28e6133bd6349f5236bcebab39ea6bfc4c2b7e/src/Pos/Security/Workers.hs)\nmodule.\n\n## Update System\n\nBelow is the list of workers and listeners related to update system.\n\n### Workers\n\nWorkers for update system are defined in\n[`Pos.Update.Worker`](https://github.com/input-output-hk/cardano-sl/blob/73cf4fc35d3cfb068458f2b6982990d08a99906e/src/Pos/Update/Worker.hs) module.\nThe only thing that the update system does is [checking](https://github.com/input-output-hk/cardano-sl/blob/73cf4fc35d3cfb068458f2b6982990d08a99906e/src/Pos/Update/Worker.hs#L27)\nfor a new *approved* update on each slot.\n\n### Listeners\n\nListeners for update system are defined in\n[`Pos.Update.Network.Listeners`](https://github.com/input-output-hk/cardano-sl/blob/22360aa45e5dd82d0c87872d8530217fc3d08f4a/src/Pos/Update/Network/Listeners.hs) module.\n\n`UpdateProposal` relays:\n\n-   `Req` — local node answers to a request about update proposal with the set\n    of votes for/against this proposal.\n-   `Inv` — checks if we need the offered proposal, and records the data if this\n    inventory message is relevant.\n-   `Data` — carries the proposal information along with votes, which is\n    verified and recorded.\n\n`UpdateVote` listeners:\n\n-   `Req` — sends *our* vote to whoever requests it.\n-   `Inv` — checks if we need the offered vote, and records it if relevant.\n-   `Data` — carries a single vote, which is verified and recorded.\n\n## WorkMode and MinWorkMode\n\nA special types called [`WorkMode`](https://github.com/input-output-hk/cardano-sl/blob/73cf4fc35d3cfb068458f2b6982990d08a99906e/src/Pos/WorkMode/Class.hs#L65) and [`MinWorkMode`](https://github.com/input-output-hk/cardano-sl/blob/73cf4fc35d3cfb068458f2b6982990d08a99906e/src/Pos/WorkMode/Class.hs#L107) represent a bunch of constraints\nto perform work for the real world distributed system. You can think about a constraint\nas a *compile-time guarantee* that particular actions can be performed in the\nparticular context. For example, if we define type of some function `f` in the\nterms of **logging** constraint, we definitely know that we can log different\ninfo inside of this function `f`.\n\nAll workers and handlers described above work in the `WorkMode`'s constraints.\n",
        "type": "MarkdownRemark",
        "contentDigest": "3e4e1cc1f0d4f1f8b6bf36e24f8faa5e",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "CSL Application Level",
        "path": "/en/technical/protocols/csl-application-level/",
        "group": "technical-protocols",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-01-application-level.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-01-application-level.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at 721474b760466b888cf26545b52b35989b2162de -->\n\n# CSL Application-Level Messaging\n\nIn this chapter we explore messaging in Cardano SL. The goal of this chapter\nis to explain how all the pieces, such as Time-Warp, Network-Transport, and\nKademlia DHT, click together and make implementing a full Cardano SL node\npossible.\n\n## Message Typeclass and Message Types\n\nWhen reading the source code, you often encounter things like\n[this](https://github.com/input-output-hk/cardano-sl/blob/c8620af754252ebb71b1f5bc369b4f672f46d537/src/Pos/Block/Network/Types.hs#L42)\n\n``` haskell\n-- | 'GetHeaders' message (see protocol specification).\ndata MsgGetHeaders = MsgGetHeaders\n    { -- not guaranteed to be in any particular order\n      mghFrom :: ![HeaderHash]\n    , mghTo   :: !(Maybe HeaderHash)\n    } deriving (Generic, Show, Eq)\n\ninstance Message MsgGetHeaders where\n    messageName _ = varIntMName 4\n    formatMessage _ = \"GetHeaders\"\n```\n\nHow do you read this? First, let's examine the `instance` part. This particular\nsnippet says that the data structure defined by type `MsgGetHeaders` is used as\na message payload. The name of such message is `\"GetHeaders\"`.\n\nIn this particular case, the data structure has two fields: `mghFrom` and\n`mghTo`. Prefixes like `mgh` are used because Haskell puts symbols for record\nfields in the global namespace, so it is programmer's duty to avoid clashes.\n\nIt should be noted that sometimes you see messages that are parametrized with a\ntype variable `ssc`. That is done for the code to be polymorphic with respect to\nthe way we carry out shared seed computation.\n[Here](https://github.com/input-output-hk/cardano-sl/blob/04dc8e4a640a62f0d82633f3a78ab3d8540fd5e6/src/Pos/Block/Network/Types.hs#L65-L67) is an example of a message that sends newest headers first, minding `ssc`.\n\nThe way messages are serialized can be seen in\n[`Pos.Binary.Communication`](https://github.com/input-output-hk/cardano-sl/blob/04dc8e4a640a62f0d82633f3a78ab3d8540fd5e6/src/Pos/Binary/Communication.hs) module.\n\nEvery message type should have an instance of the `Message` typeclass. Please\nsee [Time-Warp-NT guide](/technical/protocols/time-warp-nt/#messaging) for more info.\n\n## Inv/Req/Data and MessagePart\n\nMost of messages in Cardano SL are generalized with `Inv/Req/Data` standard (see\n[`Pos.Communication.Relay`](https://github.com/input-output-hk/cardano-sl/blob/4378a616654ff47faf828ef51ab2f455fa53d3a3/infra/Pos/Communication/Types/Relay.hs#L23)\nmodule). Within this framework we define three data types:\n\n``` haskell\n-- | Inventory message. Can be used to announce the fact that you have\n-- some data.\ndata InvMsg key = InvMsg\n    { imKey :: !key\n    }\n    deriving (Show, Eq)\n\n-- | Request message. Can be used to request data (ideally data which\n-- was previously announced by inventory message).\ndata ReqMsg key = ReqMsg\n    { rmKey :: !key\n    }\n    deriving (Show, Eq)\n\n-- | Data message. Can be used to send actual data.\ndata DataMsg contents = DataMsg\n    { dmContents :: !contents\n    }\n    deriving (Show, Eq)\n```\n\nHere:\n\n-   `key` is a type representing the node identifier.\n-   `contents` is a type representing actual message payload.\n\nTo introduce a new message using `Inv/Req/Data` one should create two types: `key`\ntype and `contents` type for this message, and then implement [`MessagePart`](https://github.com/input-output-hk/cardano-sl/blob/69e896143cb02612514352e286403852264f0ba3/infra/Pos/Communication/MessagePart.hs#L9)\ntypeclass for both of them.\n\n``` haskell\nclass MessagePart a where\n    pMessageName :: Proxy a -> MessageName\n```\n\nHere, `pMessageName` is an identifier for a particular message type.\n\n`Message` typeclass for `InvMsg key`, `ReqMsg key` and `DataMsg contents`\nis automatically derived from the `MessagePart` typeclass for particular\nkey and contents.\n\nPlease see\n[`Pos.Communication.Message`](https://github.com/input-output-hk/cardano-sl/blob/3d695fd804814647f50abe452a81a678aad080cc/src/Pos/Communication/Message.hs)\nmodule for the examples of messages that are using `Inv/Req/Data`.\n\n## Block Exchange Messages\n\n<!-- Updated at 3b657302dede832b908f7ba792a164c83b362712 -->\n\nThis table explains\n[`Pos.Block.Network.Types`](https://github.com/input-output-hk/cardano-sl/blob/309142c899ed898eaa877d959818a06fbbb37db0/src/Pos/Block/Network/Types.hs)\nmodule.\n\n| Message type    | Payload                                                            | Comments                       |\n|-----------------|--------------------------------------------------------------------|--------------------------------|\n| `MsgGetHeaders` | Header hash checkpoints (optional newest hash we're interested in) | Expect newest header first     |\n| `MsgGetBlocks`  | Oldest header hash (newest hash)                                   | Both hashes have to be present |\n| `MsgHeaders`    | Non-empty collection of block headers, newest first                | Polymorphic in `ssc`           |\n| `MsgBlock`      | A single block                                                     | Polymorphic in `ssc`           |\n\nFor more details please see [binary\nprotocols](/technical/protocols/binary-protocols/#block-exchange-messages).\n\n## Message names\n\nAll messages are given custom names, since using full type names would be\nexcessive. Each name is concatenation of one or two encoded `UnsignedVarInt`s.\n\nThis table contains names for all used messages/message parts. These names could also\nbe found in\n[`Pos.Communication.Message`](https://github.com/input-output-hk/cardano-sl/blob/0906d8abc8e4ba8e1366defc3af0f5363e530146/src/Pos/Communication/Message.hs)\nmodule. To distinguish from integers addition, concatenation is denoted here as\n`(++)`.\n\n| Message type     | Message name                    |\n|------------------|---------------------------------|\n| MsgGetHeaders    | `4`                             |\n| MsgHeaders       | `5`                             |\n| MsgGetBlocks     | `6`                             |\n| MsgBlock         | `7`                             |\n| ReqMsg           | `9` ++ `pMessageName key`       |\n| MempoolMsg       | `10` ++ `pMessageName tag`      |\n| DataMsg          | `11` ++ `pMessageName contents` |\n| InvMsg           | `12` ++ `pMessageName key`      |\n\n| Message part type                    | Name |\n|--------------------------------------|------|\n| `TxMsgContents`                      | `0`  |\n| (`UpdateProposal`, \\[`UpdateVote`\\]) | `1`  |\n| `UpdateVote`                         | `2`  |\n\nHence `cardano-sl` is shipped with Update system protocol, and message formats also\ncan be changed. So nodes should be aware of the protocol other peers are\nrunning. Knowing this information, nodes can choose a message name to send to a\npeer. This message name table is sent as\n[`PeerData`](/technical/protocols/time-warp-nt/#bidirectional-сonnections) during\nhandshake before every conversation action between handshake. The exact binary\nformat of `PeerData` is described in [binary protocols](/technical/protocols/binary-protocols/#peer-data)\nchapter.\n\n## Message limits\n\nMessages have maximum length limits. Different types of messages have different limits, as defined in [`Pos.Communication.Limits`](https://github.com/input-output-hk/cardano-sl/blob/895619d7056fe397e9c2a56d88994f167263c397/src/Pos/Communication/Limits.hs) module.\n\n## Delegation Messages\n\n*Delegation* is a feature that allows one stakeholder, called *issuer*, to let\nanother stakeholder, called *delegate*, generate blocks on her behalf.\n\nTo do this, issuer should create *proxy signing key* that allows delegate to\nsign blocks instead of issuer. Any stakeholder can verify that a proxy signing\nkey was actually issued by a specific stakeholder to a specific delegate and\nthat this key is valid at time.\n\nDelegation can be of two types: per-epoch delegation and delegation with\nrevocable long-lived certificates. Per-epoch delegation is called “lightweight”,\nand the long-lived delegation is called “heavyweight”.\n\nPlease read about [Stake Delegation in Cardano SL](/technical/delegation/) for\nmore information.\n\n### Lightweight Delegation\n\n**WARNING: Currently, lightweight delegation is disabled and will be reworked in\n[Shelley release](https://cardanoroadmap.com/), so information below can be outdated.**\n\nLightweight delegation allows delegate to sign blocks instead of issuer for some\nrange of epochs (this range is specified for a signing key created).\n\nTo do this, issuer should send message containing time range, issuer public key,\ndelegate public key and certificate over network. Every node from network\nreceives this message and can check later if the one who generated the block had\nright for it. Lightweight delegation data is stored in memory and gets deleted\nafter some time [defined in configuration file](https://github.com/input-output-hk/cardano-sl/blob/acc53f53a20c7985d6550b4812117e44db08a70b/core/constants.yaml#L55).\n\nThis delegation type can be used to delegate blocks generating right to some\ntrusted node when an issuer knows it will be absent in some time range.\n\n### Heavyweight Delegation\n\nHeavyweight delegation serves two purposes:\n\n1.  Delegate block generation right, like lightweight delegation.\n2.  Share stake with some delegate, thus allowing delegate to take part in\n    [Follow-The-Satoshi](/glossary/#follow-the-satoshi). No real money is transferred; stake of issuer is added\n    to stake of delegate when calculating stakeholders for [Follow-The-Satoshi](/glossary/#follow-the-satoshi).\n\nEvery particular stakeholder can share stake with one and only one delegate. To\nrevoke certificate, a node should create a new certificate and put itself as\nboth issuer and delegate.\n\n### Messages table\n\nThere are delegation-related messages, found in\n[`Pos.Delegation.Types`](https://github.com/input-output-hk/cardano-sl/blob/6e8f8a98fd1537d084341a27a843e08dacc9f1eb/src/Pos/Delegation/Types.hs)\nmodule. The format of delegation messages is described in\n[binary protocols](/technical/protocols/binary-protocols/#delegation)\nchapter.\n\n## Update System Messages\n\nYou can see how system messages are implemented under `WorkMode`\nin [`Pos.Communication.Methods`](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Communication/Methods.hs) module.\n\n| Message type     | Comments                                           |\n|------------------|----------------------------------------------------|\n| `UpdateProposal` | Serialized update proposal, sent to a DHT peers    |\n| `UpdateVote`     | Message, payload of which contains the actual vote |\n       \nPlea see [`sendUpdateProposal`](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Communication/Methods.hs#L47)\nand [`sendVote`](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Communication/Methods.hs#L40)\nfunctions for more details.\n\n# Workers, Listeners and Handlers\n\nYou can think about them as «operating personnel» for messages.\n\n**Workers** initiate messages exchange, so a worker is an *active* communication\npart of Cardano SL. **Listeners** accept messages from the workers and may send\nsome messages as answers, so a listener is a *passive* communication part of\nCardano SL. After a message was received, a listener uses the function called\n**handler** to actually perform the corresponding job. A particular handler is\nused based on the type of received message (as it has been said above, messages\nhave different types).\n\nTo be able to perform necessary actions, all workers and handlers work in the\n`WorkMode`'s constraints (see below).\n\n## Block Processing\n\nBlock exchange messages are described above.\n\n### Block Processing Workers\n\nBlock acquisition is handled in\n[`Pos.Block.Network.Retrieval`](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Block/Network/Retrieval.hs)\nmodule.\n\nThe [`retrievalWorker`](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Block/Network/Retrieval.hs#L50)\nfunction is very important: it's a server that operates on [block retrieval\nqueue](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Block/Network/Retrieval.hs#L84)\nvalidating headers, and these blocks form a proper chain. Thus, at [this\npoint](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Block/Network/Retrieval.hs#L284)\nit sends a message of type `MsgGetBlocks` to the listener, and at [this\npoint](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Block/Network/Retrieval.hs#L345)\nit receives an answer from this listener, a message of `MsgBlock` type.\n\nHere's another example — the [`requestHeaders`](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Block/Network/Logic.hs#L261) function. This function handles\nexpected block headers, tracking them locally. So at [this\npoint](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Block/Network/Logic.hs#L271)\nit sends a message of type `MsgGetHeaders` to the listener, and at [this\npoint](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Block/Network/Logic.hs#L275)\nit receives an answer from that listener, a message of `MsgHeaders` type.\n\nAdditional worker for the block processing is defined in\n[`Pos.Block.Worker`](https://github.com/input-output-hk/cardano-sl/blob/d564b3f5a7e03e086b62c88212870b5ea89f5e8b/src/Pos/Block/Worker.hs)\nmodule. We reuse [`retrievalWorker`] described above and define a\n[well-documented](https://github.com/input-output-hk/cardano-sl/blob/a5f7991ff03a1e45114b901bfbbbb1ee3cd4d194/src/Pos/Block/Worker.hs#L82)\n`blkOnNewSlot` worker. It represents an action which should be done when a new\nslot starts. This action includes the following steps:\n\n1.  [Generating a genesis block](https://github.com/input-output-hk/cardano-sl/blob/a5f7991ff03a1e45114b901bfbbbb1ee3cd4d194/src/Pos/Block/Worker.hs#L100), if necessary.\n2.  [Getting leaders](https://github.com/input-output-hk/cardano-sl/blob/a5f7991ff03a1e45114b901bfbbbb1ee3cd4d194/src/Pos/Block/Worker.hs#L110) for the current epoch.\n3.  [Initiation block generation](https://github.com/input-output-hk/cardano-sl/blob/a5f7991ff03a1e45114b901bfbbbb1ee3cd4d194/src/Pos/Block/Worker.hs#L114), if we're the slot leader or we're delegated to\n    do so (optional).\n\n### Logic\n\nThe way in which blocks are processed is specified in the\n[`Pos.Block.Logic`](https://github.com/input-output-hk/cardano-sl/tree/a5f7991ff03a1e45114b901bfbbbb1ee3cd4d194/src/Pos/Block/Logic)\nmodules. Please read about [blocks in Cardano SL](/technical/blocks/) for more\ninfo.\n\n### Block Processing Listeners\n\nListeners for the block processing are defined in\n[`Pos.Block.Network.Listeners`](https://github.com/input-output-hk/cardano-sl/blob/a5f7991ff03a1e45114b901bfbbbb1ee3cd4d194/src/Pos/Block/Network/Listeners.hs)\nmodule.\n\nHandler\n[`handleGetHeaders`](https://github.com/input-output-hk/cardano-sl/blob/fa5d01c08124934f01f2df22f2bc8784198f56c0/src/Pos/Block/Network/Listeners.hs#L46)\nsends out the block headers: at [this\npoint](https://github.com/input-output-hk/cardano-sl/blob/fa5d01c08124934f01f2df22f2bc8784198f56c0/src/Pos/Block/Network/Listeners.hs#L89)\nit receives a message of type `MsgGetHeaders` from the worker, [get the\nheaders](https://github.com/input-output-hk/cardano-sl/blob/fa5d01c08124934f01f2df22f2bc8784198f56c0/src/Pos/Block/Network/Listeners.hs#L95)\nand then, at [this\npoint](https://github.com/input-output-hk/cardano-sl/blob/92cf690dc3be9af29502f493cbf9e8072b56cb67/src/Pos/Block/Network/Logic.hs#L140),\nit sends a response message of type `MsgHeaders` to that worker.\n\nA handler\n[`handleGetBlocks`](https://github.com/input-output-hk/cardano-sl/blob/fa5d01c08124934f01f2df22f2bc8784198f56c0/src/Pos/Block/Network/Listeners.hs#L54)\nsends out blocks. This handler corresponds to\n[`retrieveBlocks`](https://github.com/input-output-hk/cardano-sl/blob/08fa863502baeb399e15f525540050a117430d95/src/Pos/Block/Network/Retrieval.hs#L319)\nfrom main\n[`retrievalWorker`](https://github.com/input-output-hk/cardano-sl/blob/08fa863502baeb399e15f525540050a117430d95/src/Pos/Block/Network/Retrieval.hs#L50).\nThus, it receives a message of type `MsgGetBlocks` from the worker\n[here](https://github.com/input-output-hk/cardano-sl/blob/a5f7991ff03a1e45114b901bfbbbb1ee3cd4d194/src/Pos/Block/Network/Listeners.hs#L60),\n[gets corresponding\nheaders](https://github.com/input-output-hk/cardano-sl/blob/7fdf6c8d0d2f62948f4685b923b7671db137d7b3/src/Pos/Block/Logic/Header.hs#L331),\nand then it sends response message of type `MsgBlock` to that worker\n[here](https://github.com/input-output-hk/cardano-sl/blob/a5f7991ff03a1e45114b901bfbbbb1ee3cd4d194/src/Pos/Block/Network/Listeners.hs#L71).\n\nA handler\n[`handleBlockHeaders`](https://github.com/input-output-hk/cardano-sl/blob/0d28e6133bd6349f5236bcebab39ea6bfc4c2b7e/src/Pos/Block/Network/Listeners.hs#L85)\nsends out block headers for unsolicited use case in a similar way: it receives a\nmessage of\n[`MsgHeaders`](https://github.com/input-output-hk/cardano-sl/blob/0d28e6133bd6349f5236bcebab39ea6bfc4c2b7e/src/Pos/Block/Network/Listeners.hs#L95)\ntype from the worker and handles it.\n\n## Delegation\n\nAnother example is working with delegation messages described above.\n\n### Workers\n\nWorkers for delegation messages are defined in\n[`Pos.Delegation.Worker`](https://github.com/input-output-hk/cardano-sl/blob/0d28e6133bd6349f5236bcebab39ea6bfc4c2b7e/src/Pos/Delegation/Worker.hs)\nmodule.\n\nAll these workers do not send messages to one particular node. They send\nmessages to all neighbors.\n\n### Listeners\n\nListeners for delegation messages are defined in\n[`Pos.Delegation.Listeners`](https://github.com/input-output-hk/cardano-sl/blob/0d28e6133bd6349f5236bcebab39ea6bfc4c2b7e/src/Pos/Delegation/Listeners.hs)\nmodule.\n\n## Security\n\nWorkers for security operations are defined in\n[`Pos.Security.Workers`](https://github.com/input-output-hk/cardano-sl/blob/0d28e6133bd6349f5236bcebab39ea6bfc4c2b7e/src/Pos/Security/Workers.hs)\nmodule.\n\n## Update System\n\nBelow is the list of workers and listeners related to update system.\n\n### Workers\n\nWorkers for update system are defined in\n[`Pos.Update.Worker`](https://github.com/input-output-hk/cardano-sl/blob/73cf4fc35d3cfb068458f2b6982990d08a99906e/src/Pos/Update/Worker.hs) module.\nThe only thing that the update system does is [checking](https://github.com/input-output-hk/cardano-sl/blob/73cf4fc35d3cfb068458f2b6982990d08a99906e/src/Pos/Update/Worker.hs#L27)\nfor a new *approved* update on each slot.\n\n### Listeners\n\nListeners for update system are defined in\n[`Pos.Update.Network.Listeners`](https://github.com/input-output-hk/cardano-sl/blob/22360aa45e5dd82d0c87872d8530217fc3d08f4a/src/Pos/Update/Network/Listeners.hs) module.\n\n`UpdateProposal` relays:\n\n-   `Req` — local node answers to a request about update proposal with the set\n    of votes for/against this proposal.\n-   `Inv` — checks if we need the offered proposal, and records the data if this\n    inventory message is relevant.\n-   `Data` — carries the proposal information along with votes, which is\n    verified and recorded.\n\n`UpdateVote` listeners:\n\n-   `Req` — sends *our* vote to whoever requests it.\n-   `Inv` — checks if we need the offered vote, and records it if relevant.\n-   `Data` — carries a single vote, which is verified and recorded.\n\n## WorkMode and MinWorkMode\n\nA special types called [`WorkMode`](https://github.com/input-output-hk/cardano-sl/blob/73cf4fc35d3cfb068458f2b6982990d08a99906e/src/Pos/WorkMode/Class.hs#L65) and [`MinWorkMode`](https://github.com/input-output-hk/cardano-sl/blob/73cf4fc35d3cfb068458f2b6982990d08a99906e/src/Pos/WorkMode/Class.hs#L107) represent a bunch of constraints\nto perform work for the real world distributed system. You can think about a constraint\nas a *compile-time guarantee* that particular actions can be performed in the\nparticular context. For example, if we define type of some function `f` in the\nterms of **logging** constraint, we definitely know that we can log different\ninfo inside of this function `f`.\n\nAll workers and handlers described above work in the `WorkMode`'s constraints.\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-01-application-level.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-01-application-level.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-01-application-level.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-01-application-level.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: CSL 应用层消息\npath: /cn/technical/protocols/csl-application-level/\ngroup: protocols\nlanguage: cn\nlabel: docs\n---\n<!-- Reviewed at 721474b760466b888cf26545b52b35989b2162de -->\n\n# CSL 应用层消息\n\n在本章中，我们探讨卡尔达诺结算层的消息传递。本章的目的是如何将所有的部分（如 Time-Warp, Network-Transport, 和\nKademlia DHT）组合在一起，实现完整的卡尔达诺结算层节点。\n\n\n## 消息类型类和消息类型\n\n阅读源代码时，你经常会遇到[这样](https://github.com/input-output-hk/cardano-sl/blob/c8620af754252ebb71b1f5bc369b4f672f46d537/src/Pos/Block/Network/Types.hs#L42)的东西：\n\n\n``` haskell\n-- | 'GetHeaders' message (see protocol specification).\ndata MsgGetHeaders = MsgGetHeaders\n    { -- not guaranteed to be in any particular order\n      mghFrom :: ![HeaderHash]\n    , mghTo   :: !(Maybe HeaderHash)\n    } deriving (Generic, Show, Eq)\n\ninstance Message MsgGetHeaders where\n    messageName _ = varIntMName 4\n    formatMessage _ = \"GetHeaders\"\n```\n\n\n怎么阅读这些？首先，我们来看看这个 `instance` 部分。这个特定的片段是说，有类型定义的数据结构 `MsgGetHeaders` 被当做消息有效载荷。这样的消息的名字是 `\"GetHeaders\"`。\n\n在这个特定的案例中，数据结构有两个字段：`mghFrom` 和 `mghTo`。使用 `mgh` 这样的前缀，是因为 Haskell 把记录字段的符号放在全局名字空间中，所有程序员有责任避免冲突。\n\n应该指出的是，有时你会看到使用类型变量 `ssc` 进行参数化的消息。这是为了使与我们进行共享种子计算的方式在代码上是多态的。[这里](https://github.com/input-output-hk/cardano-sl/blob/04dc8e4a640a62f0d82633f3a78ab3d8540fd5e6/src/Pos/Block/Network/Types.hs#L65-L67)是一个消息的例子，首先发送最新的头部，记作 `ssc`。\n\n消息序列化的方式可以在 [`Pos.Binary.Communication`](https://github.com/input-output-hk/cardano-sl/blob/04dc8e4a640a62f0d82633f3a78ab3d8540fd5e6/src/Pos/Binary/Communication.hs) 模块看到。\n\n每个消息类型都应该有一个 `Message` 类型类的实例。请参阅 [Time-Warp-NT 指南](/technical/protocols/time-warp-nt/#messaging)了解更多信息。\n\n\n## Inv/Req/Data 和 MessagePart\n\n卡尔达诺结算层的大部分消息都是 `Inv/Req/Data` 标准化的（参见 [`Pos.Communication.Relay`](https://github.com/input-output-hk/cardano-sl/blob/4378a616654ff47faf828ef51ab2f455fa53d3a3/infra/Pos/Communication/Types/Relay.hs#L23) 模块）。在这个框架内，我们定义了三种数据类型：\n\n``` haskell\n-- | Inventory message. Can be used to announce the fact that you have\n-- some data.\ndata InvMsg key = InvMsg\n    { imKey :: !key\n    }\n    deriving (Show, Eq)\n\n-- | Request message. Can be used to request data (ideally data which\n-- was previously announced by inventory message).\ndata ReqMsg key = ReqMsg\n    { rmKey :: !key\n    }\n    deriving (Show, Eq)\n\n-- | Data message. Can be used to send actual data.\ndata DataMsg contents = DataMsg\n    { dmContents :: !contents\n    }\n    deriving (Show, Eq)\n```\n\n这里：\n\n- `key` 表示节点标示符的类型。\n- `contents` 表示实际消息有效载荷的类型。\n\n为了通过 `Inv/Req/Data` 引入新消息，应该创建两种类型：这个消息的 `key` 和 `contents`，然后为它们都实现 [`MessagePart`](https://github.com/input-output-hk/cardano-sl/blob/69e896143cb02612514352e286403852264f0ba3/infra/Pos/Communication/MessagePart.hs#L9)。\n\n``` haskell\nclass MessagePart a where\n    pMessageName :: Proxy a -> MessageName\n```\n\n这里，`pMessageName` 是一个特定消息类型的标识符。\n\n`InvMsg key` 的 `Message` 的类型类，`ReqMsg key` 和 `DataMsg contents` 自动从 `MessagePart` 类型类派生出特定的键和内容。\n\n请参阅 [`Pos.Communication.Message`](https://github.com/input-output-hk/cardano-sl/blob/3d695fd804814647f50abe452a81a678aad080cc/src/Pos/Communication/Message.hs) 模块了解使用 `Inv/Req/Data` 的消息例子。\n\n\n## 区块交换信息\n\n<!-- Updated at 3b657302dede832b908f7ba792a164c83b362712 -->\n\n该表格解释了 [`Pos.Block.Network.Types`](https://github.com/input-output-hk/cardano-sl/blob/309142c899ed898eaa877d959818a06fbbb37db0/src/Pos/Block/Network/Types.hs) 模块。\n\n| Message type    | Payload                                                            | Comments                       |\n|-----------------|--------------------------------------------------------------------|--------------------------------|\n| `MsgGetHeaders` | Header hash checkpoints (optional newest hash we're interested in) | Expect newest header first     |\n| `MsgGetBlocks`  | Oldest header hash (newest hash)                                   | Both hashes have to be present |\n| `MsgHeaders`    | Non-empty collection of block headers, newest first                | Polymorphic in `ssc`           |\n| `MsgBlock`      | A single block                                                     | Polymorphic in `ssc`           |\n\n有关详细信息，请参阅[二进制协议](/technical/protocols/binary-protocols/#block-exchange-messages)。\n\n## 消息名称\n\n所有消息都有给定的名字，因为使用完整的类型名称超过了限度。每个名称是一个或两个 `UnsignedVarInt` 编码的串联。\n\n该表包含所有使用的消息部分的名称。这些名字也可以在 [`Pos.Communication.Message`](https://github.com/input-output-hk/cardano-sl/blob/0906d8abc8e4ba8e1366defc3af0f5363e530146/src/Pos/Communication/Message.hs) 模块中找到。为了区分整数加法，连接在这里表示为 `(++)`\n\n| Message type     | Message name                    |\n|------------------|---------------------------------|\n| MsgGetHeaders    | `4`                             |\n| MsgHeaders       | `5`                             |\n| MsgGetBlocks     | `6`                             |\n| MsgBlock         | `7`                             |\n| ReqMsg           | `9` ++ `pMessageName key`       |\n| MempoolMsg       | `10` ++ `pMessageName tag`      |\n| DataMsg          | `11` ++ `pMessageName contents` |\n| InvMsg           | `12` ++ `pMessageName key`      |\n\n| Message part type                    | Name |\n|--------------------------------------|------|\n| `TxMsgContents`                      | `0`  |\n| (`UpdateProposal`, \\[`UpdateVote`\\]) | `1`  |\n| `UpdateVote`                         | `2`  |\n\n因为 `cardano-sl` 随附系统更新协议，消息格式也可以改变。所以节点应该知道其他节点正在运行的协议。了解这些信息，节点可以选择一个消息名称发送给对等体。该消息表名 [`PeerData`](/technical/protocols/time-warp-nt/#bidirectional-сonnections) 会在握手期间的每个对话动作之前被发送。[二进制协议](/technical/protocols/binary-protocols/#peer-data)章节中 `PeerData` 描述了确切的二进制格式。\n\n## 消息限制\n\n消息具有最大长度限制。不同类型的消息具有不同的限制，在 [`Pos.Communication.Limits`](https://github.com/input-output-hk/cardano-sl/blob/895619d7056fe397e9c2a56d88994f167263c397/src/Pos/Communication/Limits.hs) 模块中有定义。 \n\n## 委派消息\n\n委派是这样一个功能，它允许一个叫做 *issuer* 的权益所有人让另一个权益所有人（称为委托人）来代表它来生成块。\n\n为此，issuer 应该创建代理签名密钥，允许委托人签署代替 issuer 的区块。任何权益所有人都可以验证代理签名密钥实际上是由特定权益所有人通过特定代理发布的，并且该密钥在某个时间段是有效的。\n\n委派可以有两种类型：per-epoch 委派和可撤销的长期证书的授权。每个 Per-epoch 委派称为『轻量级』，而长期的委派称为『重量级』。\n\n请阅读『[卡尔达诺结算层的权益委派](/technical/delegation/)』获取更多信息。\n\n\n### 轻量级委派\n\n**警告：目前，轻量级委派已被禁用，并将在 [Shelley 版本](https://cardanoroadmap.com/)进行重新整理，因此下面的信息可能已过时**。\n\n轻量级委派允许委派人替代 issuer 在一定范围内的 epochs 生成区块（这个范围是签名密钥指定的）\n\n为此，issuer 应该通过网络发送包含时间范围的消息，issuer 密钥，委派公钥和证书。来自网络的每个节点都会收到这条消息，并可以稍后检查生成该块的人是否合适。轻量级委派数据存储在内存中，在一段时间后会被删除（[在配置文件中定义](https://github.com/input-output-hk/cardano-sl/blob/acc53f53a20c7985d6550b4812117e44db08a70b/core/constants.yaml#L55))。\n\n这种授权类型可以用于在发行人知道某个时间范围内不存在的情况下将生成区块的权利委托给某个可信任的节点。\n\n### 重量级委派\n\n重量级委派有两个目的：\n\n1. 就像轻量级委派那样，委派生成区块的权利。\n2. 与一些代表分享股份，从而允许代表参与[追随中本聪算法](/glossary/#follow-the-satoshi)。没有真正的金钱转移；在为[追随中本聪算法](/glossary/#follow-the-satoshi)计算权益所有人时，issuer 的权益被加到代表的权益中。\n\n每一个特定的权益所有人最多能与一个代表分享权益。为了撤销证书，节点应该创建一个新的证书，并将其自身同时作为颁发者和委托者。\n\n### 消息列表\n\n在 [`Pos.Delegation.Types`](https://github.com/input-output-hk/cardano-sl/blob/6e8f8a98fd1537d084341a27a843e08dacc9f1eb/src/Pos/Delegation/Types.hs) 模块中有与委托相关的消息。授权消息的格式在[二进制协议](/technical/protocols/binary-protocols/#delegation)章节有描述。\n\n## 更新系统消息\n\n你可以在 [`Pos.Communication.Methods`](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Communication/Methods.hs) 模块的 `WorkMode` 看到消息系统是怎么实现的。\n\n| Message type     | Comments                                           |\n|------------------|----------------------------------------------------|\n| `UpdateProposal` | Serialized update proposal, sent to a DHT peers    |\n| `UpdateVote`     | Message, payload of which contains the actual vote |\n       \n\n请参阅 [`sendUpdateProposal`](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Communication/Methods.hs#L47) 和 [`sendVote`](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Communication/Methods.hs#L40) 功能的更多细节。\n\n# Workers, Listeners 和 Handlers\n\n你可以把它们视为消息的『操作人员』\n\n**Workers** 发起消息交换，因此 worker 是卡尔达诺结算层的积极通信部分。**Listeners** 可以从 workers 接收信息，且可能会发送一些消息作为回复。因此 listener 是卡尔达诺结算层的被动通信部分，收到信息后，listener 使用一种叫做 **handler** 的函数来实际执行相应的作业。根据收到的信息的类型使用特定的处理程序（如上所述，消息具有不同的类型）。\n\n为了能够执行必要的操作，所有的 workers 和 handlers 在 `WorkMode` 进行工作（见下文）。\n\n\n## 区块处理\n\n上面描述了区块交换信息。\n\n### 区块处理 Workers\n\n获取块在 [`Pos.Block.Network.Retrieval`](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Block/Network/Retrieval.hs) 模块中进行处理。\n\n这个 [`retrievalWorker`](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Block/Network/Retrieval.hs#L50) 非常重要：它是一个在[区块检索队列](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Block/Network/Retrieval.hs#L84)上验证头文件的服务器，这些区块形成一个合适的链。它发送一个 `MsgGetBlocks` 类型的信息给 listener，[此时](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Block/Network/Retrieval.hs#L284)它从这个 listener 接收一个类型为 `MsgBlock` 信息的回答。\n\n这是另一个例子 - [`requestHeaders`](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Block/Network/Logic.hs#L261) 功能。这个函数处理预期的区块头，并在本地跟踪它们。在[这个地方](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Block/Network/Logic.hs#L271)，它向 listener 发送一种类型为 `MsgGetHeaders` 的信息，而[在这](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Block/Network/Logic.hs#L275)，它从这个 listener 接收一个类型为 `MsgHeaders` 的回答。\n\n[`Pos.Block.Worker`](https://github.com/input-output-hk/cardano-sl/blob/d564b3f5a7e03e086b62c88212870b5ea89f5e8b/src/Pos/Block/Worker.hs) 模块中定义了用于区块处理的其他 worker。我们重用了上述的 `retrievalWorker`（TODO：and define a\n[well-documented](https://github.com/input-output-hk/cardano-sl/blob/a5f7991ff03a1e45114b901bfbbbb1ee3cd4d194/src/Pos/Block/Worker.hs#L82)），并记载了一个记录良好的 `blkOnNewSlot` worker。它代表了一个新 slot 开始时应该完成的操作，这个操作包括以下步骤：\n\n1. 如有必要，生成一个[创始区块](https://github.com/input-output-hk/cardano-sl/blob/a5f7991ff03a1e45114b901bfbbbb1ee3cd4d194/src/Pos/Block/Worker.hs#L100)。\n2. 获取当前 epoch 的 leader。\n3. 如果我们是 slot 领导者，或者我们委派这么做，[生成起始区块](https://github.com/input-output-hk/cardano-sl/blob/a5f7991ff03a1e45114b901bfbbbb1ee3cd4d194/src/Pos/Block/Worker.hs#L114)（可选）。\n\n### 逻辑\n\n处理区块的方式在 [`Pos.Block.Logic`](https://github.com/input-output-hk/cardano-sl/tree/a5f7991ff03a1e45114b901bfbbbb1ee3cd4d194/src/Pos/Block/Logic) 模块中定义。请阅读[卡尔达诺结算层中的区块](/technical/blocks/)获取关于区块的更多信息。\n\n### 区块处理 Listeners\n\n区块处理的 Listeners 在 [`Pos.Block.Network.Listeners`](https://github.com/input-output-hk/cardano-sl/blob/a5f7991ff03a1e45114b901bfbbbb1ee3cd4d194/src/Pos/Block/Network/Listeners.hs) 模块中定义。\n\n处理程序 [`handleGetHeaders`](https://github.com/input-output-hk/cardano-sl/blob/fa5d01c08124934f01f2df22f2bc8784198f56c0/src/Pos/Block/Network/Listeners.hs#L46) 发送区块头部：[在这](https://github.com/input-output-hk/cardano-sl/blob/fa5d01c08124934f01f2df22f2bc8784198f56c0/src/Pos/Block/Network/Listeners.hs#L89)，它从 worker 收到一个 `MsgGetHeaders` 类型的信息，[获取头部](https://github.com/input-output-hk/cardano-sl/blob/fa5d01c08124934f01f2df22f2bc8784198f56c0/src/Pos/Block/Network/Listeners.hs#L95)，然后[在这](https://github.com/input-output-hk/cardano-sl/blob/92cf690dc3be9af29502f493cbf9e8072b56cb67/src/Pos/Block/Network/Logic.hs#L140)，它向 worker 发送 `MsgHeaders` 类型的回复信息。\n\n[`handleGetBlocks`](https://github.com/input-output-hk/cardano-sl/blob/fa5d01c08124934f01f2df22f2bc8784198f56c0/src/Pos/Block/Network/Listeners.hs#L54) 处理程序发送区块。这个处理程序对应 [`retrievalWorker`](https://github.com/input-output-hk/cardano-sl/blob/08fa863502baeb399e15f525540050a117430d95/src/Pos/Block/Network/Retrieval.hs#L50) 的 [`retrieveBlocks`](https://github.com/input-output-hk/cardano-sl/blob/08fa863502baeb399e15f525540050a117430d95/src/Pos/Block/Network/Retrieval.hs#L319)，因此，它从 worker [这里](https://github.com/input-output-hk/cardano-sl/blob/a5f7991ff03a1e45114b901bfbbbb1ee3cd4d194/src/Pos/Block/Network/Listeners.hs#L60)接收 `MsgGetBlocks` 类型的信息，[获得对应的头部](https://github.com/input-output-hk/cardano-sl/blob/7fdf6c8d0d2f62948f4685b923b7671db137d7b3/src/Pos/Block/Logic/Header.hs#L331) ，然后[在这里](https://github.com/input-output-hk/cardano-sl/blob/a5f7991ff03a1e45114b901bfbbbb1ee3cd4d194/src/Pos/Block/Network/Listeners.hs#L71)向这个 worker 发送 `MsgBlock` 类型的响应信息。\n\n处理程序 [`handleBlockHeaders`](https://github.com/input-output-hk/cardano-sl/blob/0d28e6133bd6349f5236bcebab39ea6bfc4c2b7e/src/Pos/Block/Network/Listeners.hs#L85) 以类似的方式发送未经请求的用例的区块头部：它接收来自 worker 的 [`MsgHeaders`](https://github.com/input-output-hk/cardano-sl/blob/0d28e6133bd6349f5236bcebab39ea6bfc4c2b7e/src/Pos/Block/Network/Listeners.hs#L95) 类型，并处理它。\n\n## 委派\n\n另一个例子是使用上述的委派信息\n\n### Workers\n\n委派信息的 Worker 在 [`Pos.Delegation.Worker`](https://github.com/input-output-hk/cardano-sl/blob/0d28e6133bd6349f5236bcebab39ea6bfc4c2b7e/src/Pos/Delegation/Worker.hs) 模块中定义。\n\n所有这些 workers 不会发送信息到一个特定的节点。他们发送信息给所有的邻节点。\n\n### Listeners\n\n委派消息的 Listeners 在 [`Pos.Delegation.Listeners`](https://github.com/input-output-hk/cardano-sl/blob/0d28e6133bd6349f5236bcebab39ea6bfc4c2b7e/src/Pos/Delegation/Listeners.hs) 模块中定义。\n\n## 安全\n\n进行安全操作的 workers 在 [`Pos.Security.Workers`](https://github.com/input-output-hk/cardano-sl/blob/0d28e6133bd6349f5236bcebab39ea6bfc4c2b7e/src/Pos/Security/Workers.hs) 模块中定义。\n\n## 更新系统\n\n以下是与更新系统相关的工作人员和听众列表。\n\n\n### Workers\n\n更新系统的 worker 在 [`Pos.Update.Worker`](https://github.com/input-output-hk/cardano-sl/blob/73cf4fc35d3cfb068458f2b6982990d08a99906e/src/Pos/Update/Worker.hs) 模块中定义。更新系统所做的唯一事情是在每个 slot 上[检查](https://github.com/input-output-hk/cardano-sl/blob/73cf4fc35d3cfb068458f2b6982990d08a99906e/src/Pos/Update/Worker.hs#L27)新的已批准更新。\n\n### Listeners\n\n更新系统的 Listeners 在 [`Pos.Update.Network.Listeners`](https://github.com/input-output-hk/cardano-sl/blob/22360aa45e5dd82d0c87872d8530217fc3d08f4a/src/Pos/Update/Network/Listeners.hs) 模块中定义。\n\n\n`UpdateProposal` 中继器:\n\n-   `Req` — 本地节点回答关于更新提案的请求，并针对此提案进行一组投票。\n-   `Inv` — 检查我们是否需要提供的提案，并记录数据是否与此库存消息相关。\n-   `Data` — 将提案信息与投票一起进行验证和记录。\n\n\n`UpdateVote` listeners:\n\n-   `Req` — 把*我们*的投票发给任何人。\n-   `Inv` — 检查我们是否需要提供的投票，并记录相关的。\n-   `Data` — 进行一次投票，核实和记录。\n\n\n## WorkMode 和 MinWorkMode\n\n有一个特殊的类型称为 [`WorkMode`](https://github.com/input-output-hk/cardano-sl/blob/73cf4fc35d3cfb068458f2b6982990d08a99906e/src/Pos/WorkMode/Class.hs#L65)，[`MinWorkMode`](https://github.com/input-output-hk/cardano-sl/blob/73cf4fc35d3cfb068458f2b6982990d08a99906e/src/Pos/WorkMode/Class.hs#L107)  表示一系列执行真实世界的分布式系统的工作的约束条件。你可以把约束看做*运行时保证*，它可以在特定的上下文执行特定的操作。例如，如果我们根据 **logging** 约束定义一些函数 `f` 的类型，我们肯定知道我们在这个函数 `f` 里面记录不同的信息。\n\n上面描述的所有 workers 和 handlers 都受 `WorkMode` 的限制。\n\n",
        "type": "MarkdownRemark",
        "contentDigest": "461a0f2752528c113430722d1c2362cb",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "CSL 应用层消息",
        "path": "/cn/technical/protocols/csl-application-level/",
        "group": "protocols",
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-01-application-level.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-01-application-level.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at 721474b760466b888cf26545b52b35989b2162de -->\n\n# CSL 应用层消息\n\n在本章中，我们探讨卡尔达诺结算层的消息传递。本章的目的是如何将所有的部分（如 Time-Warp, Network-Transport, 和\nKademlia DHT）组合在一起，实现完整的卡尔达诺结算层节点。\n\n\n## 消息类型类和消息类型\n\n阅读源代码时，你经常会遇到[这样](https://github.com/input-output-hk/cardano-sl/blob/c8620af754252ebb71b1f5bc369b4f672f46d537/src/Pos/Block/Network/Types.hs#L42)的东西：\n\n\n``` haskell\n-- | 'GetHeaders' message (see protocol specification).\ndata MsgGetHeaders = MsgGetHeaders\n    { -- not guaranteed to be in any particular order\n      mghFrom :: ![HeaderHash]\n    , mghTo   :: !(Maybe HeaderHash)\n    } deriving (Generic, Show, Eq)\n\ninstance Message MsgGetHeaders where\n    messageName _ = varIntMName 4\n    formatMessage _ = \"GetHeaders\"\n```\n\n\n怎么阅读这些？首先，我们来看看这个 `instance` 部分。这个特定的片段是说，有类型定义的数据结构 `MsgGetHeaders` 被当做消息有效载荷。这样的消息的名字是 `\"GetHeaders\"`。\n\n在这个特定的案例中，数据结构有两个字段：`mghFrom` 和 `mghTo`。使用 `mgh` 这样的前缀，是因为 Haskell 把记录字段的符号放在全局名字空间中，所有程序员有责任避免冲突。\n\n应该指出的是，有时你会看到使用类型变量 `ssc` 进行参数化的消息。这是为了使与我们进行共享种子计算的方式在代码上是多态的。[这里](https://github.com/input-output-hk/cardano-sl/blob/04dc8e4a640a62f0d82633f3a78ab3d8540fd5e6/src/Pos/Block/Network/Types.hs#L65-L67)是一个消息的例子，首先发送最新的头部，记作 `ssc`。\n\n消息序列化的方式可以在 [`Pos.Binary.Communication`](https://github.com/input-output-hk/cardano-sl/blob/04dc8e4a640a62f0d82633f3a78ab3d8540fd5e6/src/Pos/Binary/Communication.hs) 模块看到。\n\n每个消息类型都应该有一个 `Message` 类型类的实例。请参阅 [Time-Warp-NT 指南](/technical/protocols/time-warp-nt/#messaging)了解更多信息。\n\n\n## Inv/Req/Data 和 MessagePart\n\n卡尔达诺结算层的大部分消息都是 `Inv/Req/Data` 标准化的（参见 [`Pos.Communication.Relay`](https://github.com/input-output-hk/cardano-sl/blob/4378a616654ff47faf828ef51ab2f455fa53d3a3/infra/Pos/Communication/Types/Relay.hs#L23) 模块）。在这个框架内，我们定义了三种数据类型：\n\n``` haskell\n-- | Inventory message. Can be used to announce the fact that you have\n-- some data.\ndata InvMsg key = InvMsg\n    { imKey :: !key\n    }\n    deriving (Show, Eq)\n\n-- | Request message. Can be used to request data (ideally data which\n-- was previously announced by inventory message).\ndata ReqMsg key = ReqMsg\n    { rmKey :: !key\n    }\n    deriving (Show, Eq)\n\n-- | Data message. Can be used to send actual data.\ndata DataMsg contents = DataMsg\n    { dmContents :: !contents\n    }\n    deriving (Show, Eq)\n```\n\n这里：\n\n- `key` 表示节点标示符的类型。\n- `contents` 表示实际消息有效载荷的类型。\n\n为了通过 `Inv/Req/Data` 引入新消息，应该创建两种类型：这个消息的 `key` 和 `contents`，然后为它们都实现 [`MessagePart`](https://github.com/input-output-hk/cardano-sl/blob/69e896143cb02612514352e286403852264f0ba3/infra/Pos/Communication/MessagePart.hs#L9)。\n\n``` haskell\nclass MessagePart a where\n    pMessageName :: Proxy a -> MessageName\n```\n\n这里，`pMessageName` 是一个特定消息类型的标识符。\n\n`InvMsg key` 的 `Message` 的类型类，`ReqMsg key` 和 `DataMsg contents` 自动从 `MessagePart` 类型类派生出特定的键和内容。\n\n请参阅 [`Pos.Communication.Message`](https://github.com/input-output-hk/cardano-sl/blob/3d695fd804814647f50abe452a81a678aad080cc/src/Pos/Communication/Message.hs) 模块了解使用 `Inv/Req/Data` 的消息例子。\n\n\n## 区块交换信息\n\n<!-- Updated at 3b657302dede832b908f7ba792a164c83b362712 -->\n\n该表格解释了 [`Pos.Block.Network.Types`](https://github.com/input-output-hk/cardano-sl/blob/309142c899ed898eaa877d959818a06fbbb37db0/src/Pos/Block/Network/Types.hs) 模块。\n\n| Message type    | Payload                                                            | Comments                       |\n|-----------------|--------------------------------------------------------------------|--------------------------------|\n| `MsgGetHeaders` | Header hash checkpoints (optional newest hash we're interested in) | Expect newest header first     |\n| `MsgGetBlocks`  | Oldest header hash (newest hash)                                   | Both hashes have to be present |\n| `MsgHeaders`    | Non-empty collection of block headers, newest first                | Polymorphic in `ssc`           |\n| `MsgBlock`      | A single block                                                     | Polymorphic in `ssc`           |\n\n有关详细信息，请参阅[二进制协议](/technical/protocols/binary-protocols/#block-exchange-messages)。\n\n## 消息名称\n\n所有消息都有给定的名字，因为使用完整的类型名称超过了限度。每个名称是一个或两个 `UnsignedVarInt` 编码的串联。\n\n该表包含所有使用的消息部分的名称。这些名字也可以在 [`Pos.Communication.Message`](https://github.com/input-output-hk/cardano-sl/blob/0906d8abc8e4ba8e1366defc3af0f5363e530146/src/Pos/Communication/Message.hs) 模块中找到。为了区分整数加法，连接在这里表示为 `(++)`\n\n| Message type     | Message name                    |\n|------------------|---------------------------------|\n| MsgGetHeaders    | `4`                             |\n| MsgHeaders       | `5`                             |\n| MsgGetBlocks     | `6`                             |\n| MsgBlock         | `7`                             |\n| ReqMsg           | `9` ++ `pMessageName key`       |\n| MempoolMsg       | `10` ++ `pMessageName tag`      |\n| DataMsg          | `11` ++ `pMessageName contents` |\n| InvMsg           | `12` ++ `pMessageName key`      |\n\n| Message part type                    | Name |\n|--------------------------------------|------|\n| `TxMsgContents`                      | `0`  |\n| (`UpdateProposal`, \\[`UpdateVote`\\]) | `1`  |\n| `UpdateVote`                         | `2`  |\n\n因为 `cardano-sl` 随附系统更新协议，消息格式也可以改变。所以节点应该知道其他节点正在运行的协议。了解这些信息，节点可以选择一个消息名称发送给对等体。该消息表名 [`PeerData`](/technical/protocols/time-warp-nt/#bidirectional-сonnections) 会在握手期间的每个对话动作之前被发送。[二进制协议](/technical/protocols/binary-protocols/#peer-data)章节中 `PeerData` 描述了确切的二进制格式。\n\n## 消息限制\n\n消息具有最大长度限制。不同类型的消息具有不同的限制，在 [`Pos.Communication.Limits`](https://github.com/input-output-hk/cardano-sl/blob/895619d7056fe397e9c2a56d88994f167263c397/src/Pos/Communication/Limits.hs) 模块中有定义。 \n\n## 委派消息\n\n委派是这样一个功能，它允许一个叫做 *issuer* 的权益所有人让另一个权益所有人（称为委托人）来代表它来生成块。\n\n为此，issuer 应该创建代理签名密钥，允许委托人签署代替 issuer 的区块。任何权益所有人都可以验证代理签名密钥实际上是由特定权益所有人通过特定代理发布的，并且该密钥在某个时间段是有效的。\n\n委派可以有两种类型：per-epoch 委派和可撤销的长期证书的授权。每个 Per-epoch 委派称为『轻量级』，而长期的委派称为『重量级』。\n\n请阅读『[卡尔达诺结算层的权益委派](/technical/delegation/)』获取更多信息。\n\n\n### 轻量级委派\n\n**警告：目前，轻量级委派已被禁用，并将在 [Shelley 版本](https://cardanoroadmap.com/)进行重新整理，因此下面的信息可能已过时**。\n\n轻量级委派允许委派人替代 issuer 在一定范围内的 epochs 生成区块（这个范围是签名密钥指定的）\n\n为此，issuer 应该通过网络发送包含时间范围的消息，issuer 密钥，委派公钥和证书。来自网络的每个节点都会收到这条消息，并可以稍后检查生成该块的人是否合适。轻量级委派数据存储在内存中，在一段时间后会被删除（[在配置文件中定义](https://github.com/input-output-hk/cardano-sl/blob/acc53f53a20c7985d6550b4812117e44db08a70b/core/constants.yaml#L55))。\n\n这种授权类型可以用于在发行人知道某个时间范围内不存在的情况下将生成区块的权利委托给某个可信任的节点。\n\n### 重量级委派\n\n重量级委派有两个目的：\n\n1. 就像轻量级委派那样，委派生成区块的权利。\n2. 与一些代表分享股份，从而允许代表参与[追随中本聪算法](/glossary/#follow-the-satoshi)。没有真正的金钱转移；在为[追随中本聪算法](/glossary/#follow-the-satoshi)计算权益所有人时，issuer 的权益被加到代表的权益中。\n\n每一个特定的权益所有人最多能与一个代表分享权益。为了撤销证书，节点应该创建一个新的证书，并将其自身同时作为颁发者和委托者。\n\n### 消息列表\n\n在 [`Pos.Delegation.Types`](https://github.com/input-output-hk/cardano-sl/blob/6e8f8a98fd1537d084341a27a843e08dacc9f1eb/src/Pos/Delegation/Types.hs) 模块中有与委托相关的消息。授权消息的格式在[二进制协议](/technical/protocols/binary-protocols/#delegation)章节有描述。\n\n## 更新系统消息\n\n你可以在 [`Pos.Communication.Methods`](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Communication/Methods.hs) 模块的 `WorkMode` 看到消息系统是怎么实现的。\n\n| Message type     | Comments                                           |\n|------------------|----------------------------------------------------|\n| `UpdateProposal` | Serialized update proposal, sent to a DHT peers    |\n| `UpdateVote`     | Message, payload of which contains the actual vote |\n       \n\n请参阅 [`sendUpdateProposal`](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Communication/Methods.hs#L47) 和 [`sendVote`](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Communication/Methods.hs#L40) 功能的更多细节。\n\n# Workers, Listeners 和 Handlers\n\n你可以把它们视为消息的『操作人员』\n\n**Workers** 发起消息交换，因此 worker 是卡尔达诺结算层的积极通信部分。**Listeners** 可以从 workers 接收信息，且可能会发送一些消息作为回复。因此 listener 是卡尔达诺结算层的被动通信部分，收到信息后，listener 使用一种叫做 **handler** 的函数来实际执行相应的作业。根据收到的信息的类型使用特定的处理程序（如上所述，消息具有不同的类型）。\n\n为了能够执行必要的操作，所有的 workers 和 handlers 在 `WorkMode` 进行工作（见下文）。\n\n\n## 区块处理\n\n上面描述了区块交换信息。\n\n### 区块处理 Workers\n\n获取块在 [`Pos.Block.Network.Retrieval`](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Block/Network/Retrieval.hs) 模块中进行处理。\n\n这个 [`retrievalWorker`](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Block/Network/Retrieval.hs#L50) 非常重要：它是一个在[区块检索队列](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Block/Network/Retrieval.hs#L84)上验证头文件的服务器，这些区块形成一个合适的链。它发送一个 `MsgGetBlocks` 类型的信息给 listener，[此时](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Block/Network/Retrieval.hs#L284)它从这个 listener 接收一个类型为 `MsgBlock` 信息的回答。\n\n这是另一个例子 - [`requestHeaders`](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Block/Network/Logic.hs#L261) 功能。这个函数处理预期的区块头，并在本地跟踪它们。在[这个地方](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Block/Network/Logic.hs#L271)，它向 listener 发送一种类型为 `MsgGetHeaders` 的信息，而[在这](https://github.com/input-output-hk/cardano-sl/blob/83fbebb3eec16c30a96c499301250c5a3756c0c1/src/Pos/Block/Network/Logic.hs#L275)，它从这个 listener 接收一个类型为 `MsgHeaders` 的回答。\n\n[`Pos.Block.Worker`](https://github.com/input-output-hk/cardano-sl/blob/d564b3f5a7e03e086b62c88212870b5ea89f5e8b/src/Pos/Block/Worker.hs) 模块中定义了用于区块处理的其他 worker。我们重用了上述的 `retrievalWorker`（TODO：and define a\n[well-documented](https://github.com/input-output-hk/cardano-sl/blob/a5f7991ff03a1e45114b901bfbbbb1ee3cd4d194/src/Pos/Block/Worker.hs#L82)），并记载了一个记录良好的 `blkOnNewSlot` worker。它代表了一个新 slot 开始时应该完成的操作，这个操作包括以下步骤：\n\n1. 如有必要，生成一个[创始区块](https://github.com/input-output-hk/cardano-sl/blob/a5f7991ff03a1e45114b901bfbbbb1ee3cd4d194/src/Pos/Block/Worker.hs#L100)。\n2. 获取当前 epoch 的 leader。\n3. 如果我们是 slot 领导者，或者我们委派这么做，[生成起始区块](https://github.com/input-output-hk/cardano-sl/blob/a5f7991ff03a1e45114b901bfbbbb1ee3cd4d194/src/Pos/Block/Worker.hs#L114)（可选）。\n\n### 逻辑\n\n处理区块的方式在 [`Pos.Block.Logic`](https://github.com/input-output-hk/cardano-sl/tree/a5f7991ff03a1e45114b901bfbbbb1ee3cd4d194/src/Pos/Block/Logic) 模块中定义。请阅读[卡尔达诺结算层中的区块](/technical/blocks/)获取关于区块的更多信息。\n\n### 区块处理 Listeners\n\n区块处理的 Listeners 在 [`Pos.Block.Network.Listeners`](https://github.com/input-output-hk/cardano-sl/blob/a5f7991ff03a1e45114b901bfbbbb1ee3cd4d194/src/Pos/Block/Network/Listeners.hs) 模块中定义。\n\n处理程序 [`handleGetHeaders`](https://github.com/input-output-hk/cardano-sl/blob/fa5d01c08124934f01f2df22f2bc8784198f56c0/src/Pos/Block/Network/Listeners.hs#L46) 发送区块头部：[在这](https://github.com/input-output-hk/cardano-sl/blob/fa5d01c08124934f01f2df22f2bc8784198f56c0/src/Pos/Block/Network/Listeners.hs#L89)，它从 worker 收到一个 `MsgGetHeaders` 类型的信息，[获取头部](https://github.com/input-output-hk/cardano-sl/blob/fa5d01c08124934f01f2df22f2bc8784198f56c0/src/Pos/Block/Network/Listeners.hs#L95)，然后[在这](https://github.com/input-output-hk/cardano-sl/blob/92cf690dc3be9af29502f493cbf9e8072b56cb67/src/Pos/Block/Network/Logic.hs#L140)，它向 worker 发送 `MsgHeaders` 类型的回复信息。\n\n[`handleGetBlocks`](https://github.com/input-output-hk/cardano-sl/blob/fa5d01c08124934f01f2df22f2bc8784198f56c0/src/Pos/Block/Network/Listeners.hs#L54) 处理程序发送区块。这个处理程序对应 [`retrievalWorker`](https://github.com/input-output-hk/cardano-sl/blob/08fa863502baeb399e15f525540050a117430d95/src/Pos/Block/Network/Retrieval.hs#L50) 的 [`retrieveBlocks`](https://github.com/input-output-hk/cardano-sl/blob/08fa863502baeb399e15f525540050a117430d95/src/Pos/Block/Network/Retrieval.hs#L319)，因此，它从 worker [这里](https://github.com/input-output-hk/cardano-sl/blob/a5f7991ff03a1e45114b901bfbbbb1ee3cd4d194/src/Pos/Block/Network/Listeners.hs#L60)接收 `MsgGetBlocks` 类型的信息，[获得对应的头部](https://github.com/input-output-hk/cardano-sl/blob/7fdf6c8d0d2f62948f4685b923b7671db137d7b3/src/Pos/Block/Logic/Header.hs#L331) ，然后[在这里](https://github.com/input-output-hk/cardano-sl/blob/a5f7991ff03a1e45114b901bfbbbb1ee3cd4d194/src/Pos/Block/Network/Listeners.hs#L71)向这个 worker 发送 `MsgBlock` 类型的响应信息。\n\n处理程序 [`handleBlockHeaders`](https://github.com/input-output-hk/cardano-sl/blob/0d28e6133bd6349f5236bcebab39ea6bfc4c2b7e/src/Pos/Block/Network/Listeners.hs#L85) 以类似的方式发送未经请求的用例的区块头部：它接收来自 worker 的 [`MsgHeaders`](https://github.com/input-output-hk/cardano-sl/blob/0d28e6133bd6349f5236bcebab39ea6bfc4c2b7e/src/Pos/Block/Network/Listeners.hs#L95) 类型，并处理它。\n\n## 委派\n\n另一个例子是使用上述的委派信息\n\n### Workers\n\n委派信息的 Worker 在 [`Pos.Delegation.Worker`](https://github.com/input-output-hk/cardano-sl/blob/0d28e6133bd6349f5236bcebab39ea6bfc4c2b7e/src/Pos/Delegation/Worker.hs) 模块中定义。\n\n所有这些 workers 不会发送信息到一个特定的节点。他们发送信息给所有的邻节点。\n\n### Listeners\n\n委派消息的 Listeners 在 [`Pos.Delegation.Listeners`](https://github.com/input-output-hk/cardano-sl/blob/0d28e6133bd6349f5236bcebab39ea6bfc4c2b7e/src/Pos/Delegation/Listeners.hs) 模块中定义。\n\n## 安全\n\n进行安全操作的 workers 在 [`Pos.Security.Workers`](https://github.com/input-output-hk/cardano-sl/blob/0d28e6133bd6349f5236bcebab39ea6bfc4c2b7e/src/Pos/Security/Workers.hs) 模块中定义。\n\n## 更新系统\n\n以下是与更新系统相关的工作人员和听众列表。\n\n\n### Workers\n\n更新系统的 worker 在 [`Pos.Update.Worker`](https://github.com/input-output-hk/cardano-sl/blob/73cf4fc35d3cfb068458f2b6982990d08a99906e/src/Pos/Update/Worker.hs) 模块中定义。更新系统所做的唯一事情是在每个 slot 上[检查](https://github.com/input-output-hk/cardano-sl/blob/73cf4fc35d3cfb068458f2b6982990d08a99906e/src/Pos/Update/Worker.hs#L27)新的已批准更新。\n\n### Listeners\n\n更新系统的 Listeners 在 [`Pos.Update.Network.Listeners`](https://github.com/input-output-hk/cardano-sl/blob/22360aa45e5dd82d0c87872d8530217fc3d08f4a/src/Pos/Update/Network/Listeners.hs) 模块中定义。\n\n\n`UpdateProposal` 中继器:\n\n-   `Req` — 本地节点回答关于更新提案的请求，并针对此提案进行一组投票。\n-   `Inv` — 检查我们是否需要提供的提案，并记录数据是否与此库存消息相关。\n-   `Data` — 将提案信息与投票一起进行验证和记录。\n\n\n`UpdateVote` listeners:\n\n-   `Req` — 把*我们*的投票发给任何人。\n-   `Inv` — 检查我们是否需要提供的投票，并记录相关的。\n-   `Data` — 进行一次投票，核实和记录。\n\n\n## WorkMode 和 MinWorkMode\n\n有一个特殊的类型称为 [`WorkMode`](https://github.com/input-output-hk/cardano-sl/blob/73cf4fc35d3cfb068458f2b6982990d08a99906e/src/Pos/WorkMode/Class.hs#L65)，[`MinWorkMode`](https://github.com/input-output-hk/cardano-sl/blob/73cf4fc35d3cfb068458f2b6982990d08a99906e/src/Pos/WorkMode/Class.hs#L107)  表示一系列执行真实世界的分布式系统的工作的约束条件。你可以把约束看做*运行时保证*，它可以在特定的上下文执行特定的操作。例如，如果我们根据 **logging** 约束定义一些函数 `f` 的类型，我们肯定知道我们在这个函数 `f` 里面记录不同的信息。\n\n上面描述的所有 workers 和 handlers 都受 `WorkMode` 的限制。\n\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-01-application-level.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-04-p2p.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-04-p2p.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-04-p2p.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: P2P Layer\npath: /en/technical/protocols/p2p/\ngroup: technical-protocols\nlanguage: en\nlabel: docs\n---\n<!-- Reviewed at ef835a2334888eda7384da707c4077a8b576b192 -->\n\n# P2P Layer\n\nTo start communicating with other nodes, a node has to join the network. To do\nthis, the node has to know some other node that already participates in the\nprotocol; this node is called a *bootstrap node*.\n\nAfter connecting to the bootstrap node, we receive a list of peers which we'll\nuse for network communication. Those peers are called *neighbors*. The list of\nneighbors should be maintained in such a way that these nodes are online and any\nnode from the network can receive our messages. Moreover, messages should be\ndelivered efficiently.\n\nTo achieve this, Cardano SL uses the *Kademlia* DHT protocol. Even though\nKademlia provides more features, we only use it as a method of peer discovery.\n\n## Overview of Kademlia Protocol\n\n*See also: the [P2P Network section](/technical#p2p-network) of the technical\noverview.*\n\nIn Kademlia, every node is associated with a 32-byte ID (see [ID\nstructure](#id-structure) for more details). These IDs are used to identify\nnodes without having to refer to their network addresses. The keys used to\nstore values in Kademlia are also 32-byte identifiers.\n\nKademlia uses the XOR metric to define the distance between nodes. Key-value\npairs are stored in nodes with IDs that are “close” to the keys. This distance\nis also used to efficiently locate a node with the given ID.\n\nAt start, a bootstrap node should be provided to Kademlia in order to join the\nnetwork. The address of this node can be hardcoded in the implementation or\nchosen by the user. Later, the node will attempt to find more peers by querying\nits neighbors (from the initial list of peers sent by the bootstrap node). A\nnode sends messages to its peers, which resend messages to their peers close to\nthe needed ID/key. The list of known peers is preserved between launches.\n\nHere and later, by *address* we mean tuple `(Host, Port, ID)`, while *network\naddress* denotes just the pair `(Host, Port)`.\n\nKademlia uses the UDP protocol for transmitting messages.\n\nTo learn more about how Kademlia is implemented, please refer to the paper\n[Kademlia: a Peer-to-peer Information System Based on the XOR\nMetric](https://pdos.csail.mit.edu/~petar/papers/maymounkov-kademlia-lncs.pdf).\n\n## Messages Used in Kademlia\n\nEvery message is represented as a binary string with the maximum length of [1200\nbytes](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Config.hs#L61)\n(so that it wouldn't exceed IPv6 datagram size). A special case is\n`RETURN_NODES`: if it exceeds 1200 bytes, the node list is split into several\nmessages. The number of messages is represented with a single byte. Please see\n[`serialize`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Protocol.hs#L41)\nfunction for more details.\n\n### IDs, Keys and Values\n\nIDs and keys in Kademlia are represented with the same structure called\n[`HashId`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/HashNodeId.hs#L32):\n\n<a name=\"id-structure\"></a>\n\n| Field size | Description                                        |\n|------------|----------------------------------------------------|\n| 18         | *Hash* - *PBKDF2* key generated from *Nonce*       |\n| 14         | *Nonce* - an arbitrary 14-bytes long binary string |\n\nPlease see [Addressing](#addressing) section for more details.\n\nCardano SL do not use Kademlia as key-value storage. Thus we just use empty\nstrings as values.\n\n### PING\n\nCheck if a peer is still accessible. After sending this message, the node would\nexpect to receive a *PONG* message as the reply. Kademlia pings every peer\nperiodically to maintain a correct peer list.\n\n| Field size | Value | Description                            |\n|------------|-------|----------------------------------------|\n| 1          | 0     | 1-byte value to determine message type |\n| 32         |       | ID of our node                         |\n\n### PONG\n\nUsed as a reply to `PING` messages.\n\n| Field size | Value | Description                            |\n|------------|-------|----------------------------------------|\n| 1          | 1     | 1-byte value to determine message type |\n| 32         |       | ID of our node                         |\n\n### STORE\n\nStore given value in Kademlia. This message is disabled and would be ignored by\nnodes.\n\n| Field size | Value | Description                            |\n|------------|-------|----------------------------------------|\n| 1          | 2     | 1-byte value to determine message type |\n| 32         |       | ID of our node                         |\n| 32         |       | Key                                    |\n| 0          |       | Value (empty string in Cardano SL)     |\n\n### FIND\\_NODE\n\nRequest network address of node with given ID. After sending this message the\nnode would expect to receive a `RETURN_NODES` message with a list of nodes\nclosest to the requested one (including the requested node itself).\n\n| Field size | Value | Description                            |\n|------------|-------|----------------------------------------|\n| 1          | 3     | 1-byte value to determine message type |\n| 32         |       | ID of our node                         |\n| 32         |       | ID of node we are looking for          |\n\n### RETURN\\_NODES\n\nSend network addresses of some nodes in reply to `FIND_NODE` of `FIND_VALUE`.\nAnswer is split into several messages because list of nodes can exceed IPv6\ndatagram size.\n\nFirst, let's describe binary representation of single *peer*:\n\n| Field size | Value | Description                                       |\n|------------|-------|---------------------------------------------------|\n| 32         |       | Peer ID                                           |\n| 1-255      |       | Peer host name                                    |\n| 1          | 32    | Ascii code of \" \" to separate host name from port |\n| 2          |       | Peer port                                         |\n\nNow, let's describe binary representation of `RETURN_NODES` message:\n\n|   Field size | Value | Description                                                                                   |\n|--------------|-------|-----------------------------------------------------------------------------------------------|\n|            1 | 4     | 1-byte value to determine message type                                                        |\n|           32 |       | ID of our node                                                                                |\n|            1 |       | Total number of `RETURN_NODES` messages sent as answer to this request                        |\n|           32 |       | ID of node that requested nodes                                                               |\n| at most 1136 |       | Several peers close to the requested ID (at most 1136 bytes to not exceed IPv6 datagram size) |\n\n### FIND\\_VALUE\n\nBehaves in the same way as `FIND_NODE`, except that it can also receive a\n`RETURN_VALUE` response if the lookup was successful. Currently it's only used\nin Cardano SL for finding peers. When the node starts working, it generates a\nrandom key and asks Kademlia to find it; this search always fails, but it lets\nthe node discover some initial peer addresses.\n\n| Field size | Value | Description                            |\n|------------|-------|----------------------------------------|\n| 1          | 5     | 1-byte value to determine message type |\n| 32         |       | ID of our node                         |\n| 32         |       | Key we are looking for                 |\n\n### RETURN\\_VALUE\n\nA reply to a `STORE` request. This message is not used in Cardano SL because it\ndoes not store any values in Kademlia.\n\n| Field size | Value | Description                            |\n|------------|-------|----------------------------------------|\n| 1          | 6     | 1-byte value to determine message type |\n| 32         |       | ID of our node                         |\n| 32         |       | ID of node that requested value        |\n| 0          |       | Value (empty string in Cardano SL)     |\n\n## Security\n\nSince Kademlia is a protocol for open P2P networks, it had to be modified in\nseveral other ways to become reasonably secure.\n\n### Possible Attacks\n\nAn **eclipse attack** is a situation when a node is surrounded by adversary\nnodes.\n\nIn Kademlia, eclipse attacks (targeted at the particular participant of the\nnetwork) are hard to perform, but possible. First, launch a hundred nodes with\nnode IDs close to target node ID. These nodes would fill the node's lowest\n`k`-buckets (which are expected to be empty, at a first sight), then perform a\nDDoS attack on nodes from target's `k`-buckets (it's possible to determine those\nnodes if network's topology haven't changed much since the node was started).\nAfter a successful DDoS attack, the node's remaining neighbors would be\nadversary agents.\n\nPlease note that Kademlia’s structure implies that launching nodes close to the\ntarget is not enough to eclipse it. Node lists are stored by node in `k`-buckets\n(the i-th bucket contains no more than `k` nodes with relative distance\n`2^i-1 < d < 2^i`), and new nodes are added to corresponding buckets only if\nthese buckets are not already full. Kademlia prefers nodes that have been in\nlists for a long time and were recently seen alive. Without getting some nodes\ndown, it's impossible to eclipse a node.\n\nThis attack is tricky and unlikely to happen in practice. The\n[Addressing](#addressing) modification makes it even harder.\n\nA **100500 attack** is an attack that launches significantly more nodes than the\namount of nodes in the current P2P network, either in order to eclipse some\nnodes or to deny service by flooding the network. The attack wouldn't cause any\nproblems for old nodes (not counting possible network overhead), because old\nnodes preserve their routes. But when a new node joins the network, it would get\neclipsed (isolated in an adversarial subnet), because old honest nodes won't add\nit to their buckets (as these buckets are already filled by other nodes), and\nthe new node would be known to adversaries only.\n\nDefending against 100500 attacks remains an open problem. For now, we're going\nto make them practically infeasible with a sophisticated ban system / adversary\ndetection.\n\n### Addressing\n\nWe use so-called `HashId`s as node IDs. Since it [contains](#id-structure) a\nhash, assigning yourself an arbitrary ID is impossible, and this means that a\n100500 attack is the only way to perform an eclipse attack.\n\n#### Implementation Notes\n\n`HashId` is a binary string with a fixed length (32 bytes) formed like this:\n\n    +---------------+------------+\n    |    Hashing    |    Nonce   |\n    +---------------+------------+\n\n    |   18 bytes    |  14 bytes  |\n\nwhere:\n\n-   `Nonce` is just random 14 bytes (from the system source of entropy),\n-   `Hashing` is hashing data.\n\nHashing data is generated based on `DerivingKey` and `Salt`, where:\n\n-   `DerivingKey` is generated by PBKDF2 ([Password Based Key Derivation\n    Function 2](https://en.wikipedia.org/wiki/PBKDF2)).\n-   `Salt` is a SHA-512 digest from `Nonce` mentioned above.\n\nFor `DerivingKey` generation we use these arguments:\n\n-   `prfPassword` - PRF (pseudorandom function) for PBKDF2 using HMAC\n    ([Hash-based Message Authentication\n    Code](https://en.wikipedia.org/wiki/Hash-based_message_authentication_code))\n    with SHA-256 algorithm.\n-   `parameters` - PBKDF2 parameters: 500 iterations, for 32 bytes as a result\n    output.\n-   `Nonce` mentioned above - as `password`.\n-   `Salt` mentioned above - as `salt`.\n\n### Routing Data Anti-forging\n\nIn Kademlia, a node requests a list of peers from its neighbors and accepts the\nfirst message it receives. An adversary may forge those replies, providing\naddresses of adversary nodes as closest nodes to given ID. To overcome this\nissue, we make nodes wait for some period to gather as many replies as possible,\nand after that, the replies get merged and the node selects `k` closest nodes from\nthe resulting set. This way, an adversary would have to eclipse a node in order\nto forge the list of peers it receives.\n\n#### Implementation Notes\n\nTo implement this idea, we just add `k` neighbors nodes closest to the\ndestination at the beginning of each\n[lookup](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Implementation.hs#L48)\n(`lookup` is a function used by `FIND_NODE` or `FIND_VALUE` to find `k` nodes\nclosest to the given ID) to the\n[pending](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Implementation.hs#L243)\nset. When we receive a `RETURN_NODES` message, we update\n[known](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Implementation.hs#L242)\nlist to make it contain `k` nodes currently known that are closest to the\ndestination ID. This loop ends when no *pending* nodes are left. We do not\nintroduce any specific period to collect neighbors replies. If any neighbors do\nnot send us `RETURN_NODES` reply, we receive `Timeout` signal and this neighbor\nis handled by\n[`waitForReply`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Implementation.hs#L286) function.\n\nSee also\n[`continueLookup`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Implementation.hs#L371) function.\nIt is the place where *pending* and *known* fields are updated, so this is where\nthe core logic of this enhancement is located.\n\n### Routing Tables Sharing\n\nWhen a node has just joined the network, it requests a list of neighbors (set of\nnodes closest to it). We have modified Kademlia to include some extra nodes into\nthis list; specifically, now we pick some random nodes along with neighbors and\nreturn them. This gives the node additional knowledge to recover in case it's\nsurrounded with adversary nodes.\n\n#### Implementation Notes\n\nThere is the function\n[`findClosest`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Tree.hs#L195)\nin our Kademlia implementation which finds `k` nodes closest to the given ID.\nThe function\n[`pickupRandom`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Tree.hs#L180)\nwas added. This function picks up given number of random nodes from Kademlia\ntree. The exact number of shared random nodes is specified through\n[`routingSharingN`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Config.hs#L63) field from Kademlia config. This way, `RETURN_NODES` message\nincludes the results of `findClosest` and `pickupRandom` calls.\n\n### Banning Nodes\n\nWe introduce a feature to ban nodes to Kademlia. We will use this to ban nodes\nwhen we detect them to act maliciously.\n\n#### Implementation Notes\n\nThere are three possible states for a node:\n\n1.  `NoBan`,\n2.  `BanTill`,\n3.  `BanForever`.\n\nPlease see\n[`BanState`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Instance.hs#L66) type. Values of this type are passed to\n[`banNode`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Instance.hs#L165)\nfunction.\n\n`NoBan` is used to unban the already banned nodes. However, this action does\nnot insert this node back into tree structure, but makes possible for this\nnode to appear in peers again.\n\n`BanTill` bans a node till some time (defined as a POSIX time).\n\n`BanForever` bans a node forever.\n\nThe function `banNode` adds given node to the `banned` field of\n[`KademliaState`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Instance.hs#L73)\ntype and deletes it from the tree.\nThe function [`isNodeBanned`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Instance.hs#L150)\nchecks if node is banned at the moment and deletes node from `banned` field if\nit was unbanned, or if the ban expired.\n\nHow a banned node is treated:\n\n-   We cannot use it as our initial peer to join the network. Please see\n    [`joinNetwork`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Implementation.hs#L152) function.\n\n-   We ignore all messages received from a banned node. Please see\n    [`waitForReply`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Implementation.hs#L286) function.\n\n-   We do not include this node to the tree, do not send any messages to it and\n    do not include this node to the `RETURN_NODES` messages.\n",
        "type": "MarkdownRemark",
        "contentDigest": "658e65d54bb81a1f30a75a12528a8ca6",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "P2P Layer",
        "path": "/en/technical/protocols/p2p/",
        "group": "technical-protocols",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-04-p2p.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-04-p2p.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at ef835a2334888eda7384da707c4077a8b576b192 -->\n\n# P2P Layer\n\nTo start communicating with other nodes, a node has to join the network. To do\nthis, the node has to know some other node that already participates in the\nprotocol; this node is called a *bootstrap node*.\n\nAfter connecting to the bootstrap node, we receive a list of peers which we'll\nuse for network communication. Those peers are called *neighbors*. The list of\nneighbors should be maintained in such a way that these nodes are online and any\nnode from the network can receive our messages. Moreover, messages should be\ndelivered efficiently.\n\nTo achieve this, Cardano SL uses the *Kademlia* DHT protocol. Even though\nKademlia provides more features, we only use it as a method of peer discovery.\n\n## Overview of Kademlia Protocol\n\n*See also: the [P2P Network section](/technical#p2p-network) of the technical\noverview.*\n\nIn Kademlia, every node is associated with a 32-byte ID (see [ID\nstructure](#id-structure) for more details). These IDs are used to identify\nnodes without having to refer to their network addresses. The keys used to\nstore values in Kademlia are also 32-byte identifiers.\n\nKademlia uses the XOR metric to define the distance between nodes. Key-value\npairs are stored in nodes with IDs that are “close” to the keys. This distance\nis also used to efficiently locate a node with the given ID.\n\nAt start, a bootstrap node should be provided to Kademlia in order to join the\nnetwork. The address of this node can be hardcoded in the implementation or\nchosen by the user. Later, the node will attempt to find more peers by querying\nits neighbors (from the initial list of peers sent by the bootstrap node). A\nnode sends messages to its peers, which resend messages to their peers close to\nthe needed ID/key. The list of known peers is preserved between launches.\n\nHere and later, by *address* we mean tuple `(Host, Port, ID)`, while *network\naddress* denotes just the pair `(Host, Port)`.\n\nKademlia uses the UDP protocol for transmitting messages.\n\nTo learn more about how Kademlia is implemented, please refer to the paper\n[Kademlia: a Peer-to-peer Information System Based on the XOR\nMetric](https://pdos.csail.mit.edu/~petar/papers/maymounkov-kademlia-lncs.pdf).\n\n## Messages Used in Kademlia\n\nEvery message is represented as a binary string with the maximum length of [1200\nbytes](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Config.hs#L61)\n(so that it wouldn't exceed IPv6 datagram size). A special case is\n`RETURN_NODES`: if it exceeds 1200 bytes, the node list is split into several\nmessages. The number of messages is represented with a single byte. Please see\n[`serialize`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Protocol.hs#L41)\nfunction for more details.\n\n### IDs, Keys and Values\n\nIDs and keys in Kademlia are represented with the same structure called\n[`HashId`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/HashNodeId.hs#L32):\n\n<a name=\"id-structure\"></a>\n\n| Field size | Description                                        |\n|------------|----------------------------------------------------|\n| 18         | *Hash* - *PBKDF2* key generated from *Nonce*       |\n| 14         | *Nonce* - an arbitrary 14-bytes long binary string |\n\nPlease see [Addressing](#addressing) section for more details.\n\nCardano SL do not use Kademlia as key-value storage. Thus we just use empty\nstrings as values.\n\n### PING\n\nCheck if a peer is still accessible. After sending this message, the node would\nexpect to receive a *PONG* message as the reply. Kademlia pings every peer\nperiodically to maintain a correct peer list.\n\n| Field size | Value | Description                            |\n|------------|-------|----------------------------------------|\n| 1          | 0     | 1-byte value to determine message type |\n| 32         |       | ID of our node                         |\n\n### PONG\n\nUsed as a reply to `PING` messages.\n\n| Field size | Value | Description                            |\n|------------|-------|----------------------------------------|\n| 1          | 1     | 1-byte value to determine message type |\n| 32         |       | ID of our node                         |\n\n### STORE\n\nStore given value in Kademlia. This message is disabled and would be ignored by\nnodes.\n\n| Field size | Value | Description                            |\n|------------|-------|----------------------------------------|\n| 1          | 2     | 1-byte value to determine message type |\n| 32         |       | ID of our node                         |\n| 32         |       | Key                                    |\n| 0          |       | Value (empty string in Cardano SL)     |\n\n### FIND\\_NODE\n\nRequest network address of node with given ID. After sending this message the\nnode would expect to receive a `RETURN_NODES` message with a list of nodes\nclosest to the requested one (including the requested node itself).\n\n| Field size | Value | Description                            |\n|------------|-------|----------------------------------------|\n| 1          | 3     | 1-byte value to determine message type |\n| 32         |       | ID of our node                         |\n| 32         |       | ID of node we are looking for          |\n\n### RETURN\\_NODES\n\nSend network addresses of some nodes in reply to `FIND_NODE` of `FIND_VALUE`.\nAnswer is split into several messages because list of nodes can exceed IPv6\ndatagram size.\n\nFirst, let's describe binary representation of single *peer*:\n\n| Field size | Value | Description                                       |\n|------------|-------|---------------------------------------------------|\n| 32         |       | Peer ID                                           |\n| 1-255      |       | Peer host name                                    |\n| 1          | 32    | Ascii code of \" \" to separate host name from port |\n| 2          |       | Peer port                                         |\n\nNow, let's describe binary representation of `RETURN_NODES` message:\n\n|   Field size | Value | Description                                                                                   |\n|--------------|-------|-----------------------------------------------------------------------------------------------|\n|            1 | 4     | 1-byte value to determine message type                                                        |\n|           32 |       | ID of our node                                                                                |\n|            1 |       | Total number of `RETURN_NODES` messages sent as answer to this request                        |\n|           32 |       | ID of node that requested nodes                                                               |\n| at most 1136 |       | Several peers close to the requested ID (at most 1136 bytes to not exceed IPv6 datagram size) |\n\n### FIND\\_VALUE\n\nBehaves in the same way as `FIND_NODE`, except that it can also receive a\n`RETURN_VALUE` response if the lookup was successful. Currently it's only used\nin Cardano SL for finding peers. When the node starts working, it generates a\nrandom key and asks Kademlia to find it; this search always fails, but it lets\nthe node discover some initial peer addresses.\n\n| Field size | Value | Description                            |\n|------------|-------|----------------------------------------|\n| 1          | 5     | 1-byte value to determine message type |\n| 32         |       | ID of our node                         |\n| 32         |       | Key we are looking for                 |\n\n### RETURN\\_VALUE\n\nA reply to a `STORE` request. This message is not used in Cardano SL because it\ndoes not store any values in Kademlia.\n\n| Field size | Value | Description                            |\n|------------|-------|----------------------------------------|\n| 1          | 6     | 1-byte value to determine message type |\n| 32         |       | ID of our node                         |\n| 32         |       | ID of node that requested value        |\n| 0          |       | Value (empty string in Cardano SL)     |\n\n## Security\n\nSince Kademlia is a protocol for open P2P networks, it had to be modified in\nseveral other ways to become reasonably secure.\n\n### Possible Attacks\n\nAn **eclipse attack** is a situation when a node is surrounded by adversary\nnodes.\n\nIn Kademlia, eclipse attacks (targeted at the particular participant of the\nnetwork) are hard to perform, but possible. First, launch a hundred nodes with\nnode IDs close to target node ID. These nodes would fill the node's lowest\n`k`-buckets (which are expected to be empty, at a first sight), then perform a\nDDoS attack on nodes from target's `k`-buckets (it's possible to determine those\nnodes if network's topology haven't changed much since the node was started).\nAfter a successful DDoS attack, the node's remaining neighbors would be\nadversary agents.\n\nPlease note that Kademlia’s structure implies that launching nodes close to the\ntarget is not enough to eclipse it. Node lists are stored by node in `k`-buckets\n(the i-th bucket contains no more than `k` nodes with relative distance\n`2^i-1 < d < 2^i`), and new nodes are added to corresponding buckets only if\nthese buckets are not already full. Kademlia prefers nodes that have been in\nlists for a long time and were recently seen alive. Without getting some nodes\ndown, it's impossible to eclipse a node.\n\nThis attack is tricky and unlikely to happen in practice. The\n[Addressing](#addressing) modification makes it even harder.\n\nA **100500 attack** is an attack that launches significantly more nodes than the\namount of nodes in the current P2P network, either in order to eclipse some\nnodes or to deny service by flooding the network. The attack wouldn't cause any\nproblems for old nodes (not counting possible network overhead), because old\nnodes preserve their routes. But when a new node joins the network, it would get\neclipsed (isolated in an adversarial subnet), because old honest nodes won't add\nit to their buckets (as these buckets are already filled by other nodes), and\nthe new node would be known to adversaries only.\n\nDefending against 100500 attacks remains an open problem. For now, we're going\nto make them practically infeasible with a sophisticated ban system / adversary\ndetection.\n\n### Addressing\n\nWe use so-called `HashId`s as node IDs. Since it [contains](#id-structure) a\nhash, assigning yourself an arbitrary ID is impossible, and this means that a\n100500 attack is the only way to perform an eclipse attack.\n\n#### Implementation Notes\n\n`HashId` is a binary string with a fixed length (32 bytes) formed like this:\n\n    +---------------+------------+\n    |    Hashing    |    Nonce   |\n    +---------------+------------+\n\n    |   18 bytes    |  14 bytes  |\n\nwhere:\n\n-   `Nonce` is just random 14 bytes (from the system source of entropy),\n-   `Hashing` is hashing data.\n\nHashing data is generated based on `DerivingKey` and `Salt`, where:\n\n-   `DerivingKey` is generated by PBKDF2 ([Password Based Key Derivation\n    Function 2](https://en.wikipedia.org/wiki/PBKDF2)).\n-   `Salt` is a SHA-512 digest from `Nonce` mentioned above.\n\nFor `DerivingKey` generation we use these arguments:\n\n-   `prfPassword` - PRF (pseudorandom function) for PBKDF2 using HMAC\n    ([Hash-based Message Authentication\n    Code](https://en.wikipedia.org/wiki/Hash-based_message_authentication_code))\n    with SHA-256 algorithm.\n-   `parameters` - PBKDF2 parameters: 500 iterations, for 32 bytes as a result\n    output.\n-   `Nonce` mentioned above - as `password`.\n-   `Salt` mentioned above - as `salt`.\n\n### Routing Data Anti-forging\n\nIn Kademlia, a node requests a list of peers from its neighbors and accepts the\nfirst message it receives. An adversary may forge those replies, providing\naddresses of adversary nodes as closest nodes to given ID. To overcome this\nissue, we make nodes wait for some period to gather as many replies as possible,\nand after that, the replies get merged and the node selects `k` closest nodes from\nthe resulting set. This way, an adversary would have to eclipse a node in order\nto forge the list of peers it receives.\n\n#### Implementation Notes\n\nTo implement this idea, we just add `k` neighbors nodes closest to the\ndestination at the beginning of each\n[lookup](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Implementation.hs#L48)\n(`lookup` is a function used by `FIND_NODE` or `FIND_VALUE` to find `k` nodes\nclosest to the given ID) to the\n[pending](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Implementation.hs#L243)\nset. When we receive a `RETURN_NODES` message, we update\n[known](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Implementation.hs#L242)\nlist to make it contain `k` nodes currently known that are closest to the\ndestination ID. This loop ends when no *pending* nodes are left. We do not\nintroduce any specific period to collect neighbors replies. If any neighbors do\nnot send us `RETURN_NODES` reply, we receive `Timeout` signal and this neighbor\nis handled by\n[`waitForReply`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Implementation.hs#L286) function.\n\nSee also\n[`continueLookup`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Implementation.hs#L371) function.\nIt is the place where *pending* and *known* fields are updated, so this is where\nthe core logic of this enhancement is located.\n\n### Routing Tables Sharing\n\nWhen a node has just joined the network, it requests a list of neighbors (set of\nnodes closest to it). We have modified Kademlia to include some extra nodes into\nthis list; specifically, now we pick some random nodes along with neighbors and\nreturn them. This gives the node additional knowledge to recover in case it's\nsurrounded with adversary nodes.\n\n#### Implementation Notes\n\nThere is the function\n[`findClosest`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Tree.hs#L195)\nin our Kademlia implementation which finds `k` nodes closest to the given ID.\nThe function\n[`pickupRandom`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Tree.hs#L180)\nwas added. This function picks up given number of random nodes from Kademlia\ntree. The exact number of shared random nodes is specified through\n[`routingSharingN`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Config.hs#L63) field from Kademlia config. This way, `RETURN_NODES` message\nincludes the results of `findClosest` and `pickupRandom` calls.\n\n### Banning Nodes\n\nWe introduce a feature to ban nodes to Kademlia. We will use this to ban nodes\nwhen we detect them to act maliciously.\n\n#### Implementation Notes\n\nThere are three possible states for a node:\n\n1.  `NoBan`,\n2.  `BanTill`,\n3.  `BanForever`.\n\nPlease see\n[`BanState`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Instance.hs#L66) type. Values of this type are passed to\n[`banNode`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Instance.hs#L165)\nfunction.\n\n`NoBan` is used to unban the already banned nodes. However, this action does\nnot insert this node back into tree structure, but makes possible for this\nnode to appear in peers again.\n\n`BanTill` bans a node till some time (defined as a POSIX time).\n\n`BanForever` bans a node forever.\n\nThe function `banNode` adds given node to the `banned` field of\n[`KademliaState`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Instance.hs#L73)\ntype and deletes it from the tree.\nThe function [`isNodeBanned`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Instance.hs#L150)\nchecks if node is banned at the moment and deletes node from `banned` field if\nit was unbanned, or if the ban expired.\n\nHow a banned node is treated:\n\n-   We cannot use it as our initial peer to join the network. Please see\n    [`joinNetwork`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Implementation.hs#L152) function.\n\n-   We ignore all messages received from a banned node. Please see\n    [`waitForReply`](https://github.com/serokell/kademlia/blob/7120bb4d28e708acd52dfd61d3dca7914fac7d7f/src/Network/Kademlia/Implementation.hs#L286) function.\n\n-   We do not include this node to the tree, do not send any messages to it and\n    do not include this node to the `RETURN_NODES` messages.\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-04-p2p.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-10-network-transport.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-10-network-transport.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-10-network-transport.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: Network Transport Layer\npath: /en/technical/protocols/network-transport/\ngroup: technical-protocols\nlanguage: en\nlabel: docs\n---\n<!-- Reviewed at ef835a2334888eda7384da707c4077a8b576b192 -->\n\n# Network Transport Layer\n\nThis guide is for developers who want to build their own client for Cardano SL.\nPlease read [Cardano SL Implementation Overview](/technical/) for more info.\nThis guide covers the network transport layer used in Cardano SL nodes.\n\nThe transport layer is a layer that sits between TCP and the application level\nprotocol. It is in principle independent of the application protocol (indeed the\nreference implementation is used in multiple different applications with\ndifferent application level protocols).\n\nThe point of the transport layer is that it provides multiple lightweight\nlogical connections multiplexed on a single TCP connection. Each lightweight\nconnection is unidirectional and provides reliable ordered message transport\n(i.e. it provides framing on top of TCP).\n\nProperties of the transport protocol:\n\n-   **Single TCP connection**. Only a single TCP connection at a time is used\n    between any pair of peers. These connections are potentially long-lived.\n    Once a connection with a peer is established, it is used for\n    sending/receiving messages until the TCP connection is *explicitly* closed\n    or some unrecoverable error occurs.\n\nProperties of the implementation:\n\n-   **Reporting of network failures**. Network failures are not hidden from the\n    application layer. If a TCP connection is dropped unexpectedly, the\n    transport layer should notify the application layer. In Cardano SL, the\n    policy is to try to reconnect and only declare a peer unreachable if\n    reconnecting also fails.\n\n## Overview\n\nTypical use of the transport involves:\n\n1.  Listening for new TCP connections from peers.\n2.  Establishing a TCP connection to other peer(s).\n3.  Creating lightweight connections on an established TCP connection.\n4.  Sending message(s) to peer(s) (on one or more lightweight connections).\n5.  Receiving message(s) from peer(s) (on one or more lightweight connections).\n6.  Closing lightweight connections.\n7.  Closing TCP connections.\n\nIn Cardano SL, multiple lightweight connections are used to support the\napplication level messaging protocol. Multiple application level messages can be\nsent concurrently, and multiple conversations can be in progress at once. Most\napplication messages are sent on a newly created lightweight connection, and, if\nneeded, larger application level message are broken into multiple transport\nlevel messages for transport. Other application level messages are sent as part\nof a conversation which is put together from a pair of unidirectional\nlightweight connections.\n\n## Terminology\n\nBasic transport concepts are:\n\n-   Transport\n-   EndPoint\n-   Connection\n-   Event\n-   Errors\n\n**Transport** refers to the whole layer and protocol described in this document.\nAn instance of the transport refers to the configuration and state of a running\nimplementation of the transport, which in particular includes a TCP listening\nsocket, bound to a particular port on a local network interface, for example\n`192.168.0.1:3010`.\n\n**EndPoint** refers to a logical endpoint within a transport instance. This\nmeans it has an address and that connections are between endpoints. In practice\nit is just a thin abstraction over the TCP/IP notion of an endpoint, addressed\nvia a hostname and port.\n\nEndpoint addresses are binary strings with the structure `HOST:PORT:LOCAL_ID`,\nfor example, `192.168.0.1:3010:0`.\n\nNote that while a transport instance listens on a single port, in principle\nthere can be multiple addressable endpoints within a single transport instance,\nand this is what the `LOCAL_ID` refers to. Cardano SL, however, does not\ncurrently make use of this feature, so it always uses `LOCAL_ID` 0.\n\n**Heavyweight connection** refers to a TCP connection between two endpoints. Two\nconnected endpoints use one and *only one* TCP-connection at once.\n\n**Connection** (or more explicitly a *lightweight connection*) is a\nunidirectional connection between endpoints. All lightweight connections between\nendpoints are multiplexed on a single heavyweight connection (i.e. a single TCP\nconnection).\n\nThe lightweight connections are a logical concept layered on top of TCP. Every\nconnection has an integer ID. It is in principle possible to have thousands of\nlightweight connections multiplexed on a single heavyweight TCP connection.\n\nThe typical style of operation is that the application layer wishes to establish\na lightweight connection to an endpoint, and if no heavyweight connection yet\nexists, then one is created. Similarly, when the last lightweight connection is\nclosed, real TCP connection is shut down cleanly.\n\nLightweight connections are unidirectional: messages on a lightweight connection\nflow in one direction only. However, lightweight connections can be established\nin either direction. The same heavyweight connection is used for lightweight\nconnections in either direction between peers; it does not matter which peer\nfirst established the heavyweight connection.\n\nA bidirectional conversation can be established by making use of a pair of\nunidirectional lightweight connections. Cardano SL follows this pattern. Refer\nto the `time-warp-nt` documentation for details. But note that this transport\nlayer has no special concept of a bidirectional conversation, there are only\ncollections of unidirectional connections.\n\n## Network Byte Order\n\nIn the following descriptions of control messages, all integers are encoded in\n[network byte order](https://en.wikipedia.org/wiki/Endianness#Networking).\n\nThus `Int32` used below in message definitions refers to a 32-bit *signed*\ninteger value in network byte order.\n\n## Setting Up a Transport Instance\n\nEach transport instance must set up a TCP listening socket. The local interface\nand port number to use are determined by the application using the transport.\n\nThe implementation should be ready to accept new TCP connections at any time\n(perhaps limited by a resource policy), and then perform the initial steps for a\nnew heavyweight connection described below.\n\n## Establishing Heavyweight Connections (initiating)\n\nAssume that a heavyweight connection is to be established between endpoints\nlabelled A and B, with endpoint A initiating the connection. Both endpoints have\nendpoint address, which, as previously described, are of the form\n`HOST:PORT:LOCAL_ID`.\n\nEstablishing a heavyweight connection from A to B proceeds as follows. First A\nmust record in its local state that it is initializing a heavyweight connection\nto B. This is needed in case of crossed connection requests (see below). A TCP\nconnection is opened by endpoint A to the `HOST` and `PORT` of endpoint B.\n\nEndpoint A sends a **connection request** message with the following structure:\n\n    +-----------+-------------+--------------------+\n    |   B-LID   |   A-EIDlen  |       A-EID        |\n    +-----------+-------------+--------------------+\n    |   Int32   |   Int32     |       bytes        |\n\nWhere\n\n-   `B-LID` - `B`'s endpoint local ID;\n-   `A-EIDlen` - length of `A`'s endpoint address;\n-   `A-EID` - `A`'s endpoint address.\n\nThus A sends the local endpoint ID that it wishes to connect to, and its own\naddress to identify the initiating node. The address that A sends should be its\ncanonical public address. The host part may be an IP address or DNS name. It is\nused to avoid establishing multiple TCP connections between endpoints. Within\nthe Cardano SL protocol, the local endpoint ID is always 0.\n\nEndpoint A then expects a **connection request response** message which is a\nsingle `Int32` encoding one of the following responses:\n\n-   `ConnectionRequestAccepted` (0)\n-   `ConnectionRequestInvalid` (1)\n-   `ConnectionRequestCrossed` (2)\n\nIn the typical `ConnectionRequestAccepted` case, endpoint A must record in its\nlocal state that it now has an established (i.e. no longer initializing)\nheavyweight to B. It may then proceed to the main part of the protocol described\nbelow.\n\nA `ConnectionRequestInvalid` response occurs when the endpoint identified by the\nlocal endpoint ID does not exist. For example, it happens if A sends to B that\nit wishes to connect to local endpoint ID 1, when only ID 0 exists. In this case\nboth endpoints must close the TCP connection.\n\nA `ConnectionRequestCrossed` response occurs when endpoint B determined that a\nTCP connection already exists between A and B, or connections between A and B,\nand B and A were being established concurrently. In this case both endpoints\nmust close the TCP connection.\n\n## Establishing Heavyweight Connections (Receiving)\n\nAssume, as before, that a heavyweight connection is to be established between\nendpoints labelled A and B, with endpoint A initiating the connection. We now\nconsider this from the point of view of endpoint B.\n\nBoth endpoints have endpoint address of the form `HOST:PORT:LOCAL_ID`. To be\nconcrete, assume that B has only one endpoint, with `LOCAL_ID` of 0.\n\nThe transport instance for B has a listening socket open on the host and port\ncorresponding to the endpoint IDs. It accepts a new TCP connection from some\npeer. It now expects to receive on that TCP connection a **connection request**\nmessage (in the format described above).\n\nTransport instance B must now respond with a **connection request response**\nmessage (in the format described above), based on the following rules.\n\nIf the connection request asks for a local endpoint ID that does not exist (i.e.\nanything other than 0 in our example), it must respond with\n`ConnectionRequestInvalid` and close the TCP connection.\n\nThe rules for `ConnectionRequestCrossed` are described below in more detail.\n\nOtherwise, when the endpoint ID is valid and there is no existing TCP\nconnection, it should reply with `ConnectionRequestAccepted` and record in its\nlocal state that it now has an established heavyweight with A. It may then\nproceed to the main part of the protocol.\n\n## Crossed Connection Request\n\nAs mentioned previously, the protocol tries to ensure that only one TCP\nconnection is used between any two endpoints at once. The typical case is that\nan endpoint can simply determine if it has an existing heavyweight connection to\na peer because it either initiated it or received it and it knows if any\nexisting TCP connection is still open. The hard case arises when two endpoints\ninitiate establishing heavyweight connections to each other *at the same time*\n(in the usual distributed systems sense of \"same time\").\n\nEach endpoint will have recorded in its local state that it is in the process of\ninitiating a heavyweight connection to the other endpoint. Each endpoint will\nsend the connection request message as usual. When each endpoint accepts an\nincoming TCP connection, it checks the peer endpoint ID from the connection\nrequest message.\n\nThe additional rule is that it must lookup in its local state to see if a\nconnection to the peer endpoint was either 1. already *being* established\noutbound or 2. already fully established. In the first case then we are in the\ncrossed connection situation. The second case can also occur legitimately (i.e.\nnot a protocol violation) when one peer has discovered that the existing TCP\nconnection has failed (i.e. its end is closed) and is trying to establish a new\nTCP connection, while the other peer has not yet discovered that the existing\nTCP connection is dead.\n\n### Crossed Connection Situation\n\nIn the crossed connection situation, thus far this is completely symmetric\nbetween endpoints, but we must break the symmetry to resolve which of the two\nTCP connections to use, and which to close. The solution the protocol uses to\nbreak the symmetry is that the endpoint addresses can be ordered\n(lexicographically in their binary string form). Thus the rule each node must\nuse to decide whether to accept or reject the incoming connection request is:\nreply with `ConnectionRequestAccepted` if the peer's endpoint ID is less than\nthe local endpoint id, and otherwise reply with `ConnectionRequestCrossed` and\nclose the TCP connection.\n\n### Connection Dead / Re-establish Situation\n\nIn the second case, where the endpoint handling the incoming TCP connection has\ndetermined that an established connection already exists between the two\nendpoints, the protocol is as follows. A `ConnectionRequestCrossed` reply is\nsent and the TCP connection is closed. Additionally, the endpoint tries to\nvalidate the liveness of the existing connection, with the purpose of either\nvalidating that it is live or determining that it is not in order to close the\ndead connection (which will then allow opening a new one).\n\nTo validate the liveness, the endpoint sends a **ProbeSocket** message. If a\n**ProbeSocketAck** message is not received within an implementation-defined time\nperiod then the endpoint should close the TCP connection and update its local\nstate accordingly to enable a new connection to be established by either\nendpoint.\n\nAn endpoint that receives a ProbeSocket message should reply with a\nProbeSocketAck.\n\nThe encoding for these messages is simple:\n\n    +-------------+\n    | ProbeSocket |\n    +-------------+\n    |    Int32    |\n\n    +----------------+\n    | ProbeSocketAck |\n    +----------------+\n    |     Int32      |\n\nwhere the value for the control message headers are 4 and 5 respectively.\n\n## Main Protocol\n\nOnce a heavyweight connection has been established between two endpoints then\nthe main part of the protocol begins.\n\nThe main protocol between two endpoints consists of sending/receiving a series\nof messages: control messages and data messages. Each has a header to identify\nthe message and a body appropriate to the message type. The messages for the\nmain protocol are control messages to create and close lightweight connections,\nand data messages for sending data on a lightweight connection.\n\nLightweight connections are unidirectional. There are independent sets of\nlightweight connections in each direction of the TCP connection. The lightweight\nconnections in each direction are managed by the *sending* side. The receiving\nside has no direct control over the allocation of lightweight connections.\n\nLightweight connections are identified by a Lightweight connection ID, which is\na 32-bit signed integer. Lightweight connection IDs must be greater than 1024.\nLightweight connection ID numbers should be used sequentially.\n\nThe control messages to create or close a lightweight connection simply identify\nthe lightweight connection ID that they act on. Similarly, data messages\nidentify the ID of the lightweight connection that the data is being sent on.\n\nMessages for different connection ID can be interleaved arbitrarily (enabling\nthe multiplexing of the different lightweight connections). The only constraints\nare the obvious ones: for any connection ID the sequence of messages must be a\ncreate connection message, any number of data messages and finally a close\nconnection message.\n\nThe format of these messages is as follows:\n\n    +-----------+-----------+\n    | CreateCon |   LWCId   |\n    +-----------+-----------+\n    |   Int32   |   Int32   |\n\n    +-----------+-----------+\n    |  CloseCon |   LWCId   |\n    +-----------+-----------+\n    |   Int32   |   Int32   |\n\n    +-----------+-----------+-------------------+\n    |   LWCId   |    Len    |       Data        |\n    +-----------+-----------+-------------------+\n    |   Int32   |   Int32   |     Len-bytes     |\n\nwhere:\n\n-   CreateCon control header is 0;\n-   CloseCon control header is 1;\n-   LWCId is the lightweight connection id, which is &gt;= 1024.\n\nThe header Int32 is aliased between the control message headers and the\nlightweight connection IDs of the data messages, which is why connection ids\nmust be 1024 or greater.\n\nThe data messages consist of the lightweight connection ID and a length-prefixed\nframe of data. Implementations of this protocol may wish to impose a maximum\nsize on these data frames, e.g. to ensure reasonable multiplexing between\nconnections or for resource considerations.\n\nNote that there need be no direct correspondence between these message\nboundaries and reads/writes on the TCP socket or packets. It may make sense for\nperformance or network efficiency to arrange for a connection open, small data\nmessage and connection close to be sent in a single write.\n\n## Closing Heavyweight Connections\n\nCleanly closing the heavyweight connection is not trivial. This is because the\nheavyweight connection should only be closed once lightweight connections in\nboth directions are closed. Given that the allocation of lightweight connections\nis controlled independently by each endpoint then some synchronization is\nrequired for both endpoints to agree that there are no more lightweight\nconnections in either direction.\n\nWhen one endpoint determines that it has no more outgoing lightweight\nconnections, and the set of incoming connections it knows of is empty, then it\nmay initiate the protocol to close the heavyweight connection. It does so by\nsending a **CloseSocket** message. The message carries the maximum incoming\nlightweight connection ID seen by the endpoint: i.e. the highest connection ID\nthat has been allocated by the remote endpoint that has so far been seen by the\nlocal endpoint. The local endpoint now updates the state it uses to track the\nremote endpoint to note that it is now in the process of closing. If the local\nendpoint now receives a create connection message from the remote endpoint,\nwhile it has the remote endpoint marked as being in the process of closing then\nit resets the state back to the normal connection established state. This\nhappens if the remote endpoint opened a new lightweight connection before it\nreceived the close socket message, and so the attempt to close the socket should\nbe abandoned.\n\nWhen an endpoint receives a **CloseSocket** message it checks its local state to\ncheck the number of outbound lightweight connections and the maximum lightweight\nconnection ID it has used for outgoing connections. If there are still outbound\nconnections then the close socket message is ignored. Additionally, if the\nmaximum outbound lightweight connection ID used thus far by the local node is\nhigher than the one received in the close socket message then the close socket\nmessage is ignored. This case can happen even if the number of outbound\nconnections is currently zero, if an outbound connection was created and then\nclosed prior to the close socket message arriving. In both cases what has\nhappened is that the heavyweight connection has become active again while one\nside was trying to close it due to inactivity, and so it is appropriate to\nabandon the attempt to close it.\n\nIf on the other hand there are no outbound connections and the last new\nconnection ID seen by the remote endpoint is the same as that locally, then both\nsides agree and the TCP connection should be closed.\n\nThe message structure is:\n\n    +-------------+-----------+\n    | CloseSocket |   LWCId   |\n    +-------------+-----------|\n    |    Int32    |   Int32   |\n\nwhere:\n\n-   `CloseSocket` - close connection control message, value `2`;\n-   `LWCId` - maximum lightweight connection ID used thus far.\n\n## Flow Control and Back-pressure\n\nLightweight connections do not provide any flow control over and above what is\nprovided by TCP. The protocol does not provide any facility to reject incoming\nlightweight connections. Any such facility must be layered on top, in the\napplication layer or another intermediate layer.\n\nImplementations should consider the problem of back-pressure and head of line\nblocking. Head of line blocking is a problem common to many protocols layered on\ntop of TCP, such as HTTP 1.x where one large response can \"block\" other smaller\nresponses for other URLs because the responses are sent in order. This problem\nis less severe in this transport protocol because connection are multiplexed, so\nsmall messages need not be blocked by large messages. Nevertheless, it is still\nthe case that the multiplexed stream of data for all connections must be\nreceived in order: it is not possible to push back on one lightweight connection\nvs another, only on the whole heavyweight connection.\n",
        "type": "MarkdownRemark",
        "contentDigest": "587ebd8e1c75b9fc75f60b6b3c9a2169",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "Network Transport Layer",
        "path": "/en/technical/protocols/network-transport/",
        "group": "technical-protocols",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-10-network-transport.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-10-network-transport.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at ef835a2334888eda7384da707c4077a8b576b192 -->\n\n# Network Transport Layer\n\nThis guide is for developers who want to build their own client for Cardano SL.\nPlease read [Cardano SL Implementation Overview](/technical/) for more info.\nThis guide covers the network transport layer used in Cardano SL nodes.\n\nThe transport layer is a layer that sits between TCP and the application level\nprotocol. It is in principle independent of the application protocol (indeed the\nreference implementation is used in multiple different applications with\ndifferent application level protocols).\n\nThe point of the transport layer is that it provides multiple lightweight\nlogical connections multiplexed on a single TCP connection. Each lightweight\nconnection is unidirectional and provides reliable ordered message transport\n(i.e. it provides framing on top of TCP).\n\nProperties of the transport protocol:\n\n-   **Single TCP connection**. Only a single TCP connection at a time is used\n    between any pair of peers. These connections are potentially long-lived.\n    Once a connection with a peer is established, it is used for\n    sending/receiving messages until the TCP connection is *explicitly* closed\n    or some unrecoverable error occurs.\n\nProperties of the implementation:\n\n-   **Reporting of network failures**. Network failures are not hidden from the\n    application layer. If a TCP connection is dropped unexpectedly, the\n    transport layer should notify the application layer. In Cardano SL, the\n    policy is to try to reconnect and only declare a peer unreachable if\n    reconnecting also fails.\n\n## Overview\n\nTypical use of the transport involves:\n\n1.  Listening for new TCP connections from peers.\n2.  Establishing a TCP connection to other peer(s).\n3.  Creating lightweight connections on an established TCP connection.\n4.  Sending message(s) to peer(s) (on one or more lightweight connections).\n5.  Receiving message(s) from peer(s) (on one or more lightweight connections).\n6.  Closing lightweight connections.\n7.  Closing TCP connections.\n\nIn Cardano SL, multiple lightweight connections are used to support the\napplication level messaging protocol. Multiple application level messages can be\nsent concurrently, and multiple conversations can be in progress at once. Most\napplication messages are sent on a newly created lightweight connection, and, if\nneeded, larger application level message are broken into multiple transport\nlevel messages for transport. Other application level messages are sent as part\nof a conversation which is put together from a pair of unidirectional\nlightweight connections.\n\n## Terminology\n\nBasic transport concepts are:\n\n-   Transport\n-   EndPoint\n-   Connection\n-   Event\n-   Errors\n\n**Transport** refers to the whole layer and protocol described in this document.\nAn instance of the transport refers to the configuration and state of a running\nimplementation of the transport, which in particular includes a TCP listening\nsocket, bound to a particular port on a local network interface, for example\n`192.168.0.1:3010`.\n\n**EndPoint** refers to a logical endpoint within a transport instance. This\nmeans it has an address and that connections are between endpoints. In practice\nit is just a thin abstraction over the TCP/IP notion of an endpoint, addressed\nvia a hostname and port.\n\nEndpoint addresses are binary strings with the structure `HOST:PORT:LOCAL_ID`,\nfor example, `192.168.0.1:3010:0`.\n\nNote that while a transport instance listens on a single port, in principle\nthere can be multiple addressable endpoints within a single transport instance,\nand this is what the `LOCAL_ID` refers to. Cardano SL, however, does not\ncurrently make use of this feature, so it always uses `LOCAL_ID` 0.\n\n**Heavyweight connection** refers to a TCP connection between two endpoints. Two\nconnected endpoints use one and *only one* TCP-connection at once.\n\n**Connection** (or more explicitly a *lightweight connection*) is a\nunidirectional connection between endpoints. All lightweight connections between\nendpoints are multiplexed on a single heavyweight connection (i.e. a single TCP\nconnection).\n\nThe lightweight connections are a logical concept layered on top of TCP. Every\nconnection has an integer ID. It is in principle possible to have thousands of\nlightweight connections multiplexed on a single heavyweight TCP connection.\n\nThe typical style of operation is that the application layer wishes to establish\na lightweight connection to an endpoint, and if no heavyweight connection yet\nexists, then one is created. Similarly, when the last lightweight connection is\nclosed, real TCP connection is shut down cleanly.\n\nLightweight connections are unidirectional: messages on a lightweight connection\nflow in one direction only. However, lightweight connections can be established\nin either direction. The same heavyweight connection is used for lightweight\nconnections in either direction between peers; it does not matter which peer\nfirst established the heavyweight connection.\n\nA bidirectional conversation can be established by making use of a pair of\nunidirectional lightweight connections. Cardano SL follows this pattern. Refer\nto the `time-warp-nt` documentation for details. But note that this transport\nlayer has no special concept of a bidirectional conversation, there are only\ncollections of unidirectional connections.\n\n## Network Byte Order\n\nIn the following descriptions of control messages, all integers are encoded in\n[network byte order](https://en.wikipedia.org/wiki/Endianness#Networking).\n\nThus `Int32` used below in message definitions refers to a 32-bit *signed*\ninteger value in network byte order.\n\n## Setting Up a Transport Instance\n\nEach transport instance must set up a TCP listening socket. The local interface\nand port number to use are determined by the application using the transport.\n\nThe implementation should be ready to accept new TCP connections at any time\n(perhaps limited by a resource policy), and then perform the initial steps for a\nnew heavyweight connection described below.\n\n## Establishing Heavyweight Connections (initiating)\n\nAssume that a heavyweight connection is to be established between endpoints\nlabelled A and B, with endpoint A initiating the connection. Both endpoints have\nendpoint address, which, as previously described, are of the form\n`HOST:PORT:LOCAL_ID`.\n\nEstablishing a heavyweight connection from A to B proceeds as follows. First A\nmust record in its local state that it is initializing a heavyweight connection\nto B. This is needed in case of crossed connection requests (see below). A TCP\nconnection is opened by endpoint A to the `HOST` and `PORT` of endpoint B.\n\nEndpoint A sends a **connection request** message with the following structure:\n\n    +-----------+-------------+--------------------+\n    |   B-LID   |   A-EIDlen  |       A-EID        |\n    +-----------+-------------+--------------------+\n    |   Int32   |   Int32     |       bytes        |\n\nWhere\n\n-   `B-LID` - `B`'s endpoint local ID;\n-   `A-EIDlen` - length of `A`'s endpoint address;\n-   `A-EID` - `A`'s endpoint address.\n\nThus A sends the local endpoint ID that it wishes to connect to, and its own\naddress to identify the initiating node. The address that A sends should be its\ncanonical public address. The host part may be an IP address or DNS name. It is\nused to avoid establishing multiple TCP connections between endpoints. Within\nthe Cardano SL protocol, the local endpoint ID is always 0.\n\nEndpoint A then expects a **connection request response** message which is a\nsingle `Int32` encoding one of the following responses:\n\n-   `ConnectionRequestAccepted` (0)\n-   `ConnectionRequestInvalid` (1)\n-   `ConnectionRequestCrossed` (2)\n\nIn the typical `ConnectionRequestAccepted` case, endpoint A must record in its\nlocal state that it now has an established (i.e. no longer initializing)\nheavyweight to B. It may then proceed to the main part of the protocol described\nbelow.\n\nA `ConnectionRequestInvalid` response occurs when the endpoint identified by the\nlocal endpoint ID does not exist. For example, it happens if A sends to B that\nit wishes to connect to local endpoint ID 1, when only ID 0 exists. In this case\nboth endpoints must close the TCP connection.\n\nA `ConnectionRequestCrossed` response occurs when endpoint B determined that a\nTCP connection already exists between A and B, or connections between A and B,\nand B and A were being established concurrently. In this case both endpoints\nmust close the TCP connection.\n\n## Establishing Heavyweight Connections (Receiving)\n\nAssume, as before, that a heavyweight connection is to be established between\nendpoints labelled A and B, with endpoint A initiating the connection. We now\nconsider this from the point of view of endpoint B.\n\nBoth endpoints have endpoint address of the form `HOST:PORT:LOCAL_ID`. To be\nconcrete, assume that B has only one endpoint, with `LOCAL_ID` of 0.\n\nThe transport instance for B has a listening socket open on the host and port\ncorresponding to the endpoint IDs. It accepts a new TCP connection from some\npeer. It now expects to receive on that TCP connection a **connection request**\nmessage (in the format described above).\n\nTransport instance B must now respond with a **connection request response**\nmessage (in the format described above), based on the following rules.\n\nIf the connection request asks for a local endpoint ID that does not exist (i.e.\nanything other than 0 in our example), it must respond with\n`ConnectionRequestInvalid` and close the TCP connection.\n\nThe rules for `ConnectionRequestCrossed` are described below in more detail.\n\nOtherwise, when the endpoint ID is valid and there is no existing TCP\nconnection, it should reply with `ConnectionRequestAccepted` and record in its\nlocal state that it now has an established heavyweight with A. It may then\nproceed to the main part of the protocol.\n\n## Crossed Connection Request\n\nAs mentioned previously, the protocol tries to ensure that only one TCP\nconnection is used between any two endpoints at once. The typical case is that\nan endpoint can simply determine if it has an existing heavyweight connection to\na peer because it either initiated it or received it and it knows if any\nexisting TCP connection is still open. The hard case arises when two endpoints\ninitiate establishing heavyweight connections to each other *at the same time*\n(in the usual distributed systems sense of \"same time\").\n\nEach endpoint will have recorded in its local state that it is in the process of\ninitiating a heavyweight connection to the other endpoint. Each endpoint will\nsend the connection request message as usual. When each endpoint accepts an\nincoming TCP connection, it checks the peer endpoint ID from the connection\nrequest message.\n\nThe additional rule is that it must lookup in its local state to see if a\nconnection to the peer endpoint was either 1. already *being* established\noutbound or 2. already fully established. In the first case then we are in the\ncrossed connection situation. The second case can also occur legitimately (i.e.\nnot a protocol violation) when one peer has discovered that the existing TCP\nconnection has failed (i.e. its end is closed) and is trying to establish a new\nTCP connection, while the other peer has not yet discovered that the existing\nTCP connection is dead.\n\n### Crossed Connection Situation\n\nIn the crossed connection situation, thus far this is completely symmetric\nbetween endpoints, but we must break the symmetry to resolve which of the two\nTCP connections to use, and which to close. The solution the protocol uses to\nbreak the symmetry is that the endpoint addresses can be ordered\n(lexicographically in their binary string form). Thus the rule each node must\nuse to decide whether to accept or reject the incoming connection request is:\nreply with `ConnectionRequestAccepted` if the peer's endpoint ID is less than\nthe local endpoint id, and otherwise reply with `ConnectionRequestCrossed` and\nclose the TCP connection.\n\n### Connection Dead / Re-establish Situation\n\nIn the second case, where the endpoint handling the incoming TCP connection has\ndetermined that an established connection already exists between the two\nendpoints, the protocol is as follows. A `ConnectionRequestCrossed` reply is\nsent and the TCP connection is closed. Additionally, the endpoint tries to\nvalidate the liveness of the existing connection, with the purpose of either\nvalidating that it is live or determining that it is not in order to close the\ndead connection (which will then allow opening a new one).\n\nTo validate the liveness, the endpoint sends a **ProbeSocket** message. If a\n**ProbeSocketAck** message is not received within an implementation-defined time\nperiod then the endpoint should close the TCP connection and update its local\nstate accordingly to enable a new connection to be established by either\nendpoint.\n\nAn endpoint that receives a ProbeSocket message should reply with a\nProbeSocketAck.\n\nThe encoding for these messages is simple:\n\n    +-------------+\n    | ProbeSocket |\n    +-------------+\n    |    Int32    |\n\n    +----------------+\n    | ProbeSocketAck |\n    +----------------+\n    |     Int32      |\n\nwhere the value for the control message headers are 4 and 5 respectively.\n\n## Main Protocol\n\nOnce a heavyweight connection has been established between two endpoints then\nthe main part of the protocol begins.\n\nThe main protocol between two endpoints consists of sending/receiving a series\nof messages: control messages and data messages. Each has a header to identify\nthe message and a body appropriate to the message type. The messages for the\nmain protocol are control messages to create and close lightweight connections,\nand data messages for sending data on a lightweight connection.\n\nLightweight connections are unidirectional. There are independent sets of\nlightweight connections in each direction of the TCP connection. The lightweight\nconnections in each direction are managed by the *sending* side. The receiving\nside has no direct control over the allocation of lightweight connections.\n\nLightweight connections are identified by a Lightweight connection ID, which is\na 32-bit signed integer. Lightweight connection IDs must be greater than 1024.\nLightweight connection ID numbers should be used sequentially.\n\nThe control messages to create or close a lightweight connection simply identify\nthe lightweight connection ID that they act on. Similarly, data messages\nidentify the ID of the lightweight connection that the data is being sent on.\n\nMessages for different connection ID can be interleaved arbitrarily (enabling\nthe multiplexing of the different lightweight connections). The only constraints\nare the obvious ones: for any connection ID the sequence of messages must be a\ncreate connection message, any number of data messages and finally a close\nconnection message.\n\nThe format of these messages is as follows:\n\n    +-----------+-----------+\n    | CreateCon |   LWCId   |\n    +-----------+-----------+\n    |   Int32   |   Int32   |\n\n    +-----------+-----------+\n    |  CloseCon |   LWCId   |\n    +-----------+-----------+\n    |   Int32   |   Int32   |\n\n    +-----------+-----------+-------------------+\n    |   LWCId   |    Len    |       Data        |\n    +-----------+-----------+-------------------+\n    |   Int32   |   Int32   |     Len-bytes     |\n\nwhere:\n\n-   CreateCon control header is 0;\n-   CloseCon control header is 1;\n-   LWCId is the lightweight connection id, which is &gt;= 1024.\n\nThe header Int32 is aliased between the control message headers and the\nlightweight connection IDs of the data messages, which is why connection ids\nmust be 1024 or greater.\n\nThe data messages consist of the lightweight connection ID and a length-prefixed\nframe of data. Implementations of this protocol may wish to impose a maximum\nsize on these data frames, e.g. to ensure reasonable multiplexing between\nconnections or for resource considerations.\n\nNote that there need be no direct correspondence between these message\nboundaries and reads/writes on the TCP socket or packets. It may make sense for\nperformance or network efficiency to arrange for a connection open, small data\nmessage and connection close to be sent in a single write.\n\n## Closing Heavyweight Connections\n\nCleanly closing the heavyweight connection is not trivial. This is because the\nheavyweight connection should only be closed once lightweight connections in\nboth directions are closed. Given that the allocation of lightweight connections\nis controlled independently by each endpoint then some synchronization is\nrequired for both endpoints to agree that there are no more lightweight\nconnections in either direction.\n\nWhen one endpoint determines that it has no more outgoing lightweight\nconnections, and the set of incoming connections it knows of is empty, then it\nmay initiate the protocol to close the heavyweight connection. It does so by\nsending a **CloseSocket** message. The message carries the maximum incoming\nlightweight connection ID seen by the endpoint: i.e. the highest connection ID\nthat has been allocated by the remote endpoint that has so far been seen by the\nlocal endpoint. The local endpoint now updates the state it uses to track the\nremote endpoint to note that it is now in the process of closing. If the local\nendpoint now receives a create connection message from the remote endpoint,\nwhile it has the remote endpoint marked as being in the process of closing then\nit resets the state back to the normal connection established state. This\nhappens if the remote endpoint opened a new lightweight connection before it\nreceived the close socket message, and so the attempt to close the socket should\nbe abandoned.\n\nWhen an endpoint receives a **CloseSocket** message it checks its local state to\ncheck the number of outbound lightweight connections and the maximum lightweight\nconnection ID it has used for outgoing connections. If there are still outbound\nconnections then the close socket message is ignored. Additionally, if the\nmaximum outbound lightweight connection ID used thus far by the local node is\nhigher than the one received in the close socket message then the close socket\nmessage is ignored. This case can happen even if the number of outbound\nconnections is currently zero, if an outbound connection was created and then\nclosed prior to the close socket message arriving. In both cases what has\nhappened is that the heavyweight connection has become active again while one\nside was trying to close it due to inactivity, and so it is appropriate to\nabandon the attempt to close it.\n\nIf on the other hand there are no outbound connections and the last new\nconnection ID seen by the remote endpoint is the same as that locally, then both\nsides agree and the TCP connection should be closed.\n\nThe message structure is:\n\n    +-------------+-----------+\n    | CloseSocket |   LWCId   |\n    +-------------+-----------|\n    |    Int32    |   Int32   |\n\nwhere:\n\n-   `CloseSocket` - close connection control message, value `2`;\n-   `LWCId` - maximum lightweight connection ID used thus far.\n\n## Flow Control and Back-pressure\n\nLightweight connections do not provide any flow control over and above what is\nprovided by TCP. The protocol does not provide any facility to reject incoming\nlightweight connections. Any such facility must be layered on top, in the\napplication layer or another intermediate layer.\n\nImplementations should consider the problem of back-pressure and head of line\nblocking. Head of line blocking is a problem common to many protocols layered on\ntop of TCP, such as HTTP 1.x where one large response can \"block\" other smaller\nresponses for other URLs because the responses are sent in order. This problem\nis less severe in this transport protocol because connection are multiplexed, so\nsmall messages need not be blocked by large messages. Nevertheless, it is still\nthe case that the multiplexed stream of data for all connections must be\nreceived in order: it is not possible to push back on one lightweight connection\nvs another, only on the whole heavyweight connection.\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-10-network-transport.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-01-cli-options.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-01-cli-options.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-01-cli-options.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title:  Cardano SL CLI Options\npath: /en/technical/cardano-sl-cli-options/\ngroup: technical\nlanguage: en\nlabel: docs\n---\n\n<!-- THIS IS AUTOGENERATED CHAPTER. DO NOT CHANGE IT MANUALLY! -->\n\nCardano SL CLI Options\n----------------------\n\nThis guide describes all executable files that are used in Cardano SL and all corresponding CLI-options/parameters.\n\n\n## cardano-node\n\n~~~\nCardano SL node.\n\nUsage: cardano-node [--version] [--db-path FILEPATH] [--rebuild-db]\n                    [--genesis-secret INT] [--keyfile FILEPATH]\n                    [--backup-phrase PHRASE] [--topology FILEPATH]\n                    [--kademlia FILEPATH] [--node-id NODE_ID]\n                    [--default-port PORT] [--policies FILEPATH]\n                    [--address IP:PORT] [--listen IP:PORT] [--json-log FILEPATH]\n                    [--log-config FILEPATH] [--logs-prefix FILEPATH]\n                    [--report-server URI] [--update-server URI]\n                    [--configuration-file FILEPATH] [--configuration-key TEXT]\n                    [--system-start TIMESTAMP] [--configuration-seed INTEGER]\n                    [--update-latest-path FILEPATH] [--update-with-package]\n                    [--no-ntp] [--route53-health-check IP:PORT] [--metrics]\n                    [--ekg-server IP:PORT] [--statsd-server IP:PORT]\n                    [--statsd-interval MILLISECONDS] [--statsd-debug BOOL]\n                    [--statsd-prefix TEXT] [--statsd-suffix TEXT]\n                    [--dump-genesis-data-to ARG] [--web] [--web-port PORT]\n                    [--tlscert FILEPATH] [--tlskey FILEPATH] [--tlsca FILEPATH]\n                    [--wallet-address IP:PORT] [--wallet-db-path ARG]\n                    [--wallet-rebuild-db]\n                    [--wallet-acid-cleanup-interval MINUTES] [--wallet-debug]\n                    [--flush-wallet-db]\n  Cardano SL main server node w/ wallet.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --db-path FILEPATH       Path to directory with all DBs used by the node. If\n                           specified path doesn’t exist, a directory will be\n                           created.\n  --rebuild-db             If node's database already exists, discard its\n                           contents and create a new one from scratch.\n  --genesis-secret INT     Used genesis secret key index.\n  --keyfile FILEPATH       Path to file with secret key (we use it for\n                           Daedalus).\n  --backup-phrase PHRASE   12-word phrase to recover the wallet. Words should be\n                           separated by spaces.\n  --topology FILEPATH      Path to a YAML file containing the network topology\n  --kademlia FILEPATH      Path to a YAML file containing the kademlia\n                           configuration\n  --node-id NODE_ID        Identifier for this node within the network\n  --default-port PORT      Port number for IP address to node ID translation\n  --policies FILEPATH      Path to a YAML file containing the network policies\n  --address IP:PORT        IP and port of external address. Please make sure\n                           these IP and port (on which node is running) are\n                           accessible otherwise proper work of CSL isn't\n                           guaranteed. 0.0.0.0 is not accepted as a valid host.\n  --listen IP:PORT         IP and port on which to bind and listen. Please make\n                           sure these IP and port are accessible, otherwise\n                           proper work of CSL isn't guaranteed.\n  --json-log FILEPATH      Path to JSON log file.\n  --log-config FILEPATH    Path to logger configuration.\n  --logs-prefix FILEPATH   Prefix to logger output path.\n  --report-server URI      Reporting server to send crash/error logs on.\n  --update-server URI      Server to download updates from.\n  --configuration-file FILEPATH\n                           Path to a yaml configuration file\n  --configuration-key TEXT Key within the configuration file to use\n  --system-start TIMESTAMP System start time. Format - seconds since Unix Epoch.\n  --configuration-seed INTEGER\n                           Seed for genesis generation. Overrides one from\n                           configuration file.\n  --update-latest-path FILEPATH\n                           Path to update installer file, which should be\n                           downloaded by Update System.\n  --update-with-package    Enable updating via installer.\n  --no-ntp                 Whether to use real NTP servers to synchronise time\n                           or rely on local time\n  --route53-health-check IP:PORT\n                           Host and port for the Route53 DNS health check.\n  --metrics                Enable metrics (EKG, statsd)\n  --ekg-server IP:PORT     Host and port for the EKG server\n  --statsd-server IP:PORT  Host and port for the statsd server\n  --statsd-interval MILLISECONDS\n                           Polling interval for statsd (milliseconds)\n  --statsd-debug BOOL      Enable statsd debug mode\n  --statsd-prefix TEXT     Prefix for statsd\n  --statsd-suffix TEXT     Suffix for statsd\n  --dump-genesis-data-to ARG\n                           Dump genesis data in canonical JSON format to this\n                           file.\n  --web                    Activate web API (it’s not linked with a wallet web\n                           API).\n  --web-port PORT          Port for web API. (default: 8080)\n  --tlscert FILEPATH       Path to file with TLS certificate\n  --tlskey FILEPATH        Path to file with TLS key\n  --tlsca FILEPATH         Path to file with TLS certificate authority\n  --wallet-address IP:PORT IP and port for backend wallet\n                           API. (default: (\"127.0.0.1\",8090))\n  --wallet-db-path ARG     Path to the wallet's database.\n  --wallet-rebuild-db      If wallet's database already exists, discard its\n                           contents and create a new one from scratch.\n  --wallet-acid-cleanup-interval MINUTES\n                           Interval on which to execute wallet cleanup action\n                           (create checkpoint and archive and cleanup archive\n                           partially)\n  --wallet-debug           Run wallet with debug params (e.g. include all the\n                           genesis keys in the set of secret keys).\n  --flush-wallet-db        Flushes all blockchain-recoverable data from DB\n                           (everything excluding wallets/accounts/addresses,\n                           metadata)\n\nCommand example:\n\n  stack exec -- cardano-node                                             \\\n    --db-path node-db0                                                   \\\n    --rebuild-db                                                         \\\n    --keyfile secrets/secret-1.key                                       \\\n    --kademlia-id a_P8zb6fNP7I2H54FtGuhqxaMDAwMDAwMDAwMDAwMDA=           \\\n    --address 127.0.0.1:3000                                             \\\n    --listen 127.0.0.1:3000                                              \\\n    --kademlia-address 127.0.0.1:3000                                    \\\n    --json-log=/tmp/logs/2017-05-22_181224/node0.json                    \\\n    --logs-prefix /tmp/logs/2017-05-22_181224                            \\\n    --log-config /tmp/logs/2017-05-22_181224/conf/node0.log.yaml         \\\n    --kademlia-dump-path /tmp/logs/2017-05-22_181224/dump/kademlia0.dump \\\n    --system-start 1495462345\n\n~~~\n\n## cardano-keygen\n\n~~~\nTool to generate keyfiles-related data\n\nUsage: cardano-keygen [--version] COMMAND [--configuration-file FILEPATH]\n                      [--configuration-key TEXT] [--system-start TIMESTAMP]\n                      [--configuration-seed INTEGER]\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --configuration-file FILEPATH\n                           Path to a yaml configuration file\n  --configuration-key TEXT Key within the configuration file to use\n  --system-start TIMESTAMP System start time. Format - seconds since Unix Epoch.\n  --configuration-seed INTEGER\n                           Seed for genesis generation. Overrides one from\n                           configuration file.\n\nAvailable commands:\n  rearrange                Rearrange keyfiles.\n  generate-key             Generate keyfile.\n  generate-vss             Generate VSS certificate.\n  read-key                 Dump keyfile contents.\n  generate-avvm-seeds      Generate avvm seeds with public keys.\n  generate-keys-by-spec    Generate secret keys and avvm seed by\n                           genesis-spec.yaml\n  dump-genesis-data        Dump genesis data (as per configuration) in json\n                           format\n~~~\n\n## cardano-explorer-swagger\n\n~~~\nCardano SL Explorer web API docs generator.\n\nUsage: cardano-explorer-swagger [--version]\n  Generate Swagger specification for Explorer web API.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n\nThis program runs during 'cardano-sl' building on Travis CI. Generated file\n'explorer-web-api-swagger.json' will be used to produce HTML documentation. This\ndocumentation will be published at cardanodocs.com using\n'update-explorer-web-api-docs.sh'.\n~~~\n\n## cardano-node-simple\n\n~~~\nCardano SL node.\n\nUsage: cardano-node-simple [--version] [--db-path FILEPATH] [--rebuild-db]\n                           [--genesis-secret INT] [--keyfile FILEPATH]\n                           [--backup-phrase PHRASE] [--topology FILEPATH]\n                           [--kademlia FILEPATH] [--node-id NODE_ID]\n                           [--default-port PORT] [--policies FILEPATH]\n                           [--address IP:PORT] [--listen IP:PORT]\n                           [--json-log FILEPATH] [--log-config FILEPATH]\n                           [--logs-prefix FILEPATH] [--report-server URI]\n                           [--update-server URI] [--configuration-file FILEPATH]\n                           [--configuration-key TEXT] [--system-start TIMESTAMP]\n                           [--configuration-seed INTEGER]\n                           [--update-latest-path FILEPATH]\n                           [--update-with-package] [--no-ntp]\n                           [--route53-health-check IP:PORT] [--metrics]\n                           [--ekg-server IP:PORT] [--statsd-server IP:PORT]\n                           [--statsd-interval MILLISECONDS]\n                           [--statsd-debug BOOL] [--statsd-prefix TEXT]\n                           [--statsd-suffix TEXT] [--dump-genesis-data-to ARG]\n                           [--behavior FILE]\n  Cardano SL main server node.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --db-path FILEPATH       Path to directory with all DBs used by the node. If\n                           specified path doesn’t exist, a directory will be\n                           created.\n  --rebuild-db             If node's database already exists, discard its\n                           contents and create a new one from scratch.\n  --genesis-secret INT     Used genesis secret key index.\n  --keyfile FILEPATH       Path to file with secret key (we use it for\n                           Daedalus).\n  --backup-phrase PHRASE   12-word phrase to recover the wallet. Words should be\n                           separated by spaces.\n  --topology FILEPATH      Path to a YAML file containing the network topology\n  --kademlia FILEPATH      Path to a YAML file containing the kademlia\n                           configuration\n  --node-id NODE_ID        Identifier for this node within the network\n  --default-port PORT      Port number for IP address to node ID translation\n  --policies FILEPATH      Path to a YAML file containing the network policies\n  --address IP:PORT        IP and port of external address. Please make sure\n                           these IP and port (on which node is running) are\n                           accessible otherwise proper work of CSL isn't\n                           guaranteed. 0.0.0.0 is not accepted as a valid host.\n  --listen IP:PORT         IP and port on which to bind and listen. Please make\n                           sure these IP and port are accessible, otherwise\n                           proper work of CSL isn't guaranteed.\n  --json-log FILEPATH      Path to JSON log file.\n  --log-config FILEPATH    Path to logger configuration.\n  --logs-prefix FILEPATH   Prefix to logger output path.\n  --report-server URI      Reporting server to send crash/error logs on.\n  --update-server URI      Server to download updates from.\n  --configuration-file FILEPATH\n                           Path to a yaml configuration file\n  --configuration-key TEXT Key within the configuration file to use\n  --system-start TIMESTAMP System start time. Format - seconds since Unix Epoch.\n  --configuration-seed INTEGER\n                           Seed for genesis generation. Overrides one from\n                           configuration file.\n  --update-latest-path FILEPATH\n                           Path to update installer file, which should be\n                           downloaded by Update System.\n  --update-with-package    Enable updating via installer.\n  --no-ntp                 Whether to use real NTP servers to synchronise time\n                           or rely on local time\n  --route53-health-check IP:PORT\n                           Host and port for the Route53 DNS health check.\n  --metrics                Enable metrics (EKG, statsd)\n  --ekg-server IP:PORT     Host and port for the EKG server\n  --statsd-server IP:PORT  Host and port for the statsd server\n  --statsd-interval MILLISECONDS\n                           Polling interval for statsd (milliseconds)\n  --statsd-debug BOOL      Enable statsd debug mode\n  --statsd-prefix TEXT     Prefix for statsd\n  --statsd-suffix TEXT     Suffix for statsd\n  --dump-genesis-data-to ARG\n                           Dump genesis data in canonical JSON format to this\n                           file.\n  --behavior FILE          Path to the behavior config\n\nCommand example:\n\n  stack exec -- cardano-node                                             \\\n    --db-path node-db0                                                   \\\n    --rebuild-db                                                         \\\n    --keyfile secrets/secret-1.key                                       \\\n    --kademlia-id a_P8zb6fNP7I2H54FtGuhqxaMDAwMDAwMDAwMDAwMDA=           \\\n    --address 127.0.0.1:3000                                             \\\n    --listen 127.0.0.1:3000                                              \\\n    --kademlia-address 127.0.0.1:3000                                    \\\n    --json-log=/tmp/logs/2017-05-22_181224/node0.json                    \\\n    --logs-prefix /tmp/logs/2017-05-22_181224                            \\\n    --log-config /tmp/logs/2017-05-22_181224/conf/node0.log.yaml         \\\n    --kademlia-dump-path /tmp/logs/2017-05-22_181224/dump/kademlia0.dump \\\n    --system-start 1495462345\n\n~~~\n\n## cardano-launcher\n\n~~~\nTool to launch Cardano SL.\n\nUsage: cardano-launcher [--version] --node PATH [-n ARG]\n                        [--node-log-config PATH] [--node-log-path PATH]\n                        [--wallet PATH] [-w ARG] --updater PATH [-u ARG]\n                        [--update-archive PATH] [--updater-windows-runner PATH]\n                        --node-timeout SEC [--report-server URL]\n                        [--configuration-file FILEPATH]\n                        [--configuration-key TEXT] [--system-start TIMESTAMP]\n                        [--configuration-seed INTEGER]\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --node PATH              Path to the node executable.\n  -n ARG                   An argument to be passed to the node.\n  --node-log-config PATH   Path to log config that will be used by the node.\n  --node-log-path PATH     File where node stdout/err will be redirected (def:\n                           temp file).\n  --wallet PATH            Path to the wallet executable.\n  -w ARG                   An argument to be passed to the wallet.\n  --updater PATH           Path to the updater executable.\n  -u ARG                   An argument to be passed to the updater.\n  --update-archive PATH    Path to the update archive, it will be passed to the\n                           updater.\n  --updater-windows-runner PATH\n                           Path to write the Windows batch file executing\n                           updater\n  --node-timeout SEC       How much to wait for the node to exit before killing\n                           it.\n  --report-server URL      Where to send logs in case of failure.\n  --configuration-file FILEPATH\n                           Path to a yaml configuration file\n  --configuration-key TEXT Key within the configuration file to use\n  --system-start TIMESTAMP System start time. Format - seconds since Unix Epoch.\n  --configuration-seed INTEGER\n                           Seed for genesis generation. Overrides one from\n                           configuration file.\n\nCommand example:\n\n  stack exec -- cardano-launcher                                   \\\n    --node binaries_v000/cardano-node                              \\\n    --node-log-config scripts/log-templates/update-log-config.yaml \\\n    -n \"--update-server\"                                           \\\n    -n \"http://localhost:3001\"                                     \\\n    -n \"--update-latest-path\"                                      \\\n    -n \"updateDownloaded.tar\"                                      \\\n    -n \"--listen\"                                                  \\\n    -n \"127.0.0.1:3004\"                                            \\\n    -n \"--kademlia-id\"                                             \\\n    -n \"a_P8zb6fNP7I2H54FtGuhqxaMDAwMDAwMDAwMDAwMDA=\"              \\\n    -n \"--flat-distr\"                                              \\\n    -n \"(3,100000)\"                                                \\\n    -n \"--rebuild-db\"                                              \\\n    -n \"--wallet\"                                                  \\\n    -n \"--web-port\"                                                \\\n    -n 8080                                                        \\\n    -n \"--wallet-rebuild-db\"                                       \\\n    --updater cardano-updater                                      \\\n    -u \"dir\"                                                       \\\n    -u \"binaries_v000\"                                             \\\n    --node-timeout 5                                               \\\n    --update-archive updateDownloaded.tar\n\n~~~\n\n## cardano-block-gen\n\n~~~\nCardano SL blockchain generator\n\nUsage: cardano-block-gen [--version] --blocks INT --nodes INT\n                         [--generated-db FILEPATH] [--append] [--seed INT]\n                         [--tx-count (INT,INT)] [--tx-max-outs INT]\n  It generates database of node, corresponding to some correct blockchain\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --blocks INT             Length of blockchain.\n  --nodes INT              Number of nodes.\n  --generated-db FILEPATH  Location of generated database.\n  --append                 If database already exists, append to it.\n  --seed INT               Custom seed to generate blocks.\n  --tx-count (INT,INT)     Tx count range.\n  --tx-max-outs INT        Max number of outputs in tx\n\nCommand example:\n\n  stack exec -- cardano-block-gen           \\\n    --blocks 5000                           \\\n    --nodes 3                               \\\n    --coins 100                             \\\n    --generated-db /path/to/existed/db      \\\n    --seed 123                              \\\n    --append\n\n~~~\n\n## cardano-report-server\n\n~~~\nCardanoSL report server\n\nUsage: cardano-report-server [-p|--port INTEGER] [--logsdir FILEPATH]\n                             [--severity SEVERITY] [--size-limit BYTES]\n                             [--version]\n  CardanoSL reporting server daemon\n\nAvailable options:\n  -p,--port INTEGER        Port server is running on\n  --logsdir FILEPATH       Directory server will be saving logs in\n  --severity SEVERITY      Logging severity\n  --size-limit BYTES       Maximum body size allowed (will send 413 responses if\n                           bigger)\n  -h,--help                Show this help text\n  --version                Show version\n~~~\n\n## cardano-dht-keygen\n\n~~~\nGenerator of random key for Kademlia DHT.\n\nUsage: cardano-dht-keygen [--version] (-n|--nonce STRING)\n  Generated key will be print to stdout.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  -n,--nonce STRING        14-characters string.\n~~~\n\n## cardano-explorer-mock\n\n~~~\nCardano SL Explorer web mock.\n\nUsage: cardano-explorer-mock [--version]\n  Run mock for Explorer web API.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n\nThis program returns just the mocked data. It doesn't call any CSL functions and\ndoesn't interact with it. It just implements the API and returns simeple test\ndata.\n~~~\n\n## cardano-addr-convert\n\n~~~\nTool to convert vending addresses into testnet addresses.\n\nUsage: cardano-addr-convert [--version] [-a|--address STRING]\n  Produce public key and write it in stdout.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  -a,--address STRING      Address to convert. It must be in base64(url) format.\n\nCommand example:\n\n  stack exec -- cardano-addr-convert -a 2HF83bvYCTzoCbVta6t64W8rFEnvnkJbIUFoT5tOyoU=\n\nOutput example:\n\n  3mhNKjfhaCT13DjcQ9eMK4VHfZrFxmyXq8SjVPRtz7SWfP\n\nYou can also run it without arguments to switch to interactive mode.\nIn this case each entered vending address is echoed with a testnet address.\n\n~~~\n\n## cardano-blockchain-analyser\n\n~~~\nCardano SL blockchain generator\n\nUsage: cardano-blockchain-analyser --db FILEPATH ([-k] | [-m] | [-g] | [-a] |\n                                   [-b]) [--print-mode [human|csv|table]]\n                                   [-i|--incremental] [--log-config FILEPATH]\n                                   [--logs-prefix FILEPATH]\n                                   [--report-server URI] [--update-server URI]\n                                   [--configuration-file FILEPATH]\n                                   [--configuration-key TEXT]\n                                   [--system-start TIMESTAMP]\n                                   [--configuration-seed INTEGER]\n  Analyse a blockchain and spit out useful metrics.\n\nAvailable options:\n  -h,--help                Show this help text\n  --db FILEPATH            Location of the database where the blockchain is\n                           stored.\n  -k                       Display block counts in kilobytes (KB).\n  -m                       Display block counts in megabytes (MB).\n  -g                       Display block counts in gigabytes (GB).\n  -a                       Display block counts using an adaptive multiplier.\n  -b                       Display block counts in bytes (B).\n  --print-mode [human|csv|table]\n                           Select the desidered rendering mode, one between\n                           'human', 'csv' or 'table'.\n  -i,--incremental         Run in incremental mode. In this mode, table output\n                           will be disabled and rendered as a .csv, as is not\n                           possible to generate nice-looking tables whilst\n                           reading the blockchain one block at time. You almost\n                           always want to be using this mode for huge\n                           blockchains, as it's much more memory efficient.\n  --log-config FILEPATH    Path to logger configuration.\n  --logs-prefix FILEPATH   Prefix to logger output path.\n  --report-server URI      Reporting server to send crash/error logs on.\n  --update-server URI      Server to download updates from.\n  --configuration-file FILEPATH\n                           Path to a yaml configuration file\n  --configuration-key TEXT Key within the configuration file to use\n  --system-start TIMESTAMP System start time. Format - seconds since Unix Epoch.\n  --configuration-seed INTEGER\n                           Seed for genesis generation. Overrides one from\n                           configuration file.\n\nCommand example:\n\n  cardano-blockchain-analyser --db /path/to/existing/db\n\n~~~\n\n## cardano-auxx\n\n~~~\nCLI-based utilities (auxx).\n\nUsage: cardano-auxx [--version] COMMAND [--db-path FILEPATH] [--rebuild-db]\n                    [--genesis-secret INT] [--keyfile FILEPATH]\n                    [--backup-phrase PHRASE] [--topology FILEPATH]\n                    [--kademlia FILEPATH] [--node-id NODE_ID]\n                    [--default-port PORT] [--policies FILEPATH]\n                    [--address IP:PORT] [--listen IP:PORT] [--json-log FILEPATH]\n                    [--log-config FILEPATH] [--logs-prefix FILEPATH]\n                    [--report-server URI] [--update-server URI]\n                    [--configuration-file FILEPATH] [--configuration-key TEXT]\n                    [--system-start TIMESTAMP] [--configuration-seed INTEGER]\n                    [--update-latest-path FILEPATH] [--update-with-package]\n                    [--no-ntp] [--route53-health-check IP:PORT] [--metrics]\n                    [--ekg-server IP:PORT] [--statsd-server IP:PORT]\n                    [--statsd-interval MILLISECONDS] [--statsd-debug BOOL]\n                    [--statsd-prefix TEXT] [--statsd-suffix TEXT]\n                    [--dump-genesis-data-to ARG] [--peer HOST:PORT]\n                    [--node-enabled]\n  Cardano SL CLI utilities.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --db-path FILEPATH       Path to directory with all DBs used by the node. If\n                           specified path doesn’t exist, a directory will be\n                           created.\n  --rebuild-db             If node's database already exists, discard its\n                           contents and create a new one from scratch.\n  --genesis-secret INT     Used genesis secret key index.\n  --keyfile FILEPATH       Path to file with secret key (we use it for\n                           Daedalus).\n  --backup-phrase PHRASE   12-word phrase to recover the wallet. Words should be\n                           separated by spaces.\n  --topology FILEPATH      Path to a YAML file containing the network topology\n  --kademlia FILEPATH      Path to a YAML file containing the kademlia\n                           configuration\n  --node-id NODE_ID        Identifier for this node within the network\n  --default-port PORT      Port number for IP address to node ID translation\n  --policies FILEPATH      Path to a YAML file containing the network policies\n  --address IP:PORT        IP and port of external address. Please make sure\n                           these IP and port (on which node is running) are\n                           accessible otherwise proper work of CSL isn't\n                           guaranteed. 0.0.0.0 is not accepted as a valid host.\n  --listen IP:PORT         IP and port on which to bind and listen. Please make\n                           sure these IP and port are accessible, otherwise\n                           proper work of CSL isn't guaranteed.\n  --json-log FILEPATH      Path to JSON log file.\n  --log-config FILEPATH    Path to logger configuration.\n  --logs-prefix FILEPATH   Prefix to logger output path.\n  --report-server URI      Reporting server to send crash/error logs on.\n  --update-server URI      Server to download updates from.\n  --configuration-file FILEPATH\n                           Path to a yaml configuration file\n  --configuration-key TEXT Key within the configuration file to use\n  --system-start TIMESTAMP System start time. Format - seconds since Unix Epoch.\n  --configuration-seed INTEGER\n                           Seed for genesis generation. Overrides one from\n                           configuration file.\n  --update-latest-path FILEPATH\n                           Path to update installer file, which should be\n                           downloaded by Update System.\n  --update-with-package    Enable updating via installer.\n  --no-ntp                 Whether to use real NTP servers to synchronise time\n                           or rely on local time\n  --route53-health-check IP:PORT\n                           Host and port for the Route53 DNS health check.\n  --metrics                Enable metrics (EKG, statsd)\n  --ekg-server IP:PORT     Host and port for the EKG server\n  --statsd-server IP:PORT  Host and port for the statsd server\n  --statsd-interval MILLISECONDS\n                           Polling interval for statsd (milliseconds)\n  --statsd-debug BOOL      Enable statsd debug mode\n  --statsd-prefix TEXT     Prefix for statsd\n  --statsd-suffix TEXT     Suffix for statsd\n  --dump-genesis-data-to ARG\n                           Dump genesis data in canonical JSON format to this\n                           file.\n  --peer HOST:PORT         Address of a peer.\n  --node-enabled           Run auxx as a plugin for the node, as opposed to\n                           running it standalone (default: standalone).\n\nAvailable commands:\n  repl                     Run REPL in console to evaluate the commands.\n  cmd                      Execute a list of predefined commands.\n\nCommand example:\n\n  stack exec -- cardano-auxx                                     \\\n    --db-path run/auxx-db                                        \\\n    --rebuild-db                                                 \\\n    --json-log=/tmp/logs/2017-05-22_181224/node0.json            \\\n    --logs-prefix /tmp/logs/2017-05-22_181224                    \\\n    --log-config /tmp/logs/2017-05-22_181224/conf/node0.log.yaml \\\n    --system-start 1495462345                                    \\\n    --peer 127.0.0.1:3001                                        \\\n    repl\n\n~~~\n\n## cardano-cli-docs\n\n~~~\nTool to generate CLI-docs for Cardano SL executable files.\n\nUsage: cardano-cli-docs [--version] --bin-dir PATH\n  Generate Markdown chapter for cardanodocs.com.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --bin-dir PATH           Path to the directory with Cardano SL executable\n                           files.\n\nAssumed that this program will run on Travis CI. Produced file\n'cardano-cli-docs.md' will be renamed in a chapter and pushed in cardanodocs.com\nrepository.\n~~~\n\n## cardano-genupdate\n\n~~~\nCardano SL updates generator.\n\nUsage: cardano-genupdate [--version] --old PATH --new PATH (-o|--output PATH)\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --old PATH               Path to directory with old program.\n  --new PATH               Path to directory with new program.\n  -o,--output PATH         Path to output .tar-file with diff.\n\nCommand example:\n\n  stack exec -- cardano-genupdate --old /tmp/app-v000 --new /tmp/app-v001 -o /tmp/app-update.tar\n\nBoth directories must have equal file structure (e.g. they must contain the same\nfiles in the same subdirectories correspondingly), otherwise 'cardano-genupdate' will fail.\n\nPlease note that 'cardano-genupdate' uses 'bsdiff' program, so make sure 'bsdiff' is available in the PATH.\n\n~~~\n\n## cardano-explorer\n\n~~~\nCardano SL explorer.\n\nUsage: cardano-explorer [--version] [--db-path FILEPATH] [--rebuild-db]\n                        [--genesis-secret INT] [--keyfile FILEPATH]\n                        [--backup-phrase PHRASE] [--topology FILEPATH]\n                        [--kademlia FILEPATH] [--node-id NODE_ID]\n                        [--default-port PORT] [--policies FILEPATH]\n                        [--address IP:PORT] [--listen IP:PORT]\n                        [--json-log FILEPATH] [--log-config FILEPATH]\n                        [--logs-prefix FILEPATH] [--report-server URI]\n                        [--update-server URI] [--configuration-file FILEPATH]\n                        [--configuration-key TEXT] [--system-start TIMESTAMP]\n                        [--configuration-seed INTEGER]\n                        [--update-latest-path FILEPATH] [--update-with-package]\n                        [--no-ntp] [--route53-health-check IP:PORT] [--metrics]\n                        [--ekg-server IP:PORT] [--statsd-server IP:PORT]\n                        [--statsd-interval MILLISECONDS] [--statsd-debug BOOL]\n                        [--statsd-prefix TEXT] [--statsd-suffix TEXT]\n                        [--dump-genesis-data-to ARG] [--web-port PORT]\n                        [--notifier-port PORT]\n  Cardano SL main server node w/ explorer.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --db-path FILEPATH       Path to directory with all DBs used by the node. If\n                           specified path doesn’t exist, a directory will be\n                           created.\n  --rebuild-db             If node's database already exists, discard its\n                           contents and create a new one from scratch.\n  --genesis-secret INT     Used genesis secret key index.\n  --keyfile FILEPATH       Path to file with secret key (we use it for\n                           Daedalus).\n  --backup-phrase PHRASE   12-word phrase to recover the wallet. Words should be\n                           separated by spaces.\n  --topology FILEPATH      Path to a YAML file containing the network topology\n  --kademlia FILEPATH      Path to a YAML file containing the kademlia\n                           configuration\n  --node-id NODE_ID        Identifier for this node within the network\n  --default-port PORT      Port number for IP address to node ID translation\n  --policies FILEPATH      Path to a YAML file containing the network policies\n  --address IP:PORT        IP and port of external address. Please make sure\n                           these IP and port (on which node is running) are\n                           accessible otherwise proper work of CSL isn't\n                           guaranteed. 0.0.0.0 is not accepted as a valid host.\n  --listen IP:PORT         IP and port on which to bind and listen. Please make\n                           sure these IP and port are accessible, otherwise\n                           proper work of CSL isn't guaranteed.\n  --json-log FILEPATH      Path to JSON log file.\n  --log-config FILEPATH    Path to logger configuration.\n  --logs-prefix FILEPATH   Prefix to logger output path.\n  --report-server URI      Reporting server to send crash/error logs on.\n  --update-server URI      Server to download updates from.\n  --configuration-file FILEPATH\n                           Path to a yaml configuration file\n  --configuration-key TEXT Key within the configuration file to use\n  --system-start TIMESTAMP System start time. Format - seconds since Unix Epoch.\n  --configuration-seed INTEGER\n                           Seed for genesis generation. Overrides one from\n                           configuration file.\n  --update-latest-path FILEPATH\n                           Path to update installer file, which should be\n                           downloaded by Update System.\n  --update-with-package    Enable updating via installer.\n  --no-ntp                 Whether to use real NTP servers to synchronise time\n                           or rely on local time\n  --route53-health-check IP:PORT\n                           Host and port for the Route53 DNS health check.\n  --metrics                Enable metrics (EKG, statsd)\n  --ekg-server IP:PORT     Host and port for the EKG server\n  --statsd-server IP:PORT  Host and port for the statsd server\n  --statsd-interval MILLISECONDS\n                           Polling interval for statsd (milliseconds)\n  --statsd-debug BOOL      Enable statsd debug mode\n  --statsd-prefix TEXT     Prefix for statsd\n  --statsd-suffix TEXT     Suffix for statsd\n  --dump-genesis-data-to ARG\n                           Dump genesis data in canonical JSON format to this\n                           file.\n  --web-port PORT          Port for web API. (default: 8100)\n  --notifier-port PORT     Port for update notifier, the socket.io\n                           backend. (default: 8110)\n\n~~~\n\n## cardano-swagger\n\n~~~\nCardano SL Wallet web API docs generator.\n\nUsage: cardano-swagger [--version]\n  Generate Swagger specification for Wallet web API.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n\nThis program runs during 'cardano-sl' building on Travis CI. Generated file\n'wallet-web-api-swagger.json' will be used to produce HTML documentation. This\ndocumentation will be published at cardanodocs.com using\n'update_wallet_web_api_docs.sh'.\n~~~\n\n## cardano-post-mortem\n\n~~~\ncardano-post-mortem\n\nUsage: cardano-post-mortem COMMAND\n  analyzes the json logs from several directories or focusses on a single\n  transaction\n\nAvailable options:\n  -h,--help                Show this help text\n\nAvailable commands:\n  overview                 analyzes the json logs from LOGDIRS...\n  focus                    analyzes transaction FOCUS in log folder LOGDIR\n  txrelay                  analyzes transaction relays in the json logs from\n                           LOGDIRS...\n  throughput               analyzes transaction throughput and waiting time per\n                           time windows TXWINDOW and WAITWINDOW in the json logs\n                           from LOGDIRS...\n~~~\n",
        "type": "MarkdownRemark",
        "contentDigest": "205ef60eb660aee1702a97723dabbeb7",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "Cardano SL CLI Options",
        "path": "/en/technical/cardano-sl-cli-options/",
        "group": "technical",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-01-cli-options.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-01-cli-options.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n<!-- THIS IS AUTOGENERATED CHAPTER. DO NOT CHANGE IT MANUALLY! -->\n\nCardano SL CLI Options\n----------------------\n\nThis guide describes all executable files that are used in Cardano SL and all corresponding CLI-options/parameters.\n\n\n## cardano-node\n\n~~~\nCardano SL node.\n\nUsage: cardano-node [--version] [--db-path FILEPATH] [--rebuild-db]\n                    [--genesis-secret INT] [--keyfile FILEPATH]\n                    [--backup-phrase PHRASE] [--topology FILEPATH]\n                    [--kademlia FILEPATH] [--node-id NODE_ID]\n                    [--default-port PORT] [--policies FILEPATH]\n                    [--address IP:PORT] [--listen IP:PORT] [--json-log FILEPATH]\n                    [--log-config FILEPATH] [--logs-prefix FILEPATH]\n                    [--report-server URI] [--update-server URI]\n                    [--configuration-file FILEPATH] [--configuration-key TEXT]\n                    [--system-start TIMESTAMP] [--configuration-seed INTEGER]\n                    [--update-latest-path FILEPATH] [--update-with-package]\n                    [--no-ntp] [--route53-health-check IP:PORT] [--metrics]\n                    [--ekg-server IP:PORT] [--statsd-server IP:PORT]\n                    [--statsd-interval MILLISECONDS] [--statsd-debug BOOL]\n                    [--statsd-prefix TEXT] [--statsd-suffix TEXT]\n                    [--dump-genesis-data-to ARG] [--web] [--web-port PORT]\n                    [--tlscert FILEPATH] [--tlskey FILEPATH] [--tlsca FILEPATH]\n                    [--wallet-address IP:PORT] [--wallet-db-path ARG]\n                    [--wallet-rebuild-db]\n                    [--wallet-acid-cleanup-interval MINUTES] [--wallet-debug]\n                    [--flush-wallet-db]\n  Cardano SL main server node w/ wallet.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --db-path FILEPATH       Path to directory with all DBs used by the node. If\n                           specified path doesn’t exist, a directory will be\n                           created.\n  --rebuild-db             If node's database already exists, discard its\n                           contents and create a new one from scratch.\n  --genesis-secret INT     Used genesis secret key index.\n  --keyfile FILEPATH       Path to file with secret key (we use it for\n                           Daedalus).\n  --backup-phrase PHRASE   12-word phrase to recover the wallet. Words should be\n                           separated by spaces.\n  --topology FILEPATH      Path to a YAML file containing the network topology\n  --kademlia FILEPATH      Path to a YAML file containing the kademlia\n                           configuration\n  --node-id NODE_ID        Identifier for this node within the network\n  --default-port PORT      Port number for IP address to node ID translation\n  --policies FILEPATH      Path to a YAML file containing the network policies\n  --address IP:PORT        IP and port of external address. Please make sure\n                           these IP and port (on which node is running) are\n                           accessible otherwise proper work of CSL isn't\n                           guaranteed. 0.0.0.0 is not accepted as a valid host.\n  --listen IP:PORT         IP and port on which to bind and listen. Please make\n                           sure these IP and port are accessible, otherwise\n                           proper work of CSL isn't guaranteed.\n  --json-log FILEPATH      Path to JSON log file.\n  --log-config FILEPATH    Path to logger configuration.\n  --logs-prefix FILEPATH   Prefix to logger output path.\n  --report-server URI      Reporting server to send crash/error logs on.\n  --update-server URI      Server to download updates from.\n  --configuration-file FILEPATH\n                           Path to a yaml configuration file\n  --configuration-key TEXT Key within the configuration file to use\n  --system-start TIMESTAMP System start time. Format - seconds since Unix Epoch.\n  --configuration-seed INTEGER\n                           Seed for genesis generation. Overrides one from\n                           configuration file.\n  --update-latest-path FILEPATH\n                           Path to update installer file, which should be\n                           downloaded by Update System.\n  --update-with-package    Enable updating via installer.\n  --no-ntp                 Whether to use real NTP servers to synchronise time\n                           or rely on local time\n  --route53-health-check IP:PORT\n                           Host and port for the Route53 DNS health check.\n  --metrics                Enable metrics (EKG, statsd)\n  --ekg-server IP:PORT     Host and port for the EKG server\n  --statsd-server IP:PORT  Host and port for the statsd server\n  --statsd-interval MILLISECONDS\n                           Polling interval for statsd (milliseconds)\n  --statsd-debug BOOL      Enable statsd debug mode\n  --statsd-prefix TEXT     Prefix for statsd\n  --statsd-suffix TEXT     Suffix for statsd\n  --dump-genesis-data-to ARG\n                           Dump genesis data in canonical JSON format to this\n                           file.\n  --web                    Activate web API (it’s not linked with a wallet web\n                           API).\n  --web-port PORT          Port for web API. (default: 8080)\n  --tlscert FILEPATH       Path to file with TLS certificate\n  --tlskey FILEPATH        Path to file with TLS key\n  --tlsca FILEPATH         Path to file with TLS certificate authority\n  --wallet-address IP:PORT IP and port for backend wallet\n                           API. (default: (\"127.0.0.1\",8090))\n  --wallet-db-path ARG     Path to the wallet's database.\n  --wallet-rebuild-db      If wallet's database already exists, discard its\n                           contents and create a new one from scratch.\n  --wallet-acid-cleanup-interval MINUTES\n                           Interval on which to execute wallet cleanup action\n                           (create checkpoint and archive and cleanup archive\n                           partially)\n  --wallet-debug           Run wallet with debug params (e.g. include all the\n                           genesis keys in the set of secret keys).\n  --flush-wallet-db        Flushes all blockchain-recoverable data from DB\n                           (everything excluding wallets/accounts/addresses,\n                           metadata)\n\nCommand example:\n\n  stack exec -- cardano-node                                             \\\n    --db-path node-db0                                                   \\\n    --rebuild-db                                                         \\\n    --keyfile secrets/secret-1.key                                       \\\n    --kademlia-id a_P8zb6fNP7I2H54FtGuhqxaMDAwMDAwMDAwMDAwMDA=           \\\n    --address 127.0.0.1:3000                                             \\\n    --listen 127.0.0.1:3000                                              \\\n    --kademlia-address 127.0.0.1:3000                                    \\\n    --json-log=/tmp/logs/2017-05-22_181224/node0.json                    \\\n    --logs-prefix /tmp/logs/2017-05-22_181224                            \\\n    --log-config /tmp/logs/2017-05-22_181224/conf/node0.log.yaml         \\\n    --kademlia-dump-path /tmp/logs/2017-05-22_181224/dump/kademlia0.dump \\\n    --system-start 1495462345\n\n~~~\n\n## cardano-keygen\n\n~~~\nTool to generate keyfiles-related data\n\nUsage: cardano-keygen [--version] COMMAND [--configuration-file FILEPATH]\n                      [--configuration-key TEXT] [--system-start TIMESTAMP]\n                      [--configuration-seed INTEGER]\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --configuration-file FILEPATH\n                           Path to a yaml configuration file\n  --configuration-key TEXT Key within the configuration file to use\n  --system-start TIMESTAMP System start time. Format - seconds since Unix Epoch.\n  --configuration-seed INTEGER\n                           Seed for genesis generation. Overrides one from\n                           configuration file.\n\nAvailable commands:\n  rearrange                Rearrange keyfiles.\n  generate-key             Generate keyfile.\n  generate-vss             Generate VSS certificate.\n  read-key                 Dump keyfile contents.\n  generate-avvm-seeds      Generate avvm seeds with public keys.\n  generate-keys-by-spec    Generate secret keys and avvm seed by\n                           genesis-spec.yaml\n  dump-genesis-data        Dump genesis data (as per configuration) in json\n                           format\n~~~\n\n## cardano-explorer-swagger\n\n~~~\nCardano SL Explorer web API docs generator.\n\nUsage: cardano-explorer-swagger [--version]\n  Generate Swagger specification for Explorer web API.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n\nThis program runs during 'cardano-sl' building on Travis CI. Generated file\n'explorer-web-api-swagger.json' will be used to produce HTML documentation. This\ndocumentation will be published at cardanodocs.com using\n'update-explorer-web-api-docs.sh'.\n~~~\n\n## cardano-node-simple\n\n~~~\nCardano SL node.\n\nUsage: cardano-node-simple [--version] [--db-path FILEPATH] [--rebuild-db]\n                           [--genesis-secret INT] [--keyfile FILEPATH]\n                           [--backup-phrase PHRASE] [--topology FILEPATH]\n                           [--kademlia FILEPATH] [--node-id NODE_ID]\n                           [--default-port PORT] [--policies FILEPATH]\n                           [--address IP:PORT] [--listen IP:PORT]\n                           [--json-log FILEPATH] [--log-config FILEPATH]\n                           [--logs-prefix FILEPATH] [--report-server URI]\n                           [--update-server URI] [--configuration-file FILEPATH]\n                           [--configuration-key TEXT] [--system-start TIMESTAMP]\n                           [--configuration-seed INTEGER]\n                           [--update-latest-path FILEPATH]\n                           [--update-with-package] [--no-ntp]\n                           [--route53-health-check IP:PORT] [--metrics]\n                           [--ekg-server IP:PORT] [--statsd-server IP:PORT]\n                           [--statsd-interval MILLISECONDS]\n                           [--statsd-debug BOOL] [--statsd-prefix TEXT]\n                           [--statsd-suffix TEXT] [--dump-genesis-data-to ARG]\n                           [--behavior FILE]\n  Cardano SL main server node.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --db-path FILEPATH       Path to directory with all DBs used by the node. If\n                           specified path doesn’t exist, a directory will be\n                           created.\n  --rebuild-db             If node's database already exists, discard its\n                           contents and create a new one from scratch.\n  --genesis-secret INT     Used genesis secret key index.\n  --keyfile FILEPATH       Path to file with secret key (we use it for\n                           Daedalus).\n  --backup-phrase PHRASE   12-word phrase to recover the wallet. Words should be\n                           separated by spaces.\n  --topology FILEPATH      Path to a YAML file containing the network topology\n  --kademlia FILEPATH      Path to a YAML file containing the kademlia\n                           configuration\n  --node-id NODE_ID        Identifier for this node within the network\n  --default-port PORT      Port number for IP address to node ID translation\n  --policies FILEPATH      Path to a YAML file containing the network policies\n  --address IP:PORT        IP and port of external address. Please make sure\n                           these IP and port (on which node is running) are\n                           accessible otherwise proper work of CSL isn't\n                           guaranteed. 0.0.0.0 is not accepted as a valid host.\n  --listen IP:PORT         IP and port on which to bind and listen. Please make\n                           sure these IP and port are accessible, otherwise\n                           proper work of CSL isn't guaranteed.\n  --json-log FILEPATH      Path to JSON log file.\n  --log-config FILEPATH    Path to logger configuration.\n  --logs-prefix FILEPATH   Prefix to logger output path.\n  --report-server URI      Reporting server to send crash/error logs on.\n  --update-server URI      Server to download updates from.\n  --configuration-file FILEPATH\n                           Path to a yaml configuration file\n  --configuration-key TEXT Key within the configuration file to use\n  --system-start TIMESTAMP System start time. Format - seconds since Unix Epoch.\n  --configuration-seed INTEGER\n                           Seed for genesis generation. Overrides one from\n                           configuration file.\n  --update-latest-path FILEPATH\n                           Path to update installer file, which should be\n                           downloaded by Update System.\n  --update-with-package    Enable updating via installer.\n  --no-ntp                 Whether to use real NTP servers to synchronise time\n                           or rely on local time\n  --route53-health-check IP:PORT\n                           Host and port for the Route53 DNS health check.\n  --metrics                Enable metrics (EKG, statsd)\n  --ekg-server IP:PORT     Host and port for the EKG server\n  --statsd-server IP:PORT  Host and port for the statsd server\n  --statsd-interval MILLISECONDS\n                           Polling interval for statsd (milliseconds)\n  --statsd-debug BOOL      Enable statsd debug mode\n  --statsd-prefix TEXT     Prefix for statsd\n  --statsd-suffix TEXT     Suffix for statsd\n  --dump-genesis-data-to ARG\n                           Dump genesis data in canonical JSON format to this\n                           file.\n  --behavior FILE          Path to the behavior config\n\nCommand example:\n\n  stack exec -- cardano-node                                             \\\n    --db-path node-db0                                                   \\\n    --rebuild-db                                                         \\\n    --keyfile secrets/secret-1.key                                       \\\n    --kademlia-id a_P8zb6fNP7I2H54FtGuhqxaMDAwMDAwMDAwMDAwMDA=           \\\n    --address 127.0.0.1:3000                                             \\\n    --listen 127.0.0.1:3000                                              \\\n    --kademlia-address 127.0.0.1:3000                                    \\\n    --json-log=/tmp/logs/2017-05-22_181224/node0.json                    \\\n    --logs-prefix /tmp/logs/2017-05-22_181224                            \\\n    --log-config /tmp/logs/2017-05-22_181224/conf/node0.log.yaml         \\\n    --kademlia-dump-path /tmp/logs/2017-05-22_181224/dump/kademlia0.dump \\\n    --system-start 1495462345\n\n~~~\n\n## cardano-launcher\n\n~~~\nTool to launch Cardano SL.\n\nUsage: cardano-launcher [--version] --node PATH [-n ARG]\n                        [--node-log-config PATH] [--node-log-path PATH]\n                        [--wallet PATH] [-w ARG] --updater PATH [-u ARG]\n                        [--update-archive PATH] [--updater-windows-runner PATH]\n                        --node-timeout SEC [--report-server URL]\n                        [--configuration-file FILEPATH]\n                        [--configuration-key TEXT] [--system-start TIMESTAMP]\n                        [--configuration-seed INTEGER]\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --node PATH              Path to the node executable.\n  -n ARG                   An argument to be passed to the node.\n  --node-log-config PATH   Path to log config that will be used by the node.\n  --node-log-path PATH     File where node stdout/err will be redirected (def:\n                           temp file).\n  --wallet PATH            Path to the wallet executable.\n  -w ARG                   An argument to be passed to the wallet.\n  --updater PATH           Path to the updater executable.\n  -u ARG                   An argument to be passed to the updater.\n  --update-archive PATH    Path to the update archive, it will be passed to the\n                           updater.\n  --updater-windows-runner PATH\n                           Path to write the Windows batch file executing\n                           updater\n  --node-timeout SEC       How much to wait for the node to exit before killing\n                           it.\n  --report-server URL      Where to send logs in case of failure.\n  --configuration-file FILEPATH\n                           Path to a yaml configuration file\n  --configuration-key TEXT Key within the configuration file to use\n  --system-start TIMESTAMP System start time. Format - seconds since Unix Epoch.\n  --configuration-seed INTEGER\n                           Seed for genesis generation. Overrides one from\n                           configuration file.\n\nCommand example:\n\n  stack exec -- cardano-launcher                                   \\\n    --node binaries_v000/cardano-node                              \\\n    --node-log-config scripts/log-templates/update-log-config.yaml \\\n    -n \"--update-server\"                                           \\\n    -n \"http://localhost:3001\"                                     \\\n    -n \"--update-latest-path\"                                      \\\n    -n \"updateDownloaded.tar\"                                      \\\n    -n \"--listen\"                                                  \\\n    -n \"127.0.0.1:3004\"                                            \\\n    -n \"--kademlia-id\"                                             \\\n    -n \"a_P8zb6fNP7I2H54FtGuhqxaMDAwMDAwMDAwMDAwMDA=\"              \\\n    -n \"--flat-distr\"                                              \\\n    -n \"(3,100000)\"                                                \\\n    -n \"--rebuild-db\"                                              \\\n    -n \"--wallet\"                                                  \\\n    -n \"--web-port\"                                                \\\n    -n 8080                                                        \\\n    -n \"--wallet-rebuild-db\"                                       \\\n    --updater cardano-updater                                      \\\n    -u \"dir\"                                                       \\\n    -u \"binaries_v000\"                                             \\\n    --node-timeout 5                                               \\\n    --update-archive updateDownloaded.tar\n\n~~~\n\n## cardano-block-gen\n\n~~~\nCardano SL blockchain generator\n\nUsage: cardano-block-gen [--version] --blocks INT --nodes INT\n                         [--generated-db FILEPATH] [--append] [--seed INT]\n                         [--tx-count (INT,INT)] [--tx-max-outs INT]\n  It generates database of node, corresponding to some correct blockchain\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --blocks INT             Length of blockchain.\n  --nodes INT              Number of nodes.\n  --generated-db FILEPATH  Location of generated database.\n  --append                 If database already exists, append to it.\n  --seed INT               Custom seed to generate blocks.\n  --tx-count (INT,INT)     Tx count range.\n  --tx-max-outs INT        Max number of outputs in tx\n\nCommand example:\n\n  stack exec -- cardano-block-gen           \\\n    --blocks 5000                           \\\n    --nodes 3                               \\\n    --coins 100                             \\\n    --generated-db /path/to/existed/db      \\\n    --seed 123                              \\\n    --append\n\n~~~\n\n## cardano-report-server\n\n~~~\nCardanoSL report server\n\nUsage: cardano-report-server [-p|--port INTEGER] [--logsdir FILEPATH]\n                             [--severity SEVERITY] [--size-limit BYTES]\n                             [--version]\n  CardanoSL reporting server daemon\n\nAvailable options:\n  -p,--port INTEGER        Port server is running on\n  --logsdir FILEPATH       Directory server will be saving logs in\n  --severity SEVERITY      Logging severity\n  --size-limit BYTES       Maximum body size allowed (will send 413 responses if\n                           bigger)\n  -h,--help                Show this help text\n  --version                Show version\n~~~\n\n## cardano-dht-keygen\n\n~~~\nGenerator of random key for Kademlia DHT.\n\nUsage: cardano-dht-keygen [--version] (-n|--nonce STRING)\n  Generated key will be print to stdout.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  -n,--nonce STRING        14-characters string.\n~~~\n\n## cardano-explorer-mock\n\n~~~\nCardano SL Explorer web mock.\n\nUsage: cardano-explorer-mock [--version]\n  Run mock for Explorer web API.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n\nThis program returns just the mocked data. It doesn't call any CSL functions and\ndoesn't interact with it. It just implements the API and returns simeple test\ndata.\n~~~\n\n## cardano-addr-convert\n\n~~~\nTool to convert vending addresses into testnet addresses.\n\nUsage: cardano-addr-convert [--version] [-a|--address STRING]\n  Produce public key and write it in stdout.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  -a,--address STRING      Address to convert. It must be in base64(url) format.\n\nCommand example:\n\n  stack exec -- cardano-addr-convert -a 2HF83bvYCTzoCbVta6t64W8rFEnvnkJbIUFoT5tOyoU=\n\nOutput example:\n\n  3mhNKjfhaCT13DjcQ9eMK4VHfZrFxmyXq8SjVPRtz7SWfP\n\nYou can also run it without arguments to switch to interactive mode.\nIn this case each entered vending address is echoed with a testnet address.\n\n~~~\n\n## cardano-blockchain-analyser\n\n~~~\nCardano SL blockchain generator\n\nUsage: cardano-blockchain-analyser --db FILEPATH ([-k] | [-m] | [-g] | [-a] |\n                                   [-b]) [--print-mode [human|csv|table]]\n                                   [-i|--incremental] [--log-config FILEPATH]\n                                   [--logs-prefix FILEPATH]\n                                   [--report-server URI] [--update-server URI]\n                                   [--configuration-file FILEPATH]\n                                   [--configuration-key TEXT]\n                                   [--system-start TIMESTAMP]\n                                   [--configuration-seed INTEGER]\n  Analyse a blockchain and spit out useful metrics.\n\nAvailable options:\n  -h,--help                Show this help text\n  --db FILEPATH            Location of the database where the blockchain is\n                           stored.\n  -k                       Display block counts in kilobytes (KB).\n  -m                       Display block counts in megabytes (MB).\n  -g                       Display block counts in gigabytes (GB).\n  -a                       Display block counts using an adaptive multiplier.\n  -b                       Display block counts in bytes (B).\n  --print-mode [human|csv|table]\n                           Select the desidered rendering mode, one between\n                           'human', 'csv' or 'table'.\n  -i,--incremental         Run in incremental mode. In this mode, table output\n                           will be disabled and rendered as a .csv, as is not\n                           possible to generate nice-looking tables whilst\n                           reading the blockchain one block at time. You almost\n                           always want to be using this mode for huge\n                           blockchains, as it's much more memory efficient.\n  --log-config FILEPATH    Path to logger configuration.\n  --logs-prefix FILEPATH   Prefix to logger output path.\n  --report-server URI      Reporting server to send crash/error logs on.\n  --update-server URI      Server to download updates from.\n  --configuration-file FILEPATH\n                           Path to a yaml configuration file\n  --configuration-key TEXT Key within the configuration file to use\n  --system-start TIMESTAMP System start time. Format - seconds since Unix Epoch.\n  --configuration-seed INTEGER\n                           Seed for genesis generation. Overrides one from\n                           configuration file.\n\nCommand example:\n\n  cardano-blockchain-analyser --db /path/to/existing/db\n\n~~~\n\n## cardano-auxx\n\n~~~\nCLI-based utilities (auxx).\n\nUsage: cardano-auxx [--version] COMMAND [--db-path FILEPATH] [--rebuild-db]\n                    [--genesis-secret INT] [--keyfile FILEPATH]\n                    [--backup-phrase PHRASE] [--topology FILEPATH]\n                    [--kademlia FILEPATH] [--node-id NODE_ID]\n                    [--default-port PORT] [--policies FILEPATH]\n                    [--address IP:PORT] [--listen IP:PORT] [--json-log FILEPATH]\n                    [--log-config FILEPATH] [--logs-prefix FILEPATH]\n                    [--report-server URI] [--update-server URI]\n                    [--configuration-file FILEPATH] [--configuration-key TEXT]\n                    [--system-start TIMESTAMP] [--configuration-seed INTEGER]\n                    [--update-latest-path FILEPATH] [--update-with-package]\n                    [--no-ntp] [--route53-health-check IP:PORT] [--metrics]\n                    [--ekg-server IP:PORT] [--statsd-server IP:PORT]\n                    [--statsd-interval MILLISECONDS] [--statsd-debug BOOL]\n                    [--statsd-prefix TEXT] [--statsd-suffix TEXT]\n                    [--dump-genesis-data-to ARG] [--peer HOST:PORT]\n                    [--node-enabled]\n  Cardano SL CLI utilities.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --db-path FILEPATH       Path to directory with all DBs used by the node. If\n                           specified path doesn’t exist, a directory will be\n                           created.\n  --rebuild-db             If node's database already exists, discard its\n                           contents and create a new one from scratch.\n  --genesis-secret INT     Used genesis secret key index.\n  --keyfile FILEPATH       Path to file with secret key (we use it for\n                           Daedalus).\n  --backup-phrase PHRASE   12-word phrase to recover the wallet. Words should be\n                           separated by spaces.\n  --topology FILEPATH      Path to a YAML file containing the network topology\n  --kademlia FILEPATH      Path to a YAML file containing the kademlia\n                           configuration\n  --node-id NODE_ID        Identifier for this node within the network\n  --default-port PORT      Port number for IP address to node ID translation\n  --policies FILEPATH      Path to a YAML file containing the network policies\n  --address IP:PORT        IP and port of external address. Please make sure\n                           these IP and port (on which node is running) are\n                           accessible otherwise proper work of CSL isn't\n                           guaranteed. 0.0.0.0 is not accepted as a valid host.\n  --listen IP:PORT         IP and port on which to bind and listen. Please make\n                           sure these IP and port are accessible, otherwise\n                           proper work of CSL isn't guaranteed.\n  --json-log FILEPATH      Path to JSON log file.\n  --log-config FILEPATH    Path to logger configuration.\n  --logs-prefix FILEPATH   Prefix to logger output path.\n  --report-server URI      Reporting server to send crash/error logs on.\n  --update-server URI      Server to download updates from.\n  --configuration-file FILEPATH\n                           Path to a yaml configuration file\n  --configuration-key TEXT Key within the configuration file to use\n  --system-start TIMESTAMP System start time. Format - seconds since Unix Epoch.\n  --configuration-seed INTEGER\n                           Seed for genesis generation. Overrides one from\n                           configuration file.\n  --update-latest-path FILEPATH\n                           Path to update installer file, which should be\n                           downloaded by Update System.\n  --update-with-package    Enable updating via installer.\n  --no-ntp                 Whether to use real NTP servers to synchronise time\n                           or rely on local time\n  --route53-health-check IP:PORT\n                           Host and port for the Route53 DNS health check.\n  --metrics                Enable metrics (EKG, statsd)\n  --ekg-server IP:PORT     Host and port for the EKG server\n  --statsd-server IP:PORT  Host and port for the statsd server\n  --statsd-interval MILLISECONDS\n                           Polling interval for statsd (milliseconds)\n  --statsd-debug BOOL      Enable statsd debug mode\n  --statsd-prefix TEXT     Prefix for statsd\n  --statsd-suffix TEXT     Suffix for statsd\n  --dump-genesis-data-to ARG\n                           Dump genesis data in canonical JSON format to this\n                           file.\n  --peer HOST:PORT         Address of a peer.\n  --node-enabled           Run auxx as a plugin for the node, as opposed to\n                           running it standalone (default: standalone).\n\nAvailable commands:\n  repl                     Run REPL in console to evaluate the commands.\n  cmd                      Execute a list of predefined commands.\n\nCommand example:\n\n  stack exec -- cardano-auxx                                     \\\n    --db-path run/auxx-db                                        \\\n    --rebuild-db                                                 \\\n    --json-log=/tmp/logs/2017-05-22_181224/node0.json            \\\n    --logs-prefix /tmp/logs/2017-05-22_181224                    \\\n    --log-config /tmp/logs/2017-05-22_181224/conf/node0.log.yaml \\\n    --system-start 1495462345                                    \\\n    --peer 127.0.0.1:3001                                        \\\n    repl\n\n~~~\n\n## cardano-cli-docs\n\n~~~\nTool to generate CLI-docs for Cardano SL executable files.\n\nUsage: cardano-cli-docs [--version] --bin-dir PATH\n  Generate Markdown chapter for cardanodocs.com.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --bin-dir PATH           Path to the directory with Cardano SL executable\n                           files.\n\nAssumed that this program will run on Travis CI. Produced file\n'cardano-cli-docs.md' will be renamed in a chapter and pushed in cardanodocs.com\nrepository.\n~~~\n\n## cardano-genupdate\n\n~~~\nCardano SL updates generator.\n\nUsage: cardano-genupdate [--version] --old PATH --new PATH (-o|--output PATH)\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --old PATH               Path to directory with old program.\n  --new PATH               Path to directory with new program.\n  -o,--output PATH         Path to output .tar-file with diff.\n\nCommand example:\n\n  stack exec -- cardano-genupdate --old /tmp/app-v000 --new /tmp/app-v001 -o /tmp/app-update.tar\n\nBoth directories must have equal file structure (e.g. they must contain the same\nfiles in the same subdirectories correspondingly), otherwise 'cardano-genupdate' will fail.\n\nPlease note that 'cardano-genupdate' uses 'bsdiff' program, so make sure 'bsdiff' is available in the PATH.\n\n~~~\n\n## cardano-explorer\n\n~~~\nCardano SL explorer.\n\nUsage: cardano-explorer [--version] [--db-path FILEPATH] [--rebuild-db]\n                        [--genesis-secret INT] [--keyfile FILEPATH]\n                        [--backup-phrase PHRASE] [--topology FILEPATH]\n                        [--kademlia FILEPATH] [--node-id NODE_ID]\n                        [--default-port PORT] [--policies FILEPATH]\n                        [--address IP:PORT] [--listen IP:PORT]\n                        [--json-log FILEPATH] [--log-config FILEPATH]\n                        [--logs-prefix FILEPATH] [--report-server URI]\n                        [--update-server URI] [--configuration-file FILEPATH]\n                        [--configuration-key TEXT] [--system-start TIMESTAMP]\n                        [--configuration-seed INTEGER]\n                        [--update-latest-path FILEPATH] [--update-with-package]\n                        [--no-ntp] [--route53-health-check IP:PORT] [--metrics]\n                        [--ekg-server IP:PORT] [--statsd-server IP:PORT]\n                        [--statsd-interval MILLISECONDS] [--statsd-debug BOOL]\n                        [--statsd-prefix TEXT] [--statsd-suffix TEXT]\n                        [--dump-genesis-data-to ARG] [--web-port PORT]\n                        [--notifier-port PORT]\n  Cardano SL main server node w/ explorer.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --db-path FILEPATH       Path to directory with all DBs used by the node. If\n                           specified path doesn’t exist, a directory will be\n                           created.\n  --rebuild-db             If node's database already exists, discard its\n                           contents and create a new one from scratch.\n  --genesis-secret INT     Used genesis secret key index.\n  --keyfile FILEPATH       Path to file with secret key (we use it for\n                           Daedalus).\n  --backup-phrase PHRASE   12-word phrase to recover the wallet. Words should be\n                           separated by spaces.\n  --topology FILEPATH      Path to a YAML file containing the network topology\n  --kademlia FILEPATH      Path to a YAML file containing the kademlia\n                           configuration\n  --node-id NODE_ID        Identifier for this node within the network\n  --default-port PORT      Port number for IP address to node ID translation\n  --policies FILEPATH      Path to a YAML file containing the network policies\n  --address IP:PORT        IP and port of external address. Please make sure\n                           these IP and port (on which node is running) are\n                           accessible otherwise proper work of CSL isn't\n                           guaranteed. 0.0.0.0 is not accepted as a valid host.\n  --listen IP:PORT         IP and port on which to bind and listen. Please make\n                           sure these IP and port are accessible, otherwise\n                           proper work of CSL isn't guaranteed.\n  --json-log FILEPATH      Path to JSON log file.\n  --log-config FILEPATH    Path to logger configuration.\n  --logs-prefix FILEPATH   Prefix to logger output path.\n  --report-server URI      Reporting server to send crash/error logs on.\n  --update-server URI      Server to download updates from.\n  --configuration-file FILEPATH\n                           Path to a yaml configuration file\n  --configuration-key TEXT Key within the configuration file to use\n  --system-start TIMESTAMP System start time. Format - seconds since Unix Epoch.\n  --configuration-seed INTEGER\n                           Seed for genesis generation. Overrides one from\n                           configuration file.\n  --update-latest-path FILEPATH\n                           Path to update installer file, which should be\n                           downloaded by Update System.\n  --update-with-package    Enable updating via installer.\n  --no-ntp                 Whether to use real NTP servers to synchronise time\n                           or rely on local time\n  --route53-health-check IP:PORT\n                           Host and port for the Route53 DNS health check.\n  --metrics                Enable metrics (EKG, statsd)\n  --ekg-server IP:PORT     Host and port for the EKG server\n  --statsd-server IP:PORT  Host and port for the statsd server\n  --statsd-interval MILLISECONDS\n                           Polling interval for statsd (milliseconds)\n  --statsd-debug BOOL      Enable statsd debug mode\n  --statsd-prefix TEXT     Prefix for statsd\n  --statsd-suffix TEXT     Suffix for statsd\n  --dump-genesis-data-to ARG\n                           Dump genesis data in canonical JSON format to this\n                           file.\n  --web-port PORT          Port for web API. (default: 8100)\n  --notifier-port PORT     Port for update notifier, the socket.io\n                           backend. (default: 8110)\n\n~~~\n\n## cardano-swagger\n\n~~~\nCardano SL Wallet web API docs generator.\n\nUsage: cardano-swagger [--version]\n  Generate Swagger specification for Wallet web API.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n\nThis program runs during 'cardano-sl' building on Travis CI. Generated file\n'wallet-web-api-swagger.json' will be used to produce HTML documentation. This\ndocumentation will be published at cardanodocs.com using\n'update_wallet_web_api_docs.sh'.\n~~~\n\n## cardano-post-mortem\n\n~~~\ncardano-post-mortem\n\nUsage: cardano-post-mortem COMMAND\n  analyzes the json logs from several directories or focusses on a single\n  transaction\n\nAvailable options:\n  -h,--help                Show this help text\n\nAvailable commands:\n  overview                 analyzes the json logs from LOGDIRS...\n  focus                    analyzes transaction FOCUS in log folder LOGDIR\n  txrelay                  analyzes transaction relays in the json logs from\n                           LOGDIRS...\n  throughput               analyzes transaction throughput and waiting time per\n                           time windows TXWINDOW and WAITWINDOW in the json logs\n                           from LOGDIRS...\n~~~\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-01-cli-options.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-01-cli-options.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-01-cli-options.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-01-cli-options.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title:  卡尔达诺结算层命令行选项\npath: /cn/technical/cli-options/\ngroup: technical\nlanguage: cn\nlabel: docs\n---\n\n<!-- THIS IS AUTOGENERATED CHAPTER. DO NOT CHANGE IT MANUALLY! -->\n\n卡尔达诺结算层命令行选项\n----------------------\n\n这份文档描述了卡尔达诺结算层的所有可执行文件以及所有相应的命令行参数。\n\n\n## cardano-node\n\n~~~\nCardano SL node.\n\nUsage: cardano-node [--version] [--db-path FILEPATH] [--rebuild-db]\n                    [--genesis-secret INT] [--keyfile FILEPATH]\n                    [--backup-phrase PHRASE] [--topology FILEPATH]\n                    [--kademlia FILEPATH] [--node-id NODE_ID]\n                    [--default-port PORT] [--policies FILEPATH]\n                    [--address IP:PORT] [--listen IP:PORT] [--json-log FILEPATH]\n                    [--log-config FILEPATH] [--logs-prefix FILEPATH]\n                    [--report-server URI] [--update-server URI]\n                    [--configuration-file FILEPATH] [--configuration-key TEXT]\n                    [--system-start TIMESTAMP] [--configuration-seed INTEGER]\n                    [--update-latest-path FILEPATH] [--update-with-package]\n                    [--no-ntp] [--route53-health-check IP:PORT] [--metrics]\n                    [--ekg-server IP:PORT] [--statsd-server IP:PORT]\n                    [--statsd-interval MILLISECONDS] [--statsd-debug BOOL]\n                    [--statsd-prefix TEXT] [--statsd-suffix TEXT]\n                    [--dump-genesis-data-to ARG] [--web] [--web-port PORT]\n                    [--tlscert FILEPATH] [--tlskey FILEPATH] [--tlsca FILEPATH]\n                    [--wallet-address IP:PORT] [--wallet-db-path ARG]\n                    [--wallet-rebuild-db]\n                    [--wallet-acid-cleanup-interval MINUTES] [--wallet-debug]\n                    [--flush-wallet-db]\n  Cardano SL main server node w/ wallet.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --db-path FILEPATH       Path to directory with all DBs used by the node. If\n                           specified path doesn’t exist, a directory will be\n                           created.\n  --rebuild-db             If node's database already exists, discard its\n                           contents and create a new one from scratch.\n  --genesis-secret INT     Used genesis secret key index.\n  --keyfile FILEPATH       Path to file with secret key (we use it for\n                           Daedalus).\n  --backup-phrase PHRASE   12-word phrase to recover the wallet. Words should be\n                           separated by spaces.\n  --topology FILEPATH      Path to a YAML file containing the network topology\n  --kademlia FILEPATH      Path to a YAML file containing the kademlia\n                           configuration\n  --node-id NODE_ID        Identifier for this node within the network\n  --default-port PORT      Port number for IP address to node ID translation\n  --policies FILEPATH      Path to a YAML file containing the network policies\n  --address IP:PORT        IP and port of external address. Please make sure\n                           these IP and port (on which node is running) are\n                           accessible otherwise proper work of CSL isn't\n                           guaranteed. 0.0.0.0 is not accepted as a valid host.\n  --listen IP:PORT         IP and port on which to bind and listen. Please make\n                           sure these IP and port are accessible, otherwise\n                           proper work of CSL isn't guaranteed.\n  --json-log FILEPATH      Path to JSON log file.\n  --log-config FILEPATH    Path to logger configuration.\n  --logs-prefix FILEPATH   Prefix to logger output path.\n  --report-server URI      Reporting server to send crash/error logs on.\n  --update-server URI      Server to download updates from.\n  --configuration-file FILEPATH\n                           Path to a yaml configuration file\n  --configuration-key TEXT Key within the configuration file to use\n  --system-start TIMESTAMP System start time. Format - seconds since Unix Epoch.\n  --configuration-seed INTEGER\n                           Seed for genesis generation. Overrides one from\n                           configuration file.\n  --update-latest-path FILEPATH\n                           Path to update installer file, which should be\n                           downloaded by Update System.\n  --update-with-package    Enable updating via installer.\n  --no-ntp                 Whether to use real NTP servers to synchronise time\n                           or rely on local time\n  --route53-health-check IP:PORT\n                           Host and port for the Route53 DNS health check.\n  --metrics                Enable metrics (EKG, statsd)\n  --ekg-server IP:PORT     Host and port for the EKG server\n  --statsd-server IP:PORT  Host and port for the statsd server\n  --statsd-interval MILLISECONDS\n                           Polling interval for statsd (milliseconds)\n  --statsd-debug BOOL      Enable statsd debug mode\n  --statsd-prefix TEXT     Prefix for statsd\n  --statsd-suffix TEXT     Suffix for statsd\n  --dump-genesis-data-to ARG\n                           Dump genesis data in canonical JSON format to this\n                           file.\n  --web                    Activate web API (it’s not linked with a wallet web\n                           API).\n  --web-port PORT          Port for web API. (default: 8080)\n  --tlscert FILEPATH       Path to file with TLS certificate\n  --tlskey FILEPATH        Path to file with TLS key\n  --tlsca FILEPATH         Path to file with TLS certificate authority\n  --wallet-address IP:PORT IP and port for backend wallet\n                           API. (default: (\"127.0.0.1\",8090))\n  --wallet-db-path ARG     Path to the wallet's database.\n  --wallet-rebuild-db      If wallet's database already exists, discard its\n                           contents and create a new one from scratch.\n  --wallet-acid-cleanup-interval MINUTES\n                           Interval on which to execute wallet cleanup action\n                           (create checkpoint and archive and cleanup archive\n                           partially)\n  --wallet-debug           Run wallet with debug params (e.g. include all the\n                           genesis keys in the set of secret keys).\n  --flush-wallet-db        Flushes all blockchain-recoverable data from DB\n                           (everything excluding wallets/accounts/addresses,\n                           metadata)\n\nCommand example:\n\n  stack exec -- cardano-node                                             \\\n    --db-path node-db0                                                   \\\n    --rebuild-db                                                         \\\n    --keyfile secrets/secret-1.key                                       \\\n    --kademlia-id a_P8zb6fNP7I2H54FtGuhqxaMDAwMDAwMDAwMDAwMDA=           \\\n    --address 127.0.0.1:3000                                             \\\n    --listen 127.0.0.1:3000                                              \\\n    --kademlia-address 127.0.0.1:3000                                    \\\n    --json-log=/tmp/logs/2017-05-22_181224/node0.json                    \\\n    --logs-prefix /tmp/logs/2017-05-22_181224                            \\\n    --log-config /tmp/logs/2017-05-22_181224/conf/node0.log.yaml         \\\n    --kademlia-dump-path /tmp/logs/2017-05-22_181224/dump/kademlia0.dump \\\n    --system-start 1495462345\n\n~~~\n\n## cardano-keygen\n\n~~~\nTool to generate keyfiles-related data\n\nUsage: cardano-keygen [--version] COMMAND [--configuration-file FILEPATH]\n                      [--configuration-key TEXT] [--system-start TIMESTAMP]\n                      [--configuration-seed INTEGER]\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --configuration-file FILEPATH\n                           Path to a yaml configuration file\n  --configuration-key TEXT Key within the configuration file to use\n  --system-start TIMESTAMP System start time. Format - seconds since Unix Epoch.\n  --configuration-seed INTEGER\n                           Seed for genesis generation. Overrides one from\n                           configuration file.\n\nAvailable commands:\n  rearrange                Rearrange keyfiles.\n  generate-key             Generate keyfile.\n  generate-vss             Generate VSS certificate.\n  read-key                 Dump keyfile contents.\n  generate-avvm-seeds      Generate avvm seeds with public keys.\n  generate-keys-by-spec    Generate secret keys and avvm seed by\n                           genesis-spec.yaml\n  dump-genesis-data        Dump genesis data (as per configuration) in json\n                           format\n~~~\n\n## cardano-explorer-swagger\n\n~~~\nCardano SL Explorer web API docs generator.\n\nUsage: cardano-explorer-swagger [--version]\n  Generate Swagger specification for Explorer web API.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n\nThis program runs during 'cardano-sl' building on Travis CI. Generated file\n'explorer-web-api-swagger.json' will be used to produce HTML documentation. This\ndocumentation will be published at cardanodocs.com using\n'update-explorer-web-api-docs.sh'.\n~~~\n\n## cardano-node-simple\n\n~~~\nCardano SL node.\n\nUsage: cardano-node-simple [--version] [--db-path FILEPATH] [--rebuild-db]\n                           [--genesis-secret INT] [--keyfile FILEPATH]\n                           [--backup-phrase PHRASE] [--topology FILEPATH]\n                           [--kademlia FILEPATH] [--node-id NODE_ID]\n                           [--default-port PORT] [--policies FILEPATH]\n                           [--address IP:PORT] [--listen IP:PORT]\n                           [--json-log FILEPATH] [--log-config FILEPATH]\n                           [--logs-prefix FILEPATH] [--report-server URI]\n                           [--update-server URI] [--configuration-file FILEPATH]\n                           [--configuration-key TEXT] [--system-start TIMESTAMP]\n                           [--configuration-seed INTEGER]\n                           [--update-latest-path FILEPATH]\n                           [--update-with-package] [--no-ntp]\n                           [--route53-health-check IP:PORT] [--metrics]\n                           [--ekg-server IP:PORT] [--statsd-server IP:PORT]\n                           [--statsd-interval MILLISECONDS]\n                           [--statsd-debug BOOL] [--statsd-prefix TEXT]\n                           [--statsd-suffix TEXT] [--dump-genesis-data-to ARG]\n                           [--behavior FILE]\n  Cardano SL main server node.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --db-path FILEPATH       Path to directory with all DBs used by the node. If\n                           specified path doesn’t exist, a directory will be\n                           created.\n  --rebuild-db             If node's database already exists, discard its\n                           contents and create a new one from scratch.\n  --genesis-secret INT     Used genesis secret key index.\n  --keyfile FILEPATH       Path to file with secret key (we use it for\n                           Daedalus).\n  --backup-phrase PHRASE   12-word phrase to recover the wallet. Words should be\n                           separated by spaces.\n  --topology FILEPATH      Path to a YAML file containing the network topology\n  --kademlia FILEPATH      Path to a YAML file containing the kademlia\n                           configuration\n  --node-id NODE_ID        Identifier for this node within the network\n  --default-port PORT      Port number for IP address to node ID translation\n  --policies FILEPATH      Path to a YAML file containing the network policies\n  --address IP:PORT        IP and port of external address. Please make sure\n                           these IP and port (on which node is running) are\n                           accessible otherwise proper work of CSL isn't\n                           guaranteed. 0.0.0.0 is not accepted as a valid host.\n  --listen IP:PORT         IP and port on which to bind and listen. Please make\n                           sure these IP and port are accessible, otherwise\n                           proper work of CSL isn't guaranteed.\n  --json-log FILEPATH      Path to JSON log file.\n  --log-config FILEPATH    Path to logger configuration.\n  --logs-prefix FILEPATH   Prefix to logger output path.\n  --report-server URI      Reporting server to send crash/error logs on.\n  --update-server URI      Server to download updates from.\n  --configuration-file FILEPATH\n                           Path to a yaml configuration file\n  --configuration-key TEXT Key within the configuration file to use\n  --system-start TIMESTAMP System start time. Format - seconds since Unix Epoch.\n  --configuration-seed INTEGER\n                           Seed for genesis generation. Overrides one from\n                           configuration file.\n  --update-latest-path FILEPATH\n                           Path to update installer file, which should be\n                           downloaded by Update System.\n  --update-with-package    Enable updating via installer.\n  --no-ntp                 Whether to use real NTP servers to synchronise time\n                           or rely on local time\n  --route53-health-check IP:PORT\n                           Host and port for the Route53 DNS health check.\n  --metrics                Enable metrics (EKG, statsd)\n  --ekg-server IP:PORT     Host and port for the EKG server\n  --statsd-server IP:PORT  Host and port for the statsd server\n  --statsd-interval MILLISECONDS\n                           Polling interval for statsd (milliseconds)\n  --statsd-debug BOOL      Enable statsd debug mode\n  --statsd-prefix TEXT     Prefix for statsd\n  --statsd-suffix TEXT     Suffix for statsd\n  --dump-genesis-data-to ARG\n                           Dump genesis data in canonical JSON format to this\n                           file.\n  --behavior FILE          Path to the behavior config\n\nCommand example:\n\n  stack exec -- cardano-node                                             \\\n    --db-path node-db0                                                   \\\n    --rebuild-db                                                         \\\n    --keyfile secrets/secret-1.key                                       \\\n    --kademlia-id a_P8zb6fNP7I2H54FtGuhqxaMDAwMDAwMDAwMDAwMDA=           \\\n    --address 127.0.0.1:3000                                             \\\n    --listen 127.0.0.1:3000                                              \\\n    --kademlia-address 127.0.0.1:3000                                    \\\n    --json-log=/tmp/logs/2017-05-22_181224/node0.json                    \\\n    --logs-prefix /tmp/logs/2017-05-22_181224                            \\\n    --log-config /tmp/logs/2017-05-22_181224/conf/node0.log.yaml         \\\n    --kademlia-dump-path /tmp/logs/2017-05-22_181224/dump/kademlia0.dump \\\n    --system-start 1495462345\n\n~~~\n\n## cardano-launcher\n\n~~~\nTool to launch Cardano SL.\n\nUsage: cardano-launcher [--version] --node PATH [-n ARG]\n                        [--node-log-config PATH] [--node-log-path PATH]\n                        [--wallet PATH] [-w ARG] --updater PATH [-u ARG]\n                        [--update-archive PATH] [--updater-windows-runner PATH]\n                        --node-timeout SEC [--report-server URL]\n                        [--configuration-file FILEPATH]\n                        [--configuration-key TEXT] [--system-start TIMESTAMP]\n                        [--configuration-seed INTEGER]\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --node PATH              Path to the node executable.\n  -n ARG                   An argument to be passed to the node.\n  --node-log-config PATH   Path to log config that will be used by the node.\n  --node-log-path PATH     File where node stdout/err will be redirected (def:\n                           temp file).\n  --wallet PATH            Path to the wallet executable.\n  -w ARG                   An argument to be passed to the wallet.\n  --updater PATH           Path to the updater executable.\n  -u ARG                   An argument to be passed to the updater.\n  --update-archive PATH    Path to the update archive, it will be passed to the\n                           updater.\n  --updater-windows-runner PATH\n                           Path to write the Windows batch file executing\n                           updater\n  --node-timeout SEC       How much to wait for the node to exit before killing\n                           it.\n  --report-server URL      Where to send logs in case of failure.\n  --configuration-file FILEPATH\n                           Path to a yaml configuration file\n  --configuration-key TEXT Key within the configuration file to use\n  --system-start TIMESTAMP System start time. Format - seconds since Unix Epoch.\n  --configuration-seed INTEGER\n                           Seed for genesis generation. Overrides one from\n                           configuration file.\n\nCommand example:\n\n  stack exec -- cardano-launcher                                   \\\n    --node binaries_v000/cardano-node                              \\\n    --node-log-config scripts/log-templates/update-log-config.yaml \\\n    -n \"--update-server\"                                           \\\n    -n \"http://localhost:3001\"                                     \\\n    -n \"--update-latest-path\"                                      \\\n    -n \"updateDownloaded.tar\"                                      \\\n    -n \"--listen\"                                                  \\\n    -n \"127.0.0.1:3004\"                                            \\\n    -n \"--kademlia-id\"                                             \\\n    -n \"a_P8zb6fNP7I2H54FtGuhqxaMDAwMDAwMDAwMDAwMDA=\"              \\\n    -n \"--flat-distr\"                                              \\\n    -n \"(3,100000)\"                                                \\\n    -n \"--rebuild-db\"                                              \\\n    -n \"--wallet\"                                                  \\\n    -n \"--web-port\"                                                \\\n    -n 8080                                                        \\\n    -n \"--wallet-rebuild-db\"                                       \\\n    --updater cardano-updater                                      \\\n    -u \"dir\"                                                       \\\n    -u \"binaries_v000\"                                             \\\n    --node-timeout 5                                               \\\n    --update-archive updateDownloaded.tar\n\n~~~\n\n## cardano-block-gen\n\n~~~\nCardano SL blockchain generator\n\nUsage: cardano-block-gen [--version] --blocks INT --nodes INT\n                         [--generated-db FILEPATH] [--append] [--seed INT]\n                         [--tx-count (INT,INT)] [--tx-max-outs INT]\n  It generates database of node, corresponding to some correct blockchain\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --blocks INT             Length of blockchain.\n  --nodes INT              Number of nodes.\n  --generated-db FILEPATH  Location of generated database.\n  --append                 If database already exists, append to it.\n  --seed INT               Custom seed to generate blocks.\n  --tx-count (INT,INT)     Tx count range.\n  --tx-max-outs INT        Max number of outputs in tx\n\nCommand example:\n\n  stack exec -- cardano-block-gen           \\\n    --blocks 5000                           \\\n    --nodes 3                               \\\n    --coins 100                             \\\n    --generated-db /path/to/existed/db      \\\n    --seed 123                              \\\n    --append\n\n~~~\n\n## cardano-report-server\n\n~~~\nCardanoSL report server\n\nUsage: cardano-report-server [-p|--port INTEGER] [--logsdir FILEPATH]\n                             [--severity SEVERITY] [--size-limit BYTES]\n                             [--version]\n  CardanoSL reporting server daemon\n\nAvailable options:\n  -p,--port INTEGER        Port server is running on\n  --logsdir FILEPATH       Directory server will be saving logs in\n  --severity SEVERITY      Logging severity\n  --size-limit BYTES       Maximum body size allowed (will send 413 responses if\n                           bigger)\n  -h,--help                Show this help text\n  --version                Show version\n~~~\n\n## cardano-dht-keygen\n\n~~~\nGenerator of random key for Kademlia DHT.\n\nUsage: cardano-dht-keygen [--version] (-n|--nonce STRING)\n  Generated key will be print to stdout.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  -n,--nonce STRING        14-characters string.\n~~~\n\n## cardano-explorer-mock\n\n~~~\nCardano SL Explorer web mock.\n\nUsage: cardano-explorer-mock [--version]\n  Run mock for Explorer web API.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n\nThis program returns just the mocked data. It doesn't call any CSL functions and\ndoesn't interact with it. It just implements the API and returns simeple test\ndata.\n~~~\n\n## cardano-addr-convert\n\n~~~\nTool to convert vending addresses into testnet addresses.\n\nUsage: cardano-addr-convert [--version] [-a|--address STRING]\n  Produce public key and write it in stdout.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  -a,--address STRING      Address to convert. It must be in base64(url) format.\n\nCommand example:\n\n  stack exec -- cardano-addr-convert -a 2HF83bvYCTzoCbVta6t64W8rFEnvnkJbIUFoT5tOyoU=\n\nOutput example:\n\n  3mhNKjfhaCT13DjcQ9eMK4VHfZrFxmyXq8SjVPRtz7SWfP\n\nYou can also run it without arguments to switch to interactive mode.\nIn this case each entered vending address is echoed with a testnet address.\n\n~~~\n\n## cardano-blockchain-analyser\n\n~~~\nCardano SL blockchain generator\n\nUsage: cardano-blockchain-analyser --db FILEPATH ([-k] | [-m] | [-g] | [-a] |\n                                   [-b]) [--print-mode [human|csv|table]]\n                                   [-i|--incremental] [--log-config FILEPATH]\n                                   [--logs-prefix FILEPATH]\n                                   [--report-server URI] [--update-server URI]\n                                   [--configuration-file FILEPATH]\n                                   [--configuration-key TEXT]\n                                   [--system-start TIMESTAMP]\n                                   [--configuration-seed INTEGER]\n  Analyse a blockchain and spit out useful metrics.\n\nAvailable options:\n  -h,--help                Show this help text\n  --db FILEPATH            Location of the database where the blockchain is\n                           stored.\n  -k                       Display block counts in kilobytes (KB).\n  -m                       Display block counts in megabytes (MB).\n  -g                       Display block counts in gigabytes (GB).\n  -a                       Display block counts using an adaptive multiplier.\n  -b                       Display block counts in bytes (B).\n  --print-mode [human|csv|table]\n                           Select the desidered rendering mode, one between\n                           'human', 'csv' or 'table'.\n  -i,--incremental         Run in incremental mode. In this mode, table output\n                           will be disabled and rendered as a .csv, as is not\n                           possible to generate nice-looking tables whilst\n                           reading the blockchain one block at time. You almost\n                           always want to be using this mode for huge\n                           blockchains, as it's much more memory efficient.\n  --log-config FILEPATH    Path to logger configuration.\n  --logs-prefix FILEPATH   Prefix to logger output path.\n  --report-server URI      Reporting server to send crash/error logs on.\n  --update-server URI      Server to download updates from.\n  --configuration-file FILEPATH\n                           Path to a yaml configuration file\n  --configuration-key TEXT Key within the configuration file to use\n  --system-start TIMESTAMP System start time. Format - seconds since Unix Epoch.\n  --configuration-seed INTEGER\n                           Seed for genesis generation. Overrides one from\n                           configuration file.\n\nCommand example:\n\n  cardano-blockchain-analyser --db /path/to/existing/db\n\n~~~\n\n## cardano-auxx\n\n~~~\nCLI-based utilities (auxx).\n\nUsage: cardano-auxx [--version] COMMAND [--db-path FILEPATH] [--rebuild-db]\n                    [--genesis-secret INT] [--keyfile FILEPATH]\n                    [--backup-phrase PHRASE] [--topology FILEPATH]\n                    [--kademlia FILEPATH] [--node-id NODE_ID]\n                    [--default-port PORT] [--policies FILEPATH]\n                    [--address IP:PORT] [--listen IP:PORT] [--json-log FILEPATH]\n                    [--log-config FILEPATH] [--logs-prefix FILEPATH]\n                    [--report-server URI] [--update-server URI]\n                    [--configuration-file FILEPATH] [--configuration-key TEXT]\n                    [--system-start TIMESTAMP] [--configuration-seed INTEGER]\n                    [--update-latest-path FILEPATH] [--update-with-package]\n                    [--no-ntp] [--route53-health-check IP:PORT] [--metrics]\n                    [--ekg-server IP:PORT] [--statsd-server IP:PORT]\n                    [--statsd-interval MILLISECONDS] [--statsd-debug BOOL]\n                    [--statsd-prefix TEXT] [--statsd-suffix TEXT]\n                    [--dump-genesis-data-to ARG] [--peer HOST:PORT]\n                    [--node-enabled]\n  Cardano SL CLI utilities.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --db-path FILEPATH       Path to directory with all DBs used by the node. If\n                           specified path doesn’t exist, a directory will be\n                           created.\n  --rebuild-db             If node's database already exists, discard its\n                           contents and create a new one from scratch.\n  --genesis-secret INT     Used genesis secret key index.\n  --keyfile FILEPATH       Path to file with secret key (we use it for\n                           Daedalus).\n  --backup-phrase PHRASE   12-word phrase to recover the wallet. Words should be\n                           separated by spaces.\n  --topology FILEPATH      Path to a YAML file containing the network topology\n  --kademlia FILEPATH      Path to a YAML file containing the kademlia\n                           configuration\n  --node-id NODE_ID        Identifier for this node within the network\n  --default-port PORT      Port number for IP address to node ID translation\n  --policies FILEPATH      Path to a YAML file containing the network policies\n  --address IP:PORT        IP and port of external address. Please make sure\n                           these IP and port (on which node is running) are\n                           accessible otherwise proper work of CSL isn't\n                           guaranteed. 0.0.0.0 is not accepted as a valid host.\n  --listen IP:PORT         IP and port on which to bind and listen. Please make\n                           sure these IP and port are accessible, otherwise\n                           proper work of CSL isn't guaranteed.\n  --json-log FILEPATH      Path to JSON log file.\n  --log-config FILEPATH    Path to logger configuration.\n  --logs-prefix FILEPATH   Prefix to logger output path.\n  --report-server URI      Reporting server to send crash/error logs on.\n  --update-server URI      Server to download updates from.\n  --configuration-file FILEPATH\n                           Path to a yaml configuration file\n  --configuration-key TEXT Key within the configuration file to use\n  --system-start TIMESTAMP System start time. Format - seconds since Unix Epoch.\n  --configuration-seed INTEGER\n                           Seed for genesis generation. Overrides one from\n                           configuration file.\n  --update-latest-path FILEPATH\n                           Path to update installer file, which should be\n                           downloaded by Update System.\n  --update-with-package    Enable updating via installer.\n  --no-ntp                 Whether to use real NTP servers to synchronise time\n                           or rely on local time\n  --route53-health-check IP:PORT\n                           Host and port for the Route53 DNS health check.\n  --metrics                Enable metrics (EKG, statsd)\n  --ekg-server IP:PORT     Host and port for the EKG server\n  --statsd-server IP:PORT  Host and port for the statsd server\n  --statsd-interval MILLISECONDS\n                           Polling interval for statsd (milliseconds)\n  --statsd-debug BOOL      Enable statsd debug mode\n  --statsd-prefix TEXT     Prefix for statsd\n  --statsd-suffix TEXT     Suffix for statsd\n  --dump-genesis-data-to ARG\n                           Dump genesis data in canonical JSON format to this\n                           file.\n  --peer HOST:PORT         Address of a peer.\n  --node-enabled           Run auxx as a plugin for the node, as opposed to\n                           running it standalone (default: standalone).\n\nAvailable commands:\n  repl                     Run REPL in console to evaluate the commands.\n  cmd                      Execute a list of predefined commands.\n\nCommand example:\n\n  stack exec -- cardano-auxx                                     \\\n    --db-path run/auxx-db                                        \\\n    --rebuild-db                                                 \\\n    --json-log=/tmp/logs/2017-05-22_181224/node0.json            \\\n    --logs-prefix /tmp/logs/2017-05-22_181224                    \\\n    --log-config /tmp/logs/2017-05-22_181224/conf/node0.log.yaml \\\n    --system-start 1495462345                                    \\\n    --peer 127.0.0.1:3001                                        \\\n    repl\n\n~~~\n\n## cardano-cli-docs\n\n~~~\nTool to generate CLI-docs for Cardano SL executable files.\n\nUsage: cardano-cli-docs [--version] --bin-dir PATH\n  Generate Markdown chapter for cardanodocs.com.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --bin-dir PATH           Path to the directory with Cardano SL executable\n                           files.\n\nAssumed that this program will run on Travis CI. Produced file\n'cardano-cli-docs.md' will be renamed in a chapter and pushed in cardanodocs.com\nrepository.\n~~~\n\n## cardano-genupdate\n\n~~~\nCardano SL updates generator.\n\nUsage: cardano-genupdate [--version] --old PATH --new PATH (-o|--output PATH)\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --old PATH               Path to directory with old program.\n  --new PATH               Path to directory with new program.\n  -o,--output PATH         Path to output .tar-file with diff.\n\nCommand example:\n\n  stack exec -- cardano-genupdate --old /tmp/app-v000 --new /tmp/app-v001 -o /tmp/app-update.tar\n\nBoth directories must have equal file structure (e.g. they must contain the same\nfiles in the same subdirectories correspondingly), otherwise 'cardano-genupdate' will fail.\n\nPlease note that 'cardano-genupdate' uses 'bsdiff' program, so make sure 'bsdiff' is available in the PATH.\n\n~~~\n\n## cardano-explorer\n\n~~~\nCardano SL explorer.\n\nUsage: cardano-explorer [--version] [--db-path FILEPATH] [--rebuild-db]\n                        [--genesis-secret INT] [--keyfile FILEPATH]\n                        [--backup-phrase PHRASE] [--topology FILEPATH]\n                        [--kademlia FILEPATH] [--node-id NODE_ID]\n                        [--default-port PORT] [--policies FILEPATH]\n                        [--address IP:PORT] [--listen IP:PORT]\n                        [--json-log FILEPATH] [--log-config FILEPATH]\n                        [--logs-prefix FILEPATH] [--report-server URI]\n                        [--update-server URI] [--configuration-file FILEPATH]\n                        [--configuration-key TEXT] [--system-start TIMESTAMP]\n                        [--configuration-seed INTEGER]\n                        [--update-latest-path FILEPATH] [--update-with-package]\n                        [--no-ntp] [--route53-health-check IP:PORT] [--metrics]\n                        [--ekg-server IP:PORT] [--statsd-server IP:PORT]\n                        [--statsd-interval MILLISECONDS] [--statsd-debug BOOL]\n                        [--statsd-prefix TEXT] [--statsd-suffix TEXT]\n                        [--dump-genesis-data-to ARG] [--web-port PORT]\n                        [--notifier-port PORT]\n  Cardano SL main server node w/ explorer.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --db-path FILEPATH       Path to directory with all DBs used by the node. If\n                           specified path doesn’t exist, a directory will be\n                           created.\n  --rebuild-db             If node's database already exists, discard its\n                           contents and create a new one from scratch.\n  --genesis-secret INT     Used genesis secret key index.\n  --keyfile FILEPATH       Path to file with secret key (we use it for\n                           Daedalus).\n  --backup-phrase PHRASE   12-word phrase to recover the wallet. Words should be\n                           separated by spaces.\n  --topology FILEPATH      Path to a YAML file containing the network topology\n  --kademlia FILEPATH      Path to a YAML file containing the kademlia\n                           configuration\n  --node-id NODE_ID        Identifier for this node within the network\n  --default-port PORT      Port number for IP address to node ID translation\n  --policies FILEPATH      Path to a YAML file containing the network policies\n  --address IP:PORT        IP and port of external address. Please make sure\n                           these IP and port (on which node is running) are\n                           accessible otherwise proper work of CSL isn't\n                           guaranteed. 0.0.0.0 is not accepted as a valid host.\n  --listen IP:PORT         IP and port on which to bind and listen. Please make\n                           sure these IP and port are accessible, otherwise\n                           proper work of CSL isn't guaranteed.\n  --json-log FILEPATH      Path to JSON log file.\n  --log-config FILEPATH    Path to logger configuration.\n  --logs-prefix FILEPATH   Prefix to logger output path.\n  --report-server URI      Reporting server to send crash/error logs on.\n  --update-server URI      Server to download updates from.\n  --configuration-file FILEPATH\n                           Path to a yaml configuration file\n  --configuration-key TEXT Key within the configuration file to use\n  --system-start TIMESTAMP System start time. Format - seconds since Unix Epoch.\n  --configuration-seed INTEGER\n                           Seed for genesis generation. Overrides one from\n                           configuration file.\n  --update-latest-path FILEPATH\n                           Path to update installer file, which should be\n                           downloaded by Update System.\n  --update-with-package    Enable updating via installer.\n  --no-ntp                 Whether to use real NTP servers to synchronise time\n                           or rely on local time\n  --route53-health-check IP:PORT\n                           Host and port for the Route53 DNS health check.\n  --metrics                Enable metrics (EKG, statsd)\n  --ekg-server IP:PORT     Host and port for the EKG server\n  --statsd-server IP:PORT  Host and port for the statsd server\n  --statsd-interval MILLISECONDS\n                           Polling interval for statsd (milliseconds)\n  --statsd-debug BOOL      Enable statsd debug mode\n  --statsd-prefix TEXT     Prefix for statsd\n  --statsd-suffix TEXT     Suffix for statsd\n  --dump-genesis-data-to ARG\n                           Dump genesis data in canonical JSON format to this\n                           file.\n  --web-port PORT          Port for web API. (default: 8100)\n  --notifier-port PORT     Port for update notifier, the socket.io\n                           backend. (default: 8110)\n\n~~~\n\n## cardano-swagger\n\n~~~\nCardano SL Wallet web API docs generator.\n\nUsage: cardano-swagger [--version]\n  Generate Swagger specification for Wallet web API.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n\nThis program runs during 'cardano-sl' building on Travis CI. Generated file\n'wallet-web-api-swagger.json' will be used to produce HTML documentation. This\ndocumentation will be published at cardanodocs.com using\n'update_wallet_web_api_docs.sh'.\n~~~\n\n## cardano-post-mortem\n\n~~~\ncardano-post-mortem\n\nUsage: cardano-post-mortem COMMAND\n  analyzes the json logs from several directories or focusses on a single\n  transaction\n\nAvailable options:\n  -h,--help                Show this help text\n\nAvailable commands:\n  overview                 analyzes the json logs from LOGDIRS...\n  focus                    analyzes transaction FOCUS in log folder LOGDIR\n  txrelay                  analyzes transaction relays in the json logs from\n                           LOGDIRS...\n  throughput               analyzes transaction throughput and waiting time per\n                           time windows TXWINDOW and WAITWINDOW in the json logs\n                           from LOGDIRS...\n~~~\n",
        "type": "MarkdownRemark",
        "contentDigest": "c9d1c66a8a163986c0a18c7c9fd5a424",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "卡尔达诺结算层命令行选项",
        "path": "/cn/technical/cli-options/",
        "group": "technical",
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-01-cli-options.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-01-cli-options.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n<!-- THIS IS AUTOGENERATED CHAPTER. DO NOT CHANGE IT MANUALLY! -->\n\n卡尔达诺结算层命令行选项\n----------------------\n\n这份文档描述了卡尔达诺结算层的所有可执行文件以及所有相应的命令行参数。\n\n\n## cardano-node\n\n~~~\nCardano SL node.\n\nUsage: cardano-node [--version] [--db-path FILEPATH] [--rebuild-db]\n                    [--genesis-secret INT] [--keyfile FILEPATH]\n                    [--backup-phrase PHRASE] [--topology FILEPATH]\n                    [--kademlia FILEPATH] [--node-id NODE_ID]\n                    [--default-port PORT] [--policies FILEPATH]\n                    [--address IP:PORT] [--listen IP:PORT] [--json-log FILEPATH]\n                    [--log-config FILEPATH] [--logs-prefix FILEPATH]\n                    [--report-server URI] [--update-server URI]\n                    [--configuration-file FILEPATH] [--configuration-key TEXT]\n                    [--system-start TIMESTAMP] [--configuration-seed INTEGER]\n                    [--update-latest-path FILEPATH] [--update-with-package]\n                    [--no-ntp] [--route53-health-check IP:PORT] [--metrics]\n                    [--ekg-server IP:PORT] [--statsd-server IP:PORT]\n                    [--statsd-interval MILLISECONDS] [--statsd-debug BOOL]\n                    [--statsd-prefix TEXT] [--statsd-suffix TEXT]\n                    [--dump-genesis-data-to ARG] [--web] [--web-port PORT]\n                    [--tlscert FILEPATH] [--tlskey FILEPATH] [--tlsca FILEPATH]\n                    [--wallet-address IP:PORT] [--wallet-db-path ARG]\n                    [--wallet-rebuild-db]\n                    [--wallet-acid-cleanup-interval MINUTES] [--wallet-debug]\n                    [--flush-wallet-db]\n  Cardano SL main server node w/ wallet.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --db-path FILEPATH       Path to directory with all DBs used by the node. If\n                           specified path doesn’t exist, a directory will be\n                           created.\n  --rebuild-db             If node's database already exists, discard its\n                           contents and create a new one from scratch.\n  --genesis-secret INT     Used genesis secret key index.\n  --keyfile FILEPATH       Path to file with secret key (we use it for\n                           Daedalus).\n  --backup-phrase PHRASE   12-word phrase to recover the wallet. Words should be\n                           separated by spaces.\n  --topology FILEPATH      Path to a YAML file containing the network topology\n  --kademlia FILEPATH      Path to a YAML file containing the kademlia\n                           configuration\n  --node-id NODE_ID        Identifier for this node within the network\n  --default-port PORT      Port number for IP address to node ID translation\n  --policies FILEPATH      Path to a YAML file containing the network policies\n  --address IP:PORT        IP and port of external address. Please make sure\n                           these IP and port (on which node is running) are\n                           accessible otherwise proper work of CSL isn't\n                           guaranteed. 0.0.0.0 is not accepted as a valid host.\n  --listen IP:PORT         IP and port on which to bind and listen. Please make\n                           sure these IP and port are accessible, otherwise\n                           proper work of CSL isn't guaranteed.\n  --json-log FILEPATH      Path to JSON log file.\n  --log-config FILEPATH    Path to logger configuration.\n  --logs-prefix FILEPATH   Prefix to logger output path.\n  --report-server URI      Reporting server to send crash/error logs on.\n  --update-server URI      Server to download updates from.\n  --configuration-file FILEPATH\n                           Path to a yaml configuration file\n  --configuration-key TEXT Key within the configuration file to use\n  --system-start TIMESTAMP System start time. Format - seconds since Unix Epoch.\n  --configuration-seed INTEGER\n                           Seed for genesis generation. Overrides one from\n                           configuration file.\n  --update-latest-path FILEPATH\n                           Path to update installer file, which should be\n                           downloaded by Update System.\n  --update-with-package    Enable updating via installer.\n  --no-ntp                 Whether to use real NTP servers to synchronise time\n                           or rely on local time\n  --route53-health-check IP:PORT\n                           Host and port for the Route53 DNS health check.\n  --metrics                Enable metrics (EKG, statsd)\n  --ekg-server IP:PORT     Host and port for the EKG server\n  --statsd-server IP:PORT  Host and port for the statsd server\n  --statsd-interval MILLISECONDS\n                           Polling interval for statsd (milliseconds)\n  --statsd-debug BOOL      Enable statsd debug mode\n  --statsd-prefix TEXT     Prefix for statsd\n  --statsd-suffix TEXT     Suffix for statsd\n  --dump-genesis-data-to ARG\n                           Dump genesis data in canonical JSON format to this\n                           file.\n  --web                    Activate web API (it’s not linked with a wallet web\n                           API).\n  --web-port PORT          Port for web API. (default: 8080)\n  --tlscert FILEPATH       Path to file with TLS certificate\n  --tlskey FILEPATH        Path to file with TLS key\n  --tlsca FILEPATH         Path to file with TLS certificate authority\n  --wallet-address IP:PORT IP and port for backend wallet\n                           API. (default: (\"127.0.0.1\",8090))\n  --wallet-db-path ARG     Path to the wallet's database.\n  --wallet-rebuild-db      If wallet's database already exists, discard its\n                           contents and create a new one from scratch.\n  --wallet-acid-cleanup-interval MINUTES\n                           Interval on which to execute wallet cleanup action\n                           (create checkpoint and archive and cleanup archive\n                           partially)\n  --wallet-debug           Run wallet with debug params (e.g. include all the\n                           genesis keys in the set of secret keys).\n  --flush-wallet-db        Flushes all blockchain-recoverable data from DB\n                           (everything excluding wallets/accounts/addresses,\n                           metadata)\n\nCommand example:\n\n  stack exec -- cardano-node                                             \\\n    --db-path node-db0                                                   \\\n    --rebuild-db                                                         \\\n    --keyfile secrets/secret-1.key                                       \\\n    --kademlia-id a_P8zb6fNP7I2H54FtGuhqxaMDAwMDAwMDAwMDAwMDA=           \\\n    --address 127.0.0.1:3000                                             \\\n    --listen 127.0.0.1:3000                                              \\\n    --kademlia-address 127.0.0.1:3000                                    \\\n    --json-log=/tmp/logs/2017-05-22_181224/node0.json                    \\\n    --logs-prefix /tmp/logs/2017-05-22_181224                            \\\n    --log-config /tmp/logs/2017-05-22_181224/conf/node0.log.yaml         \\\n    --kademlia-dump-path /tmp/logs/2017-05-22_181224/dump/kademlia0.dump \\\n    --system-start 1495462345\n\n~~~\n\n## cardano-keygen\n\n~~~\nTool to generate keyfiles-related data\n\nUsage: cardano-keygen [--version] COMMAND [--configuration-file FILEPATH]\n                      [--configuration-key TEXT] [--system-start TIMESTAMP]\n                      [--configuration-seed INTEGER]\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --configuration-file FILEPATH\n                           Path to a yaml configuration file\n  --configuration-key TEXT Key within the configuration file to use\n  --system-start TIMESTAMP System start time. Format - seconds since Unix Epoch.\n  --configuration-seed INTEGER\n                           Seed for genesis generation. Overrides one from\n                           configuration file.\n\nAvailable commands:\n  rearrange                Rearrange keyfiles.\n  generate-key             Generate keyfile.\n  generate-vss             Generate VSS certificate.\n  read-key                 Dump keyfile contents.\n  generate-avvm-seeds      Generate avvm seeds with public keys.\n  generate-keys-by-spec    Generate secret keys and avvm seed by\n                           genesis-spec.yaml\n  dump-genesis-data        Dump genesis data (as per configuration) in json\n                           format\n~~~\n\n## cardano-explorer-swagger\n\n~~~\nCardano SL Explorer web API docs generator.\n\nUsage: cardano-explorer-swagger [--version]\n  Generate Swagger specification for Explorer web API.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n\nThis program runs during 'cardano-sl' building on Travis CI. Generated file\n'explorer-web-api-swagger.json' will be used to produce HTML documentation. This\ndocumentation will be published at cardanodocs.com using\n'update-explorer-web-api-docs.sh'.\n~~~\n\n## cardano-node-simple\n\n~~~\nCardano SL node.\n\nUsage: cardano-node-simple [--version] [--db-path FILEPATH] [--rebuild-db]\n                           [--genesis-secret INT] [--keyfile FILEPATH]\n                           [--backup-phrase PHRASE] [--topology FILEPATH]\n                           [--kademlia FILEPATH] [--node-id NODE_ID]\n                           [--default-port PORT] [--policies FILEPATH]\n                           [--address IP:PORT] [--listen IP:PORT]\n                           [--json-log FILEPATH] [--log-config FILEPATH]\n                           [--logs-prefix FILEPATH] [--report-server URI]\n                           [--update-server URI] [--configuration-file FILEPATH]\n                           [--configuration-key TEXT] [--system-start TIMESTAMP]\n                           [--configuration-seed INTEGER]\n                           [--update-latest-path FILEPATH]\n                           [--update-with-package] [--no-ntp]\n                           [--route53-health-check IP:PORT] [--metrics]\n                           [--ekg-server IP:PORT] [--statsd-server IP:PORT]\n                           [--statsd-interval MILLISECONDS]\n                           [--statsd-debug BOOL] [--statsd-prefix TEXT]\n                           [--statsd-suffix TEXT] [--dump-genesis-data-to ARG]\n                           [--behavior FILE]\n  Cardano SL main server node.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --db-path FILEPATH       Path to directory with all DBs used by the node. If\n                           specified path doesn’t exist, a directory will be\n                           created.\n  --rebuild-db             If node's database already exists, discard its\n                           contents and create a new one from scratch.\n  --genesis-secret INT     Used genesis secret key index.\n  --keyfile FILEPATH       Path to file with secret key (we use it for\n                           Daedalus).\n  --backup-phrase PHRASE   12-word phrase to recover the wallet. Words should be\n                           separated by spaces.\n  --topology FILEPATH      Path to a YAML file containing the network topology\n  --kademlia FILEPATH      Path to a YAML file containing the kademlia\n                           configuration\n  --node-id NODE_ID        Identifier for this node within the network\n  --default-port PORT      Port number for IP address to node ID translation\n  --policies FILEPATH      Path to a YAML file containing the network policies\n  --address IP:PORT        IP and port of external address. Please make sure\n                           these IP and port (on which node is running) are\n                           accessible otherwise proper work of CSL isn't\n                           guaranteed. 0.0.0.0 is not accepted as a valid host.\n  --listen IP:PORT         IP and port on which to bind and listen. Please make\n                           sure these IP and port are accessible, otherwise\n                           proper work of CSL isn't guaranteed.\n  --json-log FILEPATH      Path to JSON log file.\n  --log-config FILEPATH    Path to logger configuration.\n  --logs-prefix FILEPATH   Prefix to logger output path.\n  --report-server URI      Reporting server to send crash/error logs on.\n  --update-server URI      Server to download updates from.\n  --configuration-file FILEPATH\n                           Path to a yaml configuration file\n  --configuration-key TEXT Key within the configuration file to use\n  --system-start TIMESTAMP System start time. Format - seconds since Unix Epoch.\n  --configuration-seed INTEGER\n                           Seed for genesis generation. Overrides one from\n                           configuration file.\n  --update-latest-path FILEPATH\n                           Path to update installer file, which should be\n                           downloaded by Update System.\n  --update-with-package    Enable updating via installer.\n  --no-ntp                 Whether to use real NTP servers to synchronise time\n                           or rely on local time\n  --route53-health-check IP:PORT\n                           Host and port for the Route53 DNS health check.\n  --metrics                Enable metrics (EKG, statsd)\n  --ekg-server IP:PORT     Host and port for the EKG server\n  --statsd-server IP:PORT  Host and port for the statsd server\n  --statsd-interval MILLISECONDS\n                           Polling interval for statsd (milliseconds)\n  --statsd-debug BOOL      Enable statsd debug mode\n  --statsd-prefix TEXT     Prefix for statsd\n  --statsd-suffix TEXT     Suffix for statsd\n  --dump-genesis-data-to ARG\n                           Dump genesis data in canonical JSON format to this\n                           file.\n  --behavior FILE          Path to the behavior config\n\nCommand example:\n\n  stack exec -- cardano-node                                             \\\n    --db-path node-db0                                                   \\\n    --rebuild-db                                                         \\\n    --keyfile secrets/secret-1.key                                       \\\n    --kademlia-id a_P8zb6fNP7I2H54FtGuhqxaMDAwMDAwMDAwMDAwMDA=           \\\n    --address 127.0.0.1:3000                                             \\\n    --listen 127.0.0.1:3000                                              \\\n    --kademlia-address 127.0.0.1:3000                                    \\\n    --json-log=/tmp/logs/2017-05-22_181224/node0.json                    \\\n    --logs-prefix /tmp/logs/2017-05-22_181224                            \\\n    --log-config /tmp/logs/2017-05-22_181224/conf/node0.log.yaml         \\\n    --kademlia-dump-path /tmp/logs/2017-05-22_181224/dump/kademlia0.dump \\\n    --system-start 1495462345\n\n~~~\n\n## cardano-launcher\n\n~~~\nTool to launch Cardano SL.\n\nUsage: cardano-launcher [--version] --node PATH [-n ARG]\n                        [--node-log-config PATH] [--node-log-path PATH]\n                        [--wallet PATH] [-w ARG] --updater PATH [-u ARG]\n                        [--update-archive PATH] [--updater-windows-runner PATH]\n                        --node-timeout SEC [--report-server URL]\n                        [--configuration-file FILEPATH]\n                        [--configuration-key TEXT] [--system-start TIMESTAMP]\n                        [--configuration-seed INTEGER]\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --node PATH              Path to the node executable.\n  -n ARG                   An argument to be passed to the node.\n  --node-log-config PATH   Path to log config that will be used by the node.\n  --node-log-path PATH     File where node stdout/err will be redirected (def:\n                           temp file).\n  --wallet PATH            Path to the wallet executable.\n  -w ARG                   An argument to be passed to the wallet.\n  --updater PATH           Path to the updater executable.\n  -u ARG                   An argument to be passed to the updater.\n  --update-archive PATH    Path to the update archive, it will be passed to the\n                           updater.\n  --updater-windows-runner PATH\n                           Path to write the Windows batch file executing\n                           updater\n  --node-timeout SEC       How much to wait for the node to exit before killing\n                           it.\n  --report-server URL      Where to send logs in case of failure.\n  --configuration-file FILEPATH\n                           Path to a yaml configuration file\n  --configuration-key TEXT Key within the configuration file to use\n  --system-start TIMESTAMP System start time. Format - seconds since Unix Epoch.\n  --configuration-seed INTEGER\n                           Seed for genesis generation. Overrides one from\n                           configuration file.\n\nCommand example:\n\n  stack exec -- cardano-launcher                                   \\\n    --node binaries_v000/cardano-node                              \\\n    --node-log-config scripts/log-templates/update-log-config.yaml \\\n    -n \"--update-server\"                                           \\\n    -n \"http://localhost:3001\"                                     \\\n    -n \"--update-latest-path\"                                      \\\n    -n \"updateDownloaded.tar\"                                      \\\n    -n \"--listen\"                                                  \\\n    -n \"127.0.0.1:3004\"                                            \\\n    -n \"--kademlia-id\"                                             \\\n    -n \"a_P8zb6fNP7I2H54FtGuhqxaMDAwMDAwMDAwMDAwMDA=\"              \\\n    -n \"--flat-distr\"                                              \\\n    -n \"(3,100000)\"                                                \\\n    -n \"--rebuild-db\"                                              \\\n    -n \"--wallet\"                                                  \\\n    -n \"--web-port\"                                                \\\n    -n 8080                                                        \\\n    -n \"--wallet-rebuild-db\"                                       \\\n    --updater cardano-updater                                      \\\n    -u \"dir\"                                                       \\\n    -u \"binaries_v000\"                                             \\\n    --node-timeout 5                                               \\\n    --update-archive updateDownloaded.tar\n\n~~~\n\n## cardano-block-gen\n\n~~~\nCardano SL blockchain generator\n\nUsage: cardano-block-gen [--version] --blocks INT --nodes INT\n                         [--generated-db FILEPATH] [--append] [--seed INT]\n                         [--tx-count (INT,INT)] [--tx-max-outs INT]\n  It generates database of node, corresponding to some correct blockchain\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --blocks INT             Length of blockchain.\n  --nodes INT              Number of nodes.\n  --generated-db FILEPATH  Location of generated database.\n  --append                 If database already exists, append to it.\n  --seed INT               Custom seed to generate blocks.\n  --tx-count (INT,INT)     Tx count range.\n  --tx-max-outs INT        Max number of outputs in tx\n\nCommand example:\n\n  stack exec -- cardano-block-gen           \\\n    --blocks 5000                           \\\n    --nodes 3                               \\\n    --coins 100                             \\\n    --generated-db /path/to/existed/db      \\\n    --seed 123                              \\\n    --append\n\n~~~\n\n## cardano-report-server\n\n~~~\nCardanoSL report server\n\nUsage: cardano-report-server [-p|--port INTEGER] [--logsdir FILEPATH]\n                             [--severity SEVERITY] [--size-limit BYTES]\n                             [--version]\n  CardanoSL reporting server daemon\n\nAvailable options:\n  -p,--port INTEGER        Port server is running on\n  --logsdir FILEPATH       Directory server will be saving logs in\n  --severity SEVERITY      Logging severity\n  --size-limit BYTES       Maximum body size allowed (will send 413 responses if\n                           bigger)\n  -h,--help                Show this help text\n  --version                Show version\n~~~\n\n## cardano-dht-keygen\n\n~~~\nGenerator of random key for Kademlia DHT.\n\nUsage: cardano-dht-keygen [--version] (-n|--nonce STRING)\n  Generated key will be print to stdout.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  -n,--nonce STRING        14-characters string.\n~~~\n\n## cardano-explorer-mock\n\n~~~\nCardano SL Explorer web mock.\n\nUsage: cardano-explorer-mock [--version]\n  Run mock for Explorer web API.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n\nThis program returns just the mocked data. It doesn't call any CSL functions and\ndoesn't interact with it. It just implements the API and returns simeple test\ndata.\n~~~\n\n## cardano-addr-convert\n\n~~~\nTool to convert vending addresses into testnet addresses.\n\nUsage: cardano-addr-convert [--version] [-a|--address STRING]\n  Produce public key and write it in stdout.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  -a,--address STRING      Address to convert. It must be in base64(url) format.\n\nCommand example:\n\n  stack exec -- cardano-addr-convert -a 2HF83bvYCTzoCbVta6t64W8rFEnvnkJbIUFoT5tOyoU=\n\nOutput example:\n\n  3mhNKjfhaCT13DjcQ9eMK4VHfZrFxmyXq8SjVPRtz7SWfP\n\nYou can also run it without arguments to switch to interactive mode.\nIn this case each entered vending address is echoed with a testnet address.\n\n~~~\n\n## cardano-blockchain-analyser\n\n~~~\nCardano SL blockchain generator\n\nUsage: cardano-blockchain-analyser --db FILEPATH ([-k] | [-m] | [-g] | [-a] |\n                                   [-b]) [--print-mode [human|csv|table]]\n                                   [-i|--incremental] [--log-config FILEPATH]\n                                   [--logs-prefix FILEPATH]\n                                   [--report-server URI] [--update-server URI]\n                                   [--configuration-file FILEPATH]\n                                   [--configuration-key TEXT]\n                                   [--system-start TIMESTAMP]\n                                   [--configuration-seed INTEGER]\n  Analyse a blockchain and spit out useful metrics.\n\nAvailable options:\n  -h,--help                Show this help text\n  --db FILEPATH            Location of the database where the blockchain is\n                           stored.\n  -k                       Display block counts in kilobytes (KB).\n  -m                       Display block counts in megabytes (MB).\n  -g                       Display block counts in gigabytes (GB).\n  -a                       Display block counts using an adaptive multiplier.\n  -b                       Display block counts in bytes (B).\n  --print-mode [human|csv|table]\n                           Select the desidered rendering mode, one between\n                           'human', 'csv' or 'table'.\n  -i,--incremental         Run in incremental mode. In this mode, table output\n                           will be disabled and rendered as a .csv, as is not\n                           possible to generate nice-looking tables whilst\n                           reading the blockchain one block at time. You almost\n                           always want to be using this mode for huge\n                           blockchains, as it's much more memory efficient.\n  --log-config FILEPATH    Path to logger configuration.\n  --logs-prefix FILEPATH   Prefix to logger output path.\n  --report-server URI      Reporting server to send crash/error logs on.\n  --update-server URI      Server to download updates from.\n  --configuration-file FILEPATH\n                           Path to a yaml configuration file\n  --configuration-key TEXT Key within the configuration file to use\n  --system-start TIMESTAMP System start time. Format - seconds since Unix Epoch.\n  --configuration-seed INTEGER\n                           Seed for genesis generation. Overrides one from\n                           configuration file.\n\nCommand example:\n\n  cardano-blockchain-analyser --db /path/to/existing/db\n\n~~~\n\n## cardano-auxx\n\n~~~\nCLI-based utilities (auxx).\n\nUsage: cardano-auxx [--version] COMMAND [--db-path FILEPATH] [--rebuild-db]\n                    [--genesis-secret INT] [--keyfile FILEPATH]\n                    [--backup-phrase PHRASE] [--topology FILEPATH]\n                    [--kademlia FILEPATH] [--node-id NODE_ID]\n                    [--default-port PORT] [--policies FILEPATH]\n                    [--address IP:PORT] [--listen IP:PORT] [--json-log FILEPATH]\n                    [--log-config FILEPATH] [--logs-prefix FILEPATH]\n                    [--report-server URI] [--update-server URI]\n                    [--configuration-file FILEPATH] [--configuration-key TEXT]\n                    [--system-start TIMESTAMP] [--configuration-seed INTEGER]\n                    [--update-latest-path FILEPATH] [--update-with-package]\n                    [--no-ntp] [--route53-health-check IP:PORT] [--metrics]\n                    [--ekg-server IP:PORT] [--statsd-server IP:PORT]\n                    [--statsd-interval MILLISECONDS] [--statsd-debug BOOL]\n                    [--statsd-prefix TEXT] [--statsd-suffix TEXT]\n                    [--dump-genesis-data-to ARG] [--peer HOST:PORT]\n                    [--node-enabled]\n  Cardano SL CLI utilities.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --db-path FILEPATH       Path to directory with all DBs used by the node. If\n                           specified path doesn’t exist, a directory will be\n                           created.\n  --rebuild-db             If node's database already exists, discard its\n                           contents and create a new one from scratch.\n  --genesis-secret INT     Used genesis secret key index.\n  --keyfile FILEPATH       Path to file with secret key (we use it for\n                           Daedalus).\n  --backup-phrase PHRASE   12-word phrase to recover the wallet. Words should be\n                           separated by spaces.\n  --topology FILEPATH      Path to a YAML file containing the network topology\n  --kademlia FILEPATH      Path to a YAML file containing the kademlia\n                           configuration\n  --node-id NODE_ID        Identifier for this node within the network\n  --default-port PORT      Port number for IP address to node ID translation\n  --policies FILEPATH      Path to a YAML file containing the network policies\n  --address IP:PORT        IP and port of external address. Please make sure\n                           these IP and port (on which node is running) are\n                           accessible otherwise proper work of CSL isn't\n                           guaranteed. 0.0.0.0 is not accepted as a valid host.\n  --listen IP:PORT         IP and port on which to bind and listen. Please make\n                           sure these IP and port are accessible, otherwise\n                           proper work of CSL isn't guaranteed.\n  --json-log FILEPATH      Path to JSON log file.\n  --log-config FILEPATH    Path to logger configuration.\n  --logs-prefix FILEPATH   Prefix to logger output path.\n  --report-server URI      Reporting server to send crash/error logs on.\n  --update-server URI      Server to download updates from.\n  --configuration-file FILEPATH\n                           Path to a yaml configuration file\n  --configuration-key TEXT Key within the configuration file to use\n  --system-start TIMESTAMP System start time. Format - seconds since Unix Epoch.\n  --configuration-seed INTEGER\n                           Seed for genesis generation. Overrides one from\n                           configuration file.\n  --update-latest-path FILEPATH\n                           Path to update installer file, which should be\n                           downloaded by Update System.\n  --update-with-package    Enable updating via installer.\n  --no-ntp                 Whether to use real NTP servers to synchronise time\n                           or rely on local time\n  --route53-health-check IP:PORT\n                           Host and port for the Route53 DNS health check.\n  --metrics                Enable metrics (EKG, statsd)\n  --ekg-server IP:PORT     Host and port for the EKG server\n  --statsd-server IP:PORT  Host and port for the statsd server\n  --statsd-interval MILLISECONDS\n                           Polling interval for statsd (milliseconds)\n  --statsd-debug BOOL      Enable statsd debug mode\n  --statsd-prefix TEXT     Prefix for statsd\n  --statsd-suffix TEXT     Suffix for statsd\n  --dump-genesis-data-to ARG\n                           Dump genesis data in canonical JSON format to this\n                           file.\n  --peer HOST:PORT         Address of a peer.\n  --node-enabled           Run auxx as a plugin for the node, as opposed to\n                           running it standalone (default: standalone).\n\nAvailable commands:\n  repl                     Run REPL in console to evaluate the commands.\n  cmd                      Execute a list of predefined commands.\n\nCommand example:\n\n  stack exec -- cardano-auxx                                     \\\n    --db-path run/auxx-db                                        \\\n    --rebuild-db                                                 \\\n    --json-log=/tmp/logs/2017-05-22_181224/node0.json            \\\n    --logs-prefix /tmp/logs/2017-05-22_181224                    \\\n    --log-config /tmp/logs/2017-05-22_181224/conf/node0.log.yaml \\\n    --system-start 1495462345                                    \\\n    --peer 127.0.0.1:3001                                        \\\n    repl\n\n~~~\n\n## cardano-cli-docs\n\n~~~\nTool to generate CLI-docs for Cardano SL executable files.\n\nUsage: cardano-cli-docs [--version] --bin-dir PATH\n  Generate Markdown chapter for cardanodocs.com.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --bin-dir PATH           Path to the directory with Cardano SL executable\n                           files.\n\nAssumed that this program will run on Travis CI. Produced file\n'cardano-cli-docs.md' will be renamed in a chapter and pushed in cardanodocs.com\nrepository.\n~~~\n\n## cardano-genupdate\n\n~~~\nCardano SL updates generator.\n\nUsage: cardano-genupdate [--version] --old PATH --new PATH (-o|--output PATH)\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --old PATH               Path to directory with old program.\n  --new PATH               Path to directory with new program.\n  -o,--output PATH         Path to output .tar-file with diff.\n\nCommand example:\n\n  stack exec -- cardano-genupdate --old /tmp/app-v000 --new /tmp/app-v001 -o /tmp/app-update.tar\n\nBoth directories must have equal file structure (e.g. they must contain the same\nfiles in the same subdirectories correspondingly), otherwise 'cardano-genupdate' will fail.\n\nPlease note that 'cardano-genupdate' uses 'bsdiff' program, so make sure 'bsdiff' is available in the PATH.\n\n~~~\n\n## cardano-explorer\n\n~~~\nCardano SL explorer.\n\nUsage: cardano-explorer [--version] [--db-path FILEPATH] [--rebuild-db]\n                        [--genesis-secret INT] [--keyfile FILEPATH]\n                        [--backup-phrase PHRASE] [--topology FILEPATH]\n                        [--kademlia FILEPATH] [--node-id NODE_ID]\n                        [--default-port PORT] [--policies FILEPATH]\n                        [--address IP:PORT] [--listen IP:PORT]\n                        [--json-log FILEPATH] [--log-config FILEPATH]\n                        [--logs-prefix FILEPATH] [--report-server URI]\n                        [--update-server URI] [--configuration-file FILEPATH]\n                        [--configuration-key TEXT] [--system-start TIMESTAMP]\n                        [--configuration-seed INTEGER]\n                        [--update-latest-path FILEPATH] [--update-with-package]\n                        [--no-ntp] [--route53-health-check IP:PORT] [--metrics]\n                        [--ekg-server IP:PORT] [--statsd-server IP:PORT]\n                        [--statsd-interval MILLISECONDS] [--statsd-debug BOOL]\n                        [--statsd-prefix TEXT] [--statsd-suffix TEXT]\n                        [--dump-genesis-data-to ARG] [--web-port PORT]\n                        [--notifier-port PORT]\n  Cardano SL main server node w/ explorer.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n  --db-path FILEPATH       Path to directory with all DBs used by the node. If\n                           specified path doesn’t exist, a directory will be\n                           created.\n  --rebuild-db             If node's database already exists, discard its\n                           contents and create a new one from scratch.\n  --genesis-secret INT     Used genesis secret key index.\n  --keyfile FILEPATH       Path to file with secret key (we use it for\n                           Daedalus).\n  --backup-phrase PHRASE   12-word phrase to recover the wallet. Words should be\n                           separated by spaces.\n  --topology FILEPATH      Path to a YAML file containing the network topology\n  --kademlia FILEPATH      Path to a YAML file containing the kademlia\n                           configuration\n  --node-id NODE_ID        Identifier for this node within the network\n  --default-port PORT      Port number for IP address to node ID translation\n  --policies FILEPATH      Path to a YAML file containing the network policies\n  --address IP:PORT        IP and port of external address. Please make sure\n                           these IP and port (on which node is running) are\n                           accessible otherwise proper work of CSL isn't\n                           guaranteed. 0.0.0.0 is not accepted as a valid host.\n  --listen IP:PORT         IP and port on which to bind and listen. Please make\n                           sure these IP and port are accessible, otherwise\n                           proper work of CSL isn't guaranteed.\n  --json-log FILEPATH      Path to JSON log file.\n  --log-config FILEPATH    Path to logger configuration.\n  --logs-prefix FILEPATH   Prefix to logger output path.\n  --report-server URI      Reporting server to send crash/error logs on.\n  --update-server URI      Server to download updates from.\n  --configuration-file FILEPATH\n                           Path to a yaml configuration file\n  --configuration-key TEXT Key within the configuration file to use\n  --system-start TIMESTAMP System start time. Format - seconds since Unix Epoch.\n  --configuration-seed INTEGER\n                           Seed for genesis generation. Overrides one from\n                           configuration file.\n  --update-latest-path FILEPATH\n                           Path to update installer file, which should be\n                           downloaded by Update System.\n  --update-with-package    Enable updating via installer.\n  --no-ntp                 Whether to use real NTP servers to synchronise time\n                           or rely on local time\n  --route53-health-check IP:PORT\n                           Host and port for the Route53 DNS health check.\n  --metrics                Enable metrics (EKG, statsd)\n  --ekg-server IP:PORT     Host and port for the EKG server\n  --statsd-server IP:PORT  Host and port for the statsd server\n  --statsd-interval MILLISECONDS\n                           Polling interval for statsd (milliseconds)\n  --statsd-debug BOOL      Enable statsd debug mode\n  --statsd-prefix TEXT     Prefix for statsd\n  --statsd-suffix TEXT     Suffix for statsd\n  --dump-genesis-data-to ARG\n                           Dump genesis data in canonical JSON format to this\n                           file.\n  --web-port PORT          Port for web API. (default: 8100)\n  --notifier-port PORT     Port for update notifier, the socket.io\n                           backend. (default: 8110)\n\n~~~\n\n## cardano-swagger\n\n~~~\nCardano SL Wallet web API docs generator.\n\nUsage: cardano-swagger [--version]\n  Generate Swagger specification for Wallet web API.\n\nAvailable options:\n  -h,--help                Show this help text\n  --version                Show version.\n\nThis program runs during 'cardano-sl' building on Travis CI. Generated file\n'wallet-web-api-swagger.json' will be used to produce HTML documentation. This\ndocumentation will be published at cardanodocs.com using\n'update_wallet_web_api_docs.sh'.\n~~~\n\n## cardano-post-mortem\n\n~~~\ncardano-post-mortem\n\nUsage: cardano-post-mortem COMMAND\n  analyzes the json logs from several directories or focusses on a single\n  transaction\n\nAvailable options:\n  -h,--help                Show this help text\n\nAvailable commands:\n  overview                 analyzes the json logs from LOGDIRS...\n  focus                    analyzes transaction FOCUS in log folder LOGDIR\n  txrelay                  analyzes transaction relays in the json logs from\n                           LOGDIRS...\n  throughput               analyzes transaction throughput and waiting time per\n                           time windows TXWINDOW and WAITWINDOW in the json logs\n                           from LOGDIRS...\n~~~\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-01-cli-options.cn.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-13-binary.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-13-binary.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-13-binary.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: Binary protocols\npath: /en/technical/protocols/binary-protocols/\ngroup: technical-protocols\nlanguage: en\nlabel: docs\n---\n<!-- Reviewed at 721474b760466b888cf26545b52b35989b2162de -->\n<!-- Delegation : Updated at 15b8b777fde5a8ab4a85af71affeffdf31ad219c -->\n\n# Binary Protocols\n\n<span style=\"color: red;\">**IMPORTANT: BINARY PROTOCOLS WILL BE CHANGED SOON.**</span>\n\nSizes of all fields are represented in bytes. Big-Endian is used everywhere.\nComposite types are serialized in the order of definition with no delimiters.\n\nFor example, `(Word32, Word8)` is serialized with 5 bytes: 4 for `Word32`, and 1\nfor `Word8`.\n\nFor variable-length structures, dependent on object of type T, we use `size(T)`\nnotation.\n\n`Word32` is *unsigned integer of 32 bits* (`uint32`).\n\nTo test serialization of object `myObject` in `ghci`, one should use the\nfollowing commands in `cardano-sl` root project directory:\n\n    $ stack repl\n    ...\n    <Press Enter>\n    ...\n    ghci> import Data.ByteString.Builder\n    ghci> let hexEncode myObject = toLazyByteString $ lazyByteStringHex $ Pos.Binary.encode $ myObject\n    ghci> hexEncode (mkCoin 1000)\n    \"0064\"\n\n## Common Haskell Data Types\n\n### Maybe\n\n``` haskell\ndata Maybe a = Nothing | Just a\n```\n\n`Maybe a` is either value of type `a` or empty (aka `null`, `None`). To\ndistinguish between two values we add 1 byte tag before data.\n\n| Tag size | Tag Type | Tag Value | Description     | Field size | Description       |\n|----------|----------|-----------|-----------------|------------|-------------------|\n| 1        | Word8    | 0x00      | Tag for Nothing |            |                   |\n|          |          | 0x01      | Tag for Just    |            |                   |\n|          |          |           |                 | size(a)    | Value of type `a` |\n\nExample:\n\n    ghci> hexEncode (Nothing :: Maybe Word32)\n    \"00\"\n    ghci> hexEncode (Just 4  :: Maybe Word32)\n    \"0100000004\"\n\n### Either\n\n``` haskell\ndata Either a b = Left a | Right b\n```\n\n`Either a b` is either value of type `a` or value of type `b`. To distinguish\nbetween two values we add 1 byte tag before data.\n\n| Tag size | Tag Type | Tag Value | Description   | Field size | Description       |\n|----------|----------|-----------|---------------|------------|-------------------|\n| 1        | Word8    | 0x00      | Tag for Left  |            |                   |\n|          |          |           |               | size(a)    | Value of type `a` |\n|          |          | 0x01      | Tag for Right |            |                   |\n|          |          |           |               | size(b)    | Value of type `b` |\n\nExample:\n\n    ghci> hexEncode (Left 3  :: Either Word16 Word32)\n    \"000003\"\n    ghci> hexEncode (Right 4 :: Either Word16 Word32)\n    \"0100000004\"\n\n### Big Integer\n\n``` haskell\n-- Fixed-size type for a subset of Integer\ntype SmallInt = Int32\n```\n\nIntegers are encoded in two ways: if they fit inside a `SmallInt`, they're\nwritten as a byte tag, and that value. If the `Integer` value is too large to\nfit in a SmallInt, it is written as a byte array, along with a sign and length\nfield.\n\nFor reference, see\n[implementation](http://hackage.haskell.org/package/binary-0.8.4.1/docs/src/Data.Binary.Class.html#line-306).\n\nExample:\n\n    ghci> hexEncode $ (15 :: Integer)\n    \"000000000f\"\n    ghci> hexEncode $ (  (2 :: Integer) ^ (128 :: Integer))\n    \"010100000000000000110000000000000000000000000000000001\"\n    ghci> hexEncode $ (- (2 :: Integer) ^ (128 :: Integer))\n    \"01ff00000000000000110000000000000000000000000000000001\"\n\n### Unsigned Variable Length Integer\n\nThis type will be referenced to later as `UVarInt Word16` or `UVarInt Word64` to\ndescribe maximum available value.\n\n``` haskell\nnewtype UnsignedVarInt a = UnsignedVarInt {getUnsignedVarInt :: a}\n    deriving (Eq, Ord, Show, Generic, NFData, Functor)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/895619d7056fe397e9c2a56d88994f167263c397/core/Pos/Binary/Class.hs#L277).\n\nValues are encoded 7 bits at a time, with the most significant one being a\ncontinuation bit. Thus, the numbers from 0 to 127 require only a single byte to\nencode, those from 128 to 16383 require two bytes, etc.\n\nThis\n[format](https://developers.google.com/protocol-buffers/docs/encoding#varints)\nis taken from Google's Protocol Buffers, which provides a bit more verbiage on\nthe encoding.\n\nExample:\n\n    ghci> hexEncode (UnsignedVarInt (3 :: Word32))\n    \"03\"\n    ghci> hexEncode (UnsignedVarInt (126 :: Word32))\n    \"7e\"\n    ghci> hexEncode (UnsignedVarInt (127 :: Word32))\n    \"7f\"\n    ghci> hexEncode (UnsignedVarInt (128 :: Word32))\n    \"8001\"\n\n### Tiny Variable Length Integer\n\n``` haskell\n-- | A newtype wrapper for non-negative integers less than @2^14@. Use it if\n-- you want to be extra careful. Compared to 'SignedVarInt' and\n-- 'UnsignedVarInt', it provides two benefits:\n--\n-- * It is guaranteed to take either 1 or 2 bytes (the standard decoder for\n--   variants can consume an unlimited amount of bytes).\n--\n-- * It is unambiguous (e.g. @0@ can be encoded in only one way instead of\n--   two).\nnewtype TinyVarInt = TinyVarInt {getTinyVarInt :: Word16}\n    deriving (Eq, Ord, Show, Generic, NFData)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/895619d7056fe397e9c2a56d88994f167263c397/core/Pos/Binary/Class.hs#L295).\n\n| Field size | Type           | Description                            |\n|------------|----------------|----------------------------------------|\n| 1-2        | UVarInt Word16 | Variable length integer up to 2^14 - 1 |\n\nExample:\n\n    ghci> hexEncode $ TinyVarInt 0\n    \"00\"\n    ghci> hexEncode $ TinyVarInt (2^14 -1)\n    \"ff7f\"\n\n`ByteString`s in `cardano` are encoded as a sequence of bytes preceded by its\nlength, where the length is encoded as a variable-length integer. If length is\nencoded as `TinyVarInt` then such `ByteString` is denoted as `TinyBS`.\n\n### Lists, NonEmpty and Vectors\n\nSometimes we store a list of some objects inside our datatypes. You will see\nreferences to them as `Vector a` or `[a]`. You should read this as *array of\nobjects of types `a`*. Both of these standard Haskell data types are serialized\nin the same way. If you see `NonEmpty a` in type you should read it as `[a]` but\nthe size of that list is guaranteed to be at least `1`.\n\n| Field size   | Type        | Value | Description                                  |\n|--------------|-------------|-------|----------------------------------------------|\n| 1-9          | UVarInt Int | n     | Size of array                                |\n| n \\* size(a) | a\\[n\\]      |       | Array with length `n` of objects of type `a` |\n\nExample:\n\n    ghci> hexEncode ([1, 31] :: [Word16])\n    \"020001001f\"\n    ghci> hexEncode ([0..135] :: [Word8])  -- 136 bytes from 0 to 135 including\n    \"8801000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f2021222324252\n    62728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4\n    f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f70717273747576777\n    8797a7b7c7d7e7f8081828384858687\"\n\n### HashMap\n\n`HashMap key value` is mapping from keys to values. In serialization, HashMap is\nrepresented as list of pairs from `key` and `value` and thus is serialized as\n`[(key, value)]`.\n\n| Field size                    | Type            | Value | Description                                             |\n|-------------------------------|-----------------|-------|---------------------------------------------------------|\n| 1-9                           | UVarInt Int     | n     | Size of HashMap                                         |\n| n * (size(key) + size(value)) | <key, value>[n] |       | Array with length `n` of objects of type `(key, value)` |\n\nExample:\n\n    ghci> hexEncode $ Data.HashMap.Strict.fromList [(1 :: Word8, 127 :: Word64), (2, 255)]\n    \"0201000000000000007f0200000000000000ff\"\n\n## Networking\n\n### MessageName\n\n``` haskell\nnewtype MessageName = MessageName BS.ByteString\n```\n\n[Source code\nlink](https://github.com/serokell/time-warp-nt/blob/f5500cb587eb2fbb02954b8d945985dbd0d51c0d/src/Node/Message.hs#L44).\n\nGenerally, we use `MessageName` represented by one or two encoded\n`UnsignedVarInt`s. At serialization state it is encoded as binary string, thus\ngets prefixed by length of the string.\n\nExample:\n\n    ghci> hexEncode $ messageName (Proxy :: Proxy SendProxySK)\n    \"0102\"\n    ghci> hexEncode $ messageName (Proxy :: Proxy (DataMsg GtMsgContents))\n    \"020a03\"\n\n## Basic Cardano SL Data Types\n\n### Coin\n\n``` haskell\n-- | Coin is the least possible unit of currency.\nnewtype Coin = Coin\n    { getCoin :: Word64\n    } deriving (Show, Ord, Eq, Generic, Hashable, Data, NFData)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L391).\n\nNumber of total coins is [45 \\* 10^9 \\*\n10^6](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L404).\n\n    45*10^15 needs 56 bits to represent\n    45*10^9  (integral mega coins) needs 36 bits to represent\n    999999   (floating mega coins) needs 20 bits to represent\n\n| Decimal  | Needed Bits |\n|----------|-------------|\n| 0-9      | 4 bits      |\n| 0-99     | 7 bits      |\n| 0-999    | 10 bits     |\n| 0-9999   | 14 bits     |\n| 0-99999  | 17 bits     |\n| 0-999999 | 20 bits     |\n\nCoin is splitted in mega coin (10^6) and the remaining coin for serialization.\n\n    1000999 coin = 1.000999 mega coin\n\nSimple variant encoding with `Word64` limit. The total length of the sequence is\nencoded in the first byte with a variable mask.\n\n| header    | mask | spare bits | extra byte | total bits as value | serialized size |\n|-----------|------|------------|------------|---------------------|-----------------|\n| 0 xxxxxxx | 0x7f | 7 bits     | 0          | 7 bits              | 1 byte          |\n| 10 xxxxxx | 0x3f | 6 bits     | 1          | 14 bits             | 2 bytes         |\n| 110 xxxxx | 0x1f | 5 bits     | 2          | 21 bits             | 3 bytes         |\n| 1110 xxxx | 0x0f | 4 bits     | 3          | 27 bits             | 4 bytes         |\n| 11110 xxx | 0x07 | 3 bits     | 4          | 35 bits             | 5 bytes         |\n| 111110 xx | 0x03 | 2 bits     | 5          | 42 bits             | 6 bytes         |\n| 1111110 x | 0x01 | 1 bit      | 6          | 49 bits             | 7 bytes         |\n| 11111110  | 0x00 | 0 bit      | 7          | 56 bits             | 8 bytes         |\n| 11111111  | 0x00 | 0 bit      | 8          | 64 bits             | 9 bytes         |\n\nSpecialized to the integral part which only needs 36 bits maximum:\n\n| header    | mask | spare bits | extra byte | total bits as value | serialized size |\n|-----------|------|------------|------------|---------------------|-----------------|\n| 0 xxxxxxx | 0x7f | 7 bits     | 0          | 7 bits              | 1 byte          |\n| 10 xxxxxx | 0x3f | 6 bits     | 1          | 14 bits             | 2 bytes         |\n| 110 xxxxx | 0x1f | 5 bits     | 2          | 21 bits             | 3 bytes         |\n| 1110 xxxx | 0x0f | 4 bits     | 3          | 27 bits             | 4 bytes         |\n| 1111 xxxx | 0x0f | 4 bits     | 4          | 36 bits             | 5 bytes         |\n\nAnd the floating part, needs 20 bits to represent, encoding value from 0 to\n999999:\n\n| header    | mask | spare bits | extra byte | total bits as value | serialized size |\n|-----------|------|------------|------------|---------------------|-----------------|\n| 0 xxxxxx  | 0x7f | 7 bits     | 0          | 7 bits              | 1 byte          |\n| 10 xxxxxx | 0x3f | 6 bits     | 1          | 14 bits             | 2 bytes         |\n| 110 xxxxx | 0x3f | 5 bits     | 2          | 21 bits             | 3 bytes         |\n\nNote: we could save one bit in the 3 bytes scheme here by considering the end of\nencoding but we don't need it, so by not changing the scheme we can re-use the\nprevious scheme for integral as is.\n\nFor details of implementations look at [this\nmodule](https://github.com/input-output-hk/cardano-sl/blob/1239a6a876fbbb970e836c8bc6bb72d781ba2fa9/core/Pos/Binary/Core/Coin.hs).\n\nExamples:\n\n    ghci> hexEncode (mkCoin 0)\n    \"0000\"\n    ghci> hexEncode (mkCoin 1)\n    \"00c186a0\"\n    ghci> hexEncode (mkCoin 2)\n    \"00c30d40\"\n    ghci> hexEncode (mkCoin 31)\n    \"00c1fbd0\"\n    ghci> hexEncode (mkCoin 128)\n    \"00cc8708\"\n    ghci> hexEncode (mkCoin 129)\n    \"00ce0da8\"\n    ghci> hexEncode (mkCoin 1000)\n    \"0064\"\n    ghci> hexEncode (mkCoin 10000)\n    \"000a\"\n    ghci> hexEncode (mkCoin 1000000)\n    \"0100\"\n    ghci> hexEncode (mkCoin 1000999)\n    \"01cf3e58\"\n\n### Hash\n\n``` haskell\n-- | Hash wrapper with phantom type for more type-safety.\n-- Made abstract in order to support different algorithms in\n-- different situations\nnewtype AbstractHash algo a = AbstractHash (Digest algo)\n    deriving (Show, Eq, Ord, ByteArray.ByteArrayAccess, Generic, NFData)\n\n-- | Type alias for commonly used hash\ntype Hash = AbstractHash Blake2b_256\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/652411b9b8777f08e948ee144a60779c55f363b3/core/Pos/Crypto/Hashing.hs#L118).\n\n| Field size | Type        | Description             |\n|------------|-------------|-------------------------|\n| 32         | Word8\\[32\\] | 256 bits of hash digest |\n\nMessage size limit: 32.\n\nSo whenever you see `Hash SomeType` in the code, this field will occupy 32\nbytes. An additional type parameter after `Hash` is used only in code for\ntype-safety and has no impact on serialization.\n\nExample:\n\n    ghci> hash $ mkCoin 3\n    AbstractHash 29bcdcff253cd2864a8b5e25992a6db86a7a41dc5e69c0599730f2c5716d9362\n    ghci> hexEncode $ hash $ mkCoin 3\n    \"29bcdcff253cd2864a8b5e25992a6db86a7a41dc5e69c0599730f2c5716d9362\"\n\n### Public Key\n\n``` haskell\n-- | Wrapper around 'CC.XPub'.\nnewtype PublicKey = PublicKey CC.XPub\n    deriving (Eq, Ord, Show, Generic, NFData, Hashable, Typeable)\n\ndata XPub = XPub !Edwards25519.PointCompressed !ChainCode\n    deriving (Eq, Ord, Show, Generic)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Crypto/Signing.hs#L70).\n\n| Field size | Type       | Description             |\n|------------|------------|-------------------------|\n| 32         | ByteString | 32-byte PointCompressed |\n| 32         | ByteString | 32-byte ChainCode       |\n\nMessage size limit: 64.\n\n### Signature\n\n``` haskell\n-- | Wrapper around 'CC.XSignature'.\nnewtype Signature a = Signature CC.XSignature\n    deriving (Eq, Ord, Show, Generic, NFData, Hashable, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Crypto/Signing.hs#L149).\n\n| Field size | Type        | Description                  |\n|------------|-------------|------------------------------|\n| 64         | Word8\\[64\\] | 64 bytes of signature string |\n\nMessage size limit: 64.\n\n### Epoch Index\n\n``` haskell\n-- | Index of epoch.\nnewtype EpochIndex = EpochIndex\n    { getEpochIndex :: Word64\n    } deriving (Show, Eq, Ord, Num, Enum, Ix, Integral, Real, Generic, Hashable, Bounded, Typeable, NFData)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L342).\n\n| Field size | Type           | Description |\n|------------|----------------|-------------|\n| 1-10       | UVarInt Word64 | epoch index |\n\nMessage size limit: 10.\n\nExample:\n\n    ghci> hexEncode (EpochIndex 128)\n    \"8001\"\n\n### Local Slot Index\n\n``` haskell\n-- | Index of slot inside a concrete epoch.\nnewtype LocalSlotIndex = LocalSlotIndex\n    { getSlotIndex :: Word16\n    } deriving (Show, Eq, Ord, Ix, Generic, Hashable, Buildable, Typeable, NFData)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L353).\n\n| Field size | Type           | Description         |\n|------------|----------------|---------------------|\n| 1-3        | UVarInt Word16 | index of local slot |\n\nExample:\n\n    ghci> hexEncode (LocalSlotIndex 15)\n    \"0f\"\n\n### SlotId\n\n``` haskell\n-- | Slot is identified by index of epoch and local index of slot in\n-- this epoch. This is a global index\ndata SlotId = SlotId\n    { siEpoch :: !EpochIndex\n    , siSlot  :: !LocalSlotIndex\n    } deriving (Show, Eq, Ord, Generic, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L377).\n\n| Field size | Type           | Description                        |\n|------------|----------------|------------------------------------|\n| 1-10       | UVarInt Word64 | Epoch index                        |\n| 1-3        | UVarInt Word16 | Slot index inside a concrete epoch |\n\nExample:\n\n    ghci> hexEncode (SlotId 128 15)\n    \"80010f\"\n\n### Attributes\n\n``` haskell\n-- | Convenient wrapper for the datatype to represent it (in binary\n-- format) as k-v map.\ndata Attributes h = Attributes\n    { -- | Data, containing known keys (deserialized)\n      attrData   :: h\n      -- | Remaining, unparsed fields\n    , attrRemain :: UnparsedFields\n    }\n  deriving (Eq, Ord, Generic, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Data/Attributes.hs#L60)\n\n``` haskell\n-- | Representation of unparsed fields in Attributes. Newtype wrapper is used\n-- for clear backward compatibility between previous representation (which was\n-- just a single ByteString) during transition from Store to CBOR.\nnewtype UnparsedFields = UnparsedFields (Map Word8 ByteString)\n    deriving (Eq, Ord, Show, Generic, Typeable, NFData)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Data/Attributes.hs#L34)\n\nMessage size limit: each type with `Attributes` defines its own limit for them.\n\n#### General Case Serialization\n\nStored as `totalLen + (k, v) pairs + some remaining part`. `attrData` is stored\nas list of pairs `(Word8, v)` where `key` has type `Word8` and you should\nspecify how to encode `h` in that way.\n\n| Field size             | Type           | Value | Description                           |\n|------------------------|----------------|-------|---------------------------------------|\n| 1-9                    | UVarInt Int64  | m + n | Size of attributes in bytes           |\n| m = t \\* (1 + size(v)) | <Word8,v>\\[t\\] |       | Array of pairs. Given without length. |\n| n                      | ByteString     |       | Remaining byte array                  |\n\nExample:\n\n    ghci> toLazyByteString\n          $ lazyByteStringHex\n          $ runPut\n          $ putAttributes (\\h -> [(1, put h), (0, put h)])\n          $ Attributes (9 :: Word32) \"abc\"\n    \"0d0000000009010000000961626\"\n\nHere `h = 9 :: Word32` and we encode `h` as two *key-value* pairs: value is\n4-byte `9` and keys are `0` and `1`.\n\n#### Attributes ()\n\nIn this special case no `(key, value)` pairs are stored — only arbitrary length\nbyte array.\n\n| Field size | Type          | Value | Description                                      |\n|------------|---------------|-------|--------------------------------------------------|\n| 1-4        | UVarInt Int64 | n     | Size of attributes in bytes. Should be &lt; 2^28 |\n| n          | Word8\\[n\\]    |       | `n` bytes of data                                |\n\nExample:\n\n    ghci> hexEncode $ Attributes () (BSS.pack [])\n    \"00\"\n    ghci> hexEncode $ Attributes () (BSS.pack [1,31])\n    \"02011f\"\n    ghci> hexEncode $ Attributes () \"abc\"\n    \"03616263\"\n\n### Script\n\n``` haskell\n-- | Version of script\ntype ScriptVersion = Word16\n\n-- | A script for inclusion into a transaction.\ndata Script = Script {\n    scrVersion :: ScriptVersion,    -- ^ Version\n    scrScript  :: LByteString}      -- ^ Serialized script\n  deriving (Eq, Show, Generic, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L424).\n\n| Field size | Type           | Value | Description        |\n|------------|----------------|-------|--------------------|\n| 1-3        | UVarInt Word16 |       | Script version     |\n| 1-9        | UVarInt Int64  | n     | Size of byte array |\n| n          | Word8\\[n\\]     |       | n bytes of script  |\n\nExample:\n\n    ghci> hexEncode $ Script 0 \"a\"\n    \"000161\"\n\n### Address Attributes\n\n``` haskell\n-- | Additional information stored along with address. It's intended\n-- to be put into 'Attributes' data type to make it extensible with\n-- softfork.\ndata AddrAttributes = AddrAttributes\n    { aaPkDerivationPath  :: !(Maybe HDAddressPayload)\n    , aaStakeDistribution :: !AddrStakeDistribution\n    } deriving (Eq, Ord, Show, Generic, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L199)\n\nAddress attributes hold additional information about address:\n\n- encrypted derivation path from the root of HD wallet tree (`aaPkDerivationPath`)\n- stake distribution associated with this address (`aaStakeDistribution`)\n\nNote that address may not contain an encrypted derivation path. Addresses\nwithout derivation path included in the attributes are usually derived from\nlevel 0 (wallet) public keys and used as IDs for wallets. Such addresses are not\nmeant to contain any money.\n\n#### Address Payload\n\n``` haskell\ndata HDAddressPayload = HDAddressPayload !ByteString\n    deriving (Eq, Ord, Show, Generic)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Crypto/HD.hs#L50)\n\n`HDAddressPayload` datatype represents a derivation path (`[Word32]`),\nsymmetrically encrypted via `ChaChaPoly1305` algorithm. An encryption key may be\nany `ByteString` of 32 bytes, known only to owner of the address.\n\nIn current Cardano implementation, encryption key is a 32-byte key derived from\nroot public key of wallet using PBKDF2 derivation algorithm with HMAC-SHA512 as\npseudorandom function, 500 iterations and string `address-hashing` as a salt.\n[Source code link](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Crypto/HD.hs#L58)\n\nAddress attributes are encrypted with crypto tag, thus allowing to check whether\nor not attributes are decrypted successfully. Consequently, one can determine\nwhether or not given address belongs to a given wallet by trying to decrypt this\naddress' attributes using encryption key derived from wallet's root public key.\n[Source code link](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Crypto/HD.hs#L113)\nto helper functions which implement attributes decryption and encryption.\n\n#### Address Stake Distribution\n\n``` haskell\n-- | Stake distribution associated with an address.\ndata AddrStakeDistribution\n    = BootstrapEraDistr\n    -- ^ Stake distribution for bootstrap era.\n    | SingleKeyDistr !StakeholderId\n    -- ^ Stake distribution stating that all stake should go to the given stakeholder.\n    | UnsafeMultiKeyDistr !(Map StakeholderId CoinPortion)\n    -- ^ Stake distribution which gives stake to multiple\n    -- stakeholders. 'CoinPortion' is a portion of an output (output\n    -- has a value, portion of this value is stake). The constructor\n    -- is unsafe because there are some predicates which must hold:\n    --\n    -- • the sum of portions must be @maxBound@ (basically 1);\n    -- • all portions must be positive;\n    -- • there must be at least 2 items, because if there is only one item,\n    -- 'SingleKeyDistr' can be used instead (which is smaller).\n    deriving (Eq, Ord, Show, Generic, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L137)\n\nIn Byron era, all addresses should use `BootstrapEraDistr` as stake\ndistribution -- which means, all the stake is automatically delegated to\nbootstrap stakeholders.\n\nIn Shelley era, addresses will use `SingleKeyDistr` or `UnsafeMultiKeyDistr` to\ndelegate stake associated with address' balance to their own stakeholder IDs.\n\n<!-- | Size | Type                      | Value | Description                                             | -->\n<!-- |------|---------------------------|-------|---------------------------------------------------------| -->\n<!-- | 1-2  | TinyVarInt                | n + m | sise of `PubKeyAddress` content                         | -->\n<!-- | n    | Maybe (Word8, \\[Word32\\]) |       | Empty for nothing and list of Word32 preceded with zero | -->\n<!-- | m    | ByteString                |       | Remaining bytes                                         | -->\n\n<!-- See examples in the next section. -->\n\n### Address\n\n``` haskell\n-- | Hash used to identify address.\ntype AddressHash = AbstractHash Blake2b_224\n\n-- | Stakeholder identifier (stakeholders are identified by their public keys)\ntype StakeholderId = AddressHash PublicKey\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L123)\n\nCardano addresses use `blake2b-224` for hashes included in address structure.\n\n``` haskell\n-- | Data which is bound to an address and must be revealed in order\n-- to spend coins belonging to this address.\ndata AddrSpendingData\n    = PubKeyASD !PublicKey\n    -- ^ Funds can be spent by revealing a 'PublicKey' and providing a\n    -- valid signature.\n    | ScriptASD !Script\n    -- ^ Funds can be spent by revealing a 'Script' and providing a\n    -- redeemer 'Script'.\n    | RedeemASD !RedeemPublicKey\n    -- ^ Funds can be spent by revealing a 'RedeemScript' and providing a\n    -- valid signature.\n    | UnknownASD !Word8 !ByteString\n    -- ^ Unknown type of spending data. It consists of a tag and\n    -- arbitrary 'ByteString'. It allows us to introduce a new type of\n    -- spending data via softfork.\n    deriving (Eq, Generic, Typeable, Show)\n\n-- | Type of an address. It corresponds to constructors of\n-- 'AddrSpendingData'. It's separated, because 'Address' doesn't store\n-- 'AddrSpendingData', but we want to know its type.\ndata AddrType\n    = ATPubKey\n    | ATScript\n    | ATRedeem\n    | ATUnknown !Word8\n    deriving (Eq, Ord, Generic, Typeable, Show)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L137) \n\nCardano supports different address types. Address types differ in how funds\nbelonging to the address can be spent. Each address type have corresponding type\nof spending data. Spending data is a part of data which is hashed in order to\nmake the address. Spending data, together with verification data (e.g. a\nsignature) should be provided in `TxInWitness` in order to spend funds from address.\n\nCurrently Cardano supports 3 address types:\n- Public key address (`ATPublicKey`): extended Ed25519 public key as spending\ndata, corresponding Ed25519 signature as verification data. \n- Script address (`ATScript`): Plutus validator script as spending data, Plutus\nredeemer script as verification data.\n- Redeem address (`ATRedeem`): plain Ed25519 public key as spending data,\n  Ed25519 signature as verification data. Used only in genesis to provide\n  pre-sold ADA to holders.\n\nAlso there is special `ATUnknown` address type added for forward compatibility.\n\n``` haskell\n-- | Hash of this data is stored in 'Address'. This type exists mostly\n-- for internal usage.\nnewtype Address' = Address'\n    { unAddress' :: (AddrType, AddrSpendingData, Attributes AddrAttributes)\n    } deriving (Eq, Show, Generic, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L206)\n\nInternal type `Address'` denotes a tuple, hash of which is stored as a part of\nthe `Address`. Not only `AddrSpendingData` is hashed, but also `AddrType` and\n`AddrAttributes`.\n\n``` haskell\n-- | 'Address' is where you can send coins.\ndata Address = Address\n    { addrRoot       :: !(AddressHash Address')\n    -- ^ Root of imaginary pseudo Merkle tree stored in this address.\n    , addrAttributes :: !(Attributes AddrAttributes)\n    -- ^ Attributes associated with this address.\n    , addrType       :: !AddrType\n    -- ^ The type of this address. Should correspond to\n    -- 'AddrSpendingData', but it can't be checked statically, because\n    -- spending data is hashed.\n    } deriving (Eq, Ord, Generic, Typeable, Show)\n```\n\n[Source code link](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L211)\n\nAn `Address` datatype consists of blake2b-224 hash of `Address'` tuple, type tag\nand attributes.\n\n#### Public Key Address\n\n[`addrPkAttributes`](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L107)\nfield is required for HD-wallets.\n\n| Size | Type                    | Value  | Description                                 |\n|------|-------------------------|--------|---------------------------------------------|\n| 1    | Word8                   | 0x00   | `PubKeyAddress` tag                         |\n| 1-2  | TinyVarInt              | 28 + m | Size of `PubKeyAddress` content             |\n| 28   | Word8\\[28\\]             |        | `addKeyHash`: 28 bytes of Blake2b\\_224 hash |\n| m    | PubKeyAddressAttributes |        | `addrPkAttributes`                          |\n| 4    | Word32                  |        | CRC32 of all previous data                  |\n\nExample:\n\n    ghci> abstractHash somPk :: AddressHash PublicKey\n    AbstractHash 380dea393a631ad563154a13bc5ee49fa4b62a60218358b5dcb875e0\n    ghci> hexEncode $ PubKeyAddress (abstractHash somePk) (Attributes (AddrPkAttrs Nothing) \"a\")\n    \"001e380dea393a631ad563154a13bc5ee49fa4b62a60218358b5dcb875e00161cf52c5ec\"\n    ghci> hexEncode $ PubKeyAddress (abstractHash somePk) (Attributes (AddrPkAttrs $ Just [3,9]) \"a\")\n    \"0028380dea393a631ad563154a13bc5ee49fa4b62a60218358b5dcb875e00b0002000000030000000961f1d810f7\"\n\nYou can notice in first example, that `0xCF52C5EC` is CRC32 of\n`001e380dea393a631ad563154a13bc5ee49fa4b62a60218358b5dcb875e00161`.\n \n#### Script Address\n\n| Size | Type        | Value | Description                         |\n|------|-------------|-------|-------------------------------------|\n| 1    | Word8       | 0x01  | `ScriptAddress` tag                 |\n| 1    | Word8       | 0x1C  | Size of `addrScriptHash`: always 28 |\n| 28   | Word8\\[28\\] |       | 28 bytes of Blake2b\\_224 hash       |\n| 4    | Word32      |       | CRC32 of all previous data          |\n\nExample:\n\n    ghci> hexEncode $ ScriptAddress (abstractHash $ Script 0 \"a\")\n    \"011c7ec20301993e369571c6225e1e563812198433801820a2d7328756dc61c5be8e\"\n\nAs you can notice, 4-byte suffix `0x61c5be8e` is CRC32 of prefix:\n`011c7ec20301993e369571c6225e1e563812198433801820a2d7328756dc`.\n\n#### Unknown Address\n\n| Size | Type       | Value | Description                |\n|------|------------|-------|----------------------------|\n| 1    |            | t     | `UnknownAddress` tag       |\n| 1-2  | TinyVarInt | n     | Size of unknown address    |\n| n    | Word8\\[n\\] |       | Unknown address itself     |\n| 4    | Word32     |       | CRC32 of all previous data |\n\nExample:\n\nLet's encode `UnknownAddressType 3 \"a\"`. Without CRC32 this will be encoded as\n`0x030161`. CRC32 of `0x030161` is `0xDEA907C4`. Thus we have:\n\n    ghci> hexEncode $ UnknownAddressType 3 \"a\"\n    \"030161dea907c4\"\n\n### MerkleRoot\n\n``` haskell\n-- | Data type for root of merkle tree.\nnewtype MerkleRoot a = MerkleRoot\n    { getMerkleRoot :: Hash Raw  -- ^ returns root 'Hash' of Merkle Tree\n    } deriving (Show, Eq, Ord, Generic, ByteArrayAccess, Typeable, NFData)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/214e7ac54fbb57007e18fdab4d274340371f2d19/core/Pos/Merkle.hs#L28).\n\n| Field size | Type | Description              |\n|------------|------|--------------------------|\n| size(Hash) | Hash | Root hash of Merkle tree |\n\n### Chain Difficulty\n\n``` haskell\n-- | Chain difficulty represents necessary effort to generate a\n-- chain. In the simplest case it can be number of blocks in chain.\nnewtype ChainDifficulty = ChainDifficulty\n    { getChainDifficulty :: Word64\n    } deriving (Show, Eq, Ord, Num, Enum, Real, Integral, Generic, Buildable, Typeable, NFData)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L135).\n\n| Size | Type           | Description      |\n|------|----------------|------------------|\n| 1-10 | UVarInt Word64 | Chain difficulty |\n\n### SlotLeaders\n\n    -- | 'NonEmpty' list of slot leaders.\n    type SlotLeaders = NonEmpty StakeholderId\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L264).\n\n| Field size               | Type               | Value | Description                    |\n|--------------------------|--------------------|-------|--------------------------------|\n| 1-9                      | UVarInt Int        | n     | Size of slot leaders list      |\n| n \\* size(StakeholderId) | StakeholderId\\[n\\] |       | List of slot leaders of size n |\n\n## GodTossing\n\n### Crypto.PVSS\n\nTypes prefixed with Pvss are defined in\n[Crypto.PVSS](https://hackage.haskell.org/package/pvss-0.1/docs/Crypto-PVSS.html)\nmodule. This section describes binary format of these types.\n\n#### Point\n\n``` haskell\nnewtype Point = Point { unPoint :: SSL.EcPoint }\n    deriving (Generic)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/pvss-haskell/blob/31bc53aa861bd4cae8f6741247e849299eae3983/src/Crypto/PVSS/ECC.hs#L92).\n\n| Field size | Type       | Description                                                           |\n|------------|------------|-----------------------------------------------------------------------|\n|         33 | ByteString | Binary represented elliptic curve point (see ecPointFromOct function) |\n\n#### Secret\n\n``` haskell\n-- | Secret\nnewtype Secret = Secret Point\n    deriving (Show,Eq,NFData,Binary)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/pvss-haskell/blob/670ce35d0f4a11aeb9617de4df2992c23f30573d/src/Crypto/SCRAPE.hs#L78).\n\n| Field size  | Type  | Description |\n|-------------|-------|-------------|\n| size(Point) | Point | Secret      |\n\n#### Proof\n\n``` haskell\nnewtype Scalar = Scalar { unScalar :: Integer }\n    deriving (Show,Eq,Generic,NFData)\n\nnewtype Challenge = Challenge ByteString\n    deriving (Show,Eq,NFData)\n\n-- | The generated proof\ndata Proof = Proof\n    { proof_c :: !Challenge\n    , proof_z :: !Scalar\n    } deriving (Show,Eq,Generic)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/pvss-haskell/blob/31bc53aa861bd4cae8f6741247e849299eae3983/src/Crypto/PVSS/DLEQ.hs#L39).\n`Scalar` [source code\nlink](https://github.com/input-output-hk/pvss-haskell/blob/31bc53aa861bd4cae8f6741247e849299eae3983/src/Crypto/PVSS/ECC.hs#L110).\n\n| Field size | Type       | Description              |\n|------------|------------|--------------------------|\n| 32         | ByteString | 32-byte string challenge |\n| 32         | Integer    | 32-byte integer scalar   |\n\n#### DecryptedShare\n\n``` haskell\n-- | An decrypted share decrypted by a party's key and\ndata DecryptedShare = DecryptedShare\n    { decryptedShareID    :: !ShareId\n    , shareDecryptedVal   :: !Point      -- ^ decrypted share\n    , decryptedValidProof :: !DLEQ.Proof -- ^ proof the decryption is valid\n    } deriving (Show,Eq,Generic)\n```\n\n| Field size  | Type    | Description                    |\n|-------------|---------|--------------------------------|\n| 32          | Integer | Share id                       |\n| size(Point) | Point   | Decrypted share                |\n| size(Proof) | Proof   | Proof the description is valid |\n\n#### ExtraGen\n\n``` haskell\n-- | Extra generator\nnewtype ExtraGen = ExtraGen Point\n    deriving (Show,Eq,NFData,Binary)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/pvss-haskell/blob/670ce35d0f4a11aeb9617de4df2992c23f30573d/src/Crypto/PVSS.hs#L82).\n\n| Field size  | Type  | Description     |\n|-------------|-------|-----------------|\n| size(Point) | Point | Extra generator |\n\nMessage size limit: 33.\n\n#### Commitment\n\n``` haskell\nnewtype Commitment = Commitment { unCommitment :: Point }\n    deriving (Show,Eq,NFData,Binary)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/pvss-haskell/blob/670ce35d0f4a11aeb9617de4df2992c23f30573d/src/Crypto/PVSS.hs#L69).\n\n| Field size  | Type  | Description |\n|-------------|-------|-------------|\n| size(Point) | Point | Commitment  |\n\n#### PublicKey\n\n``` haskell\n-- | Public Key\nnewtype PublicKey = PublicKey Point\n    deriving (Show,Eq,NFData,Binary)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/pvss-haskell/blob/31bc53aa861bd4cae8f6741247e849299eae3983/src/Crypto/PVSS/ECC.hs#L84).\n\n| Field size  | Type  | Description |\n|-------------|-------|-------------|\n| size(Point) | Point | Public key  |\n\n### Secret Sharing\n\nMost of following types are just aliases for PVSS types, so they are serialized\nin the same way.\n\n``` haskell\n-- | Secret can be generated by `genSharedSecret` function along with shares.\nnewtype Secret = Secret\n    { getSecret :: Pvss.Secret\n    } deriving (Show, Eq)\n\n-- | Shares can be used to reconstruct Secret.\nnewtype Share = Share\n    { getShare :: Pvss.DecryptedShare\n    } deriving (Show, Eq)\n\n-- | Encrypted share which needs to be decrypted using VssKeyPair first.\nnewtype EncShare = EncShare\n    { getEncShare :: Pvss.EncryptedShare\n    } deriving (Show, Eq)\n\n-- | This extra data may be used to verify encrypted share.\ndata SecretSharingExtra =\n    SecretSharingExtra !Pvss.ExtraGen\n                       ![Pvss.Commitment]\n    deriving (Show, Eq, Generic)\n\n-- | SecretProof may be used to commit Secret without revealing it.\nnewtype SecretProof =\n    SecretProof Pvss.Proof\n    deriving (Show, Eq, Generic)\n\n-- | This key is used as public key in VSS.\nnewtype VssPublicKey = VssPublicKey\n    { getVssPublicKey :: Pvss.PublicKey\n    } deriving (Show, Eq)\n```\n\nFormat of SecretSharingExtra:\n\n| Field size                 | Type                | Value | Description                |\n|----------------------------|---------------------|-------|----------------------------|\n| size(ExtraGen)             | Pvss.ExtraGen       |       | Extra generator            |\n| 1-9                        | UVarInt Int         | n     | Length of commitments list |\n| n \\* size(Pvss.Commitment) | \\[Pvss.Commitment\\] |       | Commitments                |\n\nMessage size limits: \n\n-   `Share` - 101.\n-   `EncShare` - 101.\n-   `SecretProof` - 64.\n-   `VssPublicKey` - 33.\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/69dd4b2d0c56474db1059393336557fb649dba9a/core/Pos/Crypto/SecretSharing.hs).\n\n### Commitments, Openings and Shares\n\n#### Commitment\n\n``` haskell\n-- | Commitment is a message generated during the first stage of\n-- GodTossing. It contains encrypted shares and proof of secret.\n-- Invariant which must be ensured: commShares is not empty.\ndata Commitment = Commitment\n    { commExtra  :: !(AsBinary SecretSharingExtra)\n    , commProof  :: !(AsBinary SecretProof)\n    , commShares :: !(HashMap (AsBinary VssPublicKey) (NonEmpty (AsBinary EncShare)))\n    } deriving (Show, Eq, Generic)\n```\n\n| Field size                                     | Type                        | Value | Description |\n|------------------------------------------------|-----------------------------|-------|-------------|\n| 1-9                                            | UVarInt Int                 | n     |             |\n| n \\* (sizeof(VssPublicKey) + sizeof(EncShare)) | HashMapCommShares           |       | commShares  |\n| sizeof(SecretSharingExtra)                     | AsBinary SecretSharingExtra |       | commExtra   |\n| sizeof(SecretProof)                            | AsBinary SecretProof        |       | commProof   |\n\nwhere `HashMapCommShares` =\n`HashMap (AsBinary VssPublicKey) (NonEmpty (AsBinary EncShare))`\n\nMessage size limit: 33.\n\n#### CommitmentSignature\n\n``` haskell\n-- | Signature which ensures that commitment was generated by node\n-- with given public key for given epoch.\ntype CommitmentSignature = Signature (EpochIndex, Commitment)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/1bab05d8a199ed6e9af066d4994ef13abdb95da7/godtossing/Pos/Ssc/GodTossing/Core/Types.hs#L73).\n\n| Field size      | Type                               | Description                                                                                         |\n|-----------------|------------------------------------|-----------------------------------------------------------------------------------------------------|\n| size(Signature) | Signature (EpochIndex, Commitment) | Signature which ensures that commitment was generated by node with given public key for given epoch |\n\n#### SignedCommitment\n\n``` haskell\ntype SignedCommitment = (PublicKey, Commitment, CommitmentSignature)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/1bab05d8a199ed6e9af066d4994ef13abdb95da7/godtossing/Pos/Ssc/GodTossing/Core/Types.hs#L75).\n\n| Field size                | Type                | Description                                       |\n|---------------------------|---------------------|---------------------------------------------------|\n| size(PublicKey)           | PublicKey           | Public key of node that generated this commitment |\n| size(Commitment)          | Commitment          | Commitment                                        |\n| size(CommitmentSignature) | CommitmentSignature | Commitment signature                              |\n\n#### CommitmentsMap\n\n``` haskell\n-- | 'CommitmentsMap' is a wrapper for 'HashMap StakeholderId SignedCommitment'\n-- which ensures that keys are consistent with values, i. e. 'PublicKey'\n-- from 'SignedCommitment' corresponds to key which is 'StakeholderId'.\nnewtype CommitmentsMap = CommitmentsMap\n    { getCommitmentsMap :: HashMap StakeholderId SignedCommitment\n    } deriving (Semigroup, Monoid, Show, Eq, Container, NFData)\n```\n\n| Field size                                         | Type                                   | Value | Description                      |\n|----------------------------------------------------|----------------------------------------|-------|----------------------------------|\n| 1-9                                                | UVarInt Int                            | n     | Number of commitments in map     |\n| n * (size(StakeholderId) + size(SignedCommitment)) | HashMap StakeholderId SignedCommitment |       | Commitments map as list of pairs |\n\n#### Opening\n\n``` haskell\n-- | Opening reveals secret.\nnewtype Opening = Opening\n    { getOpening :: (AsBinary Secret)\n    } deriving (Show, Eq, Generic, Buildable, NFData)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/1bab05d8a199ed6e9af066d4994ef13abdb95da7/godtossing/Pos/Ssc/GodTossing/Core/Types.hs#L102).\n\n| Field size   | Type            | Description     |\n|--------------|-----------------|-----------------|\n| size(Secret) | AsBinary Secret | Revealed secret |\n\nMessage size limit: 33.\n\n#### OpeningsMap\n\n``` haskell\ntype OpeningsMap = HashMap StakeholderId Opening\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/1bab05d8a199ed6e9af066d4994ef13abdb95da7/godtossing/Pos/Ssc/GodTossing/Core/Types.hs#L106).\n\n| Field size                                | Type                          | Value | Description                   |\n|-------------------------------------------|-------------------------------|-------|-------------------------------|\n| 1-9                                       | UVarInt Int                   | n     | Number of openings in map     |\n| n * (size(StakeholderId) + size(Opening)) | HashMap StakeholderId Opening |       | Openings map as list of pairs |\n\n#### VssCertificate\n\n``` haskell\n-- | VssCertificate allows VssPublicKey to participate in MPC.\n-- Each stakeholder should create a Vss keypair, sign VSS public key with signing\n-- key and send it into blockchain.\n--\n-- A public key of node is included in certificate in order to\n-- enable validation of it using only node's P2PKH address.\n-- Expiry epoch is last epoch when certificate is valid, expiry epoch is included\n-- in certificate and signature.\n--\n-- Other nodes accept this certificate if it is valid and if node has\n-- enough stake.\n--\n-- Invariant: 'checkSig vcSigningKey (vcVssKey, vcExpiryEpoch) vcSignature'.\ndata VssCertificate = VssCertificate\n    { vcVssKey      :: !(AsBinary VssPublicKey)\n    , vcExpiryEpoch :: !EpochIndex\n    -- ^ Epoch up to which certificates is valid.\n    , vcSignature   :: !(Signature (AsBinary VssPublicKey, EpochIndex))\n    , vcSigningKey  :: !PublicKey\n    } deriving (Show, Eq, Generic)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/3a6ac3c5aa8d3ca87d8b409d5923e21b744b1e6b/godtossing/Pos/Ssc/GodTossing/Core/Types.hs#L149).\n\n\n| Field size         | Type                                          | Description                                                   |\n|--------------------|-----------------------------------------------|---------------------------------------------------------------|\n| size(VssPublicKey) | AsBinary VssPublicKey                         | Public key of stakeholder which is allowed to participate in MPC |\n| size(EpochIndex)   | EpochIndex                                    | Last epoch when certificate is valid                          |\n| size(Signature)    | Signature (AsBinary VssPublicKey, EpochIndex) | Signature                                                     |\n| size(PublicKey)    | PublicKey                                     | Signing key      \n\nMessage size limit: 171.\n\n#### VssCertificatesMap\n\n``` haskell\n-- | VssCertificatesMap contains all valid certificates collected\n-- during some period of time.\ntype VssCertificatesMap = HashMap StakeholderId VssCertificate\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/3a6ac3c5aa8d3ca87d8b409d5923e21b744b1e6b/godtossing/Pos/Ssc/GodTossing/Core/Types.hs#L211).\n\n| Field size                                       | Type                                 | Value | Description                           |\n|--------------------------------------------------|--------------------------------------|-------|---------------------------------------|\n| 1-9                                              | UVarInt Int                          | n     | Number of certificates in map         |\n| n * (size(StakeholderId) + size(VssCertificate)) | HashMap StakeholderId VssCertificate |       | Vss certificates map as list of pairs |\n\n### TxProof\n\n``` haskell\ndata TxProof = TxProof\n    { txpNumber            :: !Word32\n    , txpRoot              :: !(MerkleRoot Tx)\n    , txpWitnessesHash     :: !(Hash [TxWitness])\n    , txpDistributionsHash :: !(Hash [TxDistribution])\n    } deriving (Show, Eq, Generic)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/895619d7056fe397e9c2a56d88994f167263c397/txp/Pos/Txp/Core/Types.hs#L262).\n\n| Field size       | Type          | Description                          |\n|------------------|---------------|--------------------------------------|\n| 4                | Word32        | Tx proof number                      |\n| size(MerkleRoot) | MerkleRoot Tx | MerkleRoot                           |\n| size(Hash)       | Hash          | Hash of the list of `TxWitness`      |\n| size(Hash)       | Hash          | Hash of the list of `TxDistribution` |\n\n### GtProof\n\n``` haskell\n-- | Proof of MpcData.\n-- We can use ADS for commitments, openings, shares as well,\n-- if we find it necessary.\ndata GtProof\n    = CommitmentsProof !(Hash CommitmentsMap) !(Hash VssCertificatesMap)\n    | OpeningsProof !(Hash OpeningsMap) !(Hash VssCertificatesMap)\n    | SharesProof !(Hash SharesMap) !(Hash VssCertificatesMap)\n    | CertificatesProof !(Hash VssCertificatesMap)\n    deriving (Show, Eq, Generic)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/1bab05d8a199ed6e9af066d4994ef13abdb95da7/godtossing/Pos/Ssc/GodTossing/Core/Types.hs#L232).\n\n| Tag size | Tag Type | Tag Value | Description               | Field size | Field Type |\n|----------|----------|-----------|---------------------------|------------|------------|\n| 1        | Word8    | 0x00      | Tag for CommitmentsProof  |            |            |\n|          |          |           |                           | size(Hash) | Hash       |\n|          |          |           |                           | size(Hash) | Hash       |\n|          |          | 0x01      | Tag for OpeningsProof     |            |            |\n|          |          |           |                           | size(Hash) | Hash       |\n|          |          |           |                           | size(Hash) | Hash       |\n|          |          | 0x02      | Tag for SharesProof       |            |            |\n|          |          |           |                           | size(Hash) | Hash       |\n|          |          |           |                           | size(Hash) | Hash       |\n|          |          | 0x03      | Tag for CertificatesProof |            |            |\n|          |          |           |                           | size(Hash) | Hash       |\n\n## Block Headers\n\n### BlockVersion\n\n``` haskell\n-- | Communication protocol version.\ndata BlockVersion = BlockVersion\n    { bvMajor :: !Word16\n    , bvMinor :: !Word16\n    , bvAlt   :: !Word8\n    } deriving (Eq, Generic, Ord, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L144).\n\n| Field size | Type   | Description                      |\n|------------|--------|----------------------------------|\n| 2          | Word16 | Major version                    |\n| 2          | Word16 | Minor version                    |\n| 1          | Word8  | Alt version from initial US spec |\n\n### SoftwareVersion\n\n``` haskell\nnewtype ApplicationName = ApplicationName\n    { getApplicationName :: Text\n    } deriving (Eq, Ord, Show, Generic, Typeable, ToString, Hashable, Buildable, NFData)\n\n-- | Numeric software version associated with ApplicationName.\ntype NumSoftwareVersion = Word32\n\n-- | Software version.\ndata SoftwareVersion = SoftwareVersion\n    { svAppName :: !ApplicationName\n    , svNumber  :: !NumSoftwareVersion\n    } deriving (Eq, Generic, Ord, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L170).\n\n| Field size | Type        | Value | Description                                     |\n|------------|-------------|-------|-------------------------------------------------|\n| 1          | UVarInt Int | n     | Length of application name (should be &lt;= 10) |\n| n          | Word8\\[n\\]  |       | `svAppName`: UTF8 encoded application name      |\n| 4          | Word32      |       | `svNumber`                                      |\n\n### MainBlockHeader\n\n<!-- TODO: Replace all Main* and Genesis* by type (*Blockchain) -->\n\n| Field size                | Type                | Description         |\n|---------------------------|---------------------|---------------------|\n| 4                         | Word32              | Protocol magic      |\n| size(HeaderHash)          | HeaderHash          | Previous block hash |\n| size(MainProof)           | MainProof           | Body proof          |\n| size(MainConsensusData)   | MainConsensusData   | Consensus data      |\n| size(MainExtraHeaderData) | MainExtraHeaderData | MainExtraHeaderData |\n\n#### MainProof\n\n``` haskell\ntype SscProof SscGodTossing = GtProof\n\n-- | Proof that body of update message contains 'UpdatePayload'.\ntype UpdateProof = Hash UpdatePayload\n\n-- | Proof of everything contained in the payload.\ndata BodyProof (MainBlockchain ssc) = MainProof\n    { mpTxProof       :: !TxProof\n    , mpMpcProof      :: !(SscProof ssc)\n    , mpProxySKsProof :: !(Hash DlgPayload)\n    , mpUpdateProof   :: !UpdateProof\n    } deriving (Generic)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/2198551433ec666f2df400d49b87ced13f3bcbee/src/Pos/Block/Core/Main/Chain.hs#L42).\n\n| Field size    | Type         | Description     |\n|---------------|--------------|-----------------|\n| size(TxProof) | TxProof      | mpTxProof       |\n| size(GtProof) | SscProof ssc | mpMpcProof      |\n| size(Hash)    | Hash         | mpProxySKsProof |\n| size(Hash)    | Hash         | mpUpdateProof   |\n\n#### MainConsensusData\n\n``` haskell\ndata ConsensusData (MainBlockchain ssc) = MainConsensusData\n    { -- | Id of the slot for which this block was generated.\n      _mcdSlot       :: !SlotId\n    , -- | Public key of the slot leader. It's essential to have it here,\n      -- because FTS gives us only hash of public key (aka 'StakeholderId').\n      _mcdLeaderKey  :: !PublicKey\n    , -- | Difficulty of chain ending in this block.\n      _mcdDifficulty :: !ChainDifficulty\n    , -- | Signature given by slot leader.\n      _mcdSignature  :: !(BlockSignature ssc)\n    } deriving (Generic, Show, Eq)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/2198551433ec666f2df400d49b87ced13f3bcbee/src/Pos/Block/Core/Main/Chain.hs#L48).\n\n| Field size            | Type            | Description   |\n|-----------------------|-----------------|---------------|\n| size(SlotId)          | SlotId          | mcdSlot       |\n| size(PublicKey)       | PublicKey       | mcdLeaderKey  |\n| size(ChainDifficulty) | ChainDifficulty | mcdDifficulty |\n| 64                    | BlockSignature  | mcdSignature  |\n\n#### MainExtraHeaderData\n\n``` haskell\n-- | Represents main block header attributes: map from 1-byte integer to\n-- arbitrary-type value. To be used for extending header with new\n-- fields via softfork.\ntype BlockHeaderAttributes = Attributes ()\n\n-- | Represents main block header extra data\ndata MainExtraHeaderData = MainExtraHeaderData\n    { -- | Version of block.\n      _mehBlockVersion    :: !BlockVersion\n    , -- | Software version.\n      _mehSoftwareVersion :: !SoftwareVersion\n    , -- | Header attributes\n      _mehAttributes      :: !BlockHeaderAttributes\n    } deriving (Eq, Show, Generic)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/3a6ac3c5aa8d3ca87d8b409d5923e21b744b1e6b/src/Pos/Block/Core/Main/Types.hs#L73).\n\n| Field size                  | Type                  | Description                                                                |\n|-----------------------------|-----------------------|----------------------------------------------------------------------------|\n| size(BlockVersion)          | BlockVersion          | Version of block                                                           |\n| size(SoftwareVersion)       | SoftwareVersion       | Software version                                                           |\n| size(BlockHeaderAttributes) | BlockHeaderAttributes | Header attributes (used for extending header with new fields via softfork) |\n\n### GenesisBlockHeader\n\n``` haskell\n-- | Header of block contains some kind of summary. There are various\n-- benefits which people get by separating header from other data.\n--\n-- The constructor has `Unsafe' prefix in its name, because there in\n-- general there may be some invariants which must hold for the\n-- contents of header.\ndata GenericBlockHeader b = UnsafeGenericBlockHeader\n    { -- | Pointer to the header of the previous block.\n      _gbhPrevBlock :: !(BHeaderHash b)\n    , -- | Proof of body.\n      _gbhBodyProof :: !(BodyProof b)\n    , -- | Consensus data to verify consensus algorithm.\n      _gbhConsensus :: !(ConsensusData b)\n    , -- | Any extra data.\n      _gbhExtra     :: !(ExtraHeaderData b)\n    } deriving (Generic)\n\n-- | Header of Genesis block.\ntype GenesisBlockHeader ssc = GenericBlockHeader (GenesisBlockchain ssc)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/b4b2c282b0e2a2e4415163e70dcb559396a2237c/src/Pos/Block/Core/Genesis/Types.hs#L63).\n\n| Field size                 | Type              | Description                                  |\n|----------------------------|-------------------|----------------------------------------------|\n| 4                          | BHeaderHash b     | Pointer to the header of the previous block  |\n| 32                         | BodyProof b       | Proof of body                                |\n| size(GenesisProof)         | ConsensusData b   | Consensus data to verify consensus algorithm |\n| size(GenesisConsensusData) | ExtraHeaderData b | Any extra data                               |\n\nwhere `b` = `GenesisBlockchain ssc`.\n\n#### GenesisProof\n\n``` haskell\n-- | Proof of GenesisBody is just a hash of slot leaders list.\ndata BodyProof (GenesisBlockchain ssc) = GenesisProof\n    !(Hash SlotLeaders)\n    deriving (Eq, Generic, Show)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/b4b2c282b0e2a2e4415163e70dcb559396a2237c/src/Pos/Block/Core/Genesis/Chain.hs#L28).\n\n| Field size | Type | Description               |\n|------------|------|---------------------------|\n| size(Hash) | Hash | Hash of slot leaders list |\n\n#### GenesisConsensusData\n\n``` haskell\ndata ConsensusData (GenesisBlockchain ssc) = GenesisConsensusData\n    { -- | Index of the slot for which this genesis block is relevant.\n      _gcdEpoch :: !EpochIndex\n    , -- | Difficulty of the chain ending in this genesis block.\n      _gcdDifficulty :: !ChainDifficulty\n    } deriving (Generic, Show, Eq)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/b4b2c282b0e2a2e4415163e70dcb559396a2237c/src/Pos/Block/Core/Genesis/Chain.hs#L31).\n\n| Field size            | Type            | Description                                             |\n|-----------------------|-----------------|---------------------------------------------------------|\n| size(EpochIndex)      | EpochIndex      | Index of epoch for which this genesis block is relevant |\n| size(ChainDifficulty) | ChainDifficulty | Difficulty of the chain ending in this genesis block.   |\n\n### BlockHeader\n\n``` haskell\n-- | Either header of ordinary main block or genesis block.\ntype BlockHeader ssc = Either (GenesisBlockHeader ssc) (MainBlockHeader ssc)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/f571087e5b5af339767198141981c850227ca99c/src/Pos/Block/Core/Union/Types.hs#L39).\n\n| Tag size | Tag Type | Tag Value | Description                  | Field size               |\n|----------|----------|-----------|------------------------------|--------------------------|\n| 1        | Word8    | 0x00      | Tag for `GenesisBlockHeader` |                          |\n|          |          |           |                              | size(GenesisBlockHeader) |\n|          |          | 0x01      | Tag for `MainBlockHeader`    |                          |\n|          |          |           |                              | size(MainBlockHeader)    |\n\n### Block\n\n``` haskell\n-- | Either genesis block or main block.\ntype Block ssc = Either (GenesisBlock ssc) (MainBlock ssc)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/f571087e5b5af339767198141981c850227ca99c/src/Pos/Block/Core/Union/Types.hs#L42).\n\n| Tag size | Tag Type | Tag Value | Description            | Field size         |\n|----------|----------|-----------|------------------------|--------------------|\n| 1        | Word8    | 0x00      | Tag for `GenesisBlock` |                    |\n|          |          |           |                        | size(GenesisBlock) |\n|          |          | 0x01      | Tag for `MainBlock`    |                    |\n|          |          |           |                        | size(MainBlock)    |\n\n## Block Exchange Messages\n\n### HeaderHash\n\n``` haskell\n-- | 'Hash' of block header. This should be @Hash (BlockHeader ssc)@\n-- but we don't want to have @ssc@ in 'HeaderHash' type.\ntype HeaderHash = Hash BlockHeaderStub\ndata BlockHeaderStub\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/2198551433ec666f2df400d49b87ced13f3bcbee/core/Pos/Core/Types.hs#L223).\n\n### GetHeaders\n\n``` haskell\n-- | 'GetHeaders' message. Behaviour of the response depends on\n-- particular combination of 'mghFrom' and 'mghTo'.\n--\n-- * 'mghTo' resolves to some header (let's call it @top@ for\n-- convenience) -- node's tip if it's @Nothing@, header with hash in\n-- @Just@ if it's @Just@.\n--\n-- * If 'mghFrom' is empty, then semantics is \"request to return\n-- header of block @top@\".\n--\n-- * Otherwise (if 'mghFrom' isn't empty) it represents the set of\n-- checkpoints. Responding node will try to iterate headers from @top@\n-- to older until it reaches any checkpoint. If it finds checkpoint\n-- @c@, it returns all headers in range @[c.next..top]@. If it doesn't\n-- find any checkpoint or depth of searching exceeds\n-- 'recoveryHeadersMessage', it will try to find the newest checkpoint\n-- @cc@ from 'mghFrom' that's in main chain of responding node and\n-- then return at most 'recoveryHeadersMessage' headers starting with\n-- @cc@ as the oldest one, returning headers in range @l2 =\n-- [cc.next..x]@ where @x@ is either @top@ (in case @length l2 <\n-- recoveryHeadersMessage@) or some arbitrary header (and length is\n-- precisely 'recoveryHeadersMessage').\ndata MsgGetHeaders = MsgGetHeaders\n    { -- not guaranteed to be in any particular order\n      mghFrom :: ![HeaderHash]\n    , mghTo   :: !(Maybe HeaderHash)\n    } deriving (Generic, Show, Eq)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/c8620af754252ebb71b1f5bc369b4f672f46d537/src/Pos/Block/Network/Types.hs#L42).\n\n| Field size        | Type        | Value              | Description                                  |\n|-------------------|-------------|--------------------|----------------------------------------------|\n| 1-9               | UVarInt Int | n                  | Number of checkpoints                        |\n| n \\* size(Hash)   | Hash\\[n\\]   |                    | List of length `n` with hashes               |\n| 1                 | Word8       | tag = 0x00 or 0x01 | Tag for optional `to` hash                   |\n| tag \\* size(Hash) | Hash        |                    | If tag is not `0x00` then hash of `to` block |\n\n### GetBlocks\n\n``` haskell\n-- | 'GetBlocks' message (see protocol specification).\ndata MsgGetBlocks = MsgGetBlocks\n    { mgbFrom :: !HeaderHash\n    , mgbTo   :: !HeaderHash\n    } deriving (Generic, Show, Eq)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/c8620af754252ebb71b1f5bc369b4f672f46d537/src/Pos/Block/Network/Types.hs#L54).\n\n| Field size | Type | Field     |\n|------------|------|-----------|\n| size(Hash) | Hash | `mgbFrom` |\n| size(Hash) | Hash | `mgbTo`   |\n\n### Headers\n\n``` haskell\n-- | 'Headers' message (see protocol specification).\nnewtype MsgHeaders ssc =\n    MsgHeaders (NewestFirst NE (BlockHeader ssc))\n    deriving (Generic, Show, Eq)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/c8620af754252ebb71b1f5bc369b4f672f46d537/src/Pos/Block/Network/Types.hs#L65).\n\n| Field size             | Type             | Value | Description             |\n|------------------------|------------------|-------|-------------------------|\n| 1-9                    | UVarInt Int      | n     | Number of block headers |\n| n \\* size(BlockHeader) | BlockHeader\\[n\\] |       | `n` block headers       |\n\n### Block\n\n``` haskell\n-- | 'Block' message (see protocol specification).\nnewtype MsgBlock ssc =\n    MsgBlock (Block ssc)\n    deriving (Generic, Show)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/c8620af754252ebb71b1f5bc369b4f672f46d537/src/Pos/Block/Network/Types.hs#L70).\n\n| Field size  | Type          | Value | Description                    |\n|-------------|---------------|-------|--------------------------------|\n| 1-9         | UVarInt Int64 | n     | Size of `Block` in bytes       |\n| size(Block) | Block         |       | `Block` with size of `n` bytes |\n\nContains one `Block`. We encode block size and then the block itself so that\nwe'd be able to reject the block if it's of the wrong size without consuming the\nwhole block.\n\n## Transaction sending\n\nTo send transaction you need to create and send `TxAux` data type to node. All\ndata types required to successfully perform sending are described in this\nsection.\n\n### Transaction input\n\n``` haskell\n-- | Represents transaction identifier as 'Hash' of 'Tx'.\ntype TxId = Hash Tx\n\n-- | Transaction input.\ndata TxIn = TxIn\n    { -- | Which transaction's output is used\n      txInHash  :: !TxId\n      -- | Index of the output in transaction's outputs\n    , txInIndex :: !Word32\n    } deriving (Eq, Ord, Show, Generic, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/895619d7056fe397e9c2a56d88994f167263c397/txp/Pos/Txp/Core/Types.hs#L147).\n\n| Field size | Type   | Field name |\n|------------|--------|------------|\n| size(Hash) | Hash   | txInHash   |\n| 4          | Word32 | txInIndex  |\n\n### Transaction output\n\n``` haskell\n-- | Transaction output.\ndata TxOut = TxOut\n    { txOutAddress :: !Address\n    , txOutValue   :: !Coin\n    } deriving (Eq, Ord, Generic, Show, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/895619d7056fe397e9c2a56d88994f167263c397/txp/Pos/Txp/Core/Types.hs#L160).\n\n| Field size    | Type    | Field name   |\n|---------------|---------|--------------|\n| size(Address) | Address | txOutAddress |\n| size(Coin)    | Coin    | txOutValue   |\n\nExample:\n\n    ghci> let addr = PubKeyAddress (abstractHash somePk) (Attributes (AddrPkAttrs Nothing) \"a\")\n    ghci> hexEncode addr\n    \"001e380dea393a631ad563154a13bc5ee49fa4b62a60218358b5dcb875e00161cf52c5ec\"\n    ghci> hexEncode $ TxOut addr (mkCoin 1000)\n    \"001e380dea393a631ad563154a13bc5ee49fa4b62a60218358b5dcb875e00161cf52c5ec0064\"\n\n### Transaction output distribution\n\n``` haskell\ntype TxOutDistribution = [(StakeholderId, Coin)]\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/src/Pos/Txp/Core/Types.hs#L129).\n\nLets define `distr_size(n) = n * (size(Hash) + size(Coin))`.\n\n| Field size     | Type             | Description                               |\n|----------------|------------------|-------------------------------------------|\n| distr\\_size(n) | <Hash,Coin>\\[n\\] | Array of pairs for StakeholderId and Coin |\n\n### Transaction output auxilary\n\n``` haskell\n-- | Transaction output and auxilary data corresponding to it.\ndata TxOutAux = TxOutAux\n    { toaOut   :: !TxOut             -- ^ Tx output\n    , toaDistr :: !TxOutDistribution -- ^ Stake distribution\n                                     -- associated with output\n    } deriving (Show, Eq)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/src/Pos/Txp/Core/Types.hs#L173).\n\n| Field size              | Type              | Field name |\n|-------------------------|-------------------|------------|\n| size(TxOut)             | TxOut             | toaOut     |\n| size(TxOutDistribution) | TxOutDistribution | toaDistr   |\n\n### Transaction signature data\n\n``` haskell\n-- | Data that is being signed when creating a TxSig.\ndata TxSigData = TxSigData\n    { -- | Input that we're signing (i.e. our signature certifies that we own\n      -- funds referenced by this input)\n      txSigInput     :: !TxIn\n      -- | Outputs of the transaction (i.e. our signature certifies that we\n      -- actually want the funds to go to these particular outputs)\n    , txSigOutsHash  :: !(Hash (NonEmpty TxOut))\n      -- | Distribution of the transaction\n    , txSigDistrHash :: !(Hash TxDistribution)\n    }\n    deriving (Eq, Show, Generic, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/src/Pos/Txp/Core/Types.hs#L80).\n\n| Field size | Type | Description    |\n|------------|------|----------------|\n| size(TxIn) | TxIn | txSigInput     |\n| size(Hash) | Hash | txSigOutsHash  |\n| size(Hash) | Hash | txSigDistrHash |\n\n### Transaction witness\n\n``` haskell\n-- | 'Signature' of addrId.\ntype TxSig = Signature TxSigData\n\n-- | A witness for a single input.\ndata TxInWitness\n    = PkWitness { twKey :: !PublicKey\n                , twSig :: !TxSig }\n    | ScriptWitness { twValidator :: !Script\n                    , twRedeemer  :: !Script }\n    | RedeemWitness { twRedeemKey :: !RedeemPublicKey\n                    , twRedeemSig :: !(RedeemSignature TxSigData) }\n    | UnknownWitnessType !Word8 !ByteString\n    deriving (Eq, Show, Generic, Typeable)\n\n-- | A witness is a proof that a transaction is allowed to spend the funds it\n-- spends (by providing signatures, redeeming scripts, etc). A separate proof\n-- is provided for each input.\ntype TxWitness = Vector TxInWitness\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/src/Pos/Txp/Core/Types.hs#L96).\n\n| Tag size | Tag Type | Tag Value | Description                | Field size            | Field Type                | Field name  |\n|----------|----------|-----------|----------------------------|-----------------------|---------------------------|-------------|\n| 1        | Word8    | 0x00      | Tag for PkWitness          |                       |                           |             |\n|          |          |           |                            | size(PublicKey)       | PublicKey                 | twKey       |\n|          |          |           |                            | 64                    | TxSig                     | twSig       |\n|          |          | 0x01      | Tag for ScriptWitness      |                       |                           |             |\n|          |          |           |                            | size(Script)          | Script                    | twValidator |\n|          |          |           |                            | size(Script)          | Script                    | twRedeemer  |\n|          |          | 0x02      | Tag for RedeemWitness      |                       |                           |             |\n|          |          |           |                            | size(RedeemPublicKey) | RedeemPublicKey           | twRedeemKey |\n|          |          |           |                            | size(RedeemSignature) | RedeemSignature TxSigData | twRedeemSig |\n|          |          | 0x03      | Tag for UnknownWitnessType |                       |                           |             |\n|          |          |           |                            | 1                     | Word8                     |             |\n|          |          |           |                            |                       | ByteString                |             |\n\n### Transaction\n\n``` haskell\n-- | Transaction.\ndata Tx = UnsafeTx\n    { _txInputs     :: !(NonEmpty TxIn)  -- ^ Inputs of transaction.\n    , _txOutputs    :: !(NonEmpty TxOut) -- ^ Outputs of transaction.\n    , _txAttributes :: !TxAttributes     -- ^ Attributes of transaction\n    } deriving (Eq, Ord, Generic, Show, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/src/Pos/Txp/Core/Types.hs#L196).\n\n| Field size         | Type         | Value | Description                   |\n|--------------------|--------------|-------|-------------------------------|\n| 1-9                | UVarInt Int  | n     | Number of transaction inputs  |\n| n \\* size(TxIn)    | TxIn\\[n\\]    |       | Array of transaction inputs   |\n| 1-9                | UVarInt Int  | m     | Number of transaction outputs |\n| m \\* size(TxOut)   | TxOut\\[m\\]   |       | Array of transaction outputs  |\n| size(TxAttributes) | TxAttributes |       | Attributes of transaction     |\n\n### Transaction distribution\n\n``` haskell\n-- | Distribution of “fake” stake that follow-the-satoshi would use\n-- for a particular transaction.  Length of stored list must be same\n-- as length of '_txOutputs' of corresponding transaction.\nnewtype TxDistribution = TxDistribution\n    { getTxDistribution :: NonEmpty TxOutDistribution\n    } deriving (Eq, Show, Generic, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/src/Pos/Txp/Core/Types.hs#L134).\n\nThough transaction distribution can be stored as list of list using previous\nserialization strategy it is often happens that we pass list of empty lists. In\nthat case we store such lists more efficiently.\n\n| Tag size | Tag Type | Tag Value | Description              | Field size     | Field Type       | Value |\n|----------|----------|-----------|--------------------------|----------------|------------------|-------|\n| 1        | Word8    | 0x00      | List of empty lists      |                |                  |       |\n|          |          |           |                          | 1-9            | UVarInt Int      |       |\n|          |          | 0x01      | Some lists are not empty |                |                  |       |\n|          |          |           |                          | 1-9            | UVarInt Int      | n     |\n|          |          |           |                          | distr\\_size(n) | <Hash,Coin>\\[n\\] |       |\n\n### Transaction auxilary\n\n``` haskell\n-- | Transaction + auxiliary data\ndata TxAux = TxAux\n    { taTx           :: !Tx\n    , taWitness      :: !TxWitness\n    , taDistribution :: !TxDistribution\n    } deriving (Generic, Show, Eq)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/ab543154d3ff34d3432620ac2557187d124b7d4f/txp/Pos/Txp/Core/Types.hs#L205).\n\n| Field size           | Type           | Description              |\n|----------------------|----------------|--------------------------|\n| size(Tx)             | Tx             | Transaction itself       |\n| size(TxWitness)      | TxWitness      | Witness for transaction  |\n| size(TxDistribution) | TxDistribution | Transaction distribution |\n\n<!-- TODO: describe full creation of transaction by bytes -->\n\n## Delegation\n\nPlease read about [Delegation\nMessages](/technical/protocols/csl-application-level/#delegation-messages) for\nmechanism explanation. Here you can find description of messages format only.\n\n### Proxy Certificate\n\nSimilar to `Signature`.\n\n``` haskell\n-- | Proxy certificate, made of ω + public key of delegate.\nnewtype ProxyCert w = ProxyCert { unProxyCert :: CC.XSignature }\n    deriving (Eq, Ord, Show, Generic, NFData, Hashable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Crypto/Signing.hs#L209).\n\n| Field size | Type        | Description                                 |\n|------------|-------------|---------------------------------------------|\n| 64         | Word8\\[64\\] | `unProxyCert`: 64 bytes of signature string |\n\nMessage size limit: 64.\n\nExample:\n\n    ghci> (issuerPk, issuerSk) <- keyGen\n    ghci> hexEncode issuerPk\n    \"0659c8e27599dc4709dab3bb58ce50d0729150fc238010fd3a68dcf07c621bdc\"\n    ghci> (delegatePk, delegateSk) <- keyGen\n    ghci> hexEncode delegatePk\n    \"5eaf0944733da8386c427656a876b20ae411fa686ea4bb165b53a311c868c287\"\n    ghci> let cert = createProxyCert issuerSk delegatePk (0, 10) :: ProxyCert (EpochIndex, EpochIndex)\n    ghci> hexEncode cert\n    \"8db543c5fff7dd5dab609d04a834cda77958faf48cabee351def8985a2ec7dae71c7b2f0390caa54c61c9d41f5228e1a0b5da1c08638b99d03a1c02c81cb1607\"\n    ghci> verifyProxyCert issuerPk delegatePk (0, 10) cert\n    True\n\n### Proxy Secret Key\n\n``` haskell\n-- | Convenient wrapper for secret key, that's basically ω + certificate.\ndata ProxySecretKey w = ProxySecretKey\n    { pskOmega      :: w\n    , pskIssuerPk   :: PublicKey\n    , pskDelegatePk :: PublicKey\n    , pskCert       :: ProxyCert w\n    } deriving (Eq, Ord, Show, Generic)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Crypto/Signing.hs#L224).\n\n| Field size      | Type        | Description   |\n|-----------------|-------------|---------------|\n| size(w)         | w           | pskOmega      |\n| size(PublicKey) | PublicKey   | pskIssuerPk   |\n| size(PublicKey) | PublicKey   | pskDelegatePk |\n| size(ProxyCert) | ProxyCert w | pskCert       |\n\n### Proxy signature\n\n``` haskell\n-- | Delegate signature made with certificate-based permission. @w@\n-- stays for message type used in proxy (ω in the implementation\n-- notes), @a@ for type of message signed.\ndata ProxySignature w a = ProxySignature\n    { psigPsk :: ProxySecretKey w\n    , psigSig :: CC.XSignature\n    } deriving (Eq, Ord, Show, Generic)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Crypto/Signing.hs#L256).\n\n| Field size     | Type           | Description |\n|----------------|----------------|-------------|\n| size(PproxySK) | ProxySecretKey | psigPsk     |\n| 64             | XSignature     | psigSig     |\n\n### Proxy Secret Key and Signature for Lightweight Delegation\n\n**WARNING: Currently, lightweight delegation is disabled and will be reworked in\n[Shelley release](https://cardanoroadmap.com/), so information below can be outdated.**\n\n#### Secret Key\n\n``` haskell\n-- | Same alias for the proxy secret key (see 'ProxySigLight').\ntype ProxySKLight = ProxySecretKey (EpochIndex, EpochIndex)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L238).\n\n| Field size      | Type                               | Description   |\n|-----------------|------------------------------------|---------------|\n| 1-10            | UVarInt Word64                     | from epoch    |\n| 1-10            | UVarInt Word64                     | to epoch      |\n| size(PublicKey) | PublicKey                          | pskIssuerPk   |\n| size(PublicKey) | PublicKey                          | pskDelegatePk |\n| 64              | ProxyCert (EpochIndex, EpochIndex) | pskCert       |\n\nExample:\n\n    ghci> let proxySk = createProxySecretKey issuerSk delegatePk (0, 10) :: ProxySKLight\n    ghci> hexEncode proxySk\n    \"000a0659c8e27599dc4709dab3bb58ce50d0729150fc238010fd3a68dcf07c621bdc5eaf0944733da8386\n    c427656a876b20ae411fa686ea4bb165b53a311c868c2878db543c5fff7dd5dab609d04a834cda77958faf\n    48cabee351def8985a2ec7dae71c7b2f0390caa54c61c9d41f5228e1a0b5da1c08638b99d03a1c02c81cb1607\"\n    ghci> verifyProxySecretKey proxySk\n    True\n\n#### Signature\n\n``` haskell\n-- | Proxy signature used in csl -- holds a pair of epoch\n-- indices. Block is valid if its epoch index is inside this range.\ntype ProxySigLight a = ProxySignature (EpochIndex, EpochIndex) a\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L235).\n\n| Field size      | Type                               | Description  |\n|-----------------|------------------------------------|--------------|\n| 1-10            | UVarInt Word64                     | from epoch   |\n| 1-10            | UVarInt Word64                     | to epoch     |\n| size(PublicKey) | PublicKey                          | pdDelegatePk |\n| 64              | ProxyCert (EpochIndex, EpochIndex) | pdCert       |\n| 64              | Signature                          | pdSig        |\n\nExample:\n\n    ghci> let proxyLightSig = proxySign delegateSk proxySk proxySk :: ProxySigLight ProxySKLight\n    ghci> hexEncode proxyLightSig\n    \"000a5eaf0944733da8386c427656a876b20ae411fa686ea4bb165b53a311c868c2878db543c5fff7dd5dab609d04a\n    834cda77958faf48cabee351def8985a2ec7dae71c7b2f0390caa54c61c9d41f5228e1a0b5da1c08638b99d03a1c02\n    c81cb1607e764468529599312ebe4dd5587383e5ccd3c2755401b22c8ff08827ecabd1afc8c634e17085ec83179193\n    afad2868e6aabce3e3e46e3170d077ee4e8613aa700\"\n    ghci> proxyVerify issuerPk proxyLightSig (== (0, 10)) proxySk\n    True\n\n### Proxy Secret Key and Signature for Heavyweight Delegation\n\n#### Secret Key\n\n``` haskell\n-- | Correspondent SK for no-ttl proxy signature scheme.\ntype ProxySKHeavy = ProxySecretKey EpochIndex\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L247).\n\n| Field size      | Type                 | Description   |\n|-----------------|----------------------|---------------|\n| 1-10            | UVarInt Word64       | epoch         |\n| size(PublicKey) | PublicKey            | pskIssuerPk   |\n| size(PublicKey) | PublicKey            | pskDelegatePk |\n| 64              | ProxyCert EpochIndex | pskCert       |\n\n#### Signature\n\n``` haskell\n-- | Simple proxy signature without ttl/epoch index\n-- constraints. 'EpochIndex' inside is needed for replay attack\n-- prevention.\ntype ProxySigHeavy a = ProxySignature EpochIndex a\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L244).\n\n| Field size      | Type                 | Description  |\n|-----------------|----------------------|--------------|\n| 1-10            | UVarInt Word64       | epoch        |\n| size(PublicKey) | PublicKey            | pdDelegatePk |\n| 64              | ProxyCert EpochIndex | pdCert       |\n| 64              | Signature            | pdSig        |\n\n### Lightweight Delegation Confirmation\n\n**WARNING: Currently, lightweight delegation is disabled and will be reworked in\n[Shelley release](https://cardanoroadmap.com/), so information below can be outdated.**\n\n#### ProxySKLightConfirmation\n\n``` haskell\n-- | Confirmation of light cert type.\ntype ProxySKLightConfirmation = (ProxySKLight, ProxySigLight ProxySKLight)\n```\n\n| Field size          | Description           |\n|---------------------|-----------------------|\n| size(ProxySKLight)  | Certificate           |\n| size(ProxySigLight) | Proof for certificate |\n\n## Update System\n\n### Update Vote\n\n``` haskell\n-- | ID of software update proposal\ntype UpId = Hash UpdateProposal\n\n-- | Vote for update proposal\ndata UpdateVote = UpdateVote\n    { -- | Public key of stakeholder, who votes\n      uvKey        :: !PublicKey\n    , -- | Proposal to which this vote applies\n      uvProposalId :: !UpId\n    , -- | Approval/rejection bit\n      uvDecision   :: !Bool\n    , -- | Signature of (Update proposal, Approval/rejection bit)\n      --   by stakeholder\n      uvSignature  :: !(Signature (UpId, Bool))\n    } deriving (Eq, Show, Generic, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/fbe9760bd50ea136203e54d578d62ed3070b5513/update/Pos/Update/Core/Types.hs#L255).\n\n| Field size      | Type      | Field        |\n|-----------------|-----------|--------------|\n| size(PublicKey) | PublicKey | uvKey        |\n| size(Hash)      | Hash      | uvProposalId |\n| 1               | Bool      | uvDecision   |\n| 64              | Signature | uvSignature  |\n\n### Vote Identifier\n\n``` haskell\ntype VoteId = (UpId, PublicKey, Bool)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/fbe9760bd50ea136203e54d578d62ed3070b5513/update/Pos/Update/Core/Types.hs#L252).\n\n| Field size      | Type      | Description             |\n|-----------------|-----------|-------------------------|\n| size(Hash)      | Hash      | Hash of update proposal |\n| size(PublicKey) | PublicKey | Public key              |\n| 1               | Bool      | Vote result             |\n\nFor more description of fields, see *UpdateVote* message description. `VoteId`\nis just `(uvProposalId, uvKey, uvDecision)`.\n\n### Block Version Data\n\n``` haskell\n-- | Data which is associated with 'BlockVersion'.\ndata BlockVersionData = BlockVersionData\n    { bvdScriptVersion     :: !ScriptVersion\n    , bvdSlotDuration      :: !Millisecond\n    , bvdMaxBlockSize      :: !Byte\n    , bvdMaxHeaderSize     :: !Byte\n    , bvdMaxTxSize         :: !Byte\n    , bvdMaxProposalSize   :: !Byte\n    , bvdMpcThd            :: !CoinPortion\n    , bvdHeavyDelThd       :: !CoinPortion\n    , bvdUpdateVoteThd     :: !CoinPortion\n    , bvdUpdateProposalThd :: !CoinPortion\n    , bvdUpdateImplicit    :: !FlatSlotId\n    , bvdUpdateSoftforkThd :: !CoinPortion\n    } deriving (Show, Eq, Generic, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L201).\n\n| Field size    | Type           | Field                |\n|---------------|----------------|----------------------|\n| 1-3           | UVarInt Word16 | bvdScriptVersion     |\n| size(Integer) | Integer        | bvdSlotDuration      |\n| size(Integer) | Integer        | bvdMaxBlockSize      |\n| size(Integer) | Integer        | bvdMaxHeaderSize     |\n| size(Integer) | Integer        | bvdMaxTxSize         |\n| size(Integer) | Integer        | bvdMaxProposalSize   |\n| 8             | Word64         | bvdMpcThd            |\n| 8             | Word64         | bvdHeavyDelThd       |\n| 8             | Word64         | bvdUpdateVoteThd     |\n| 8             | Word64         | bvdUpdateProposalThd |\n| 8             | Word64         | bvdUpdateImplicit    |\n| 8             | Word64         | bvdUpdateSoftforkThd |\n\n### Update Data\n\n``` haskell\n-- | Data which describes update. It is specific for each system.\ndata UpdateData = UpdateData\n    { udAppDiffHash  :: !(Hash Raw)\n    -- ^ Hash of binary diff between two applications. This diff can\n    -- be passed to updater to create new application.\n    , udPkgHash      :: !(Hash Raw)\n    -- ^ Hash of package to install new application. This package can\n    -- be used to install new application from scratch instead of\n    -- updating existing application.\n    , udUpdaterHash  :: !(Hash Raw)\n    -- ^ Hash if update application which can be used to install this\n    -- update (relevant only when updater is used, not package).\n    , udMetadataHash :: !(Hash Raw)\n    -- ^ Hash of metadata relevant to this update.  It is raw hash,\n    -- because metadata can include image or something\n    -- (maybe). Anyway, we can always use `unsafeHash`.\n    } deriving (Eq, Show, Generic, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/update/Pos/Update/Core/Types.hs#L224).\n\n| Field size | Type | Field          |\n|------------|------|----------------|\n| size(Hash) | Hash | udAppDiffHash  |\n| size(Hash) | Hash | udPkgHash      |\n| size(Hash) | Hash | udUpdaterHash  |\n| size(Hash) | Hash | udMetadataHash |\n\n### System Tag\n\n``` haskell\n-- | Tag of system for which update data is purposed, e.g. win64, mac32\nnewtype SystemTag = SystemTag { getSystemTag :: Text }\n  deriving (Eq, Ord, Show, Generic, Buildable, Hashable, Lift, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/update/Pos/Update/Core/Types.hs#L81).\n\n`SystemTag` is encoded as `ByteString` in UTF-8 encoding.\n\n| Field size | Type          | Value | Field                           |\n|------------|---------------|-------|---------------------------------|\n| 1-9        | UVarInt Int64 | n     | Size of text in bytes           |\n| n          | Word8\\[n\\]    |       | `n` bytes of UTF-8 encoded text |\n\n### Update Proposal\n\n``` haskell\ntype UpAttributes = Attributes ()\n\n-- | Proposal for software update\ndata UpdateProposal = UnsafeUpdateProposal\n    { upBlockVersion     :: !BlockVersion\n    , upBlockVersionData :: !BlockVersionData\n    , upSoftwareVersion  :: !SoftwareVersion\n    , upData             :: !(HM.HashMap SystemTag UpdateData)\n    -- ^ UpdateData for each system which this update affects.\n    -- It must be non-empty.\n    , upAttributes       :: !UpAttributes\n    -- ^ Attributes which are currently empty, but provide\n    -- extensibility.\n    , upFrom             :: !PublicKey\n    -- ^ Who proposed this UP.\n    , upSignature        :: !(Signature UpdateProposalToSign)\n    } deriving (Eq, Show, Generic, Typeable)\n```\n\n| Field size                                | Type                           | Value | Field              |\n|-------------------------------------------|--------------------------------|-------|--------------------|\n| 5                                         | BlockVersion                   |       | upBlockVersion     |\n| size(BlockVersionData)                    | BlockVersionData               |       | upBlockVersionData |\n| size(SoftwareVersion)                     | SoftwareVersion                |       | upSoftwareVersion  |\n| 1-9                                       | UVarInt Int                    | n     |                    |\n| n \\* (size(SystemTag) + size(UpdateData)) | <SystemTag, UpdateData>\\[n\\]   |       | upData             |\n| size(Attributes ())                       | Attributes ()                  |       | upAttributes       |\n| size(PublicKey)                           | PublicKey                      |       | upFrom             |\n| size(Signature)                           | Signature UpdateProposalToSign |       | upSignature        |\n\n## Peer Data\n\n### HandlerSpec\n\n``` haskell\ndata HandlerSpec\n    = ConvHandler { hsReplyType :: MessageName}\n    | UnknownHandler Word8 ByteString\n    deriving (Show, Generic, Eq)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/414817a6f8c8de405553c8ba1325e1366dc7b60e/infra/Pos/Communication/Types/Protocol.hs#L80).\n\n| Type                                           | Size           | Value     | Following data |\n|------------------------------------------------|----------------|-----------|----------------|\n| ConvHandler m where m : UnsignedVarInt &lt; 64 | Word8          | 01xx xxxx | none           |\n| ConvHandler m where m : Unknown                | Word8 + TinyBS | 0000 0001 | ByteString     |\n| UnknownHandler w8 bs                           | Word8 + TinyBS | w8        | bs             |\n\nExamples:\n\n    ghci> hexEncode (ConvHandler (messageName (Proxy :: Proxy MsgGetHeaders)))\n    \"44\"\n    ghci> hexEncode (UnknownHandler 10 \"aba\")\n    \"0a03616261\"\n\n### VerInfo\n\n``` haskell\ntype HandlerSpecs = HashMap MessageName HandlerSpec\n\nnewtype InSpecs = InSpecs HandlerSpecs\n    deriving (Eq, Show, Generic)\n\nnewtype OutSpecs = OutSpecs HandlerSpecs\n    deriving (Eq, Show, Generic)\n\ndata VerInfo = VerInfo\n    { vIMagic        :: Int32\n    , vIBlockVersion :: BlockVersion\n    , vIInHandlers   :: HandlerSpecs\n    , vIOutHandlers  :: HandlerSpecs\n    } deriving (Eq, Generic, Show)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/414817a6f8c8de405553c8ba1325e1366dc7b60e/infra/Pos/Communication/Types/Protocol.hs#L102).\n\n| Field size         | Type         | Field            |\n|--------------------|--------------|------------------|\n| 4                  | Int32        | `vIMagic`        |\n| 5                  | BlockVersion | `vIBlockVersion` |\n| size(HandlerSpecs) | HandlerSpecs | `vIInHandlers`   |\n| size(HandlerSpecs) | HandlerSpecs | `vIOutHandlers`  |\n\n`HandlerSpec` is just mapping between message names and how those messages\nhandled: via single-message style or conversation style + message tag. This\nmapping is encoded as every other `Map` — list of pairs.\n\n`InSpecs` and `OutSpecs` are just wrappers around `HandlerSpecs`. These wrappers\nare used only for type-safety to distinguish spec for incoming and outgoing\nmessages.\n\n<!-- TODO: didn't find examples of inSpecs :( -->\n\n### PeerData\n\n``` haskell\ntype PeerData = VerInfo\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/414817a6f8c8de405553c8ba1325e1366dc7b60e/infra/Pos/Communication/Types/Protocol.hs#L47).\n\n| Field size    | Type    | Description       |\n|---------------|---------|-------------------|\n| size(VerInfo) | VerInfo | MessageName table |\n\n`VerInfo` we sending is created\n[here](https://github.com/input-output-hk/cardano-sl/blob/81b40e54bb5dda2e94850ccc9a835b46e5c445b5/src/Pos/Launcher/Runner.hs#L286).\n\nExamples:\n\n``` haskell\nghci> let ourVerInfo = VerInfo protocolMagic lastKnownBlockVersion mempty outSpecs\nghci> let peerIdExample = PeerId \"0123456789ABCD\"\nghci> hexEncode ourVerInfo\n\"0000000000000000000004030800000103020900030801010103020901030802\n020103020902030803030103020903\"\nghci> hexEncode ((peerIdExample, ourVerInfo) :: PeerData)\n\"3031323334353637383941424344000000000000000000000403080000010302\n0900030801010103020901030802020103020902030803030103020903\"\n```\n",
        "type": "MarkdownRemark",
        "contentDigest": "777e4cc195c639a856ee209d3b3ce651",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "Binary protocols",
        "path": "/en/technical/protocols/binary-protocols/",
        "group": "technical-protocols",
        "language": "en",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-13-binary.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-13-binary.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at 721474b760466b888cf26545b52b35989b2162de -->\n<!-- Delegation : Updated at 15b8b777fde5a8ab4a85af71affeffdf31ad219c -->\n\n# Binary Protocols\n\n<span style=\"color: red;\">**IMPORTANT: BINARY PROTOCOLS WILL BE CHANGED SOON.**</span>\n\nSizes of all fields are represented in bytes. Big-Endian is used everywhere.\nComposite types are serialized in the order of definition with no delimiters.\n\nFor example, `(Word32, Word8)` is serialized with 5 bytes: 4 for `Word32`, and 1\nfor `Word8`.\n\nFor variable-length structures, dependent on object of type T, we use `size(T)`\nnotation.\n\n`Word32` is *unsigned integer of 32 bits* (`uint32`).\n\nTo test serialization of object `myObject` in `ghci`, one should use the\nfollowing commands in `cardano-sl` root project directory:\n\n    $ stack repl\n    ...\n    <Press Enter>\n    ...\n    ghci> import Data.ByteString.Builder\n    ghci> let hexEncode myObject = toLazyByteString $ lazyByteStringHex $ Pos.Binary.encode $ myObject\n    ghci> hexEncode (mkCoin 1000)\n    \"0064\"\n\n## Common Haskell Data Types\n\n### Maybe\n\n``` haskell\ndata Maybe a = Nothing | Just a\n```\n\n`Maybe a` is either value of type `a` or empty (aka `null`, `None`). To\ndistinguish between two values we add 1 byte tag before data.\n\n| Tag size | Tag Type | Tag Value | Description     | Field size | Description       |\n|----------|----------|-----------|-----------------|------------|-------------------|\n| 1        | Word8    | 0x00      | Tag for Nothing |            |                   |\n|          |          | 0x01      | Tag for Just    |            |                   |\n|          |          |           |                 | size(a)    | Value of type `a` |\n\nExample:\n\n    ghci> hexEncode (Nothing :: Maybe Word32)\n    \"00\"\n    ghci> hexEncode (Just 4  :: Maybe Word32)\n    \"0100000004\"\n\n### Either\n\n``` haskell\ndata Either a b = Left a | Right b\n```\n\n`Either a b` is either value of type `a` or value of type `b`. To distinguish\nbetween two values we add 1 byte tag before data.\n\n| Tag size | Tag Type | Tag Value | Description   | Field size | Description       |\n|----------|----------|-----------|---------------|------------|-------------------|\n| 1        | Word8    | 0x00      | Tag for Left  |            |                   |\n|          |          |           |               | size(a)    | Value of type `a` |\n|          |          | 0x01      | Tag for Right |            |                   |\n|          |          |           |               | size(b)    | Value of type `b` |\n\nExample:\n\n    ghci> hexEncode (Left 3  :: Either Word16 Word32)\n    \"000003\"\n    ghci> hexEncode (Right 4 :: Either Word16 Word32)\n    \"0100000004\"\n\n### Big Integer\n\n``` haskell\n-- Fixed-size type for a subset of Integer\ntype SmallInt = Int32\n```\n\nIntegers are encoded in two ways: if they fit inside a `SmallInt`, they're\nwritten as a byte tag, and that value. If the `Integer` value is too large to\nfit in a SmallInt, it is written as a byte array, along with a sign and length\nfield.\n\nFor reference, see\n[implementation](http://hackage.haskell.org/package/binary-0.8.4.1/docs/src/Data.Binary.Class.html#line-306).\n\nExample:\n\n    ghci> hexEncode $ (15 :: Integer)\n    \"000000000f\"\n    ghci> hexEncode $ (  (2 :: Integer) ^ (128 :: Integer))\n    \"010100000000000000110000000000000000000000000000000001\"\n    ghci> hexEncode $ (- (2 :: Integer) ^ (128 :: Integer))\n    \"01ff00000000000000110000000000000000000000000000000001\"\n\n### Unsigned Variable Length Integer\n\nThis type will be referenced to later as `UVarInt Word16` or `UVarInt Word64` to\ndescribe maximum available value.\n\n``` haskell\nnewtype UnsignedVarInt a = UnsignedVarInt {getUnsignedVarInt :: a}\n    deriving (Eq, Ord, Show, Generic, NFData, Functor)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/895619d7056fe397e9c2a56d88994f167263c397/core/Pos/Binary/Class.hs#L277).\n\nValues are encoded 7 bits at a time, with the most significant one being a\ncontinuation bit. Thus, the numbers from 0 to 127 require only a single byte to\nencode, those from 128 to 16383 require two bytes, etc.\n\nThis\n[format](https://developers.google.com/protocol-buffers/docs/encoding#varints)\nis taken from Google's Protocol Buffers, which provides a bit more verbiage on\nthe encoding.\n\nExample:\n\n    ghci> hexEncode (UnsignedVarInt (3 :: Word32))\n    \"03\"\n    ghci> hexEncode (UnsignedVarInt (126 :: Word32))\n    \"7e\"\n    ghci> hexEncode (UnsignedVarInt (127 :: Word32))\n    \"7f\"\n    ghci> hexEncode (UnsignedVarInt (128 :: Word32))\n    \"8001\"\n\n### Tiny Variable Length Integer\n\n``` haskell\n-- | A newtype wrapper for non-negative integers less than @2^14@. Use it if\n-- you want to be extra careful. Compared to 'SignedVarInt' and\n-- 'UnsignedVarInt', it provides two benefits:\n--\n-- * It is guaranteed to take either 1 or 2 bytes (the standard decoder for\n--   variants can consume an unlimited amount of bytes).\n--\n-- * It is unambiguous (e.g. @0@ can be encoded in only one way instead of\n--   two).\nnewtype TinyVarInt = TinyVarInt {getTinyVarInt :: Word16}\n    deriving (Eq, Ord, Show, Generic, NFData)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/895619d7056fe397e9c2a56d88994f167263c397/core/Pos/Binary/Class.hs#L295).\n\n| Field size | Type           | Description                            |\n|------------|----------------|----------------------------------------|\n| 1-2        | UVarInt Word16 | Variable length integer up to 2^14 - 1 |\n\nExample:\n\n    ghci> hexEncode $ TinyVarInt 0\n    \"00\"\n    ghci> hexEncode $ TinyVarInt (2^14 -1)\n    \"ff7f\"\n\n`ByteString`s in `cardano` are encoded as a sequence of bytes preceded by its\nlength, where the length is encoded as a variable-length integer. If length is\nencoded as `TinyVarInt` then such `ByteString` is denoted as `TinyBS`.\n\n### Lists, NonEmpty and Vectors\n\nSometimes we store a list of some objects inside our datatypes. You will see\nreferences to them as `Vector a` or `[a]`. You should read this as *array of\nobjects of types `a`*. Both of these standard Haskell data types are serialized\nin the same way. If you see `NonEmpty a` in type you should read it as `[a]` but\nthe size of that list is guaranteed to be at least `1`.\n\n| Field size   | Type        | Value | Description                                  |\n|--------------|-------------|-------|----------------------------------------------|\n| 1-9          | UVarInt Int | n     | Size of array                                |\n| n \\* size(a) | a\\[n\\]      |       | Array with length `n` of objects of type `a` |\n\nExample:\n\n    ghci> hexEncode ([1, 31] :: [Word16])\n    \"020001001f\"\n    ghci> hexEncode ([0..135] :: [Word8])  -- 136 bytes from 0 to 135 including\n    \"8801000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f2021222324252\n    62728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4\n    f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f70717273747576777\n    8797a7b7c7d7e7f8081828384858687\"\n\n### HashMap\n\n`HashMap key value` is mapping from keys to values. In serialization, HashMap is\nrepresented as list of pairs from `key` and `value` and thus is serialized as\n`[(key, value)]`.\n\n| Field size                    | Type            | Value | Description                                             |\n|-------------------------------|-----------------|-------|---------------------------------------------------------|\n| 1-9                           | UVarInt Int     | n     | Size of HashMap                                         |\n| n * (size(key) + size(value)) | <key, value>[n] |       | Array with length `n` of objects of type `(key, value)` |\n\nExample:\n\n    ghci> hexEncode $ Data.HashMap.Strict.fromList [(1 :: Word8, 127 :: Word64), (2, 255)]\n    \"0201000000000000007f0200000000000000ff\"\n\n## Networking\n\n### MessageName\n\n``` haskell\nnewtype MessageName = MessageName BS.ByteString\n```\n\n[Source code\nlink](https://github.com/serokell/time-warp-nt/blob/f5500cb587eb2fbb02954b8d945985dbd0d51c0d/src/Node/Message.hs#L44).\n\nGenerally, we use `MessageName` represented by one or two encoded\n`UnsignedVarInt`s. At serialization state it is encoded as binary string, thus\ngets prefixed by length of the string.\n\nExample:\n\n    ghci> hexEncode $ messageName (Proxy :: Proxy SendProxySK)\n    \"0102\"\n    ghci> hexEncode $ messageName (Proxy :: Proxy (DataMsg GtMsgContents))\n    \"020a03\"\n\n## Basic Cardano SL Data Types\n\n### Coin\n\n``` haskell\n-- | Coin is the least possible unit of currency.\nnewtype Coin = Coin\n    { getCoin :: Word64\n    } deriving (Show, Ord, Eq, Generic, Hashable, Data, NFData)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L391).\n\nNumber of total coins is [45 \\* 10^9 \\*\n10^6](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L404).\n\n    45*10^15 needs 56 bits to represent\n    45*10^9  (integral mega coins) needs 36 bits to represent\n    999999   (floating mega coins) needs 20 bits to represent\n\n| Decimal  | Needed Bits |\n|----------|-------------|\n| 0-9      | 4 bits      |\n| 0-99     | 7 bits      |\n| 0-999    | 10 bits     |\n| 0-9999   | 14 bits     |\n| 0-99999  | 17 bits     |\n| 0-999999 | 20 bits     |\n\nCoin is splitted in mega coin (10^6) and the remaining coin for serialization.\n\n    1000999 coin = 1.000999 mega coin\n\nSimple variant encoding with `Word64` limit. The total length of the sequence is\nencoded in the first byte with a variable mask.\n\n| header    | mask | spare bits | extra byte | total bits as value | serialized size |\n|-----------|------|------------|------------|---------------------|-----------------|\n| 0 xxxxxxx | 0x7f | 7 bits     | 0          | 7 bits              | 1 byte          |\n| 10 xxxxxx | 0x3f | 6 bits     | 1          | 14 bits             | 2 bytes         |\n| 110 xxxxx | 0x1f | 5 bits     | 2          | 21 bits             | 3 bytes         |\n| 1110 xxxx | 0x0f | 4 bits     | 3          | 27 bits             | 4 bytes         |\n| 11110 xxx | 0x07 | 3 bits     | 4          | 35 bits             | 5 bytes         |\n| 111110 xx | 0x03 | 2 bits     | 5          | 42 bits             | 6 bytes         |\n| 1111110 x | 0x01 | 1 bit      | 6          | 49 bits             | 7 bytes         |\n| 11111110  | 0x00 | 0 bit      | 7          | 56 bits             | 8 bytes         |\n| 11111111  | 0x00 | 0 bit      | 8          | 64 bits             | 9 bytes         |\n\nSpecialized to the integral part which only needs 36 bits maximum:\n\n| header    | mask | spare bits | extra byte | total bits as value | serialized size |\n|-----------|------|------------|------------|---------------------|-----------------|\n| 0 xxxxxxx | 0x7f | 7 bits     | 0          | 7 bits              | 1 byte          |\n| 10 xxxxxx | 0x3f | 6 bits     | 1          | 14 bits             | 2 bytes         |\n| 110 xxxxx | 0x1f | 5 bits     | 2          | 21 bits             | 3 bytes         |\n| 1110 xxxx | 0x0f | 4 bits     | 3          | 27 bits             | 4 bytes         |\n| 1111 xxxx | 0x0f | 4 bits     | 4          | 36 bits             | 5 bytes         |\n\nAnd the floating part, needs 20 bits to represent, encoding value from 0 to\n999999:\n\n| header    | mask | spare bits | extra byte | total bits as value | serialized size |\n|-----------|------|------------|------------|---------------------|-----------------|\n| 0 xxxxxx  | 0x7f | 7 bits     | 0          | 7 bits              | 1 byte          |\n| 10 xxxxxx | 0x3f | 6 bits     | 1          | 14 bits             | 2 bytes         |\n| 110 xxxxx | 0x3f | 5 bits     | 2          | 21 bits             | 3 bytes         |\n\nNote: we could save one bit in the 3 bytes scheme here by considering the end of\nencoding but we don't need it, so by not changing the scheme we can re-use the\nprevious scheme for integral as is.\n\nFor details of implementations look at [this\nmodule](https://github.com/input-output-hk/cardano-sl/blob/1239a6a876fbbb970e836c8bc6bb72d781ba2fa9/core/Pos/Binary/Core/Coin.hs).\n\nExamples:\n\n    ghci> hexEncode (mkCoin 0)\n    \"0000\"\n    ghci> hexEncode (mkCoin 1)\n    \"00c186a0\"\n    ghci> hexEncode (mkCoin 2)\n    \"00c30d40\"\n    ghci> hexEncode (mkCoin 31)\n    \"00c1fbd0\"\n    ghci> hexEncode (mkCoin 128)\n    \"00cc8708\"\n    ghci> hexEncode (mkCoin 129)\n    \"00ce0da8\"\n    ghci> hexEncode (mkCoin 1000)\n    \"0064\"\n    ghci> hexEncode (mkCoin 10000)\n    \"000a\"\n    ghci> hexEncode (mkCoin 1000000)\n    \"0100\"\n    ghci> hexEncode (mkCoin 1000999)\n    \"01cf3e58\"\n\n### Hash\n\n``` haskell\n-- | Hash wrapper with phantom type for more type-safety.\n-- Made abstract in order to support different algorithms in\n-- different situations\nnewtype AbstractHash algo a = AbstractHash (Digest algo)\n    deriving (Show, Eq, Ord, ByteArray.ByteArrayAccess, Generic, NFData)\n\n-- | Type alias for commonly used hash\ntype Hash = AbstractHash Blake2b_256\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/652411b9b8777f08e948ee144a60779c55f363b3/core/Pos/Crypto/Hashing.hs#L118).\n\n| Field size | Type        | Description             |\n|------------|-------------|-------------------------|\n| 32         | Word8\\[32\\] | 256 bits of hash digest |\n\nMessage size limit: 32.\n\nSo whenever you see `Hash SomeType` in the code, this field will occupy 32\nbytes. An additional type parameter after `Hash` is used only in code for\ntype-safety and has no impact on serialization.\n\nExample:\n\n    ghci> hash $ mkCoin 3\n    AbstractHash 29bcdcff253cd2864a8b5e25992a6db86a7a41dc5e69c0599730f2c5716d9362\n    ghci> hexEncode $ hash $ mkCoin 3\n    \"29bcdcff253cd2864a8b5e25992a6db86a7a41dc5e69c0599730f2c5716d9362\"\n\n### Public Key\n\n``` haskell\n-- | Wrapper around 'CC.XPub'.\nnewtype PublicKey = PublicKey CC.XPub\n    deriving (Eq, Ord, Show, Generic, NFData, Hashable, Typeable)\n\ndata XPub = XPub !Edwards25519.PointCompressed !ChainCode\n    deriving (Eq, Ord, Show, Generic)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Crypto/Signing.hs#L70).\n\n| Field size | Type       | Description             |\n|------------|------------|-------------------------|\n| 32         | ByteString | 32-byte PointCompressed |\n| 32         | ByteString | 32-byte ChainCode       |\n\nMessage size limit: 64.\n\n### Signature\n\n``` haskell\n-- | Wrapper around 'CC.XSignature'.\nnewtype Signature a = Signature CC.XSignature\n    deriving (Eq, Ord, Show, Generic, NFData, Hashable, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Crypto/Signing.hs#L149).\n\n| Field size | Type        | Description                  |\n|------------|-------------|------------------------------|\n| 64         | Word8\\[64\\] | 64 bytes of signature string |\n\nMessage size limit: 64.\n\n### Epoch Index\n\n``` haskell\n-- | Index of epoch.\nnewtype EpochIndex = EpochIndex\n    { getEpochIndex :: Word64\n    } deriving (Show, Eq, Ord, Num, Enum, Ix, Integral, Real, Generic, Hashable, Bounded, Typeable, NFData)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L342).\n\n| Field size | Type           | Description |\n|------------|----------------|-------------|\n| 1-10       | UVarInt Word64 | epoch index |\n\nMessage size limit: 10.\n\nExample:\n\n    ghci> hexEncode (EpochIndex 128)\n    \"8001\"\n\n### Local Slot Index\n\n``` haskell\n-- | Index of slot inside a concrete epoch.\nnewtype LocalSlotIndex = LocalSlotIndex\n    { getSlotIndex :: Word16\n    } deriving (Show, Eq, Ord, Ix, Generic, Hashable, Buildable, Typeable, NFData)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L353).\n\n| Field size | Type           | Description         |\n|------------|----------------|---------------------|\n| 1-3        | UVarInt Word16 | index of local slot |\n\nExample:\n\n    ghci> hexEncode (LocalSlotIndex 15)\n    \"0f\"\n\n### SlotId\n\n``` haskell\n-- | Slot is identified by index of epoch and local index of slot in\n-- this epoch. This is a global index\ndata SlotId = SlotId\n    { siEpoch :: !EpochIndex\n    , siSlot  :: !LocalSlotIndex\n    } deriving (Show, Eq, Ord, Generic, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L377).\n\n| Field size | Type           | Description                        |\n|------------|----------------|------------------------------------|\n| 1-10       | UVarInt Word64 | Epoch index                        |\n| 1-3        | UVarInt Word16 | Slot index inside a concrete epoch |\n\nExample:\n\n    ghci> hexEncode (SlotId 128 15)\n    \"80010f\"\n\n### Attributes\n\n``` haskell\n-- | Convenient wrapper for the datatype to represent it (in binary\n-- format) as k-v map.\ndata Attributes h = Attributes\n    { -- | Data, containing known keys (deserialized)\n      attrData   :: h\n      -- | Remaining, unparsed fields\n    , attrRemain :: UnparsedFields\n    }\n  deriving (Eq, Ord, Generic, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Data/Attributes.hs#L60)\n\n``` haskell\n-- | Representation of unparsed fields in Attributes. Newtype wrapper is used\n-- for clear backward compatibility between previous representation (which was\n-- just a single ByteString) during transition from Store to CBOR.\nnewtype UnparsedFields = UnparsedFields (Map Word8 ByteString)\n    deriving (Eq, Ord, Show, Generic, Typeable, NFData)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Data/Attributes.hs#L34)\n\nMessage size limit: each type with `Attributes` defines its own limit for them.\n\n#### General Case Serialization\n\nStored as `totalLen + (k, v) pairs + some remaining part`. `attrData` is stored\nas list of pairs `(Word8, v)` where `key` has type `Word8` and you should\nspecify how to encode `h` in that way.\n\n| Field size             | Type           | Value | Description                           |\n|------------------------|----------------|-------|---------------------------------------|\n| 1-9                    | UVarInt Int64  | m + n | Size of attributes in bytes           |\n| m = t \\* (1 + size(v)) | <Word8,v>\\[t\\] |       | Array of pairs. Given without length. |\n| n                      | ByteString     |       | Remaining byte array                  |\n\nExample:\n\n    ghci> toLazyByteString\n          $ lazyByteStringHex\n          $ runPut\n          $ putAttributes (\\h -> [(1, put h), (0, put h)])\n          $ Attributes (9 :: Word32) \"abc\"\n    \"0d0000000009010000000961626\"\n\nHere `h = 9 :: Word32` and we encode `h` as two *key-value* pairs: value is\n4-byte `9` and keys are `0` and `1`.\n\n#### Attributes ()\n\nIn this special case no `(key, value)` pairs are stored — only arbitrary length\nbyte array.\n\n| Field size | Type          | Value | Description                                      |\n|------------|---------------|-------|--------------------------------------------------|\n| 1-4        | UVarInt Int64 | n     | Size of attributes in bytes. Should be &lt; 2^28 |\n| n          | Word8\\[n\\]    |       | `n` bytes of data                                |\n\nExample:\n\n    ghci> hexEncode $ Attributes () (BSS.pack [])\n    \"00\"\n    ghci> hexEncode $ Attributes () (BSS.pack [1,31])\n    \"02011f\"\n    ghci> hexEncode $ Attributes () \"abc\"\n    \"03616263\"\n\n### Script\n\n``` haskell\n-- | Version of script\ntype ScriptVersion = Word16\n\n-- | A script for inclusion into a transaction.\ndata Script = Script {\n    scrVersion :: ScriptVersion,    -- ^ Version\n    scrScript  :: LByteString}      -- ^ Serialized script\n  deriving (Eq, Show, Generic, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L424).\n\n| Field size | Type           | Value | Description        |\n|------------|----------------|-------|--------------------|\n| 1-3        | UVarInt Word16 |       | Script version     |\n| 1-9        | UVarInt Int64  | n     | Size of byte array |\n| n          | Word8\\[n\\]     |       | n bytes of script  |\n\nExample:\n\n    ghci> hexEncode $ Script 0 \"a\"\n    \"000161\"\n\n### Address Attributes\n\n``` haskell\n-- | Additional information stored along with address. It's intended\n-- to be put into 'Attributes' data type to make it extensible with\n-- softfork.\ndata AddrAttributes = AddrAttributes\n    { aaPkDerivationPath  :: !(Maybe HDAddressPayload)\n    , aaStakeDistribution :: !AddrStakeDistribution\n    } deriving (Eq, Ord, Show, Generic, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L199)\n\nAddress attributes hold additional information about address:\n\n- encrypted derivation path from the root of HD wallet tree (`aaPkDerivationPath`)\n- stake distribution associated with this address (`aaStakeDistribution`)\n\nNote that address may not contain an encrypted derivation path. Addresses\nwithout derivation path included in the attributes are usually derived from\nlevel 0 (wallet) public keys and used as IDs for wallets. Such addresses are not\nmeant to contain any money.\n\n#### Address Payload\n\n``` haskell\ndata HDAddressPayload = HDAddressPayload !ByteString\n    deriving (Eq, Ord, Show, Generic)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Crypto/HD.hs#L50)\n\n`HDAddressPayload` datatype represents a derivation path (`[Word32]`),\nsymmetrically encrypted via `ChaChaPoly1305` algorithm. An encryption key may be\nany `ByteString` of 32 bytes, known only to owner of the address.\n\nIn current Cardano implementation, encryption key is a 32-byte key derived from\nroot public key of wallet using PBKDF2 derivation algorithm with HMAC-SHA512 as\npseudorandom function, 500 iterations and string `address-hashing` as a salt.\n[Source code link](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Crypto/HD.hs#L58)\n\nAddress attributes are encrypted with crypto tag, thus allowing to check whether\nor not attributes are decrypted successfully. Consequently, one can determine\nwhether or not given address belongs to a given wallet by trying to decrypt this\naddress' attributes using encryption key derived from wallet's root public key.\n[Source code link](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Crypto/HD.hs#L113)\nto helper functions which implement attributes decryption and encryption.\n\n#### Address Stake Distribution\n\n``` haskell\n-- | Stake distribution associated with an address.\ndata AddrStakeDistribution\n    = BootstrapEraDistr\n    -- ^ Stake distribution for bootstrap era.\n    | SingleKeyDistr !StakeholderId\n    -- ^ Stake distribution stating that all stake should go to the given stakeholder.\n    | UnsafeMultiKeyDistr !(Map StakeholderId CoinPortion)\n    -- ^ Stake distribution which gives stake to multiple\n    -- stakeholders. 'CoinPortion' is a portion of an output (output\n    -- has a value, portion of this value is stake). The constructor\n    -- is unsafe because there are some predicates which must hold:\n    --\n    -- • the sum of portions must be @maxBound@ (basically 1);\n    -- • all portions must be positive;\n    -- • there must be at least 2 items, because if there is only one item,\n    -- 'SingleKeyDistr' can be used instead (which is smaller).\n    deriving (Eq, Ord, Show, Generic, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L137)\n\nIn Byron era, all addresses should use `BootstrapEraDistr` as stake\ndistribution -- which means, all the stake is automatically delegated to\nbootstrap stakeholders.\n\nIn Shelley era, addresses will use `SingleKeyDistr` or `UnsafeMultiKeyDistr` to\ndelegate stake associated with address' balance to their own stakeholder IDs.\n\n<!-- | Size | Type                      | Value | Description                                             | -->\n<!-- |------|---------------------------|-------|---------------------------------------------------------| -->\n<!-- | 1-2  | TinyVarInt                | n + m | sise of `PubKeyAddress` content                         | -->\n<!-- | n    | Maybe (Word8, \\[Word32\\]) |       | Empty for nothing and list of Word32 preceded with zero | -->\n<!-- | m    | ByteString                |       | Remaining bytes                                         | -->\n\n<!-- See examples in the next section. -->\n\n### Address\n\n``` haskell\n-- | Hash used to identify address.\ntype AddressHash = AbstractHash Blake2b_224\n\n-- | Stakeholder identifier (stakeholders are identified by their public keys)\ntype StakeholderId = AddressHash PublicKey\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L123)\n\nCardano addresses use `blake2b-224` for hashes included in address structure.\n\n``` haskell\n-- | Data which is bound to an address and must be revealed in order\n-- to spend coins belonging to this address.\ndata AddrSpendingData\n    = PubKeyASD !PublicKey\n    -- ^ Funds can be spent by revealing a 'PublicKey' and providing a\n    -- valid signature.\n    | ScriptASD !Script\n    -- ^ Funds can be spent by revealing a 'Script' and providing a\n    -- redeemer 'Script'.\n    | RedeemASD !RedeemPublicKey\n    -- ^ Funds can be spent by revealing a 'RedeemScript' and providing a\n    -- valid signature.\n    | UnknownASD !Word8 !ByteString\n    -- ^ Unknown type of spending data. It consists of a tag and\n    -- arbitrary 'ByteString'. It allows us to introduce a new type of\n    -- spending data via softfork.\n    deriving (Eq, Generic, Typeable, Show)\n\n-- | Type of an address. It corresponds to constructors of\n-- 'AddrSpendingData'. It's separated, because 'Address' doesn't store\n-- 'AddrSpendingData', but we want to know its type.\ndata AddrType\n    = ATPubKey\n    | ATScript\n    | ATRedeem\n    | ATUnknown !Word8\n    deriving (Eq, Ord, Generic, Typeable, Show)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L137) \n\nCardano supports different address types. Address types differ in how funds\nbelonging to the address can be spent. Each address type have corresponding type\nof spending data. Spending data is a part of data which is hashed in order to\nmake the address. Spending data, together with verification data (e.g. a\nsignature) should be provided in `TxInWitness` in order to spend funds from address.\n\nCurrently Cardano supports 3 address types:\n- Public key address (`ATPublicKey`): extended Ed25519 public key as spending\ndata, corresponding Ed25519 signature as verification data. \n- Script address (`ATScript`): Plutus validator script as spending data, Plutus\nredeemer script as verification data.\n- Redeem address (`ATRedeem`): plain Ed25519 public key as spending data,\n  Ed25519 signature as verification data. Used only in genesis to provide\n  pre-sold ADA to holders.\n\nAlso there is special `ATUnknown` address type added for forward compatibility.\n\n``` haskell\n-- | Hash of this data is stored in 'Address'. This type exists mostly\n-- for internal usage.\nnewtype Address' = Address'\n    { unAddress' :: (AddrType, AddrSpendingData, Attributes AddrAttributes)\n    } deriving (Eq, Show, Generic, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L206)\n\nInternal type `Address'` denotes a tuple, hash of which is stored as a part of\nthe `Address`. Not only `AddrSpendingData` is hashed, but also `AddrType` and\n`AddrAttributes`.\n\n``` haskell\n-- | 'Address' is where you can send coins.\ndata Address = Address\n    { addrRoot       :: !(AddressHash Address')\n    -- ^ Root of imaginary pseudo Merkle tree stored in this address.\n    , addrAttributes :: !(Attributes AddrAttributes)\n    -- ^ Attributes associated with this address.\n    , addrType       :: !AddrType\n    -- ^ The type of this address. Should correspond to\n    -- 'AddrSpendingData', but it can't be checked statically, because\n    -- spending data is hashed.\n    } deriving (Eq, Ord, Generic, Typeable, Show)\n```\n\n[Source code link](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L211)\n\nAn `Address` datatype consists of blake2b-224 hash of `Address'` tuple, type tag\nand attributes.\n\n#### Public Key Address\n\n[`addrPkAttributes`](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L107)\nfield is required for HD-wallets.\n\n| Size | Type                    | Value  | Description                                 |\n|------|-------------------------|--------|---------------------------------------------|\n| 1    | Word8                   | 0x00   | `PubKeyAddress` tag                         |\n| 1-2  | TinyVarInt              | 28 + m | Size of `PubKeyAddress` content             |\n| 28   | Word8\\[28\\]             |        | `addKeyHash`: 28 bytes of Blake2b\\_224 hash |\n| m    | PubKeyAddressAttributes |        | `addrPkAttributes`                          |\n| 4    | Word32                  |        | CRC32 of all previous data                  |\n\nExample:\n\n    ghci> abstractHash somPk :: AddressHash PublicKey\n    AbstractHash 380dea393a631ad563154a13bc5ee49fa4b62a60218358b5dcb875e0\n    ghci> hexEncode $ PubKeyAddress (abstractHash somePk) (Attributes (AddrPkAttrs Nothing) \"a\")\n    \"001e380dea393a631ad563154a13bc5ee49fa4b62a60218358b5dcb875e00161cf52c5ec\"\n    ghci> hexEncode $ PubKeyAddress (abstractHash somePk) (Attributes (AddrPkAttrs $ Just [3,9]) \"a\")\n    \"0028380dea393a631ad563154a13bc5ee49fa4b62a60218358b5dcb875e00b0002000000030000000961f1d810f7\"\n\nYou can notice in first example, that `0xCF52C5EC` is CRC32 of\n`001e380dea393a631ad563154a13bc5ee49fa4b62a60218358b5dcb875e00161`.\n \n#### Script Address\n\n| Size | Type        | Value | Description                         |\n|------|-------------|-------|-------------------------------------|\n| 1    | Word8       | 0x01  | `ScriptAddress` tag                 |\n| 1    | Word8       | 0x1C  | Size of `addrScriptHash`: always 28 |\n| 28   | Word8\\[28\\] |       | 28 bytes of Blake2b\\_224 hash       |\n| 4    | Word32      |       | CRC32 of all previous data          |\n\nExample:\n\n    ghci> hexEncode $ ScriptAddress (abstractHash $ Script 0 \"a\")\n    \"011c7ec20301993e369571c6225e1e563812198433801820a2d7328756dc61c5be8e\"\n\nAs you can notice, 4-byte suffix `0x61c5be8e` is CRC32 of prefix:\n`011c7ec20301993e369571c6225e1e563812198433801820a2d7328756dc`.\n\n#### Unknown Address\n\n| Size | Type       | Value | Description                |\n|------|------------|-------|----------------------------|\n| 1    |            | t     | `UnknownAddress` tag       |\n| 1-2  | TinyVarInt | n     | Size of unknown address    |\n| n    | Word8\\[n\\] |       | Unknown address itself     |\n| 4    | Word32     |       | CRC32 of all previous data |\n\nExample:\n\nLet's encode `UnknownAddressType 3 \"a\"`. Without CRC32 this will be encoded as\n`0x030161`. CRC32 of `0x030161` is `0xDEA907C4`. Thus we have:\n\n    ghci> hexEncode $ UnknownAddressType 3 \"a\"\n    \"030161dea907c4\"\n\n### MerkleRoot\n\n``` haskell\n-- | Data type for root of merkle tree.\nnewtype MerkleRoot a = MerkleRoot\n    { getMerkleRoot :: Hash Raw  -- ^ returns root 'Hash' of Merkle Tree\n    } deriving (Show, Eq, Ord, Generic, ByteArrayAccess, Typeable, NFData)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/214e7ac54fbb57007e18fdab4d274340371f2d19/core/Pos/Merkle.hs#L28).\n\n| Field size | Type | Description              |\n|------------|------|--------------------------|\n| size(Hash) | Hash | Root hash of Merkle tree |\n\n### Chain Difficulty\n\n``` haskell\n-- | Chain difficulty represents necessary effort to generate a\n-- chain. In the simplest case it can be number of blocks in chain.\nnewtype ChainDifficulty = ChainDifficulty\n    { getChainDifficulty :: Word64\n    } deriving (Show, Eq, Ord, Num, Enum, Real, Integral, Generic, Buildable, Typeable, NFData)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L135).\n\n| Size | Type           | Description      |\n|------|----------------|------------------|\n| 1-10 | UVarInt Word64 | Chain difficulty |\n\n### SlotLeaders\n\n    -- | 'NonEmpty' list of slot leaders.\n    type SlotLeaders = NonEmpty StakeholderId\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L264).\n\n| Field size               | Type               | Value | Description                    |\n|--------------------------|--------------------|-------|--------------------------------|\n| 1-9                      | UVarInt Int        | n     | Size of slot leaders list      |\n| n \\* size(StakeholderId) | StakeholderId\\[n\\] |       | List of slot leaders of size n |\n\n## GodTossing\n\n### Crypto.PVSS\n\nTypes prefixed with Pvss are defined in\n[Crypto.PVSS](https://hackage.haskell.org/package/pvss-0.1/docs/Crypto-PVSS.html)\nmodule. This section describes binary format of these types.\n\n#### Point\n\n``` haskell\nnewtype Point = Point { unPoint :: SSL.EcPoint }\n    deriving (Generic)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/pvss-haskell/blob/31bc53aa861bd4cae8f6741247e849299eae3983/src/Crypto/PVSS/ECC.hs#L92).\n\n| Field size | Type       | Description                                                           |\n|------------|------------|-----------------------------------------------------------------------|\n|         33 | ByteString | Binary represented elliptic curve point (see ecPointFromOct function) |\n\n#### Secret\n\n``` haskell\n-- | Secret\nnewtype Secret = Secret Point\n    deriving (Show,Eq,NFData,Binary)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/pvss-haskell/blob/670ce35d0f4a11aeb9617de4df2992c23f30573d/src/Crypto/SCRAPE.hs#L78).\n\n| Field size  | Type  | Description |\n|-------------|-------|-------------|\n| size(Point) | Point | Secret      |\n\n#### Proof\n\n``` haskell\nnewtype Scalar = Scalar { unScalar :: Integer }\n    deriving (Show,Eq,Generic,NFData)\n\nnewtype Challenge = Challenge ByteString\n    deriving (Show,Eq,NFData)\n\n-- | The generated proof\ndata Proof = Proof\n    { proof_c :: !Challenge\n    , proof_z :: !Scalar\n    } deriving (Show,Eq,Generic)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/pvss-haskell/blob/31bc53aa861bd4cae8f6741247e849299eae3983/src/Crypto/PVSS/DLEQ.hs#L39).\n`Scalar` [source code\nlink](https://github.com/input-output-hk/pvss-haskell/blob/31bc53aa861bd4cae8f6741247e849299eae3983/src/Crypto/PVSS/ECC.hs#L110).\n\n| Field size | Type       | Description              |\n|------------|------------|--------------------------|\n| 32         | ByteString | 32-byte string challenge |\n| 32         | Integer    | 32-byte integer scalar   |\n\n#### DecryptedShare\n\n``` haskell\n-- | An decrypted share decrypted by a party's key and\ndata DecryptedShare = DecryptedShare\n    { decryptedShareID    :: !ShareId\n    , shareDecryptedVal   :: !Point      -- ^ decrypted share\n    , decryptedValidProof :: !DLEQ.Proof -- ^ proof the decryption is valid\n    } deriving (Show,Eq,Generic)\n```\n\n| Field size  | Type    | Description                    |\n|-------------|---------|--------------------------------|\n| 32          | Integer | Share id                       |\n| size(Point) | Point   | Decrypted share                |\n| size(Proof) | Proof   | Proof the description is valid |\n\n#### ExtraGen\n\n``` haskell\n-- | Extra generator\nnewtype ExtraGen = ExtraGen Point\n    deriving (Show,Eq,NFData,Binary)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/pvss-haskell/blob/670ce35d0f4a11aeb9617de4df2992c23f30573d/src/Crypto/PVSS.hs#L82).\n\n| Field size  | Type  | Description     |\n|-------------|-------|-----------------|\n| size(Point) | Point | Extra generator |\n\nMessage size limit: 33.\n\n#### Commitment\n\n``` haskell\nnewtype Commitment = Commitment { unCommitment :: Point }\n    deriving (Show,Eq,NFData,Binary)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/pvss-haskell/blob/670ce35d0f4a11aeb9617de4df2992c23f30573d/src/Crypto/PVSS.hs#L69).\n\n| Field size  | Type  | Description |\n|-------------|-------|-------------|\n| size(Point) | Point | Commitment  |\n\n#### PublicKey\n\n``` haskell\n-- | Public Key\nnewtype PublicKey = PublicKey Point\n    deriving (Show,Eq,NFData,Binary)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/pvss-haskell/blob/31bc53aa861bd4cae8f6741247e849299eae3983/src/Crypto/PVSS/ECC.hs#L84).\n\n| Field size  | Type  | Description |\n|-------------|-------|-------------|\n| size(Point) | Point | Public key  |\n\n### Secret Sharing\n\nMost of following types are just aliases for PVSS types, so they are serialized\nin the same way.\n\n``` haskell\n-- | Secret can be generated by `genSharedSecret` function along with shares.\nnewtype Secret = Secret\n    { getSecret :: Pvss.Secret\n    } deriving (Show, Eq)\n\n-- | Shares can be used to reconstruct Secret.\nnewtype Share = Share\n    { getShare :: Pvss.DecryptedShare\n    } deriving (Show, Eq)\n\n-- | Encrypted share which needs to be decrypted using VssKeyPair first.\nnewtype EncShare = EncShare\n    { getEncShare :: Pvss.EncryptedShare\n    } deriving (Show, Eq)\n\n-- | This extra data may be used to verify encrypted share.\ndata SecretSharingExtra =\n    SecretSharingExtra !Pvss.ExtraGen\n                       ![Pvss.Commitment]\n    deriving (Show, Eq, Generic)\n\n-- | SecretProof may be used to commit Secret without revealing it.\nnewtype SecretProof =\n    SecretProof Pvss.Proof\n    deriving (Show, Eq, Generic)\n\n-- | This key is used as public key in VSS.\nnewtype VssPublicKey = VssPublicKey\n    { getVssPublicKey :: Pvss.PublicKey\n    } deriving (Show, Eq)\n```\n\nFormat of SecretSharingExtra:\n\n| Field size                 | Type                | Value | Description                |\n|----------------------------|---------------------|-------|----------------------------|\n| size(ExtraGen)             | Pvss.ExtraGen       |       | Extra generator            |\n| 1-9                        | UVarInt Int         | n     | Length of commitments list |\n| n \\* size(Pvss.Commitment) | \\[Pvss.Commitment\\] |       | Commitments                |\n\nMessage size limits: \n\n-   `Share` - 101.\n-   `EncShare` - 101.\n-   `SecretProof` - 64.\n-   `VssPublicKey` - 33.\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/69dd4b2d0c56474db1059393336557fb649dba9a/core/Pos/Crypto/SecretSharing.hs).\n\n### Commitments, Openings and Shares\n\n#### Commitment\n\n``` haskell\n-- | Commitment is a message generated during the first stage of\n-- GodTossing. It contains encrypted shares and proof of secret.\n-- Invariant which must be ensured: commShares is not empty.\ndata Commitment = Commitment\n    { commExtra  :: !(AsBinary SecretSharingExtra)\n    , commProof  :: !(AsBinary SecretProof)\n    , commShares :: !(HashMap (AsBinary VssPublicKey) (NonEmpty (AsBinary EncShare)))\n    } deriving (Show, Eq, Generic)\n```\n\n| Field size                                     | Type                        | Value | Description |\n|------------------------------------------------|-----------------------------|-------|-------------|\n| 1-9                                            | UVarInt Int                 | n     |             |\n| n \\* (sizeof(VssPublicKey) + sizeof(EncShare)) | HashMapCommShares           |       | commShares  |\n| sizeof(SecretSharingExtra)                     | AsBinary SecretSharingExtra |       | commExtra   |\n| sizeof(SecretProof)                            | AsBinary SecretProof        |       | commProof   |\n\nwhere `HashMapCommShares` =\n`HashMap (AsBinary VssPublicKey) (NonEmpty (AsBinary EncShare))`\n\nMessage size limit: 33.\n\n#### CommitmentSignature\n\n``` haskell\n-- | Signature which ensures that commitment was generated by node\n-- with given public key for given epoch.\ntype CommitmentSignature = Signature (EpochIndex, Commitment)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/1bab05d8a199ed6e9af066d4994ef13abdb95da7/godtossing/Pos/Ssc/GodTossing/Core/Types.hs#L73).\n\n| Field size      | Type                               | Description                                                                                         |\n|-----------------|------------------------------------|-----------------------------------------------------------------------------------------------------|\n| size(Signature) | Signature (EpochIndex, Commitment) | Signature which ensures that commitment was generated by node with given public key for given epoch |\n\n#### SignedCommitment\n\n``` haskell\ntype SignedCommitment = (PublicKey, Commitment, CommitmentSignature)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/1bab05d8a199ed6e9af066d4994ef13abdb95da7/godtossing/Pos/Ssc/GodTossing/Core/Types.hs#L75).\n\n| Field size                | Type                | Description                                       |\n|---------------------------|---------------------|---------------------------------------------------|\n| size(PublicKey)           | PublicKey           | Public key of node that generated this commitment |\n| size(Commitment)          | Commitment          | Commitment                                        |\n| size(CommitmentSignature) | CommitmentSignature | Commitment signature                              |\n\n#### CommitmentsMap\n\n``` haskell\n-- | 'CommitmentsMap' is a wrapper for 'HashMap StakeholderId SignedCommitment'\n-- which ensures that keys are consistent with values, i. e. 'PublicKey'\n-- from 'SignedCommitment' corresponds to key which is 'StakeholderId'.\nnewtype CommitmentsMap = CommitmentsMap\n    { getCommitmentsMap :: HashMap StakeholderId SignedCommitment\n    } deriving (Semigroup, Monoid, Show, Eq, Container, NFData)\n```\n\n| Field size                                         | Type                                   | Value | Description                      |\n|----------------------------------------------------|----------------------------------------|-------|----------------------------------|\n| 1-9                                                | UVarInt Int                            | n     | Number of commitments in map     |\n| n * (size(StakeholderId) + size(SignedCommitment)) | HashMap StakeholderId SignedCommitment |       | Commitments map as list of pairs |\n\n#### Opening\n\n``` haskell\n-- | Opening reveals secret.\nnewtype Opening = Opening\n    { getOpening :: (AsBinary Secret)\n    } deriving (Show, Eq, Generic, Buildable, NFData)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/1bab05d8a199ed6e9af066d4994ef13abdb95da7/godtossing/Pos/Ssc/GodTossing/Core/Types.hs#L102).\n\n| Field size   | Type            | Description     |\n|--------------|-----------------|-----------------|\n| size(Secret) | AsBinary Secret | Revealed secret |\n\nMessage size limit: 33.\n\n#### OpeningsMap\n\n``` haskell\ntype OpeningsMap = HashMap StakeholderId Opening\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/1bab05d8a199ed6e9af066d4994ef13abdb95da7/godtossing/Pos/Ssc/GodTossing/Core/Types.hs#L106).\n\n| Field size                                | Type                          | Value | Description                   |\n|-------------------------------------------|-------------------------------|-------|-------------------------------|\n| 1-9                                       | UVarInt Int                   | n     | Number of openings in map     |\n| n * (size(StakeholderId) + size(Opening)) | HashMap StakeholderId Opening |       | Openings map as list of pairs |\n\n#### VssCertificate\n\n``` haskell\n-- | VssCertificate allows VssPublicKey to participate in MPC.\n-- Each stakeholder should create a Vss keypair, sign VSS public key with signing\n-- key and send it into blockchain.\n--\n-- A public key of node is included in certificate in order to\n-- enable validation of it using only node's P2PKH address.\n-- Expiry epoch is last epoch when certificate is valid, expiry epoch is included\n-- in certificate and signature.\n--\n-- Other nodes accept this certificate if it is valid and if node has\n-- enough stake.\n--\n-- Invariant: 'checkSig vcSigningKey (vcVssKey, vcExpiryEpoch) vcSignature'.\ndata VssCertificate = VssCertificate\n    { vcVssKey      :: !(AsBinary VssPublicKey)\n    , vcExpiryEpoch :: !EpochIndex\n    -- ^ Epoch up to which certificates is valid.\n    , vcSignature   :: !(Signature (AsBinary VssPublicKey, EpochIndex))\n    , vcSigningKey  :: !PublicKey\n    } deriving (Show, Eq, Generic)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/3a6ac3c5aa8d3ca87d8b409d5923e21b744b1e6b/godtossing/Pos/Ssc/GodTossing/Core/Types.hs#L149).\n\n\n| Field size         | Type                                          | Description                                                   |\n|--------------------|-----------------------------------------------|---------------------------------------------------------------|\n| size(VssPublicKey) | AsBinary VssPublicKey                         | Public key of stakeholder which is allowed to participate in MPC |\n| size(EpochIndex)   | EpochIndex                                    | Last epoch when certificate is valid                          |\n| size(Signature)    | Signature (AsBinary VssPublicKey, EpochIndex) | Signature                                                     |\n| size(PublicKey)    | PublicKey                                     | Signing key      \n\nMessage size limit: 171.\n\n#### VssCertificatesMap\n\n``` haskell\n-- | VssCertificatesMap contains all valid certificates collected\n-- during some period of time.\ntype VssCertificatesMap = HashMap StakeholderId VssCertificate\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/3a6ac3c5aa8d3ca87d8b409d5923e21b744b1e6b/godtossing/Pos/Ssc/GodTossing/Core/Types.hs#L211).\n\n| Field size                                       | Type                                 | Value | Description                           |\n|--------------------------------------------------|--------------------------------------|-------|---------------------------------------|\n| 1-9                                              | UVarInt Int                          | n     | Number of certificates in map         |\n| n * (size(StakeholderId) + size(VssCertificate)) | HashMap StakeholderId VssCertificate |       | Vss certificates map as list of pairs |\n\n### TxProof\n\n``` haskell\ndata TxProof = TxProof\n    { txpNumber            :: !Word32\n    , txpRoot              :: !(MerkleRoot Tx)\n    , txpWitnessesHash     :: !(Hash [TxWitness])\n    , txpDistributionsHash :: !(Hash [TxDistribution])\n    } deriving (Show, Eq, Generic)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/895619d7056fe397e9c2a56d88994f167263c397/txp/Pos/Txp/Core/Types.hs#L262).\n\n| Field size       | Type          | Description                          |\n|------------------|---------------|--------------------------------------|\n| 4                | Word32        | Tx proof number                      |\n| size(MerkleRoot) | MerkleRoot Tx | MerkleRoot                           |\n| size(Hash)       | Hash          | Hash of the list of `TxWitness`      |\n| size(Hash)       | Hash          | Hash of the list of `TxDistribution` |\n\n### GtProof\n\n``` haskell\n-- | Proof of MpcData.\n-- We can use ADS for commitments, openings, shares as well,\n-- if we find it necessary.\ndata GtProof\n    = CommitmentsProof !(Hash CommitmentsMap) !(Hash VssCertificatesMap)\n    | OpeningsProof !(Hash OpeningsMap) !(Hash VssCertificatesMap)\n    | SharesProof !(Hash SharesMap) !(Hash VssCertificatesMap)\n    | CertificatesProof !(Hash VssCertificatesMap)\n    deriving (Show, Eq, Generic)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/1bab05d8a199ed6e9af066d4994ef13abdb95da7/godtossing/Pos/Ssc/GodTossing/Core/Types.hs#L232).\n\n| Tag size | Tag Type | Tag Value | Description               | Field size | Field Type |\n|----------|----------|-----------|---------------------------|------------|------------|\n| 1        | Word8    | 0x00      | Tag for CommitmentsProof  |            |            |\n|          |          |           |                           | size(Hash) | Hash       |\n|          |          |           |                           | size(Hash) | Hash       |\n|          |          | 0x01      | Tag for OpeningsProof     |            |            |\n|          |          |           |                           | size(Hash) | Hash       |\n|          |          |           |                           | size(Hash) | Hash       |\n|          |          | 0x02      | Tag for SharesProof       |            |            |\n|          |          |           |                           | size(Hash) | Hash       |\n|          |          |           |                           | size(Hash) | Hash       |\n|          |          | 0x03      | Tag for CertificatesProof |            |            |\n|          |          |           |                           | size(Hash) | Hash       |\n\n## Block Headers\n\n### BlockVersion\n\n``` haskell\n-- | Communication protocol version.\ndata BlockVersion = BlockVersion\n    { bvMajor :: !Word16\n    , bvMinor :: !Word16\n    , bvAlt   :: !Word8\n    } deriving (Eq, Generic, Ord, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L144).\n\n| Field size | Type   | Description                      |\n|------------|--------|----------------------------------|\n| 2          | Word16 | Major version                    |\n| 2          | Word16 | Minor version                    |\n| 1          | Word8  | Alt version from initial US spec |\n\n### SoftwareVersion\n\n``` haskell\nnewtype ApplicationName = ApplicationName\n    { getApplicationName :: Text\n    } deriving (Eq, Ord, Show, Generic, Typeable, ToString, Hashable, Buildable, NFData)\n\n-- | Numeric software version associated with ApplicationName.\ntype NumSoftwareVersion = Word32\n\n-- | Software version.\ndata SoftwareVersion = SoftwareVersion\n    { svAppName :: !ApplicationName\n    , svNumber  :: !NumSoftwareVersion\n    } deriving (Eq, Generic, Ord, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L170).\n\n| Field size | Type        | Value | Description                                     |\n|------------|-------------|-------|-------------------------------------------------|\n| 1          | UVarInt Int | n     | Length of application name (should be &lt;= 10) |\n| n          | Word8\\[n\\]  |       | `svAppName`: UTF8 encoded application name      |\n| 4          | Word32      |       | `svNumber`                                      |\n\n### MainBlockHeader\n\n<!-- TODO: Replace all Main* and Genesis* by type (*Blockchain) -->\n\n| Field size                | Type                | Description         |\n|---------------------------|---------------------|---------------------|\n| 4                         | Word32              | Protocol magic      |\n| size(HeaderHash)          | HeaderHash          | Previous block hash |\n| size(MainProof)           | MainProof           | Body proof          |\n| size(MainConsensusData)   | MainConsensusData   | Consensus data      |\n| size(MainExtraHeaderData) | MainExtraHeaderData | MainExtraHeaderData |\n\n#### MainProof\n\n``` haskell\ntype SscProof SscGodTossing = GtProof\n\n-- | Proof that body of update message contains 'UpdatePayload'.\ntype UpdateProof = Hash UpdatePayload\n\n-- | Proof of everything contained in the payload.\ndata BodyProof (MainBlockchain ssc) = MainProof\n    { mpTxProof       :: !TxProof\n    , mpMpcProof      :: !(SscProof ssc)\n    , mpProxySKsProof :: !(Hash DlgPayload)\n    , mpUpdateProof   :: !UpdateProof\n    } deriving (Generic)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/2198551433ec666f2df400d49b87ced13f3bcbee/src/Pos/Block/Core/Main/Chain.hs#L42).\n\n| Field size    | Type         | Description     |\n|---------------|--------------|-----------------|\n| size(TxProof) | TxProof      | mpTxProof       |\n| size(GtProof) | SscProof ssc | mpMpcProof      |\n| size(Hash)    | Hash         | mpProxySKsProof |\n| size(Hash)    | Hash         | mpUpdateProof   |\n\n#### MainConsensusData\n\n``` haskell\ndata ConsensusData (MainBlockchain ssc) = MainConsensusData\n    { -- | Id of the slot for which this block was generated.\n      _mcdSlot       :: !SlotId\n    , -- | Public key of the slot leader. It's essential to have it here,\n      -- because FTS gives us only hash of public key (aka 'StakeholderId').\n      _mcdLeaderKey  :: !PublicKey\n    , -- | Difficulty of chain ending in this block.\n      _mcdDifficulty :: !ChainDifficulty\n    , -- | Signature given by slot leader.\n      _mcdSignature  :: !(BlockSignature ssc)\n    } deriving (Generic, Show, Eq)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/2198551433ec666f2df400d49b87ced13f3bcbee/src/Pos/Block/Core/Main/Chain.hs#L48).\n\n| Field size            | Type            | Description   |\n|-----------------------|-----------------|---------------|\n| size(SlotId)          | SlotId          | mcdSlot       |\n| size(PublicKey)       | PublicKey       | mcdLeaderKey  |\n| size(ChainDifficulty) | ChainDifficulty | mcdDifficulty |\n| 64                    | BlockSignature  | mcdSignature  |\n\n#### MainExtraHeaderData\n\n``` haskell\n-- | Represents main block header attributes: map from 1-byte integer to\n-- arbitrary-type value. To be used for extending header with new\n-- fields via softfork.\ntype BlockHeaderAttributes = Attributes ()\n\n-- | Represents main block header extra data\ndata MainExtraHeaderData = MainExtraHeaderData\n    { -- | Version of block.\n      _mehBlockVersion    :: !BlockVersion\n    , -- | Software version.\n      _mehSoftwareVersion :: !SoftwareVersion\n    , -- | Header attributes\n      _mehAttributes      :: !BlockHeaderAttributes\n    } deriving (Eq, Show, Generic)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/3a6ac3c5aa8d3ca87d8b409d5923e21b744b1e6b/src/Pos/Block/Core/Main/Types.hs#L73).\n\n| Field size                  | Type                  | Description                                                                |\n|-----------------------------|-----------------------|----------------------------------------------------------------------------|\n| size(BlockVersion)          | BlockVersion          | Version of block                                                           |\n| size(SoftwareVersion)       | SoftwareVersion       | Software version                                                           |\n| size(BlockHeaderAttributes) | BlockHeaderAttributes | Header attributes (used for extending header with new fields via softfork) |\n\n### GenesisBlockHeader\n\n``` haskell\n-- | Header of block contains some kind of summary. There are various\n-- benefits which people get by separating header from other data.\n--\n-- The constructor has `Unsafe' prefix in its name, because there in\n-- general there may be some invariants which must hold for the\n-- contents of header.\ndata GenericBlockHeader b = UnsafeGenericBlockHeader\n    { -- | Pointer to the header of the previous block.\n      _gbhPrevBlock :: !(BHeaderHash b)\n    , -- | Proof of body.\n      _gbhBodyProof :: !(BodyProof b)\n    , -- | Consensus data to verify consensus algorithm.\n      _gbhConsensus :: !(ConsensusData b)\n    , -- | Any extra data.\n      _gbhExtra     :: !(ExtraHeaderData b)\n    } deriving (Generic)\n\n-- | Header of Genesis block.\ntype GenesisBlockHeader ssc = GenericBlockHeader (GenesisBlockchain ssc)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/b4b2c282b0e2a2e4415163e70dcb559396a2237c/src/Pos/Block/Core/Genesis/Types.hs#L63).\n\n| Field size                 | Type              | Description                                  |\n|----------------------------|-------------------|----------------------------------------------|\n| 4                          | BHeaderHash b     | Pointer to the header of the previous block  |\n| 32                         | BodyProof b       | Proof of body                                |\n| size(GenesisProof)         | ConsensusData b   | Consensus data to verify consensus algorithm |\n| size(GenesisConsensusData) | ExtraHeaderData b | Any extra data                               |\n\nwhere `b` = `GenesisBlockchain ssc`.\n\n#### GenesisProof\n\n``` haskell\n-- | Proof of GenesisBody is just a hash of slot leaders list.\ndata BodyProof (GenesisBlockchain ssc) = GenesisProof\n    !(Hash SlotLeaders)\n    deriving (Eq, Generic, Show)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/b4b2c282b0e2a2e4415163e70dcb559396a2237c/src/Pos/Block/Core/Genesis/Chain.hs#L28).\n\n| Field size | Type | Description               |\n|------------|------|---------------------------|\n| size(Hash) | Hash | Hash of slot leaders list |\n\n#### GenesisConsensusData\n\n``` haskell\ndata ConsensusData (GenesisBlockchain ssc) = GenesisConsensusData\n    { -- | Index of the slot for which this genesis block is relevant.\n      _gcdEpoch :: !EpochIndex\n    , -- | Difficulty of the chain ending in this genesis block.\n      _gcdDifficulty :: !ChainDifficulty\n    } deriving (Generic, Show, Eq)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/b4b2c282b0e2a2e4415163e70dcb559396a2237c/src/Pos/Block/Core/Genesis/Chain.hs#L31).\n\n| Field size            | Type            | Description                                             |\n|-----------------------|-----------------|---------------------------------------------------------|\n| size(EpochIndex)      | EpochIndex      | Index of epoch for which this genesis block is relevant |\n| size(ChainDifficulty) | ChainDifficulty | Difficulty of the chain ending in this genesis block.   |\n\n### BlockHeader\n\n``` haskell\n-- | Either header of ordinary main block or genesis block.\ntype BlockHeader ssc = Either (GenesisBlockHeader ssc) (MainBlockHeader ssc)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/f571087e5b5af339767198141981c850227ca99c/src/Pos/Block/Core/Union/Types.hs#L39).\n\n| Tag size | Tag Type | Tag Value | Description                  | Field size               |\n|----------|----------|-----------|------------------------------|--------------------------|\n| 1        | Word8    | 0x00      | Tag for `GenesisBlockHeader` |                          |\n|          |          |           |                              | size(GenesisBlockHeader) |\n|          |          | 0x01      | Tag for `MainBlockHeader`    |                          |\n|          |          |           |                              | size(MainBlockHeader)    |\n\n### Block\n\n``` haskell\n-- | Either genesis block or main block.\ntype Block ssc = Either (GenesisBlock ssc) (MainBlock ssc)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/f571087e5b5af339767198141981c850227ca99c/src/Pos/Block/Core/Union/Types.hs#L42).\n\n| Tag size | Tag Type | Tag Value | Description            | Field size         |\n|----------|----------|-----------|------------------------|--------------------|\n| 1        | Word8    | 0x00      | Tag for `GenesisBlock` |                    |\n|          |          |           |                        | size(GenesisBlock) |\n|          |          | 0x01      | Tag for `MainBlock`    |                    |\n|          |          |           |                        | size(MainBlock)    |\n\n## Block Exchange Messages\n\n### HeaderHash\n\n``` haskell\n-- | 'Hash' of block header. This should be @Hash (BlockHeader ssc)@\n-- but we don't want to have @ssc@ in 'HeaderHash' type.\ntype HeaderHash = Hash BlockHeaderStub\ndata BlockHeaderStub\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/2198551433ec666f2df400d49b87ced13f3bcbee/core/Pos/Core/Types.hs#L223).\n\n### GetHeaders\n\n``` haskell\n-- | 'GetHeaders' message. Behaviour of the response depends on\n-- particular combination of 'mghFrom' and 'mghTo'.\n--\n-- * 'mghTo' resolves to some header (let's call it @top@ for\n-- convenience) -- node's tip if it's @Nothing@, header with hash in\n-- @Just@ if it's @Just@.\n--\n-- * If 'mghFrom' is empty, then semantics is \"request to return\n-- header of block @top@\".\n--\n-- * Otherwise (if 'mghFrom' isn't empty) it represents the set of\n-- checkpoints. Responding node will try to iterate headers from @top@\n-- to older until it reaches any checkpoint. If it finds checkpoint\n-- @c@, it returns all headers in range @[c.next..top]@. If it doesn't\n-- find any checkpoint or depth of searching exceeds\n-- 'recoveryHeadersMessage', it will try to find the newest checkpoint\n-- @cc@ from 'mghFrom' that's in main chain of responding node and\n-- then return at most 'recoveryHeadersMessage' headers starting with\n-- @cc@ as the oldest one, returning headers in range @l2 =\n-- [cc.next..x]@ where @x@ is either @top@ (in case @length l2 <\n-- recoveryHeadersMessage@) or some arbitrary header (and length is\n-- precisely 'recoveryHeadersMessage').\ndata MsgGetHeaders = MsgGetHeaders\n    { -- not guaranteed to be in any particular order\n      mghFrom :: ![HeaderHash]\n    , mghTo   :: !(Maybe HeaderHash)\n    } deriving (Generic, Show, Eq)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/c8620af754252ebb71b1f5bc369b4f672f46d537/src/Pos/Block/Network/Types.hs#L42).\n\n| Field size        | Type        | Value              | Description                                  |\n|-------------------|-------------|--------------------|----------------------------------------------|\n| 1-9               | UVarInt Int | n                  | Number of checkpoints                        |\n| n \\* size(Hash)   | Hash\\[n\\]   |                    | List of length `n` with hashes               |\n| 1                 | Word8       | tag = 0x00 or 0x01 | Tag for optional `to` hash                   |\n| tag \\* size(Hash) | Hash        |                    | If tag is not `0x00` then hash of `to` block |\n\n### GetBlocks\n\n``` haskell\n-- | 'GetBlocks' message (see protocol specification).\ndata MsgGetBlocks = MsgGetBlocks\n    { mgbFrom :: !HeaderHash\n    , mgbTo   :: !HeaderHash\n    } deriving (Generic, Show, Eq)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/c8620af754252ebb71b1f5bc369b4f672f46d537/src/Pos/Block/Network/Types.hs#L54).\n\n| Field size | Type | Field     |\n|------------|------|-----------|\n| size(Hash) | Hash | `mgbFrom` |\n| size(Hash) | Hash | `mgbTo`   |\n\n### Headers\n\n``` haskell\n-- | 'Headers' message (see protocol specification).\nnewtype MsgHeaders ssc =\n    MsgHeaders (NewestFirst NE (BlockHeader ssc))\n    deriving (Generic, Show, Eq)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/c8620af754252ebb71b1f5bc369b4f672f46d537/src/Pos/Block/Network/Types.hs#L65).\n\n| Field size             | Type             | Value | Description             |\n|------------------------|------------------|-------|-------------------------|\n| 1-9                    | UVarInt Int      | n     | Number of block headers |\n| n \\* size(BlockHeader) | BlockHeader\\[n\\] |       | `n` block headers       |\n\n### Block\n\n``` haskell\n-- | 'Block' message (see protocol specification).\nnewtype MsgBlock ssc =\n    MsgBlock (Block ssc)\n    deriving (Generic, Show)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/c8620af754252ebb71b1f5bc369b4f672f46d537/src/Pos/Block/Network/Types.hs#L70).\n\n| Field size  | Type          | Value | Description                    |\n|-------------|---------------|-------|--------------------------------|\n| 1-9         | UVarInt Int64 | n     | Size of `Block` in bytes       |\n| size(Block) | Block         |       | `Block` with size of `n` bytes |\n\nContains one `Block`. We encode block size and then the block itself so that\nwe'd be able to reject the block if it's of the wrong size without consuming the\nwhole block.\n\n## Transaction sending\n\nTo send transaction you need to create and send `TxAux` data type to node. All\ndata types required to successfully perform sending are described in this\nsection.\n\n### Transaction input\n\n``` haskell\n-- | Represents transaction identifier as 'Hash' of 'Tx'.\ntype TxId = Hash Tx\n\n-- | Transaction input.\ndata TxIn = TxIn\n    { -- | Which transaction's output is used\n      txInHash  :: !TxId\n      -- | Index of the output in transaction's outputs\n    , txInIndex :: !Word32\n    } deriving (Eq, Ord, Show, Generic, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/895619d7056fe397e9c2a56d88994f167263c397/txp/Pos/Txp/Core/Types.hs#L147).\n\n| Field size | Type   | Field name |\n|------------|--------|------------|\n| size(Hash) | Hash   | txInHash   |\n| 4          | Word32 | txInIndex  |\n\n### Transaction output\n\n``` haskell\n-- | Transaction output.\ndata TxOut = TxOut\n    { txOutAddress :: !Address\n    , txOutValue   :: !Coin\n    } deriving (Eq, Ord, Generic, Show, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/895619d7056fe397e9c2a56d88994f167263c397/txp/Pos/Txp/Core/Types.hs#L160).\n\n| Field size    | Type    | Field name   |\n|---------------|---------|--------------|\n| size(Address) | Address | txOutAddress |\n| size(Coin)    | Coin    | txOutValue   |\n\nExample:\n\n    ghci> let addr = PubKeyAddress (abstractHash somePk) (Attributes (AddrPkAttrs Nothing) \"a\")\n    ghci> hexEncode addr\n    \"001e380dea393a631ad563154a13bc5ee49fa4b62a60218358b5dcb875e00161cf52c5ec\"\n    ghci> hexEncode $ TxOut addr (mkCoin 1000)\n    \"001e380dea393a631ad563154a13bc5ee49fa4b62a60218358b5dcb875e00161cf52c5ec0064\"\n\n### Transaction output distribution\n\n``` haskell\ntype TxOutDistribution = [(StakeholderId, Coin)]\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/src/Pos/Txp/Core/Types.hs#L129).\n\nLets define `distr_size(n) = n * (size(Hash) + size(Coin))`.\n\n| Field size     | Type             | Description                               |\n|----------------|------------------|-------------------------------------------|\n| distr\\_size(n) | <Hash,Coin>\\[n\\] | Array of pairs for StakeholderId and Coin |\n\n### Transaction output auxilary\n\n``` haskell\n-- | Transaction output and auxilary data corresponding to it.\ndata TxOutAux = TxOutAux\n    { toaOut   :: !TxOut             -- ^ Tx output\n    , toaDistr :: !TxOutDistribution -- ^ Stake distribution\n                                     -- associated with output\n    } deriving (Show, Eq)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/src/Pos/Txp/Core/Types.hs#L173).\n\n| Field size              | Type              | Field name |\n|-------------------------|-------------------|------------|\n| size(TxOut)             | TxOut             | toaOut     |\n| size(TxOutDistribution) | TxOutDistribution | toaDistr   |\n\n### Transaction signature data\n\n``` haskell\n-- | Data that is being signed when creating a TxSig.\ndata TxSigData = TxSigData\n    { -- | Input that we're signing (i.e. our signature certifies that we own\n      -- funds referenced by this input)\n      txSigInput     :: !TxIn\n      -- | Outputs of the transaction (i.e. our signature certifies that we\n      -- actually want the funds to go to these particular outputs)\n    , txSigOutsHash  :: !(Hash (NonEmpty TxOut))\n      -- | Distribution of the transaction\n    , txSigDistrHash :: !(Hash TxDistribution)\n    }\n    deriving (Eq, Show, Generic, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/src/Pos/Txp/Core/Types.hs#L80).\n\n| Field size | Type | Description    |\n|------------|------|----------------|\n| size(TxIn) | TxIn | txSigInput     |\n| size(Hash) | Hash | txSigOutsHash  |\n| size(Hash) | Hash | txSigDistrHash |\n\n### Transaction witness\n\n``` haskell\n-- | 'Signature' of addrId.\ntype TxSig = Signature TxSigData\n\n-- | A witness for a single input.\ndata TxInWitness\n    = PkWitness { twKey :: !PublicKey\n                , twSig :: !TxSig }\n    | ScriptWitness { twValidator :: !Script\n                    , twRedeemer  :: !Script }\n    | RedeemWitness { twRedeemKey :: !RedeemPublicKey\n                    , twRedeemSig :: !(RedeemSignature TxSigData) }\n    | UnknownWitnessType !Word8 !ByteString\n    deriving (Eq, Show, Generic, Typeable)\n\n-- | A witness is a proof that a transaction is allowed to spend the funds it\n-- spends (by providing signatures, redeeming scripts, etc). A separate proof\n-- is provided for each input.\ntype TxWitness = Vector TxInWitness\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/src/Pos/Txp/Core/Types.hs#L96).\n\n| Tag size | Tag Type | Tag Value | Description                | Field size            | Field Type                | Field name  |\n|----------|----------|-----------|----------------------------|-----------------------|---------------------------|-------------|\n| 1        | Word8    | 0x00      | Tag for PkWitness          |                       |                           |             |\n|          |          |           |                            | size(PublicKey)       | PublicKey                 | twKey       |\n|          |          |           |                            | 64                    | TxSig                     | twSig       |\n|          |          | 0x01      | Tag for ScriptWitness      |                       |                           |             |\n|          |          |           |                            | size(Script)          | Script                    | twValidator |\n|          |          |           |                            | size(Script)          | Script                    | twRedeemer  |\n|          |          | 0x02      | Tag for RedeemWitness      |                       |                           |             |\n|          |          |           |                            | size(RedeemPublicKey) | RedeemPublicKey           | twRedeemKey |\n|          |          |           |                            | size(RedeemSignature) | RedeemSignature TxSigData | twRedeemSig |\n|          |          | 0x03      | Tag for UnknownWitnessType |                       |                           |             |\n|          |          |           |                            | 1                     | Word8                     |             |\n|          |          |           |                            |                       | ByteString                |             |\n\n### Transaction\n\n``` haskell\n-- | Transaction.\ndata Tx = UnsafeTx\n    { _txInputs     :: !(NonEmpty TxIn)  -- ^ Inputs of transaction.\n    , _txOutputs    :: !(NonEmpty TxOut) -- ^ Outputs of transaction.\n    , _txAttributes :: !TxAttributes     -- ^ Attributes of transaction\n    } deriving (Eq, Ord, Generic, Show, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/src/Pos/Txp/Core/Types.hs#L196).\n\n| Field size         | Type         | Value | Description                   |\n|--------------------|--------------|-------|-------------------------------|\n| 1-9                | UVarInt Int  | n     | Number of transaction inputs  |\n| n \\* size(TxIn)    | TxIn\\[n\\]    |       | Array of transaction inputs   |\n| 1-9                | UVarInt Int  | m     | Number of transaction outputs |\n| m \\* size(TxOut)   | TxOut\\[m\\]   |       | Array of transaction outputs  |\n| size(TxAttributes) | TxAttributes |       | Attributes of transaction     |\n\n### Transaction distribution\n\n``` haskell\n-- | Distribution of “fake” stake that follow-the-satoshi would use\n-- for a particular transaction.  Length of stored list must be same\n-- as length of '_txOutputs' of corresponding transaction.\nnewtype TxDistribution = TxDistribution\n    { getTxDistribution :: NonEmpty TxOutDistribution\n    } deriving (Eq, Show, Generic, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/src/Pos/Txp/Core/Types.hs#L134).\n\nThough transaction distribution can be stored as list of list using previous\nserialization strategy it is often happens that we pass list of empty lists. In\nthat case we store such lists more efficiently.\n\n| Tag size | Tag Type | Tag Value | Description              | Field size     | Field Type       | Value |\n|----------|----------|-----------|--------------------------|----------------|------------------|-------|\n| 1        | Word8    | 0x00      | List of empty lists      |                |                  |       |\n|          |          |           |                          | 1-9            | UVarInt Int      |       |\n|          |          | 0x01      | Some lists are not empty |                |                  |       |\n|          |          |           |                          | 1-9            | UVarInt Int      | n     |\n|          |          |           |                          | distr\\_size(n) | <Hash,Coin>\\[n\\] |       |\n\n### Transaction auxilary\n\n``` haskell\n-- | Transaction + auxiliary data\ndata TxAux = TxAux\n    { taTx           :: !Tx\n    , taWitness      :: !TxWitness\n    , taDistribution :: !TxDistribution\n    } deriving (Generic, Show, Eq)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/ab543154d3ff34d3432620ac2557187d124b7d4f/txp/Pos/Txp/Core/Types.hs#L205).\n\n| Field size           | Type           | Description              |\n|----------------------|----------------|--------------------------|\n| size(Tx)             | Tx             | Transaction itself       |\n| size(TxWitness)      | TxWitness      | Witness for transaction  |\n| size(TxDistribution) | TxDistribution | Transaction distribution |\n\n<!-- TODO: describe full creation of transaction by bytes -->\n\n## Delegation\n\nPlease read about [Delegation\nMessages](/technical/protocols/csl-application-level/#delegation-messages) for\nmechanism explanation. Here you can find description of messages format only.\n\n### Proxy Certificate\n\nSimilar to `Signature`.\n\n``` haskell\n-- | Proxy certificate, made of ω + public key of delegate.\nnewtype ProxyCert w = ProxyCert { unProxyCert :: CC.XSignature }\n    deriving (Eq, Ord, Show, Generic, NFData, Hashable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Crypto/Signing.hs#L209).\n\n| Field size | Type        | Description                                 |\n|------------|-------------|---------------------------------------------|\n| 64         | Word8\\[64\\] | `unProxyCert`: 64 bytes of signature string |\n\nMessage size limit: 64.\n\nExample:\n\n    ghci> (issuerPk, issuerSk) <- keyGen\n    ghci> hexEncode issuerPk\n    \"0659c8e27599dc4709dab3bb58ce50d0729150fc238010fd3a68dcf07c621bdc\"\n    ghci> (delegatePk, delegateSk) <- keyGen\n    ghci> hexEncode delegatePk\n    \"5eaf0944733da8386c427656a876b20ae411fa686ea4bb165b53a311c868c287\"\n    ghci> let cert = createProxyCert issuerSk delegatePk (0, 10) :: ProxyCert (EpochIndex, EpochIndex)\n    ghci> hexEncode cert\n    \"8db543c5fff7dd5dab609d04a834cda77958faf48cabee351def8985a2ec7dae71c7b2f0390caa54c61c9d41f5228e1a0b5da1c08638b99d03a1c02c81cb1607\"\n    ghci> verifyProxyCert issuerPk delegatePk (0, 10) cert\n    True\n\n### Proxy Secret Key\n\n``` haskell\n-- | Convenient wrapper for secret key, that's basically ω + certificate.\ndata ProxySecretKey w = ProxySecretKey\n    { pskOmega      :: w\n    , pskIssuerPk   :: PublicKey\n    , pskDelegatePk :: PublicKey\n    , pskCert       :: ProxyCert w\n    } deriving (Eq, Ord, Show, Generic)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Crypto/Signing.hs#L224).\n\n| Field size      | Type        | Description   |\n|-----------------|-------------|---------------|\n| size(w)         | w           | pskOmega      |\n| size(PublicKey) | PublicKey   | pskIssuerPk   |\n| size(PublicKey) | PublicKey   | pskDelegatePk |\n| size(ProxyCert) | ProxyCert w | pskCert       |\n\n### Proxy signature\n\n``` haskell\n-- | Delegate signature made with certificate-based permission. @w@\n-- stays for message type used in proxy (ω in the implementation\n-- notes), @a@ for type of message signed.\ndata ProxySignature w a = ProxySignature\n    { psigPsk :: ProxySecretKey w\n    , psigSig :: CC.XSignature\n    } deriving (Eq, Ord, Show, Generic)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Crypto/Signing.hs#L256).\n\n| Field size     | Type           | Description |\n|----------------|----------------|-------------|\n| size(PproxySK) | ProxySecretKey | psigPsk     |\n| 64             | XSignature     | psigSig     |\n\n### Proxy Secret Key and Signature for Lightweight Delegation\n\n**WARNING: Currently, lightweight delegation is disabled and will be reworked in\n[Shelley release](https://cardanoroadmap.com/), so information below can be outdated.**\n\n#### Secret Key\n\n``` haskell\n-- | Same alias for the proxy secret key (see 'ProxySigLight').\ntype ProxySKLight = ProxySecretKey (EpochIndex, EpochIndex)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L238).\n\n| Field size      | Type                               | Description   |\n|-----------------|------------------------------------|---------------|\n| 1-10            | UVarInt Word64                     | from epoch    |\n| 1-10            | UVarInt Word64                     | to epoch      |\n| size(PublicKey) | PublicKey                          | pskIssuerPk   |\n| size(PublicKey) | PublicKey                          | pskDelegatePk |\n| 64              | ProxyCert (EpochIndex, EpochIndex) | pskCert       |\n\nExample:\n\n    ghci> let proxySk = createProxySecretKey issuerSk delegatePk (0, 10) :: ProxySKLight\n    ghci> hexEncode proxySk\n    \"000a0659c8e27599dc4709dab3bb58ce50d0729150fc238010fd3a68dcf07c621bdc5eaf0944733da8386\n    c427656a876b20ae411fa686ea4bb165b53a311c868c2878db543c5fff7dd5dab609d04a834cda77958faf\n    48cabee351def8985a2ec7dae71c7b2f0390caa54c61c9d41f5228e1a0b5da1c08638b99d03a1c02c81cb1607\"\n    ghci> verifyProxySecretKey proxySk\n    True\n\n#### Signature\n\n``` haskell\n-- | Proxy signature used in csl -- holds a pair of epoch\n-- indices. Block is valid if its epoch index is inside this range.\ntype ProxySigLight a = ProxySignature (EpochIndex, EpochIndex) a\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L235).\n\n| Field size      | Type                               | Description  |\n|-----------------|------------------------------------|--------------|\n| 1-10            | UVarInt Word64                     | from epoch   |\n| 1-10            | UVarInt Word64                     | to epoch     |\n| size(PublicKey) | PublicKey                          | pdDelegatePk |\n| 64              | ProxyCert (EpochIndex, EpochIndex) | pdCert       |\n| 64              | Signature                          | pdSig        |\n\nExample:\n\n    ghci> let proxyLightSig = proxySign delegateSk proxySk proxySk :: ProxySigLight ProxySKLight\n    ghci> hexEncode proxyLightSig\n    \"000a5eaf0944733da8386c427656a876b20ae411fa686ea4bb165b53a311c868c2878db543c5fff7dd5dab609d04a\n    834cda77958faf48cabee351def8985a2ec7dae71c7b2f0390caa54c61c9d41f5228e1a0b5da1c08638b99d03a1c02\n    c81cb1607e764468529599312ebe4dd5587383e5ccd3c2755401b22c8ff08827ecabd1afc8c634e17085ec83179193\n    afad2868e6aabce3e3e46e3170d077ee4e8613aa700\"\n    ghci> proxyVerify issuerPk proxyLightSig (== (0, 10)) proxySk\n    True\n\n### Proxy Secret Key and Signature for Heavyweight Delegation\n\n#### Secret Key\n\n``` haskell\n-- | Correspondent SK for no-ttl proxy signature scheme.\ntype ProxySKHeavy = ProxySecretKey EpochIndex\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L247).\n\n| Field size      | Type                 | Description   |\n|-----------------|----------------------|---------------|\n| 1-10            | UVarInt Word64       | epoch         |\n| size(PublicKey) | PublicKey            | pskIssuerPk   |\n| size(PublicKey) | PublicKey            | pskDelegatePk |\n| 64              | ProxyCert EpochIndex | pskCert       |\n\n#### Signature\n\n``` haskell\n-- | Simple proxy signature without ttl/epoch index\n-- constraints. 'EpochIndex' inside is needed for replay attack\n-- prevention.\ntype ProxySigHeavy a = ProxySignature EpochIndex a\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L244).\n\n| Field size      | Type                 | Description  |\n|-----------------|----------------------|--------------|\n| 1-10            | UVarInt Word64       | epoch        |\n| size(PublicKey) | PublicKey            | pdDelegatePk |\n| 64              | ProxyCert EpochIndex | pdCert       |\n| 64              | Signature            | pdSig        |\n\n### Lightweight Delegation Confirmation\n\n**WARNING: Currently, lightweight delegation is disabled and will be reworked in\n[Shelley release](https://cardanoroadmap.com/), so information below can be outdated.**\n\n#### ProxySKLightConfirmation\n\n``` haskell\n-- | Confirmation of light cert type.\ntype ProxySKLightConfirmation = (ProxySKLight, ProxySigLight ProxySKLight)\n```\n\n| Field size          | Description           |\n|---------------------|-----------------------|\n| size(ProxySKLight)  | Certificate           |\n| size(ProxySigLight) | Proof for certificate |\n\n## Update System\n\n### Update Vote\n\n``` haskell\n-- | ID of software update proposal\ntype UpId = Hash UpdateProposal\n\n-- | Vote for update proposal\ndata UpdateVote = UpdateVote\n    { -- | Public key of stakeholder, who votes\n      uvKey        :: !PublicKey\n    , -- | Proposal to which this vote applies\n      uvProposalId :: !UpId\n    , -- | Approval/rejection bit\n      uvDecision   :: !Bool\n    , -- | Signature of (Update proposal, Approval/rejection bit)\n      --   by stakeholder\n      uvSignature  :: !(Signature (UpId, Bool))\n    } deriving (Eq, Show, Generic, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/fbe9760bd50ea136203e54d578d62ed3070b5513/update/Pos/Update/Core/Types.hs#L255).\n\n| Field size      | Type      | Field        |\n|-----------------|-----------|--------------|\n| size(PublicKey) | PublicKey | uvKey        |\n| size(Hash)      | Hash      | uvProposalId |\n| 1               | Bool      | uvDecision   |\n| 64              | Signature | uvSignature  |\n\n### Vote Identifier\n\n``` haskell\ntype VoteId = (UpId, PublicKey, Bool)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/fbe9760bd50ea136203e54d578d62ed3070b5513/update/Pos/Update/Core/Types.hs#L252).\n\n| Field size      | Type      | Description             |\n|-----------------|-----------|-------------------------|\n| size(Hash)      | Hash      | Hash of update proposal |\n| size(PublicKey) | PublicKey | Public key              |\n| 1               | Bool      | Vote result             |\n\nFor more description of fields, see *UpdateVote* message description. `VoteId`\nis just `(uvProposalId, uvKey, uvDecision)`.\n\n### Block Version Data\n\n``` haskell\n-- | Data which is associated with 'BlockVersion'.\ndata BlockVersionData = BlockVersionData\n    { bvdScriptVersion     :: !ScriptVersion\n    , bvdSlotDuration      :: !Millisecond\n    , bvdMaxBlockSize      :: !Byte\n    , bvdMaxHeaderSize     :: !Byte\n    , bvdMaxTxSize         :: !Byte\n    , bvdMaxProposalSize   :: !Byte\n    , bvdMpcThd            :: !CoinPortion\n    , bvdHeavyDelThd       :: !CoinPortion\n    , bvdUpdateVoteThd     :: !CoinPortion\n    , bvdUpdateProposalThd :: !CoinPortion\n    , bvdUpdateImplicit    :: !FlatSlotId\n    , bvdUpdateSoftforkThd :: !CoinPortion\n    } deriving (Show, Eq, Generic, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L201).\n\n| Field size    | Type           | Field                |\n|---------------|----------------|----------------------|\n| 1-3           | UVarInt Word16 | bvdScriptVersion     |\n| size(Integer) | Integer        | bvdSlotDuration      |\n| size(Integer) | Integer        | bvdMaxBlockSize      |\n| size(Integer) | Integer        | bvdMaxHeaderSize     |\n| size(Integer) | Integer        | bvdMaxTxSize         |\n| size(Integer) | Integer        | bvdMaxProposalSize   |\n| 8             | Word64         | bvdMpcThd            |\n| 8             | Word64         | bvdHeavyDelThd       |\n| 8             | Word64         | bvdUpdateVoteThd     |\n| 8             | Word64         | bvdUpdateProposalThd |\n| 8             | Word64         | bvdUpdateImplicit    |\n| 8             | Word64         | bvdUpdateSoftforkThd |\n\n### Update Data\n\n``` haskell\n-- | Data which describes update. It is specific for each system.\ndata UpdateData = UpdateData\n    { udAppDiffHash  :: !(Hash Raw)\n    -- ^ Hash of binary diff between two applications. This diff can\n    -- be passed to updater to create new application.\n    , udPkgHash      :: !(Hash Raw)\n    -- ^ Hash of package to install new application. This package can\n    -- be used to install new application from scratch instead of\n    -- updating existing application.\n    , udUpdaterHash  :: !(Hash Raw)\n    -- ^ Hash if update application which can be used to install this\n    -- update (relevant only when updater is used, not package).\n    , udMetadataHash :: !(Hash Raw)\n    -- ^ Hash of metadata relevant to this update.  It is raw hash,\n    -- because metadata can include image or something\n    -- (maybe). Anyway, we can always use `unsafeHash`.\n    } deriving (Eq, Show, Generic, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/update/Pos/Update/Core/Types.hs#L224).\n\n| Field size | Type | Field          |\n|------------|------|----------------|\n| size(Hash) | Hash | udAppDiffHash  |\n| size(Hash) | Hash | udPkgHash      |\n| size(Hash) | Hash | udUpdaterHash  |\n| size(Hash) | Hash | udMetadataHash |\n\n### System Tag\n\n``` haskell\n-- | Tag of system for which update data is purposed, e.g. win64, mac32\nnewtype SystemTag = SystemTag { getSystemTag :: Text }\n  deriving (Eq, Ord, Show, Generic, Buildable, Hashable, Lift, Typeable)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/update/Pos/Update/Core/Types.hs#L81).\n\n`SystemTag` is encoded as `ByteString` in UTF-8 encoding.\n\n| Field size | Type          | Value | Field                           |\n|------------|---------------|-------|---------------------------------|\n| 1-9        | UVarInt Int64 | n     | Size of text in bytes           |\n| n          | Word8\\[n\\]    |       | `n` bytes of UTF-8 encoded text |\n\n### Update Proposal\n\n``` haskell\ntype UpAttributes = Attributes ()\n\n-- | Proposal for software update\ndata UpdateProposal = UnsafeUpdateProposal\n    { upBlockVersion     :: !BlockVersion\n    , upBlockVersionData :: !BlockVersionData\n    , upSoftwareVersion  :: !SoftwareVersion\n    , upData             :: !(HM.HashMap SystemTag UpdateData)\n    -- ^ UpdateData for each system which this update affects.\n    -- It must be non-empty.\n    , upAttributes       :: !UpAttributes\n    -- ^ Attributes which are currently empty, but provide\n    -- extensibility.\n    , upFrom             :: !PublicKey\n    -- ^ Who proposed this UP.\n    , upSignature        :: !(Signature UpdateProposalToSign)\n    } deriving (Eq, Show, Generic, Typeable)\n```\n\n| Field size                                | Type                           | Value | Field              |\n|-------------------------------------------|--------------------------------|-------|--------------------|\n| 5                                         | BlockVersion                   |       | upBlockVersion     |\n| size(BlockVersionData)                    | BlockVersionData               |       | upBlockVersionData |\n| size(SoftwareVersion)                     | SoftwareVersion                |       | upSoftwareVersion  |\n| 1-9                                       | UVarInt Int                    | n     |                    |\n| n \\* (size(SystemTag) + size(UpdateData)) | <SystemTag, UpdateData>\\[n\\]   |       | upData             |\n| size(Attributes ())                       | Attributes ()                  |       | upAttributes       |\n| size(PublicKey)                           | PublicKey                      |       | upFrom             |\n| size(Signature)                           | Signature UpdateProposalToSign |       | upSignature        |\n\n## Peer Data\n\n### HandlerSpec\n\n``` haskell\ndata HandlerSpec\n    = ConvHandler { hsReplyType :: MessageName}\n    | UnknownHandler Word8 ByteString\n    deriving (Show, Generic, Eq)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/414817a6f8c8de405553c8ba1325e1366dc7b60e/infra/Pos/Communication/Types/Protocol.hs#L80).\n\n| Type                                           | Size           | Value     | Following data |\n|------------------------------------------------|----------------|-----------|----------------|\n| ConvHandler m where m : UnsignedVarInt &lt; 64 | Word8          | 01xx xxxx | none           |\n| ConvHandler m where m : Unknown                | Word8 + TinyBS | 0000 0001 | ByteString     |\n| UnknownHandler w8 bs                           | Word8 + TinyBS | w8        | bs             |\n\nExamples:\n\n    ghci> hexEncode (ConvHandler (messageName (Proxy :: Proxy MsgGetHeaders)))\n    \"44\"\n    ghci> hexEncode (UnknownHandler 10 \"aba\")\n    \"0a03616261\"\n\n### VerInfo\n\n``` haskell\ntype HandlerSpecs = HashMap MessageName HandlerSpec\n\nnewtype InSpecs = InSpecs HandlerSpecs\n    deriving (Eq, Show, Generic)\n\nnewtype OutSpecs = OutSpecs HandlerSpecs\n    deriving (Eq, Show, Generic)\n\ndata VerInfo = VerInfo\n    { vIMagic        :: Int32\n    , vIBlockVersion :: BlockVersion\n    , vIInHandlers   :: HandlerSpecs\n    , vIOutHandlers  :: HandlerSpecs\n    } deriving (Eq, Generic, Show)\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/414817a6f8c8de405553c8ba1325e1366dc7b60e/infra/Pos/Communication/Types/Protocol.hs#L102).\n\n| Field size         | Type         | Field            |\n|--------------------|--------------|------------------|\n| 4                  | Int32        | `vIMagic`        |\n| 5                  | BlockVersion | `vIBlockVersion` |\n| size(HandlerSpecs) | HandlerSpecs | `vIInHandlers`   |\n| size(HandlerSpecs) | HandlerSpecs | `vIOutHandlers`  |\n\n`HandlerSpec` is just mapping between message names and how those messages\nhandled: via single-message style or conversation style + message tag. This\nmapping is encoded as every other `Map` — list of pairs.\n\n`InSpecs` and `OutSpecs` are just wrappers around `HandlerSpecs`. These wrappers\nare used only for type-safety to distinguish spec for incoming and outgoing\nmessages.\n\n<!-- TODO: didn't find examples of inSpecs :( -->\n\n### PeerData\n\n``` haskell\ntype PeerData = VerInfo\n```\n\n[Source code\nlink](https://github.com/input-output-hk/cardano-sl/blob/414817a6f8c8de405553c8ba1325e1366dc7b60e/infra/Pos/Communication/Types/Protocol.hs#L47).\n\n| Field size    | Type    | Description       |\n|---------------|---------|-------------------|\n| size(VerInfo) | VerInfo | MessageName table |\n\n`VerInfo` we sending is created\n[here](https://github.com/input-output-hk/cardano-sl/blob/81b40e54bb5dda2e94850ccc9a835b46e5c445b5/src/Pos/Launcher/Runner.hs#L286).\n\nExamples:\n\n``` haskell\nghci> let ourVerInfo = VerInfo protocolMagic lastKnownBlockVersion mempty outSpecs\nghci> let peerIdExample = PeerId \"0123456789ABCD\"\nghci> hexEncode ourVerInfo\n\"0000000000000000000004030800000103020900030801010103020901030802\n020103020902030803030103020903\"\nghci> hexEncode ((peerIdExample, ourVerInfo) :: PeerData)\n\"3031323334353637383941424344000000000000000000000403080000010302\n0900030801010103020901030802020103020902030803030103020903\"\n```\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-13-binary.md"
    },
    "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-13-binary.cn.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-13-binary.cn.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-13-binary.cn.md absPath of file",
      "internal": {
        "content": "---\ndate: '2017-01-01'\ndoc_title: 二进制协议\npath: /cn/technical/protocols/binary-protocols/\ngroup: protocols\nlanguage: cn\nlabel: docs\n---\n<!-- Reviewed at 721474b760466b888cf26545b52b35989b2162de -->\n<!-- Delegation : Updated at 15b8b777fde5a8ab4a85af71affeffdf31ad219c -->\n\n# 二进制协议\n\n<span style=\"color: red;\">**重要提示：二进制协议即将更改。**</span>\n\n所有字段的大小均以字节表示。总是使用大端序。符合类型按定义顺序进行序列化，不带分隔符。\n\n例如，`(Word32, Word8)` 序列化为5个字节：4个 `Word32`，1个 `Word8`。\n\n对于依赖于类型 T 的对象的变长结构，我们使用 `size(T)` 符号。\n\n`Word32` 是32位无符号整数(`uint32`)。\n\n为测试 `ghci` 中 `myObject` 对象的序列，应该在卡尔达诺结算层根目录中使用以下命令：\n\n\n    $ stack repl\n    ...\n    <Press Enter>\n    ...\n    ghci> import Data.ByteString.Builder\n    ghci> let hexEncode myObject = toLazyByteString $ lazyByteStringHex $ Pos.Binary.encode $ myObject\n    ghci> hexEncode (mkCoin 1000)\n    \"0064\"\n\n## 常见的 HASKELL 数据类型\n\n### Maybe\n\n``` haskell\ndata Maybe a = Nothing | Just a\n```\n\n`Maybe a` 是 `a` 类型或空类型（又名 `null`, `None`）。为了区分这两个值，我们在数据之前加了1个字节的标签。\n\n\n| 标签大小 | 标签类型 | 标签值 | 描述     | 字段大小 | 描述       |\n|----------|----------|-----------|-----------------|------------|-------------------|\n| 1        | Word8    | 0x00      | Tag for Nothing |            |                   |\n|          |          | 0x01      | Tag for Just    |            |                   |\n|          |          |           |                 | size(a)    | Value of type `a` |\n\n例子：\n\n    ghci> hexEncode (Nothing :: Maybe Word32)\n    \"00\"\n    ghci> hexEncode (Just 4  :: Maybe Word32)\n    \"0100000004\"\n\n### Either\n\n``` haskell\ndata Either a b = Left a | Right b\n```\n\n`Either a b` 表示类型 `a` 或 类型 `b`。为了区分这两个值，我们在数据之前添加了1个字节的标签。\n\n\n| 标签大小 | 标签类型 | 标签值 | 描述   | 字段大小 | 描述       |\n|----------|----------|-----------|---------------|------------|-------------------|\n| 1        | Word8    | 0x00      | Tag for Left  |            |                   |\n|          |          |           |               | size(a)    | Value of type `a` |\n|          |          | 0x01      | Tag for Right |            |                   |\n|          |          |           |               | size(b)    | Value of type `b` |\n\n例子：\n\n    ghci> hexEncode (Left 3  :: Either Word16 Word32)\n    \"000003\"\n    ghci> hexEncode (Right 4 :: Either Word16 Word32)\n    \"0100000004\"\n\n### 大整数\n\n``` haskell\n-- Fixed-size type for a subset of Integer\ntype SmallInt = Int32\n```\n\n整数的编码有两种：如果它们适合 `SmallInt`，则它们被写为一个字节标记，并写入该值。如果该整数太大不能放入 SmallInt 中，将其与符号，长度字段写入字节数组。\n\n有关参考，请参考[实现](http://hackage.haskell.org/package/binary-0.8.4.1/docs/src/Data.Binary.Class.html#line-306)。\n\n例子：\n\n    ghci> hexEncode $ (15 :: Integer)\n    \"000000000f\"\n    ghci> hexEncode $ (  (2 :: Integer) ^ (128 :: Integer))\n    \"010100000000000000110000000000000000000000000000000001\"\n    ghci> hexEncode $ (- (2 :: Integer) ^ (128 :: Integer))\n    \"01ff00000000000000110000000000000000000000000000000001\"\n\n### 无符号变量长度整数\n\n这种类型稍后将引用为 `UVarInt Word16` 或 `UVarInt Word64` 来描述最大可用值。\n\n\n``` haskell\nnewtype UnsignedVarInt a = UnsignedVarInt {getUnsignedVarInt :: a}\n    deriving (Eq, Ord, Show, Generic, NFData, Functor)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/895619d7056fe397e9c2a56d88994f167263c397/core/Pos/Binary/Class.hs#L277)。\n\n值一次编码为7位，最重要的是是个连续位。因此，从0到127的数字只需要一个字节来编码，从128到16383的数字需要两个字节等等。\n\n这种[格式](https://developers.google.com/protocol-buffers/docs/encoding#varints)取自 Google 的 Protocol Buffers，但它提供了更多的编码语言（TODO）\n\n例子:\n\n    ghci> hexEncode (UnsignedVarInt (3 :: Word32))\n    \"03\"\n    ghci> hexEncode (UnsignedVarInt (126 :: Word32))\n    \"7e\"\n    ghci> hexEncode (UnsignedVarInt (127 :: Word32))\n    \"7f\"\n    ghci> hexEncode (UnsignedVarInt (128 :: Word32))\n    \"8001\"\n\n### 微小的可变长度整数\n\n``` haskell\n-- | A newtype wrapper for non-negative integers less than @2^14@. Use it if\n-- you want to be extra careful. Compared to 'SignedVarInt' and\n-- 'UnsignedVarInt', it provides two benefits:\n--\n-- * It is guaranteed to take either 1 or 2 bytes (the standard decoder for\n--   variants can consume an unlimited amount of bytes).\n--\n-- * It is unambiguous (e.g. @0@ can be encoded in only one way instead of\n--   two).\nnewtype TinyVarInt = TinyVarInt {getTinyVarInt :: Word16}\n    deriving (Eq, Ord, Show, Generic, NFData)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/895619d7056fe397e9c2a56d88994f167263c397/core/Pos/Binary/Class.hs#L295)。\n\n| 字段大小 | 类型           | 描述                            |\n|------------|----------------|----------------------------------------|\n| 1-2        | UVarInt Word16 | Variable length integer up to 2^14 - 1 |\n\n例子:\n\n    ghci> hexEncode $ TinyVarInt 0\n    \"00\"\n    ghci> hexEncode $ TinyVarInt (2^14 -1)\n    \"ff7f\"\n\n在 `cardano` 中的 `ByteString` 被编码为以其长度开头的字节序列，其中长度被编码为可变长度整数。如果长度被编码为 `TinyVarInt`，那么这样的 `ByteString` 被表示为 `TinyBS`。\n\n### 列表，非空值和向量空间\n\n\n有时候我们在数据类型中存储一些对象的列表。你会看到他们被引用为 `Vector a`，`[a]`。您可以将其读作*类型对象的数组 `a`*。这两种标准的 Haskell 数据类型都以相同的方式序列化。如果您看到 `NonEmpty a` 的类型的，您应该将它视作 `[a]`，但该列表的大小至少为 `1`。\n\n| 字段大小   | 类型        | 值 | 描述                                  |\n|--------------|-------------|-------|----------------------------------------------|\n| 1-9          | UVarInt Int | n     | Size of array                                |\n| n \\* size(a) | a\\[n\\]      |       | Array with length `n` of objects of type `a` |\n\n例子：\n\n    ghci> hexEncode ([1, 31] :: [Word16])\n    \"020001001f\"\n    ghci> hexEncode ([0..135] :: [Word8])  -- 136 bytes from 0 to 135 including\n    \"8801000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f2021222324252\n    62728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4\n    f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f70717273747576777\n    8797a7b7c7d7e7f8081828384858687\"\n\n### HashMap\n\n`HashMap key value` 是键到值的映射。在序列化中，HashMap 被表示为 `key` 与 `value` 对的列表，并且被序列化为 `[(key, value)]`。\n\n\n| 字段大小                    | 类型            | 值 | 描述                                             |\n|-------------------------------|-----------------|-------|---------------------------------------------------------|\n| 1-9                           | UVarInt Int     | n     | Size of HashMap                                         |\n| n * (size(key) + size(value)) | <key, value>[n] |       | Array with length `n` of objects of type `(key, value)` |\n\n例子：\n\n    ghci> hexEncode $ Data.HashMap.Strict.fromList [(1 :: Word8, 127 :: Word64), (2, 255)]\n    \"0201000000000000007f0200000000000000ff\"\n\n## 网络\n\n### MessageName\n\n``` haskell\nnewtype MessageName = MessageName BS.ByteString\n```\n\n[源代码链接](https://github.com/serokell/time-warp-nt/blob/f5500cb587eb2fbb02954b8d945985dbd0d51c0d/src/Node/Message.hs#L44)。\n\n一般来说，我们用一个或两个编码的 `UnsignedVarInt` 来表示 `MessageName`。在序列化状态下，它被编码为二进制字符串，因此以字符串的长度为前缀。\n\n例子:\n\n    ghci> hexEncode $ messageName (Proxy :: Proxy SendProxySK)\n    \"0102\"\n    ghci> hexEncode $ messageName (Proxy :: Proxy (DataMsg GtMsgContents))\n    \"020a03\"\n\n## 卡尔达诺结算层基本数据类型\n\n### 币\n\n``` haskell\n-- | Coin is the least possible unit of currency.\nnewtype Coin = Coin\n    { getCoin :: Word64\n    } deriving (Show, Ord, Eq, Generic, Hashable, Data, NFData)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L391)。\n\n硬币总数量是 [45 \\* 10^9 \\*\n10^6](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L404)。\n\n    45*10^15 needs 56 bits to represent\n    45*10^9  (integral mega coins) needs 36 bits to represent\n    999999   (floating mega coins) needs 20 bits to represent\n\n| Decimal  | Needed Bits |\n|----------|-------------|\n| 0-9      | 4 bits      |\n| 0-99     | 7 bits      |\n| 0-999    | 10 bits     |\n| 0-9999   | 14 bits     |\n| 0-99999  | 17 bits     |\n| 0-999999 | 20 bits     |\n\n币被分成百万份，剩余的币用于序列化。\n\n    1000999 coin = 1.000999 mega coin\n\n简单的变量以 `Word64` 限制。序列的总长度在第一个字节中用可变掩码进行编码。\n\n| header    | mask | spare bits | extra byte | total bits as value | serialized size |\n|-----------|------|------------|------------|---------------------|-----------------|\n| 0 xxxxxxx | 0x7f | 7 bits     | 0          | 7 bits              | 1 byte          |\n| 10 xxxxxx | 0x3f | 6 bits     | 1          | 14 bits             | 2 bytes         |\n| 110 xxxxx | 0x1f | 5 bits     | 2          | 21 bits             | 3 bytes         |\n| 1110 xxxx | 0x0f | 4 bits     | 3          | 27 bits             | 4 bytes         |\n| 11110 xxx | 0x07 | 3 bits     | 4          | 35 bits             | 5 bytes         |\n| 111110 xx | 0x03 | 2 bits     | 5          | 42 bits             | 6 bytes         |\n| 1111110 x | 0x01 | 1 bit      | 6          | 49 bits             | 7 bytes         |\n| 11111110  | 0x00 | 0 bit      | 7          | 56 bits             | 8 bytes         |\n| 11111111  | 0x00 | 0 bit      | 8          | 64 bits             | 9 bytes         |\n\n专门用于最多只需要36位的组成部分。\n\n| header    | mask | spare bits | extra byte | total bits as value | serialized size |\n|-----------|------|------------|------------|---------------------|-----------------|\n| 0 xxxxxxx | 0x7f | 7 bits     | 0          | 7 bits              | 1 byte          |\n| 10 xxxxxx | 0x3f | 6 bits     | 1          | 14 bits             | 2 bytes         |\n| 110 xxxxx | 0x1f | 5 bits     | 2          | 21 bits             | 3 bytes         |\n| 1110 xxxx | 0x0f | 4 bits     | 3          | 27 bits             | 4 bytes         |\n| 1111 xxxx | 0x0f | 4 bits     | 4          | 36 bits             | 5 bytes         |\n\n而浮动部分则需要20位来表示，编码值从0到999999：\n\n| header    | mask | spare bits | extra byte | total bits as value | serialized size |\n|-----------|------|------------|------------|---------------------|-----------------|\n| 0 xxxxxx  | 0x7f | 7 bits     | 0          | 7 bits              | 1 byte          |\n| 10 xxxxxx | 0x3f | 6 bits     | 1          | 14 bits             | 2 bytes         |\n| 110 xxxxx | 0x3f | 5 bits     | 2          | 21 bits             | 3 bytes         |\n\n注意：考虑的编码的结束，我们可以在3字节方案中保存一位，但我们不需要，不需要改变方案，我们可以重新使用以前的方案。\n\n有关实现的细节请看[这个模块](https://github.com/input-output-hk/cardano-sl/blob/1239a6a876fbbb970e836c8bc6bb72d781ba2fa9/core/Pos/Binary/Core/Coin.hs)。\n\n例子:\n\n    ghci> hexEncode (mkCoin 0)\n    \"0000\"\n    ghci> hexEncode (mkCoin 1)\n    \"00c186a0\"\n    ghci> hexEncode (mkCoin 2)\n    \"00c30d40\"\n    ghci> hexEncode (mkCoin 31)\n    \"00c1fbd0\"\n    ghci> hexEncode (mkCoin 128)\n    \"00cc8708\"\n    ghci> hexEncode (mkCoin 129)\n    \"00ce0da8\"\n    ghci> hexEncode (mkCoin 1000)\n    \"0064\"\n    ghci> hexEncode (mkCoin 10000)\n    \"000a\"\n    ghci> hexEncode (mkCoin 1000000)\n    \"0100\"\n    ghci> hexEncode (mkCoin 1000999)\n    \"01cf3e58\"\n\n### Hash\n\n``` haskell\n-- | Hash wrapper with phantom type for more type-safety.\n-- Made abstract in order to support different algorithms in\n-- different situations\nnewtype AbstractHash algo a = AbstractHash (Digest algo)\n    deriving (Show, Eq, Ord, ByteArray.ByteArrayAccess, Generic, NFData)\n\n-- | Type alias for commonly used hash\ntype Hash = AbstractHash Blake2b_256\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/652411b9b8777f08e948ee144a60779c55f363b3/core/Pos/Crypto/Hashing.hs#L118)。\n\n| 字段大小 | 类型        | 描述             |\n|------------|-------------|-------------------------|\n| 32         | Word8\\[32\\] | 256 bits of hash digest |\n\n消息大小限制：32。\n\n所以每当你看到 `Hash SomeType` 代码，这个字段将占用32个字节。`Hash` 只在类型安全的代码中使用附加的类型参数，并且对序列化没有影响。\n\n例子:\n\n    ghci> hash $ mkCoin 3\n    AbstractHash 29bcdcff253cd2864a8b5e25992a6db86a7a41dc5e69c0599730f2c5716d9362\n    ghci> hexEncode $ hash $ mkCoin 3\n    \"29bcdcff253cd2864a8b5e25992a6db86a7a41dc5e69c0599730f2c5716d9362\"\n\n### 公钥\n\n``` haskell\n-- | Wrapper around 'CC.XPub'.\nnewtype PublicKey = PublicKey CC.XPub\n    deriving (Eq, Ord, Show, Generic, NFData, Hashable, Typeable)\n\ndata XPub = XPub !Edwards25519.PointCompressed !ChainCode\n    deriving (Eq, Ord, Show, Generic)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Crypto/Signing.hs#L70)。\n\n| 字段大小 | 类型       | 描述             |\n|------------|------------|-------------------------|\n| 32         | ByteString | 32-byte PointCompressed |\n| 32         | ByteString | 32-byte ChainCode       |\n\n\n消息大小限制：64。\n\n### 签名\n\n``` haskell\n-- | Wrapper around 'CC.XSignature'.\nnewtype Signature a = Signature CC.XSignature\n    deriving (Eq, Ord, Show, Generic, NFData, Hashable, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Crypto/Signing.hs#L149)。\n\n| 字段大小 | 类型        | 描述                  |\n|------------|-------------|------------------------------|\n| 64         | Word8\\[64\\] | 64 bytes of signature string |\n\n消息大小限制：64。\n\n### Epoch 索引\n\n``` haskell\n-- | Index of epoch.\nnewtype EpochIndex = EpochIndex\n    { getEpochIndex :: Word64\n    } deriving (Show, Eq, Ord, Num, Enum, Ix, Integral, Real, Generic, Hashable, Bounded, Typeable, NFData)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L342)。\n\n| 字段大小 | 类型           | 描述 |\n|------------|----------------|-------------|\n| 1-10       | UVarInt Word64 | epoch index |\n\n消息大小限制：10。\n\n例子:\n\n    ghci> hexEncode (EpochIndex 128)\n    \"8001\"\n\n### 本地 Slot 索引\n\n``` haskell\n-- | Index of slot inside a concrete epoch.\nnewtype LocalSlotIndex = LocalSlotIndex\n    { getSlotIndex :: Word16\n    } deriving (Show, Eq, Ord, Ix, Generic, Hashable, Buildable, Typeable, NFData)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L353)。\n\n| 字段大小 | 类型           | 描述         |\n|------------|----------------|---------------------|\n| 1-3        | UVarInt Word16 | index of local slot |\n\n例子:\n\n    ghci> hexEncode (LocalSlotIndex 15)\n    \"0f\"\n\n### SlotId\n\n``` haskell\n-- | Slot is identified by index of epoch and local index of slot in\n-- this epoch. This is a global index\ndata SlotId = SlotId\n    { siEpoch :: !EpochIndex\n    , siSlot  :: !LocalSlotIndex\n    } deriving (Show, Eq, Ord, Generic, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L377)。\n\n| 字段大小 | 类型           | 描述                        |\n|------------|----------------|------------------------------------|\n| 1-10       | UVarInt Word64 | Epoch index                        |\n| 1-3        | UVarInt Word16 | Slot index inside a concrete epoch |\n\n例子:\n\n    ghci> hexEncode (SlotId 128 15)\n    \"80010f\"\n\n### Attributes\n\n``` haskell\n-- | Convenient wrapper for the datatype to represent it (in binary\n-- format) as k-v map.\ndata Attributes h = Attributes\n    { -- | Data, containing known keys (deserialized)\n      attrData   :: h\n      -- | Remaining, unparsed fields\n    , attrRemain :: UnparsedFields\n    }\n  deriving (Eq, Ord, Generic, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Data/Attributes.hs#L60)。\n\n``` haskell\n-- | Representation of unparsed fields in Attributes. Newtype wrapper is used\n-- for clear backward compatibility between previous representation (which was\n-- just a single ByteString) during transition from Store to CBOR.\nnewtype UnparsedFields = UnparsedFields (Map Word8 ByteString)\n    deriving (Eq, Ord, Show, Generic, Typeable, NFData)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Data/Attributes.hs#L34)。\n\n消息大小限制：每个 `Attributes` 类型定义它们自己的限制。\n\n#### 一般情况序列化\n\n存储为 `totalLen + (k, v) pairs + 一些剩余的部分`。`attrData` 存储为 `(Word8, v)` 对列表，其中 `key` 有 `Word8` 类型，你应该指定如何以这种方式编码 `h`。\n\n| 字段大小             | 类型           | 值 | 描述                           |\n|------------------------|----------------|-------|---------------------------------------|\n| 1-9                    | UVarInt Int64  | m + n | Size of attributes in bytes           |\n| m = t \\* (1 + size(v)) | <Word8,v>\\[t\\] |       | Array of pairs. Given without length. |\n| n                      | ByteString     |       | Remaining byte array                  |\n\n例子：\n\n    ghci> toLazyByteString\n          $ lazyByteStringHex\n          $ runPut\n          $ putAttributes (\\h -> [(1, put h), (0, put h)])\n          $ Attributes (9 :: Word32) \"abc\"\n    \"0d0000000009010000000961626\"\n\n其中 `h = 9 :: Word32`，我们将 `h` 编码为两个键值对：值为4字节`9`，键是`0`和`1`。\n\n#### Attributes ()\n\n在这种特殊情况下，没有 `(key, value)` 存储 - 只能是任意长度的字节数组。\n\n| 字段大小 | 类型          | 值 | 描述                                      |\n|------------|---------------|-------|--------------------------------------------------|\n| 1-4        | UVarInt Int64 | n     | Size of attributes in bytes. Should be &lt; 2^28 |\n| n          | Word8\\[n\\]    |       | `n` bytes of data                                |\n\n例子：\n\n    ghci> hexEncode $ Attributes () (BSS.pack [])\n    \"00\"\n    ghci> hexEncode $ Attributes () (BSS.pack [1,31])\n    \"02011f\"\n    ghci> hexEncode $ Attributes () \"abc\"\n    \"03616263\"\n\n### 脚本\n\n``` haskell\n-- | Version of script\ntype ScriptVersion = Word16\n\n-- | A script for inclusion into a transaction.\ndata Script = Script {\n    scrVersion :: ScriptVersion,    -- ^ Version\n    scrScript  :: LByteString}      -- ^ Serialized script\n  deriving (Eq, Show, Generic, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L424)。\n\n| 字段大小 | 类型           | 值 | 描述        |\n|------------|----------------|-------|--------------------|\n| 1-3        | UVarInt Word16 |       | Script version     |\n| 1-9        | UVarInt Int64  | n     | Size of byte array |\n| n          | Word8\\[n\\]     |       | n bytes of script  |\n\n例子:\n\n    ghci> hexEncode $ Script 0 \"a\"\n    \"000161\"\n\n### 地址属性\n\n``` haskell\n-- | Additional information stored along with address. It's intended\n-- to be put into 'Attributes' data type to make it extensible with\n-- softfork.\ndata AddrAttributes = AddrAttributes\n    { aaPkDerivationPath  :: !(Maybe HDAddressPayload)\n    , aaStakeDistribution :: !AddrStakeDistribution\n    } deriving (Eq, Ord, Show, Generic, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L199)。\n\n地址属性包含关于地址的附加信息：\n\n- HD钱包树根（`aaPkDerivationPath`）的加密导出路径。\n- 与此地址相关的股权分配（`aaStakeDistribution`）\n\n请注意，地址可能不包含加密派生路径。包含在属性中的不包含派生路径的地址通常从级别 0（钱包）公共密钥导出，并用做钱包的 ID。这样的地址并不意味着要包含任何资金。\n\n#### 地址有效载荷\n\n``` haskell\ndata HDAddressPayload = HDAddressPayload !ByteString\n    deriving (Eq, Ord, Show, Generic)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Crypto/HD.hs#L50)。\n\n`HDAddressPayload` 数据类型表示派生路径(`[Word32]`)，通过 `ChaChaPoly1305` 算法对称算法加密。加密密钥可以是 `ByteString` 32个字节中的任何一个，只有该地址的所有者才知道。\n\n在目前的 Cardano 实现中，加密密钥是使用 PBKDF2 派生算法和 HMAC-SHA512 伪随机算法，进行500次迭代，将 `address-hashing` 字符串作为盐，从钱包的根公钥获得的32字节密钥。[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Crypto/HD.hs#L58)。\n\n地址属性使用加密标签进行加密，从而可以检查属性是否被成功解密。因此，通过使用从钱包的根公共密钥导出的加密密钥来解密该地址的属性，可以确定给定的地址是否属于给定的钱包。这是实现属性解密和加密的[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Crypto/HD.hs#L113)。\n\n#### 地址分配\n\n``` haskell\n-- | Stake distribution associated with an address.\ndata AddrStakeDistribution\n    = BootstrapEraDistr\n    -- ^ Stake distribution for bootstrap era.\n    | SingleKeyDistr !StakeholderId\n    -- ^ Stake distribution stating that all stake should go to the given stakeholder.\n    | UnsafeMultiKeyDistr !(Map StakeholderId CoinPortion)\n    -- ^ Stake distribution which gives stake to multiple\n    -- stakeholders. 'CoinPortion' is a portion of an output (output\n    -- has a value, portion of this value is stake). The constructor\n    -- is unsafe because there are some predicates which must hold:\n    --\n    -- • the sum of portions must be @maxBound@ (basically 1);\n    -- • all portions must be positive;\n    -- • there must be at least 2 items, because if there is only one item,\n    -- 'SingleKeyDistr' can be used instead (which is smaller).\n    deriving (Eq, Ord, Show, Generic, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L137)。\n\n在 Byron 时代，所有的地址应该以 `BootstrapEraDistr` 作为股权分配 - 这意味着所有的股权都被自动委派给引导权益所有人。\n\n在 Shelley 时代，地址使用 `SingleKeyDistr` 或 `UnsafeMultiKeyDistr` 将股权委派给代表他们的权益所有人 ID。\n\n<!-- | Size | Type                      | Value | Description                                             | -->\n<!-- |------|---------------------------|-------|---------------------------------------------------------| -->\n<!-- | 1-2  | TinyVarInt                | n + m | sise of `PubKeyAddress` content                         | -->\n<!-- | n    | Maybe (Word8, \\[Word32\\]) |       | Empty for nothing and list of Word32 preceded with zero | -->\n<!-- | m    | ByteString                |       | Remaining bytes                                         | -->\n\n<!-- See examples in the next section. -->\n\n### 地址\n\n``` haskell\n-- | Hash used to identify address.\ntype AddressHash = AbstractHash Blake2b_224\n\n-- | Stakeholder identifier (stakeholders are identified by their public keys)\ntype StakeholderId = AddressHash PublicKey\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L123)。\n\n卡尔达诺地址使用 `blake2b-224` 作为地址结构的散列。\n\n``` haskell\n-- | Data which is bound to an address and must be revealed in order\n-- to spend coins belonging to this address.\ndata AddrSpendingData\n    = PubKeyASD !PublicKey\n    -- ^ Funds can be spent by revealing a 'PublicKey' and providing a\n    -- valid signature.\n    | ScriptASD !Script\n    -- ^ Funds can be spent by revealing a 'Script' and providing a\n    -- redeemer 'Script'.\n    | RedeemASD !RedeemPublicKey\n    -- ^ Funds can be spent by revealing a 'RedeemScript' and providing a\n    -- valid signature.\n    | UnknownASD !Word8 !ByteString\n    -- ^ Unknown type of spending data. It consists of a tag and\n    -- arbitrary 'ByteString'. It allows us to introduce a new type of\n    -- spending data via softfork.\n    deriving (Eq, Generic, Typeable, Show)\n\n-- | Type of an address. It corresponds to constructors of\n-- 'AddrSpendingData'. It's separated, because 'Address' doesn't store\n-- 'AddrSpendingData', but we want to know its type.\ndata AddrType\n    = ATPubKey\n    | ATScript\n    | ATRedeem\n    | ATUnknown !Word8\n    deriving (Eq, Ord, Generic, Typeable, Show)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L137) \n\n卡尔达诺支持不同的地址类型。地址类型根据资金的可用性不同而有所不同。每个地址类型都有相应的支出数据类型。消费数据是为了生成地址的散列数据的一部分。要从地址中花费资金，应该为消费数据，同验证数据（例如签名）提供 `TxInWitness`。\n\n目前 Cardano 提供3种地址类型：\n\n- 公钥地址（`ATPublicKey`）：扩展了 Ed25519 公钥作为支出数据，对应的 Ed25519 签名作为验证数据。\n- 脚本地址（`ATScript`）：作为支出数据的 Plutus 验证脚本，Plutus 赎回脚本作为验证数据\n- 兑现地址（`ATRedeem`）：Ed25519 公钥作为支出数据，Ed25519 签名作为验证数据。仅用于为持有人预售 ADA。\n\n还有为向前兼容而添加的特殊地址类型 `ATUnknown`。\n\n``` haskell\n-- | Hash of this data is stored in 'Address'. This type exists mostly\n-- for internal usage.\nnewtype Address' = Address'\n    { unAddress' :: (AddrType, AddrSpendingData, Attributes AddrAttributes)\n    } deriving (Eq, Show, Generic, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L206)。\n\n内部类型 `Address` 表示一个一个元组，作为 `Address` 的部分哈希存储。不仅 `AddrSpendingData` 会被哈希，`AddrType` 和 `AddrAttributes` 也会被哈希。\n\n``` haskell\n-- | 'Address' is where you can send coins.\ndata Address = Address\n    { addrRoot       :: !(AddressHash Address')\n    -- ^ Root of imaginary pseudo Merkle tree stored in this address.\n    , addrAttributes :: !(Attributes AddrAttributes)\n    -- ^ Attributes associated with this address.\n    , addrType       :: !AddrType\n    -- ^ The type of this address. Should correspond to\n    -- 'AddrSpendingData', but it can't be checked statically, because\n    -- spending data is hashed.\n    } deriving (Eq, Ord, Generic, Typeable, Show)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L211)。\n\n一个 `Address` 数据类型由 `Address` 元组，类型标签，属性组成。\n\n#### 公钥地址\n\n[`addrPkAttributes`](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L107) 是 HD 钱包必须的字段。\n\n| 大小 | 类型                    | 值  | 描述                                 |\n|------|-------------------------|--------|---------------------------------------------|\n| 1    | Word8                   | 0x00   | `PubKeyAddress` tag                         |\n| 1-2  | TinyVarInt              | 28 + m | Size of `PubKeyAddress` content             |\n| 28   | Word8\\[28\\]             |        | `addKeyHash`: 28 bytes of Blake2b\\_224 hash |\n| m    | PubKeyAddressAttributes |        | `addrPkAttributes`                          |\n| 4    | Word32                  |        | CRC32 of all previous data                  |\n\n例子：\n\n    ghci> abstractHash somPk :: AddressHash PublicKey\n    AbstractHash 380dea393a631ad563154a13bc5ee49fa4b62a60218358b5dcb875e0\n    ghci> hexEncode $ PubKeyAddress (abstractHash somePk) (Attributes (AddrPkAttrs Nothing) \"a\")\n    \"001e380dea393a631ad563154a13bc5ee49fa4b62a60218358b5dcb875e00161cf52c5ec\"\n    ghci> hexEncode $ PubKeyAddress (abstractHash somePk) (Attributes (AddrPkAttrs $ Just [3,9]) \"a\")\n    \"0028380dea393a631ad563154a13bc5ee49fa4b62a60218358b5dcb875e00b0002000000030000000961f1d810f7\"\n\n你可以注意到第一个例子，`0xCF52C5EC` 是 `001e380dea393a631ad563154a13bc5ee49fa4b62a60218358b5dcb875e00161` 的 CRC32。\n \n#### 脚本地址\n\n| 大小 | 类型        | 值 | 描述                         |\n|------|-------------|-------|-------------------------------------|\n| 1    | Word8       | 0x01  | `ScriptAddress` tag                 |\n| 1    | Word8       | 0x1C  | Size of `addrScriptHash`: always 28 |\n| 28   | Word8\\[28\\] |       | 28 bytes of Blake2b\\_224 hash       |\n| 4    | Word32      |       | CRC32 of all previous data          |\n\n例子：\n\n    ghci> hexEncode $ ScriptAddress (abstractHash $ Script 0 \"a\")\n    \"011c7ec20301993e369571c6225e1e563812198433801820a2d7328756dc61c5be8e\"\n\n您可以注意到，4字节的 `0x61c5be8e` 前缀是 `011c7ec20301993e369571c6225e1e563812198433801820a2d7328756dc` 的 CRC32 的前缀。\n\n#### 未知地址\n\n| 大小 | 类型       | 值 | 描述                |\n|------|------------|-------|----------------------------|\n| 1    |            | t     | `UnknownAddress` tag       |\n| 1-2  | TinyVarInt | n     | Size of unknown address    |\n| n    | Word8\\[n\\] |       | Unknown address itself     |\n| 4    | Word32     |       | CRC32 of all previous data |\n\n例子：\n\n让我们对 `UnknownAddressType 3 \"a\"` 编码。没有 CRC32，它会被编码为 `0x030161`，`0x030161` 的 CRC32 是 `0xDEA907C4`。因此我们有：\n\n    ghci> hexEncode $ UnknownAddressType 3 \"a\"\n    \"030161dea907c4\"\n\n### MerkleRoot\n\n``` haskell\n-- | Data type for root of merkle tree.\nnewtype MerkleRoot a = MerkleRoot\n    { getMerkleRoot :: Hash Raw  -- ^ returns root 'Hash' of Merkle Tree\n    } deriving (Show, Eq, Ord, Generic, ByteArrayAccess, Typeable, NFData)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/214e7ac54fbb57007e18fdab4d274340371f2d19/core/Pos/Merkle.hs#L28)。\n\n| 字段大小 | 类型 | 描述              |\n|------------|------|--------------------------|\n| size(Hash) | Hash | Root hash of Merkle tree |\n\n### 链难度\n\n``` haskell\n-- | Chain difficulty represents necessary effort to generate a\n-- chain. In the simplest case it can be number of blocks in chain.\nnewtype ChainDifficulty = ChainDifficulty\n    { getChainDifficulty :: Word64\n    } deriving (Show, Eq, Ord, Num, Enum, Real, Integral, Generic, Buildable, Typeable, NFData)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L135)。\n\n| 大小 | 类型           | 描述      |\n|------|----------------|------------------|\n| 1-10 | UVarInt Word64 | Chain difficulty |\n\n### SlotLeaders\n\n    -- | 'NonEmpty' list of slot leaders.\n    type SlotLeaders = NonEmpty StakeholderId\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L264)。\n\n| 字段大小               | 类型               | 值 | 描述                    |\n|--------------------------|--------------------|-------|--------------------------------|\n| 1-9                      | UVarInt Int        | n     | Size of slot leaders list      |\n| n \\* size(StakeholderId) | StakeholderId\\[n\\] |       | List of slot leaders of size n |\n\n## GodTossing\n\n### Crypto.PVSS\n\nPvss 的类型前缀在 [Crypto.PVSS](https://hackage.haskell.org/package/pvss-0.1/docs/Crypto-PVSS.html) 模块定义。本节介绍这些类型的二进制格式。\n\n#### Point\n\n``` haskell\nnewtype Point = Point { unPoint :: SSL.EcPoint }\n    deriving (Generic)\n```\n\n[源代码链接](https://github.com/input-output-hk/pvss-haskell/blob/31bc53aa861bd4cae8f6741247e849299eae3983/src/Crypto/PVSS/ECC.hs#L92)。\n\n| 字段大小 | 类型       | 描述                                                           |\n|------------|------------|-----------------------------------------------------------------------|\n|         33 | ByteString | Binary represented elliptic curve point (see ecPointFromOct function) |\n\n#### Secret\n\n``` haskell\n-- | Secret\nnewtype Secret = Secret Point\n    deriving (Show,Eq,NFData,Binary)\n```\n\n[源代码链接](https://github.com/input-output-hk/pvss-haskell/blob/670ce35d0f4a11aeb9617de4df2992c23f30573d/src/Crypto/SCRAPE.hs#L78)。\n\n| 字段大小  | 类型  | 描述 |\n|-------------|-------|-------------|\n| size(Point) | Point | Secret      |\n\n#### Proof\n\n``` haskell\nnewtype Scalar = Scalar { unScalar :: Integer }\n    deriving (Show,Eq,Generic,NFData)\n\nnewtype Challenge = Challenge ByteString\n    deriving (Show,Eq,NFData)\n\n-- | The generated proof\ndata Proof = Proof\n    { proof_c :: !Challenge\n    , proof_z :: !Scalar\n    } deriving (Show,Eq,Generic)\n```\n\n[源代码链接](https://github.com/input-output-hk/pvss-haskell/blob/31bc53aa861bd4cae8f6741247e849299eae3983/src/Crypto/PVSS/DLEQ.hs#L39)。\n\n`Scalar` [源代码链接](https://github.com/input-output-hk/pvss-haskell/blob/31bc53aa861bd4cae8f6741247e849299eae3983/src/Crypto/PVSS/ECC.hs#L110)。\n\n| 字段大小 | 类型       | 描述              |\n|------------|------------|--------------------------|\n| 32         | ByteString | 32-byte string challenge |\n| 32         | Integer    | 32-byte integer scalar   |\n\n#### DecryptedShare\n\n``` haskell\n-- | An decrypted share decrypted by a party's key and\ndata DecryptedShare = DecryptedShare\n    { decryptedShareID    :: !ShareId\n    , shareDecryptedVal   :: !Point      -- ^ decrypted share\n    , decryptedValidProof :: !DLEQ.Proof -- ^ proof the decryption is valid\n    } deriving (Show,Eq,Generic)\n```\n\n| 字段大小  | 类型    | 描述                    |\n|-------------|---------|--------------------------------|\n| 32          | Integer | Share id                       |\n| size(Point) | Point   | Decrypted share                |\n| size(Proof) | Proof   | Proof the description is valid |\n\n#### ExtraGen\n\n``` haskell\n-- | Extra generator\nnewtype ExtraGen = ExtraGen Point\n    deriving (Show,Eq,NFData,Binary)\n```\n\n[源代码链接](https://github.com/input-output-hk/pvss-haskell/blob/670ce35d0f4a11aeb9617de4df2992c23f30573d/src/Crypto/PVSS.hs#L82)。\n\n| 字段大小  | 类型  | 描述     |\n|-------------|-------|-----------------|\n| size(Point) | Point | Extra generator |\n\n消息大小限制：33。\n\n#### Commitment\n\n``` haskell\nnewtype Commitment = Commitment { unCommitment :: Point }\n    deriving (Show,Eq,NFData,Binary)\n```\n\n[源代码链接](https://github.com/input-output-hk/pvss-haskell/blob/670ce35d0f4a11aeb9617de4df2992c23f30573d/src/Crypto/PVSS.hs#L69)。\n\n| 字段大小  | 类型  | 描述 |\n|-------------|-------|-------------|\n| size(Point) | Point | Commitment  |\n\n#### PublicKey\n\n``` haskell\n-- | Public Key\nnewtype PublicKey = PublicKey Point\n    deriving (Show,Eq,NFData,Binary)\n```\n\n[源代码链接](https://github.com/input-output-hk/pvss-haskell/blob/31bc53aa861bd4cae8f6741247e849299eae3983/src/Crypto/PVSS/ECC.hs#L84)。\n\n| 字段大小  | 类型  | 描述 |\n|-------------|-------|-------------|\n| size(Point) | Point | Public key  |\n\n### 密钥共享\n\n一下大多数类型是 PVSS 类型的别名，所以它们以相同的方式被序列化。\n\n``` haskell\n-- | Secret can be generated by `genSharedSecret` function along with shares.\nnewtype Secret = Secret\n    { getSecret :: Pvss.Secret\n    } deriving (Show, Eq)\n\n-- | Shares can be used to reconstruct Secret.\nnewtype Share = Share\n    { getShare :: Pvss.DecryptedShare\n    } deriving (Show, Eq)\n\n-- | Encrypted share which needs to be decrypted using VssKeyPair first.\nnewtype EncShare = EncShare\n    { getEncShare :: Pvss.EncryptedShare\n    } deriving (Show, Eq)\n\n-- | This extra data may be used to verify encrypted share.\ndata SecretSharingExtra =\n    SecretSharingExtra !Pvss.ExtraGen\n                       ![Pvss.Commitment]\n    deriving (Show, Eq, Generic)\n\n-- | SecretProof may be used to commit Secret without revealing it.\nnewtype SecretProof =\n    SecretProof Pvss.Proof\n    deriving (Show, Eq, Generic)\n\n-- | This key is used as public key in VSS.\nnewtype VssPublicKey = VssPublicKey\n    { getVssPublicKey :: Pvss.PublicKey\n    } deriving (Show, Eq)\n```\n\nSecretSharingExtra 的格式：\n\n| 字段大小                 | 类型                | 值 | 描述                |\n|----------------------------|---------------------|-------|----------------------------|\n| size(ExtraGen)             | Pvss.ExtraGen       |       | Extra generator            |\n| 1-9                        | UVarInt Int         | n     | Length of commitments list |\n| n \\* size(Pvss.Commitment) | \\[Pvss.Commitment\\] |       | Commitments                |\n\n消息大小限制：32：\n\n-   `Share` - 101.\n-   `EncShare` - 101.\n-   `SecretProof` - 64.\n-   `VssPublicKey` - 33.\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/69dd4b2d0c56474db1059393336557fb649dba9a/core/Pos/Crypto/SecretSharing.hs)。\n\n### Commitments, Openings and Shares\n\n#### Commitment\n\n``` haskell\n-- | Commitment is a message generated during the first stage of\n-- GodTossing. It contains encrypted shares and proof of secret.\n-- Invariant which must be ensured: commShares is not empty.\ndata Commitment = Commitment\n    { commExtra  :: !(AsBinary SecretSharingExtra)\n    , commProof  :: !(AsBinary SecretProof)\n    , commShares :: !(HashMap (AsBinary VssPublicKey) (NonEmpty (AsBinary EncShare)))\n    } deriving (Show, Eq, Generic)\n```\n\n| 字段大小                                     | 类型                        | 值 | 描述 |\n|------------------------------------------------|-----------------------------|-------|-------------|\n| 1-9                                            | UVarInt Int                 | n     |             |\n| n \\* (sizeof(VssPublicKey) + sizeof(EncShare)) | HashMapCommShares           |       | commShares  |\n| sizeof(SecretSharingExtra)                     | AsBinary SecretSharingExtra |       | commExtra   |\n| sizeof(SecretProof)                            | AsBinary SecretProof        |       | commProof   |\n\n其中 `HashMapCommShares` =\n`HashMap (AsBinary VssPublicKey) (NonEmpty (AsBinary EncShare))`\n\n消息大小限制：33。\n\n#### CommitmentSignature\n\n``` haskell\n-- | Signature which ensures that commitment was generated by node\n-- with given public key for given epoch.\ntype CommitmentSignature = Signature (EpochIndex, Commitment)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/1bab05d8a199ed6e9af066d4994ef13abdb95da7/godtossing/Pos/Ssc/GodTossing/Core/Types.hs#L73)。\n\n| 字段大小      | 类型                               | 描述                                                                                         |\n|-----------------|------------------------------------|-----------------------------------------------------------------------------------------------------|\n| size(Signature) | Signature (EpochIndex, Commitment) | Signature which ensures that commitment was generated by node with given public key for given epoch |\n\n#### SignedCommitment\n\n``` haskell\ntype SignedCommitment = (PublicKey, Commitment, CommitmentSignature)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/1bab05d8a199ed6e9af066d4994ef13abdb95da7/godtossing/Pos/Ssc/GodTossing/Core/Types.hs#L75)。\n\n| 字段大小                | 类型                | 描述                                       |\n|---------------------------|---------------------|---------------------------------------------------|\n| size(PublicKey)           | PublicKey           | Public key of node that generated this commitment |\n| size(Commitment)          | Commitment          | Commitment                                        |\n| size(CommitmentSignature) | CommitmentSignature | Commitment signature                              |\n\n#### CommitmentsMap\n\n``` haskell\n-- | 'CommitmentsMap' is a wrapper for 'HashMap StakeholderId SignedCommitment'\n-- which ensures that keys are consistent with values, i. e. 'PublicKey'\n-- from 'SignedCommitment' corresponds to key which is 'StakeholderId'.\nnewtype CommitmentsMap = CommitmentsMap\n    { getCommitmentsMap :: HashMap StakeholderId SignedCommitment\n    } deriving (Semigroup, Monoid, Show, Eq, Container, NFData)\n```\n\n| 字段大小                                         | 类型                                   | 值 | 描述                      |\n|----------------------------------------------------|----------------------------------------|-------|----------------------------------|\n| 1-9                                                | UVarInt Int                            | n     | Number of commitments in map     |\n| n * (size(StakeholderId) + size(SignedCommitment)) | HashMap StakeholderId SignedCommitment |       | Commitments map as list of pairs |\n\n#### Opening\n\n``` haskell\n-- | Opening reveals secret.\nnewtype Opening = Opening\n    { getOpening :: (AsBinary Secret)\n    } deriving (Show, Eq, Generic, Buildable, NFData)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/1bab05d8a199ed6e9af066d4994ef13abdb95da7/godtossing/Pos/Ssc/GodTossing/Core/Types.hs#L102)。\n\n| 字段大小   | 类型            | 描述     |\n|--------------|-----------------|-----------------|\n| size(Secret) | AsBinary Secret | Revealed secret |\n\n消息大小限制：33。\n\n#### OpeningsMap\n\n``` haskell\ntype OpeningsMap = HashMap StakeholderId Opening\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/1bab05d8a199ed6e9af066d4994ef13abdb95da7/godtossing/Pos/Ssc/GodTossing/Core/Types.hs#L106)。\n\n| 字段大小                                | 类型                          | 值 | 描述                   |\n|-------------------------------------------|-------------------------------|-------|-------------------------------|\n| 1-9                                       | UVarInt Int                   | n     | Number of openings in map     |\n| n * (size(StakeholderId) + size(Opening)) | HashMap StakeholderId Opening |       | Openings map as list of pairs |\n\n#### VssCertificate\n\n``` haskell\n-- | VssCertificate allows VssPublicKey to participate in MPC.\n-- Each stakeholder should create a Vss keypair, sign VSS public key with signing\n-- key and send it into blockchain.\n--\n-- A public key of node is included in certificate in order to\n-- enable validation of it using only node's P2PKH address.\n-- Expiry epoch is last epoch when certificate is valid, expiry epoch is included\n-- in certificate and signature.\n--\n-- Other nodes accept this certificate if it is valid and if node has\n-- enough stake.\n--\n-- Invariant: 'checkSig vcSigningKey (vcVssKey, vcExpiryEpoch) vcSignature'.\ndata VssCertificate = VssCertificate\n    { vcVssKey      :: !(AsBinary VssPublicKey)\n    , vcExpiryEpoch :: !EpochIndex\n    -- ^ Epoch up to which certificates is valid.\n    , vcSignature   :: !(Signature (AsBinary VssPublicKey, EpochIndex))\n    , vcSigningKey  :: !PublicKey\n    } deriving (Show, Eq, Generic)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/3a6ac3c5aa8d3ca87d8b409d5923e21b744b1e6b/godtossing/Pos/Ssc/GodTossing/Core/Types.hs#L149)。\n\n\n| 字段大小         | 类型                                          | 描述                                                   |\n|--------------------|-----------------------------------------------|---------------------------------------------------------------|\n| size(VssPublicKey) | AsBinary VssPublicKey                         | Public key of stakeholder which is allowed to participate in MPC |\n| size(EpochIndex)   | EpochIndex                                    | Last epoch when certificate is valid                          |\n| size(Signature)    | Signature (AsBinary VssPublicKey, EpochIndex) | Signature                                                     |\n| size(PublicKey)    | PublicKey                                     | Signing key      \n\n消息大小限制：171。\n\n#### VssCertificatesMap\n\n``` haskell\n-- | VssCertificatesMap contains all valid certificates collected\n-- during some period of time.\ntype VssCertificatesMap = HashMap StakeholderId VssCertificate\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/3a6ac3c5aa8d3ca87d8b409d5923e21b744b1e6b/godtossing/Pos/Ssc/GodTossing/Core/Types.hs#L211)。\n\n| 字段大小                                       | 类型                                 | 值 | 描述                           |\n|--------------------------------------------------|--------------------------------------|-------|---------------------------------------|\n| 1-9                                              | UVarInt Int                          | n     | Number of certificates in map         |\n| n * (size(StakeholderId) + size(VssCertificate)) | HashMap StakeholderId VssCertificate |       | Vss certificates map as list of pairs |\n\n### TxProof\n\n``` haskell\ndata TxProof = TxProof\n    { txpNumber            :: !Word32\n    , txpRoot              :: !(MerkleRoot Tx)\n    , txpWitnessesHash     :: !(Hash [TxWitness])\n    , txpDistributionsHash :: !(Hash [TxDistribution])\n    } deriving (Show, Eq, Generic)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/895619d7056fe397e9c2a56d88994f167263c397/txp/Pos/Txp/Core/Types.hs#L262)。\n\n| 字段大小       | 类型          | 描述                          |\n|------------------|---------------|--------------------------------------|\n| 4                | Word32        | Tx proof number                      |\n| size(MerkleRoot) | MerkleRoot Tx | MerkleRoot                           |\n| size(Hash)       | Hash          | Hash of the list of `TxWitness`      |\n| size(Hash)       | Hash          | Hash of the list of `TxDistribution` |\n\n### GtProof\n\n``` haskell\n-- | Proof of MpcData.\n-- We can use ADS for commitments, openings, shares as well,\n-- if we find it necessary.\ndata GtProof\n    = CommitmentsProof !(Hash CommitmentsMap) !(Hash VssCertificatesMap)\n    | OpeningsProof !(Hash OpeningsMap) !(Hash VssCertificatesMap)\n    | SharesProof !(Hash SharesMap) !(Hash VssCertificatesMap)\n    | CertificatesProof !(Hash VssCertificatesMap)\n    deriving (Show, Eq, Generic)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/1bab05d8a199ed6e9af066d4994ef13abdb95da7/godtossing/Pos/Ssc/GodTossing/Core/Types.hs#L232)。\n\n| 标签大小 | 标签类型 | 标签值 | 描述               | 字段大小 | 字段 类型 |\n|----------|----------|-----------|---------------------------|------------|------------|\n| 1        | Word8    | 0x00      | Tag for CommitmentsProof  |            |            |\n|          |          |           |                           | size(Hash) | Hash       |\n|          |          |           |                           | size(Hash) | Hash       |\n|          |          | 0x01      | Tag for OpeningsProof     |            |            |\n|          |          |           |                           | size(Hash) | Hash       |\n|          |          |           |                           | size(Hash) | Hash       |\n|          |          | 0x02      | Tag for SharesProof       |            |            |\n|          |          |           |                           | size(Hash) | Hash       |\n|          |          |           |                           | size(Hash) | Hash       |\n|          |          | 0x03      | Tag for CertificatesProof |            |            |\n|          |          |           |                           | size(Hash) | Hash       |\n\n## 区块头部\n\n### 区块版本\n\n``` haskell\n-- | Communication protocol version.\ndata BlockVersion = BlockVersion\n    { bvMajor :: !Word16\n    , bvMinor :: !Word16\n    , bvAlt   :: !Word8\n    } deriving (Eq, Generic, Ord, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L144)。\n\n| 字段大小 | 类型   | 描述                      |\n|------------|--------|----------------------------------|\n| 2          | Word16 | Major version                    |\n| 2          | Word16 | Minor version                    |\n| 1          | Word8  | Alt version from initial US spec |\n\n### 软件版本\n\n``` haskell\nnewtype ApplicationName = ApplicationName\n    { getApplicationName :: Text\n    } deriving (Eq, Ord, Show, Generic, Typeable, ToString, Hashable, Buildable, NFData)\n\n-- | Numeric software version associated with ApplicationName.\ntype NumSoftwareVersion = Word32\n\n-- | Software version.\ndata SoftwareVersion = SoftwareVersion\n    { svAppName :: !ApplicationName\n    , svNumber  :: !NumSoftwareVersion\n    } deriving (Eq, Generic, Ord, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L170)。\n\n| 字段大小 | 类型        | 值 | 描述                                     |\n|------------|-------------|-------|-------------------------------------------------|\n| 1          | UVarInt Int | n     | Length of application name (should be &lt;= 10) |\n| n          | Word8\\[n\\]  |       | `svAppName`: UTF8 encoded application name      |\n| 4          | Word32      |       | `svNumber`                                      |\n\n### 主区块头部\n\n<!-- TODO: Replace all Main* and Genesis* by type (*Blockchain) -->\n\n| 字段大小                | 类型                | 描述         |\n|---------------------------|---------------------|---------------------|\n| 4                         | Word32              | Protocol magic      |\n| size(HeaderHash)          | HeaderHash          | Previous block hash |\n| size(MainProof)           | MainProof           | Body proof          |\n| size(MainConsensusData)   | MainConsensusData   | Consensus data      |\n| size(MainExtraHeaderData) | MainExtraHeaderData | MainExtraHeaderData |\n\n#### MainProof\n\n``` haskell\ntype SscProof SscGodTossing = GtProof\n\n-- | Proof that body of update message contains 'UpdatePayload'.\ntype UpdateProof = Hash UpdatePayload\n\n-- | Proof of everything contained in the payload.\ndata BodyProof (MainBlockchain ssc) = MainProof\n    { mpTxProof       :: !TxProof\n    , mpMpcProof      :: !(SscProof ssc)\n    , mpProxySKsProof :: !(Hash DlgPayload)\n    , mpUpdateProof   :: !UpdateProof\n    } deriving (Generic)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/2198551433ec666f2df400d49b87ced13f3bcbee/src/Pos/Block/Core/Main/Chain.hs#L42)。\n\n| 字段大小    | 类型         | 描述     |\n|---------------|--------------|-----------------|\n| size(TxProof) | TxProof      | mpTxProof       |\n| size(GtProof) | SscProof ssc | mpMpcProof      |\n| size(Hash)    | Hash         | mpProxySKsProof |\n| size(Hash)    | Hash         | mpUpdateProof   |\n\n#### MainConsensusData\n\n``` haskell\ndata ConsensusData (MainBlockchain ssc) = MainConsensusData\n    { -- | Id of the slot for which this block was generated.\n      _mcdSlot       :: !SlotId\n    , -- | Public key of the slot leader. It's essential to have it here,\n      -- because FTS gives us only hash of public key (aka 'StakeholderId').\n      _mcdLeaderKey  :: !PublicKey\n    , -- | Difficulty of chain ending in this block.\n      _mcdDifficulty :: !ChainDifficulty\n    , -- | Signature given by slot leader.\n      _mcdSignature  :: !(BlockSignature ssc)\n    } deriving (Generic, Show, Eq)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/2198551433ec666f2df400d49b87ced13f3bcbee/src/Pos/Block/Core/Main/Chain.hs#L48)。\n\n| 字段大小            | 类型            | 描述   |\n|-----------------------|-----------------|---------------|\n| size(SlotId)          | SlotId          | mcdSlot       |\n| size(PublicKey)       | PublicKey       | mcdLeaderKey  |\n| size(ChainDifficulty) | ChainDifficulty | mcdDifficulty |\n| 64                    | BlockSignature  | mcdSignature  |\n\n#### MainExtraHeaderData\n\n``` haskell\n-- | Represents main block header attributes: map from 1-byte integer to\n-- arbitrary-type value. To be used for extending header with new\n-- fields via softfork.\ntype BlockHeaderAttributes = Attributes ()\n\n-- | Represents main block header extra data\ndata MainExtraHeaderData = MainExtraHeaderData\n    { -- | Version of block.\n      _mehBlockVersion    :: !BlockVersion\n    , -- | Software version.\n      _mehSoftwareVersion :: !SoftwareVersion\n    , -- | Header attributes\n      _mehAttributes      :: !BlockHeaderAttributes\n    } deriving (Eq, Show, Generic)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/3a6ac3c5aa8d3ca87d8b409d5923e21b744b1e6b/src/Pos/Block/Core/Main/Types.hs#L73)。\n\n| 字段大小                  | 类型                  | 描述                                                                |\n|-----------------------------|-----------------------|----------------------------------------------------------------------------|\n| size(BlockVersion)          | BlockVersion          | Version of block                                                           |\n| size(SoftwareVersion)       | SoftwareVersion       | Software version                                                           |\n| size(BlockHeaderAttributes) | BlockHeaderAttributes | Header attributes (used for extending header with new fields via softfork) |\n\n### GenesisBlockHeader\n\n``` haskell\n-- | Header of block contains some kind of summary. There are various\n-- benefits which people get by separating header from other data.\n--\n-- The constructor has `Unsafe' prefix in its name, because there in\n-- general there may be some invariants which must hold for the\n-- contents of header.\ndata GenericBlockHeader b = UnsafeGenericBlockHeader\n    { -- | Pointer to the header of the previous block.\n      _gbhPrevBlock :: !(BHeaderHash b)\n    , -- | Proof of body.\n      _gbhBodyProof :: !(BodyProof b)\n    , -- | Consensus data to verify consensus algorithm.\n      _gbhConsensus :: !(ConsensusData b)\n    , -- | Any extra data.\n      _gbhExtra     :: !(ExtraHeaderData b)\n    } deriving (Generic)\n\n-- | Header of Genesis block.\ntype GenesisBlockHeader ssc = GenericBlockHeader (GenesisBlockchain ssc)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/b4b2c282b0e2a2e4415163e70dcb559396a2237c/src/Pos/Block/Core/Genesis/Types.hs#L63)。\n\n| 字段大小                 | 类型              | 描述                                  |\n|----------------------------|-------------------|----------------------------------------------|\n| 4                          | BHeaderHash b     | Pointer to the header of the previous block  |\n| 32                         | BodyProof b       | Proof of body                                |\n| size(GenesisProof)         | ConsensusData b   | Consensus data to verify consensus algorithm |\n| size(GenesisConsensusData) | ExtraHeaderData b | Any extra data                               |\n\n其中 `b` = `GenesisBlockchain ssc`。\n\n#### GenesisProof\n\n``` haskell\n-- | Proof of GenesisBody is just a hash of slot leaders list.\ndata BodyProof (GenesisBlockchain ssc) = GenesisProof\n    !(Hash SlotLeaders)\n    deriving (Eq, Generic, Show)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/b4b2c282b0e2a2e4415163e70dcb559396a2237c/src/Pos/Block/Core/Genesis/Chain.hs#L28)。\n\n| 字段大小 | 类型 | 描述               |\n|------------|------|---------------------------|\n| size(Hash) | Hash | Hash of slot leaders list |\n\n#### GenesisConsensusData\n\n``` haskell\ndata ConsensusData (GenesisBlockchain ssc) = GenesisConsensusData\n    { -- | Index of the slot for which this genesis block is relevant.\n      _gcdEpoch :: !EpochIndex\n    , -- | Difficulty of the chain ending in this genesis block.\n      _gcdDifficulty :: !ChainDifficulty\n    } deriving (Generic, Show, Eq)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/b4b2c282b0e2a2e4415163e70dcb559396a2237c/src/Pos/Block/Core/Genesis/Chain.hs#L31)。\n\n| 字段大小            | 类型            | 描述                                             |\n|-----------------------|-----------------|---------------------------------------------------------|\n| size(EpochIndex)      | EpochIndex      | Index of epoch for which this genesis block is relevant |\n| size(ChainDifficulty) | ChainDifficulty | Difficulty of the chain ending in this genesis block.   |\n\n### BlockHeader\n\n``` haskell\n-- | Either header of ordinary main block or genesis block.\ntype BlockHeader ssc = Either (GenesisBlockHeader ssc) (MainBlockHeader ssc)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/f571087e5b5af339767198141981c850227ca99c/src/Pos/Block/Core/Union/Types.hs#L39)。\n\n| 标签大小 | 标签类型 | 标签值 | 描述                  | 字段大小               |\n|----------|----------|-----------|------------------------------|--------------------------|\n| 1        | Word8    | 0x00      | Tag for `GenesisBlockHeader` |                          |\n|          |          |           |                              | size(GenesisBlockHeader) |\n|          |          | 0x01      | Tag for `MainBlockHeader`    |                          |\n|          |          |           |                              | size(MainBlockHeader)    |\n\n### 区块\n\n``` haskell\n-- | Either genesis block or main block.\ntype Block ssc = Either (GenesisBlock ssc) (MainBlock ssc)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/f571087e5b5af339767198141981c850227ca99c/src/Pos/Block/Core/Union/Types.hs#L42)。\n\n| 标签大小 | 标签类型 | 标签值 | 描述            | 字段大小         |\n|----------|----------|-----------|------------------------|--------------------|\n| 1        | Word8    | 0x00      | Tag for `GenesisBlock` |                    |\n|          |          |           |                        | size(GenesisBlock) |\n|          |          | 0x01      | Tag for `MainBlock`    |                    |\n|          |          |           |                        | size(MainBlock)    |\n\n## 区块交换信息\n\n### HeaderHash\n\n``` haskell\n-- | 'Hash' of block header. This should be @Hash (BlockHeader ssc)@\n-- but we don't want to have @ssc@ in 'HeaderHash' type.\ntype HeaderHash = Hash BlockHeaderStub\ndata BlockHeaderStub\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/2198551433ec666f2df400d49b87ced13f3bcbee/core/Pos/Core/Types.hs#L223)。\n\n### GetHeaders\n\n``` haskell\n-- | 'GetHeaders' message. Behaviour of the response depends on\n-- particular combination of 'mghFrom' and 'mghTo'.\n--\n-- * 'mghTo' resolves to some header (let's call it @top@ for\n-- convenience) -- node's tip if it's @Nothing@, header with hash in\n-- @Just@ if it's @Just@.\n--\n-- * If 'mghFrom' is empty, then semantics is \"request to return\n-- header of block @top@\".\n--\n-- * Otherwise (if 'mghFrom' isn't empty) it represents the set of\n-- checkpoints. Responding node will try to iterate headers from @top@\n-- to older until it reaches any checkpoint. If it finds checkpoint\n-- @c@, it returns all headers in range @[c.next..top]@. If it doesn't\n-- find any checkpoint or depth of searching exceeds\n-- 'recoveryHeadersMessage', it will try to find the newest checkpoint\n-- @cc@ from 'mghFrom' that's in main chain of responding node and\n-- then return at most 'recoveryHeadersMessage' headers starting with\n-- @cc@ as the oldest one, returning headers in range @l2 =\n-- [cc.next..x]@ where @x@ is either @top@ (in case @length l2 <\n-- recoveryHeadersMessage@) or some arbitrary header (and length is\n-- precisely 'recoveryHeadersMessage').\ndata MsgGetHeaders = MsgGetHeaders\n    { -- not guaranteed to be in any particular order\n      mghFrom :: ![HeaderHash]\n    , mghTo   :: !(Maybe HeaderHash)\n    } deriving (Generic, Show, Eq)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/c8620af754252ebb71b1f5bc369b4f672f46d537/src/Pos/Block/Network/Types.hs#L42)。\n\n| 字段大小        | 类型        | 值              | 描述                                  |\n|-------------------|-------------|--------------------|----------------------------------------------|\n| 1-9               | UVarInt Int | n                  | Number of checkpoints                        |\n| n \\* size(Hash)   | Hash\\[n\\]   |                    | List of length `n` with hashes               |\n| 1                 | Word8       | tag = 0x00 or 0x01 | Tag for optional `to` hash                   |\n| tag \\* size(Hash) | Hash        |                    | If tag is not `0x00` then hash of `to` block |\n\n### GetBlocks\n\n``` haskell\n-- | 'GetBlocks' message (see protocol specification).\ndata MsgGetBlocks = MsgGetBlocks\n    { mgbFrom :: !HeaderHash\n    , mgbTo   :: !HeaderHash\n    } deriving (Generic, Show, Eq)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/c8620af754252ebb71b1f5bc369b4f672f46d537/src/Pos/Block/Network/Types.hs#L54)。\n\n| 字段大小 | 类型 | 字段     |\n|------------|------|-----------|\n| size(Hash) | Hash | `mgbFrom` |\n| size(Hash) | Hash | `mgbTo`   |\n\n### Headers\n\n``` haskell\n-- | 'Headers' message (see protocol specification).\nnewtype MsgHeaders ssc =\n    MsgHeaders (NewestFirst NE (BlockHeader ssc))\n    deriving (Generic, Show, Eq)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/c8620af754252ebb71b1f5bc369b4f672f46d537/src/Pos/Block/Network/Types.hs#L65)。\n\n| 字段大小             | 类型             | 值 | 描述             |\n|------------------------|------------------|-------|-------------------------|\n| 1-9                    | UVarInt Int      | n     | Number of block headers |\n| n \\* size(BlockHeader) | BlockHeader\\[n\\] |       | `n` block headers       |\n\n### Block\n\n``` haskell\n-- | 'Block' message (see protocol specification).\nnewtype MsgBlock ssc =\n    MsgBlock (Block ssc)\n    deriving (Generic, Show)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/c8620af754252ebb71b1f5bc369b4f672f46d537/src/Pos/Block/Network/Types.hs#L70)。\n\n| 字段大小  | 类型          | 值 | 描述                    |\n|-------------|---------------|-------|--------------------------------|\n| 1-9         | UVarInt Int64 | n     | Size of `Block` in bytes       |\n| size(Block) | Block         |       | `Block` with size of `n` bytes |\n\n包含一个 `Block`。我们对区块大小进行编码，然后对区块进行编码，以便在不消耗整个区块的情况下，如果大小错误，我们可以拒绝区块。\n\n## Transaction sending\n\n要发送转账，您需要创建 `TxAux` 数据类型并将其发送到节点。本节介绍了成功执行发送所需的所有数据类型。\n\n### Transaction input\n\n``` haskell\n-- | Represents transaction identifier as 'Hash' of 'Tx'.\ntype TxId = Hash Tx\n\n-- | Transaction input.\ndata TxIn = TxIn\n    { -- | Which transaction's output is used\n      txInHash  :: !TxId\n      -- | Index of the output in transaction's outputs\n    , txInIndex :: !Word32\n    } deriving (Eq, Ord, Show, Generic, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/895619d7056fe397e9c2a56d88994f167263c397/txp/Pos/Txp/Core/Types.hs#L147)。\n\n| 字段大小 | 类型   | 字段 name |\n|------------|--------|------------|\n| size(Hash) | Hash   | txInHash   |\n| 4          | Word32 | txInIndex  |\n\n### 转账输出\n\n``` haskell\n-- | Transaction output.\ndata TxOut = TxOut\n    { txOutAddress :: !Address\n    , txOutValue   :: !Coin\n    } deriving (Eq, Ord, Generic, Show, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/895619d7056fe397e9c2a56d88994f167263c397/txp/Pos/Txp/Core/Types.hs#L160)。\n\n| 字段大小    | 类型    | 字段 name   |\n|---------------|---------|--------------|\n| size(Address) | Address | txOutAddress |\n| size(Coin)    | Coin    | txOutValue   |\n\n例子：\n\n    ghci> let addr = PubKeyAddress (abstractHash somePk) (Attributes (AddrPkAttrs Nothing) \"a\")\n    ghci> hexEncode addr\n    \"001e380dea393a631ad563154a13bc5ee49fa4b62a60218358b5dcb875e00161cf52c5ec\"\n    ghci> hexEncode $ TxOut addr (mkCoin 1000)\n    \"001e380dea393a631ad563154a13bc5ee49fa4b62a60218358b5dcb875e00161cf52c5ec0064\"\n\n### 转账输出分配\n\n``` haskell\ntype TxOutDistribution = [(StakeholderId, Coin)]\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/src/Pos/Txp/Core/Types.hs#L129)。\n\n定义 `distr_size(n) = n * (size(Hash) + size(Coin))`。\n\n| 字段大小     | 类型             | 描述                               |\n|----------------|------------------|-------------------------------------------|\n| distr\\_size(n) | <Hash,Coin>\\[n\\] | Array of pairs for StakeholderId and Coin |\n\n### 转账输出辅助词\n\n``` haskell\n-- | Transaction output and auxilary data corresponding to it.\ndata TxOutAux = TxOutAux\n    { toaOut   :: !TxOut             -- ^ Tx output\n    , toaDistr :: !TxOutDistribution -- ^ Stake distribution\n                                     -- associated with output\n    } deriving (Show, Eq)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/src/Pos/Txp/Core/Types.hs#L173)。\n\n| 字段大小              | 类型              | 字段 name |\n|-------------------------|-------------------|------------|\n| size(TxOut)             | TxOut             | toaOut     |\n| size(TxOutDistribution) | TxOutDistribution | toaDistr   |\n\n### 转账签名数据\n\n``` haskell\n-- | Data that is being signed when creating a TxSig.\ndata TxSigData = TxSigData\n    { -- | Input that we're signing (i.e. our signature certifies that we own\n      -- funds referenced by this input)\n      txSigInput     :: !TxIn\n      -- | Outputs of the transaction (i.e. our signature certifies that we\n      -- actually want the funds to go to these particular outputs)\n    , txSigOutsHash  :: !(Hash (NonEmpty TxOut))\n      -- | Distribution of the transaction\n    , txSigDistrHash :: !(Hash TxDistribution)\n    }\n    deriving (Eq, Show, Generic, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/src/Pos/Txp/Core/Types.hs#L80)。\n\n| 字段大小 | 类型 | 描述    |\n|------------|------|----------------|\n| size(TxIn) | TxIn | txSigInput     |\n| size(Hash) | Hash | txSigOutsHash  |\n| size(Hash) | Hash | txSigDistrHash |\n\n### 转账见证\n\n``` haskell\n-- | 'Signature' of addrId.\ntype TxSig = Signature TxSigData\n\n-- | A witness for a single input.\ndata TxInWitness\n    = PkWitness { twKey :: !PublicKey\n                , twSig :: !TxSig }\n    | ScriptWitness { twValidator :: !Script\n                    , twRedeemer  :: !Script }\n    | RedeemWitness { twRedeemKey :: !RedeemPublicKey\n                    , twRedeemSig :: !(RedeemSignature TxSigData) }\n    | UnknownWitnessType !Word8 !ByteString\n    deriving (Eq, Show, Generic, Typeable)\n\n-- | A witness is a proof that a transaction is allowed to spend the funds it\n-- spends (by providing signatures, redeeming scripts, etc). A separate proof\n-- is provided for each input.\ntype TxWitness = Vector TxInWitness\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/src/Pos/Txp/Core/Types.hs#L96)。\n\n| 标签大小 | 标签类型 | 标签值 | 描述                | 字段大小            | 字段 类型                | 字段 name  |\n|----------|----------|-----------|----------------------------|-----------------------|---------------------------|-------------|\n| 1        | Word8    | 0x00      | Tag for PkWitness          |                       |                           |             |\n|          |          |           |                            | size(PublicKey)       | PublicKey                 | twKey       |\n|          |          |           |                            | 64                    | TxSig                     | twSig       |\n|          |          | 0x01      | Tag for ScriptWitness      |                       |                           |             |\n|          |          |           |                            | size(Script)          | Script                    | twValidator |\n|          |          |           |                            | size(Script)          | Script                    | twRedeemer  |\n|          |          | 0x02      | Tag for RedeemWitness      |                       |                           |             |\n|          |          |           |                            | size(RedeemPublicKey) | RedeemPublicKey           | twRedeemKey |\n|          |          |           |                            | size(RedeemSignature) | RedeemSignature TxSigData | twRedeemSig |\n|          |          | 0x03      | Tag for UnknownWitnessType |                       |                           |             |\n|          |          |           |                            | 1                     | Word8                     |             |\n|          |          |           |                            |                       | ByteString                |             |\n\n### 转账\n\n``` haskell\n-- | Transaction.\ndata Tx = UnsafeTx\n    { _txInputs     :: !(NonEmpty TxIn)  -- ^ Inputs of transaction.\n    , _txOutputs    :: !(NonEmpty TxOut) -- ^ Outputs of transaction.\n    , _txAttributes :: !TxAttributes     -- ^ Attributes of transaction\n    } deriving (Eq, Ord, Generic, Show, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/src/Pos/Txp/Core/Types.hs#L196)。\n\n| 字段大小         | 类型         | 值 | 描述                   |\n|--------------------|--------------|-------|-------------------------------|\n| 1-9                | UVarInt Int  | n     | Number of transaction inputs  |\n| n \\* size(TxIn)    | TxIn\\[n\\]    |       | Array of transaction inputs   |\n| 1-9                | UVarInt Int  | m     | Number of transaction outputs |\n| m \\* size(TxOut)   | TxOut\\[m\\]   |       | Array of transaction outputs  |\n| size(TxAttributes) | TxAttributes |       | Attributes of transaction     |\n\n### 转账分发\n\n``` haskell\n-- | Distribution of “fake” stake that follow-the-satoshi would use\n-- for a particular transaction.  Length of stored list must be same\n-- as length of '_txOutputs' of corresponding transaction.\nnewtype TxDistribution = TxDistribution\n    { getTxDistribution :: NonEmpty TxOutDistribution\n    } deriving (Eq, Show, Generic, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/src/Pos/Txp/Core/Types.hs#L134)。\n\n虽然转账分发可以使用前面的序列化策略来作为列表的列表存储，但经常发生我们通过了空列表的列表的情况。在这种情况下，我们应该更有效地存储这些列表。\n\n| 标签大小 | 标签类型 | 标签值 | 描述              | 字段大小     | 字段 类型       | 值 |\n|----------|----------|-----------|--------------------------|----------------|------------------|-------|\n| 1        | Word8    | 0x00      | List of empty lists      |                |                  |       |\n|          |          |           |                          | 1-9            | UVarInt Int      |       |\n|          |          | 0x01      | Some lists are not empty |                |                  |       |\n|          |          |           |                          | 1-9            | UVarInt Int      | n     |\n|          |          |           |                          | distr\\_size(n) | <Hash,Coin>\\[n\\] |       |\n\n### 转账分配\n\n``` haskell\n-- | Transaction + auxiliary data\ndata TxAux = TxAux\n    { taTx           :: !Tx\n    , taWitness      :: !TxWitness\n    , taDistribution :: !TxDistribution\n    } deriving (Generic, Show, Eq)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/ab543154d3ff34d3432620ac2557187d124b7d4f/txp/Pos/Txp/Core/Types.hs#L205)。\n\n| 字段大小           | 类型           | 描述              |\n|----------------------|----------------|--------------------------|\n| size(Tx)             | Tx             | Transaction itself       |\n| size(TxWitness)      | TxWitness      | Witness for transaction  |\n| size(TxDistribution) | TxDistribution | Transaction distribution |\n\n<!-- TODO: describe full creation of transaction by bytes -->\n\n## 委派\n\n请阅读[委派信息](/technical/protocols/csl-application-level/#delegation-messages)机制的解释，在这里你只能找到消息格式的描述。\n\n### 代理证书\n\n类似于 `Signature`\n\n``` haskell\n-- | Proxy certificate, made of ω + public key of delegate.\nnewtype ProxyCert w = ProxyCert { unProxyCert :: CC.XSignature }\n    deriving (Eq, Ord, Show, Generic, NFData, Hashable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Crypto/Signing.hs#L209)。\n\n| 字段大小 | 类型        | 描述                                 |\n|------------|-------------|---------------------------------------------|\n| 64         | Word8\\[64\\] | `unProxyCert`: 64 bytes of signature string |\n\n消息大小限制：64。\n\n例子：\n\n    ghci> (issuerPk, issuerSk) <- keyGen\n    ghci> hexEncode issuerPk\n    \"0659c8e27599dc4709dab3bb58ce50d0729150fc238010fd3a68dcf07c621bdc\"\n    ghci> (delegatePk, delegateSk) <- keyGen\n    ghci> hexEncode delegatePk\n    \"5eaf0944733da8386c427656a876b20ae411fa686ea4bb165b53a311c868c287\"\n    ghci> let cert = createProxyCert issuerSk delegatePk (0, 10) :: ProxyCert (EpochIndex, EpochIndex)\n    ghci> hexEncode cert\n    \"8db543c5fff7dd5dab609d04a834cda77958faf48cabee351def8985a2ec7dae71c7b2f0390caa54c61c9d41f5228e1a0b5da1c08638b99d03a1c02c81cb1607\"\n    ghci> verifyProxyCert issuerPk delegatePk (0, 10) cert\n    True\n\n### 代理密钥\n\n``` haskell\n-- | Convenient wrapper for secret key, that's basically ω + certificate.\ndata ProxySecretKey w = ProxySecretKey\n    { pskOmega      :: w\n    , pskIssuerPk   :: PublicKey\n    , pskDelegatePk :: PublicKey\n    , pskCert       :: ProxyCert w\n    } deriving (Eq, Ord, Show, Generic)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Crypto/Signing.hs#L224)。\n\n| 字段大小      | 类型        | 描述   |\n|-----------------|-------------|---------------|\n| size(w)         | w           | pskOmega      |\n| size(PublicKey) | PublicKey   | pskIssuerPk   |\n| size(PublicKey) | PublicKey   | pskDelegatePk |\n| size(ProxyCert) | ProxyCert w | pskCert       |\n\n### 代理签名\n\n``` haskell\n-- | Delegate signature made with certificate-based permission. @w@\n-- stays for message type used in proxy (ω in the implementation\n-- notes), @a@ for type of message signed.\ndata ProxySignature w a = ProxySignature\n    { psigPsk :: ProxySecretKey w\n    , psigSig :: CC.XSignature\n    } deriving (Eq, Ord, Show, Generic)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Crypto/Signing.hs#L256)。\n\n| 字段大小     | 类型           | 描述 |\n|----------------|----------------|-------------|\n| size(PproxySK) | ProxySecretKey | psigPsk     |\n| 64             | XSignature     | psigSig     |\n\n### 代理密钥和轻量级委派的签名\n\n**警告：目前，轻量级委派被禁用，并在 [Shelley 版本](https://cardanoroadmap.com/)进行了重新编写，因此一下信息可能已过时。**\n\n#### 密钥\n\n``` haskell\n-- | Same alias for the proxy secret key (see 'ProxySigLight').\ntype ProxySKLight = ProxySecretKey (EpochIndex, EpochIndex)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L238)。\n\n| 字段大小      | 类型                               | 描述   |\n|-----------------|------------------------------------|---------------|\n| 1-10            | UVarInt Word64                     | from epoch    |\n| 1-10            | UVarInt Word64                     | to epoch      |\n| size(PublicKey) | PublicKey                          | pskIssuerPk   |\n| size(PublicKey) | PublicKey                          | pskDelegatePk |\n| 64              | ProxyCert (EpochIndex, EpochIndex) | pskCert       |\n\n例子：\n\n    ghci> let proxySk = createProxySecretKey issuerSk delegatePk (0, 10) :: ProxySKLight\n    ghci> hexEncode proxySk\n    \"000a0659c8e27599dc4709dab3bb58ce50d0729150fc238010fd3a68dcf07c621bdc5eaf0944733da8386\n    c427656a876b20ae411fa686ea4bb165b53a311c868c2878db543c5fff7dd5dab609d04a834cda77958faf\n    48cabee351def8985a2ec7dae71c7b2f0390caa54c61c9d41f5228e1a0b5da1c08638b99d03a1c02c81cb1607\"\n    ghci> verifyProxySecretKey proxySk\n    True\n\n#### 签名\n\n``` haskell\n-- | Proxy signature used in csl -- holds a pair of epoch\n-- indices. Block is valid if it's epoch index is inside this range.\ntype ProxySigLight a = ProxySignature (EpochIndex, EpochIndex) a\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L235)。\n\n| 字段大小      | 类型                               | 描述  |\n|-----------------|------------------------------------|--------------|\n| 1-10            | UVarInt Word64                     | from epoch   |\n| 1-10            | UVarInt Word64                     | to epoch     |\n| size(PublicKey) | PublicKey                          | pdDelegatePk |\n| 64              | ProxyCert (EpochIndex, EpochIndex) | pdCert       |\n| 64              | Signature                          | pdSig        |\n\n例子\n\n    ghci> let proxyLightSig = proxySign delegateSk proxySk proxySk :: ProxySigLight ProxySKLight\n    ghci> hexEncode proxyLightSig\n    \"000a5eaf0944733da8386c427656a876b20ae411fa686ea4bb165b53a311c868c2878db543c5fff7dd5dab609d04a\n    834cda77958faf48cabee351def8985a2ec7dae71c7b2f0390caa54c61c9d41f5228e1a0b5da1c08638b99d03a1c02\n    c81cb1607e764468529599312ebe4dd5587383e5ccd3c2755401b22c8ff08827ecabd1afc8c634e17085ec83179193\n    afad2868e6aabce3e3e46e3170d077ee4e8613aa700\"\n    ghci> proxyVerify issuerPk proxyLightSig (== (0, 10)) proxySk\n    True\n\n### 代理密钥和重量级代理签名\n\n#### 密钥\n\n``` haskell\n-- | Correspondent SK for no-ttl proxy signature scheme.\ntype ProxySKHeavy = ProxySecretKey EpochIndex\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L247)。\n\n| 字段大小      | 类型                 | 描述   |\n|-----------------|----------------------|---------------|\n| 1-10            | UVarInt Word64       | epoch         |\n| size(PublicKey) | PublicKey            | pskIssuerPk   |\n| size(PublicKey) | PublicKey            | pskDelegatePk |\n| 64              | ProxyCert EpochIndex | pskCert       |\n\n#### 签名\n\n``` haskell\n-- | Simple proxy signature without ttl/epoch index\n-- constraints. 'EpochIndex' inside is needed for replay attack\n-- prevention.\ntype ProxySigHeavy a = ProxySignature EpochIndex a\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L244)。\n\n| 字段大小      | 类型                 | 描述  |\n|-----------------|----------------------|--------------|\n| 1-10            | UVarInt Word64       | epoch        |\n| size(PublicKey) | PublicKey            | pdDelegatePk |\n| 64              | ProxyCert EpochIndex | pdCert       |\n| 64              | Signature            | pdSig        |\n\n### 轻量级委派确认\n\n**警告：目前，轻量级委派被禁用，并在 [Shelley 版本](https://cardanoroadmap.com/)进行了重新编写，因此一下信息可能已过时。**\n\n#### ProxySKLightConfirmation\n\n``` haskell\n-- | Confirmation of light cert type.\ntype ProxySKLightConfirmation = (ProxySKLight, ProxySigLight ProxySKLight)\n```\n\n| 字段大小          | 描述           |\n|---------------------|-----------------------|\n| size(ProxySKLight)  | Certificate           |\n| size(ProxySigLight) | Proof for certificate |\n\n## 更新系统\n\n### 更新投票\n\n``` haskell\n-- | ID of software update proposal\ntype UpId = Hash UpdateProposal\n\n-- | Vote for update proposal\ndata UpdateVote = UpdateVote\n    { -- | Public key of stakeholder, who votes\n      uvKey        :: !PublicKey\n    , -- | Proposal to which this vote applies\n      uvProposalId :: !UpId\n    , -- | Approval/rejection bit\n      uvDecision   :: !Bool\n    , -- | Signature of (Update proposal, Approval/rejection bit)\n      --   by stakeholder\n      uvSignature  :: !(Signature (UpId, Bool))\n    } deriving (Eq, Show, Generic, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/fbe9760bd50ea136203e54d578d62ed3070b5513/update/Pos/Update/Core/Types.hs#L255)。\n\n| 字段大小      | 类型      | 字段        |\n|-----------------|-----------|--------------|\n| size(PublicKey) | PublicKey | uvKey        |\n| size(Hash)      | Hash      | uvProposalId |\n| 1               | Bool      | uvDecision   |\n| 64              | Signature | uvSignature  |\n\n### 投票标识符\n\n``` haskell\ntype VoteId = (UpId, PublicKey, Bool)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/fbe9760bd50ea136203e54d578d62ed3070b5513/update/Pos/Update/Core/Types.hs#L252)。\n\n| 字段大小      | 类型      | 描述             |\n|-----------------|-----------|-------------------------|\n| size(Hash)      | Hash      | Hash of update proposal |\n| size(PublicKey) | PublicKey | Public key              |\n| 1               | Bool      | Vote result             |\n\n有关字段的更多描述，请参阅 *UpdateVote* 消息描述。`VoteId` 是 `(uvProposalId, uvKey, uvDecision)`。\n\n### 区块版本数据\n\n``` haskell\n-- | Data which is associated with 'BlockVersion'.\ndata BlockVersionData = BlockVersionData\n    { bvdScriptVersion     :: !ScriptVersion\n    , bvdSlotDuration      :: !Millisecond\n    , bvdMaxBlockSize      :: !Byte\n    , bvdMaxHeaderSize     :: !Byte\n    , bvdMaxTxSize         :: !Byte\n    , bvdMaxProposalSize   :: !Byte\n    , bvdMpcThd            :: !CoinPortion\n    , bvdHeavyDelThd       :: !CoinPortion\n    , bvdUpdateVoteThd     :: !CoinPortion\n    , bvdUpdateProposalThd :: !CoinPortion\n    , bvdUpdateImplicit    :: !FlatSlotId\n    , bvdUpdateSoftforkThd :: !CoinPortion\n    } deriving (Show, Eq, Generic, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L201)。\n\n| 字段大小    | 类型           | 字段                |\n|---------------|----------------|----------------------|\n| 1-3           | UVarInt Word16 | bvdScriptVersion     |\n| size(Integer) | Integer        | bvdSlotDuration      |\n| size(Integer) | Integer        | bvdMaxBlockSize      |\n| size(Integer) | Integer        | bvdMaxHeaderSize     |\n| size(Integer) | Integer        | bvdMaxTxSize         |\n| size(Integer) | Integer        | bvdMaxProposalSize   |\n| 8             | Word64         | bvdMpcThd            |\n| 8             | Word64         | bvdHeavyDelThd       |\n| 8             | Word64         | bvdUpdateVoteThd     |\n| 8             | Word64         | bvdUpdateProposalThd |\n| 8             | Word64         | bvdUpdateImplicit    |\n| 8             | Word64         | bvdUpdateSoftforkThd |\n\n### 更新数据\n\n``` haskell\n-- | Data which describes update. It is specific for each system.\ndata UpdateData = UpdateData\n    { udAppDiffHash  :: !(Hash Raw)\n    -- ^ Hash of binary diff between two applications. This diff can\n    -- be passed to updater to create new application.\n    , udPkgHash      :: !(Hash Raw)\n    -- ^ Hash of package to install new application. This package can\n    -- be used to install new application from scratch instead of\n    -- updating existing application.\n    , udUpdaterHash  :: !(Hash Raw)\n    -- ^ Hash if update application which can be used to install this\n    -- update (relevant only when updater is used, not package).\n    , udMetadataHash :: !(Hash Raw)\n    -- ^ Hash of metadata relevant to this update.  It is raw hash,\n    -- because metadata can include image or something\n    -- (maybe). Anyway, we can always use `unsafeHash`.\n    } deriving (Eq, Show, Generic, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/update/Pos/Update/Core/Types.hs#L224)。\n\n| 字段大小 | 类型 | 字段          |\n|------------|------|----------------|\n| size(Hash) | Hash | udAppDiffHash  |\n| size(Hash) | Hash | udPkgHash      |\n| size(Hash) | Hash | udUpdaterHash  |\n| size(Hash) | Hash | udMetadataHash |\n\n### 系统标签\n\n``` haskell\n-- | Tag of system for which update data is purposed, e.g. win64, mac32\nnewtype SystemTag = SystemTag { getSystemTag :: Text }\n  deriving (Eq, Ord, Show, Generic, Buildable, Hashable, Lift, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/update/Pos/Update/Core/Types.hs#L81)。\n\n`SystemTag` 按 UTF-8 编码为 `ByteString`。\n\n| 字段大小 | 类型          | 值 | 字段                           |\n|------------|---------------|-------|---------------------------------|\n| 1-9        | UVarInt Int64 | n     | Size of text in bytes           |\n| n          | Word8\\[n\\]    |       | `n` bytes of UTF-8 encoded text |\n\n### 更新协议\n\n``` haskell\ntype UpAttributes = Attributes ()\n\n-- | Proposal for software update\ndata UpdateProposal = UnsafeUpdateProposal\n    { upBlockVersion     :: !BlockVersion\n    , upBlockVersionData :: !BlockVersionData\n    , upSoftwareVersion  :: !SoftwareVersion\n    , upData             :: !(HM.HashMap SystemTag UpdateData)\n    -- ^ UpdateData for each system which this update affects.\n    -- It must be non-empty.\n    , upAttributes       :: !UpAttributes\n    -- ^ Attributes which are currently empty, but provide\n    -- extensibility.\n    , upFrom             :: !PublicKey\n    -- ^ Who proposed this UP.\n    , upSignature        :: !(Signature UpdateProposalToSign)\n    } deriving (Eq, Show, Generic, Typeable)\n```\n\n| 字段大小                                | 类型                           | 值 | 字段              |\n|-------------------------------------------|--------------------------------|-------|--------------------|\n| 5                                         | BlockVersion                   |       | upBlockVersion     |\n| size(BlockVersionData)                    | BlockVersionData               |       | upBlockVersionData |\n| size(SoftwareVersion)                     | SoftwareVersion                |       | upSoftwareVersion  |\n| 1-9                                       | UVarInt Int                    | n     |                    |\n| n \\* (size(SystemTag) + size(UpdateData)) | <SystemTag, UpdateData>\\[n\\]   |       | upData             |\n| size(Attributes ())                       | Attributes ()                  |       | upAttributes       |\n| size(PublicKey)                           | PublicKey                      |       | upFrom             |\n| size(Signature)                           | Signature UpdateProposalToSign |       | upSignature        |\n\n## 对等点数据\n\n### HandlerSpec\n\n``` haskell\ndata HandlerSpec\n    = ConvHandler { hsReplyType :: MessageName}\n    | UnknownHandler Word8 ByteString\n    deriving (Show, Generic, Eq)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/414817a6f8c8de405553c8ba1325e1366dc7b60e/infra/Pos/Communication/Types/Protocol.hs#L80)。\n\n| 类型                                           | 大小           | 值     | Following data |\n|------------------------------------------------|----------------|-----------|----------------|\n| ConvHandler m where m : UnsignedVarInt &lt; 64 | Word8          | 01xx xxxx | none           |\n| ConvHandler m where m : Unknown                | Word8 + TinyBS | 0000 0001 | ByteString     |\n| UnknownHandler w8 bs                           | Word8 + TinyBS | w8        | bs             |\n\n例子：\n\n    ghci> hexEncode (ConvHandler (messageName (Proxy :: Proxy MsgGetHeaders)))\n    \"44\"\n    ghci> hexEncode (UnknownHandler 10 \"aba\")\n    \"0a03616261\"\n\n### VerInfo\n\n``` haskell\ntype HandlerSpecs = HashMap MessageName HandlerSpec\n\nnewtype InSpecs = InSpecs HandlerSpecs\n    deriving (Eq, Show, Generic)\n\nnewtype OutSpecs = OutSpecs HandlerSpecs\n    deriving (Eq, Show, Generic)\n\ndata VerInfo = VerInfo\n    { vIMagic        :: Int32\n    , vIBlockVersion :: BlockVersion\n    , vIInHandlers   :: HandlerSpecs\n    , vIOutHandlers  :: HandlerSpecs\n    } deriving (Eq, Generic, Show)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/414817a6f8c8de405553c8ba1325e1366dc7b60e/infra/Pos/Communication/Types/Protocol.hs#L102)。\n\n| 字段大小         | 类型         | 字段            |\n|--------------------|--------------|------------------|\n| 4                  | Int32        | `vIMagic`        |\n| 5                  | BlockVersion | `vIBlockVersion` |\n| size(HandlerSpecs) | HandlerSpecs | `vIInHandlers`   |\n| size(HandlerSpecs) | HandlerSpecs | `vIOutHandlers`  |\n\n`HandlerSpec` 只是在消息名称和这些消息的处理方式之间进行映射：通过单消息风格或对话风格+消息标签。这个映射被编码为其他 `Map` - 列表对。\n\n`InSpecs` 和 `OutSpecs` 只是 `HandlerSpecs` 的封装。这些封装只用于保证类型安全，以区分传入和传出消息的规范。\n\n<!-- TODO: didn't find examples of inSpecs :( -->\n\n### PeerData\n\n``` haskell\ntype PeerData = VerInfo\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/414817a6f8c8de405553c8ba1325e1366dc7b60e/infra/Pos/Communication/Types/Protocol.hs#L47)。\n\n| 字段大小    | 类型    | 描述       |\n|---------------|---------|-------------------|\n| size(VerInfo) | VerInfo | MessageName table |\n\n我们发送的 `VerInfo` 在[这里](https://github.com/input-output-hk/cardano-sl/blob/81b40e54bb5dda2e94850ccc9a835b46e5c445b5/src/Pos/Launcher/Runner.hs#L286)创建。\n\n例子：\n\n``` haskell\nghci> let ourVerInfo = VerInfo protocolMagic lastKnownBlockVersion mempty outSpecs\nghci> let peerIdExample = PeerId \"0123456789ABCD\"\nghci> hexEncode ourVerInfo\n\"0000000000000000000004030800000103020900030801010103020901030802\n020103020902030803030103020903\"\nghci> hexEncode ((peerIdExample, ourVerInfo) :: PeerData)\n\"3031323334353637383941424344000000000000000000000403080000010302\n0900030801010103020901030802020103020902030803030103020903\"\n```\n",
        "type": "MarkdownRemark",
        "contentDigest": "73bf4ec8c4bac974762814c474b3f9f9",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "",
        "date": "2017-01-01",
        "doc_title": "二进制协议",
        "path": "/cn/technical/protocols/binary-protocols/",
        "group": "protocols",
        "language": "cn",
        "label": "docs",
        "_PARENT": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-13-binary.cn.md absPath of file",
        "parent": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-13-binary.cn.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "<!-- Reviewed at 721474b760466b888cf26545b52b35989b2162de -->\n<!-- Delegation : Updated at 15b8b777fde5a8ab4a85af71affeffdf31ad219c -->\n\n# 二进制协议\n\n<span style=\"color: red;\">**重要提示：二进制协议即将更改。**</span>\n\n所有字段的大小均以字节表示。总是使用大端序。符合类型按定义顺序进行序列化，不带分隔符。\n\n例如，`(Word32, Word8)` 序列化为5个字节：4个 `Word32`，1个 `Word8`。\n\n对于依赖于类型 T 的对象的变长结构，我们使用 `size(T)` 符号。\n\n`Word32` 是32位无符号整数(`uint32`)。\n\n为测试 `ghci` 中 `myObject` 对象的序列，应该在卡尔达诺结算层根目录中使用以下命令：\n\n\n    $ stack repl\n    ...\n    <Press Enter>\n    ...\n    ghci> import Data.ByteString.Builder\n    ghci> let hexEncode myObject = toLazyByteString $ lazyByteStringHex $ Pos.Binary.encode $ myObject\n    ghci> hexEncode (mkCoin 1000)\n    \"0064\"\n\n## 常见的 HASKELL 数据类型\n\n### Maybe\n\n``` haskell\ndata Maybe a = Nothing | Just a\n```\n\n`Maybe a` 是 `a` 类型或空类型（又名 `null`, `None`）。为了区分这两个值，我们在数据之前加了1个字节的标签。\n\n\n| 标签大小 | 标签类型 | 标签值 | 描述     | 字段大小 | 描述       |\n|----------|----------|-----------|-----------------|------------|-------------------|\n| 1        | Word8    | 0x00      | Tag for Nothing |            |                   |\n|          |          | 0x01      | Tag for Just    |            |                   |\n|          |          |           |                 | size(a)    | Value of type `a` |\n\n例子：\n\n    ghci> hexEncode (Nothing :: Maybe Word32)\n    \"00\"\n    ghci> hexEncode (Just 4  :: Maybe Word32)\n    \"0100000004\"\n\n### Either\n\n``` haskell\ndata Either a b = Left a | Right b\n```\n\n`Either a b` 表示类型 `a` 或 类型 `b`。为了区分这两个值，我们在数据之前添加了1个字节的标签。\n\n\n| 标签大小 | 标签类型 | 标签值 | 描述   | 字段大小 | 描述       |\n|----------|----------|-----------|---------------|------------|-------------------|\n| 1        | Word8    | 0x00      | Tag for Left  |            |                   |\n|          |          |           |               | size(a)    | Value of type `a` |\n|          |          | 0x01      | Tag for Right |            |                   |\n|          |          |           |               | size(b)    | Value of type `b` |\n\n例子：\n\n    ghci> hexEncode (Left 3  :: Either Word16 Word32)\n    \"000003\"\n    ghci> hexEncode (Right 4 :: Either Word16 Word32)\n    \"0100000004\"\n\n### 大整数\n\n``` haskell\n-- Fixed-size type for a subset of Integer\ntype SmallInt = Int32\n```\n\n整数的编码有两种：如果它们适合 `SmallInt`，则它们被写为一个字节标记，并写入该值。如果该整数太大不能放入 SmallInt 中，将其与符号，长度字段写入字节数组。\n\n有关参考，请参考[实现](http://hackage.haskell.org/package/binary-0.8.4.1/docs/src/Data.Binary.Class.html#line-306)。\n\n例子：\n\n    ghci> hexEncode $ (15 :: Integer)\n    \"000000000f\"\n    ghci> hexEncode $ (  (2 :: Integer) ^ (128 :: Integer))\n    \"010100000000000000110000000000000000000000000000000001\"\n    ghci> hexEncode $ (- (2 :: Integer) ^ (128 :: Integer))\n    \"01ff00000000000000110000000000000000000000000000000001\"\n\n### 无符号变量长度整数\n\n这种类型稍后将引用为 `UVarInt Word16` 或 `UVarInt Word64` 来描述最大可用值。\n\n\n``` haskell\nnewtype UnsignedVarInt a = UnsignedVarInt {getUnsignedVarInt :: a}\n    deriving (Eq, Ord, Show, Generic, NFData, Functor)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/895619d7056fe397e9c2a56d88994f167263c397/core/Pos/Binary/Class.hs#L277)。\n\n值一次编码为7位，最重要的是是个连续位。因此，从0到127的数字只需要一个字节来编码，从128到16383的数字需要两个字节等等。\n\n这种[格式](https://developers.google.com/protocol-buffers/docs/encoding#varints)取自 Google 的 Protocol Buffers，但它提供了更多的编码语言（TODO）\n\n例子:\n\n    ghci> hexEncode (UnsignedVarInt (3 :: Word32))\n    \"03\"\n    ghci> hexEncode (UnsignedVarInt (126 :: Word32))\n    \"7e\"\n    ghci> hexEncode (UnsignedVarInt (127 :: Word32))\n    \"7f\"\n    ghci> hexEncode (UnsignedVarInt (128 :: Word32))\n    \"8001\"\n\n### 微小的可变长度整数\n\n``` haskell\n-- | A newtype wrapper for non-negative integers less than @2^14@. Use it if\n-- you want to be extra careful. Compared to 'SignedVarInt' and\n-- 'UnsignedVarInt', it provides two benefits:\n--\n-- * It is guaranteed to take either 1 or 2 bytes (the standard decoder for\n--   variants can consume an unlimited amount of bytes).\n--\n-- * It is unambiguous (e.g. @0@ can be encoded in only one way instead of\n--   two).\nnewtype TinyVarInt = TinyVarInt {getTinyVarInt :: Word16}\n    deriving (Eq, Ord, Show, Generic, NFData)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/895619d7056fe397e9c2a56d88994f167263c397/core/Pos/Binary/Class.hs#L295)。\n\n| 字段大小 | 类型           | 描述                            |\n|------------|----------------|----------------------------------------|\n| 1-2        | UVarInt Word16 | Variable length integer up to 2^14 - 1 |\n\n例子:\n\n    ghci> hexEncode $ TinyVarInt 0\n    \"00\"\n    ghci> hexEncode $ TinyVarInt (2^14 -1)\n    \"ff7f\"\n\n在 `cardano` 中的 `ByteString` 被编码为以其长度开头的字节序列，其中长度被编码为可变长度整数。如果长度被编码为 `TinyVarInt`，那么这样的 `ByteString` 被表示为 `TinyBS`。\n\n### 列表，非空值和向量空间\n\n\n有时候我们在数据类型中存储一些对象的列表。你会看到他们被引用为 `Vector a`，`[a]`。您可以将其读作*类型对象的数组 `a`*。这两种标准的 Haskell 数据类型都以相同的方式序列化。如果您看到 `NonEmpty a` 的类型的，您应该将它视作 `[a]`，但该列表的大小至少为 `1`。\n\n| 字段大小   | 类型        | 值 | 描述                                  |\n|--------------|-------------|-------|----------------------------------------------|\n| 1-9          | UVarInt Int | n     | Size of array                                |\n| n \\* size(a) | a\\[n\\]      |       | Array with length `n` of objects of type `a` |\n\n例子：\n\n    ghci> hexEncode ([1, 31] :: [Word16])\n    \"020001001f\"\n    ghci> hexEncode ([0..135] :: [Word8])  -- 136 bytes from 0 to 135 including\n    \"8801000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f2021222324252\n    62728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4\n    f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f70717273747576777\n    8797a7b7c7d7e7f8081828384858687\"\n\n### HashMap\n\n`HashMap key value` 是键到值的映射。在序列化中，HashMap 被表示为 `key` 与 `value` 对的列表，并且被序列化为 `[(key, value)]`。\n\n\n| 字段大小                    | 类型            | 值 | 描述                                             |\n|-------------------------------|-----------------|-------|---------------------------------------------------------|\n| 1-9                           | UVarInt Int     | n     | Size of HashMap                                         |\n| n * (size(key) + size(value)) | <key, value>[n] |       | Array with length `n` of objects of type `(key, value)` |\n\n例子：\n\n    ghci> hexEncode $ Data.HashMap.Strict.fromList [(1 :: Word8, 127 :: Word64), (2, 255)]\n    \"0201000000000000007f0200000000000000ff\"\n\n## 网络\n\n### MessageName\n\n``` haskell\nnewtype MessageName = MessageName BS.ByteString\n```\n\n[源代码链接](https://github.com/serokell/time-warp-nt/blob/f5500cb587eb2fbb02954b8d945985dbd0d51c0d/src/Node/Message.hs#L44)。\n\n一般来说，我们用一个或两个编码的 `UnsignedVarInt` 来表示 `MessageName`。在序列化状态下，它被编码为二进制字符串，因此以字符串的长度为前缀。\n\n例子:\n\n    ghci> hexEncode $ messageName (Proxy :: Proxy SendProxySK)\n    \"0102\"\n    ghci> hexEncode $ messageName (Proxy :: Proxy (DataMsg GtMsgContents))\n    \"020a03\"\n\n## 卡尔达诺结算层基本数据类型\n\n### 币\n\n``` haskell\n-- | Coin is the least possible unit of currency.\nnewtype Coin = Coin\n    { getCoin :: Word64\n    } deriving (Show, Ord, Eq, Generic, Hashable, Data, NFData)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L391)。\n\n硬币总数量是 [45 \\* 10^9 \\*\n10^6](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L404)。\n\n    45*10^15 needs 56 bits to represent\n    45*10^9  (integral mega coins) needs 36 bits to represent\n    999999   (floating mega coins) needs 20 bits to represent\n\n| Decimal  | Needed Bits |\n|----------|-------------|\n| 0-9      | 4 bits      |\n| 0-99     | 7 bits      |\n| 0-999    | 10 bits     |\n| 0-9999   | 14 bits     |\n| 0-99999  | 17 bits     |\n| 0-999999 | 20 bits     |\n\n币被分成百万份，剩余的币用于序列化。\n\n    1000999 coin = 1.000999 mega coin\n\n简单的变量以 `Word64` 限制。序列的总长度在第一个字节中用可变掩码进行编码。\n\n| header    | mask | spare bits | extra byte | total bits as value | serialized size |\n|-----------|------|------------|------------|---------------------|-----------------|\n| 0 xxxxxxx | 0x7f | 7 bits     | 0          | 7 bits              | 1 byte          |\n| 10 xxxxxx | 0x3f | 6 bits     | 1          | 14 bits             | 2 bytes         |\n| 110 xxxxx | 0x1f | 5 bits     | 2          | 21 bits             | 3 bytes         |\n| 1110 xxxx | 0x0f | 4 bits     | 3          | 27 bits             | 4 bytes         |\n| 11110 xxx | 0x07 | 3 bits     | 4          | 35 bits             | 5 bytes         |\n| 111110 xx | 0x03 | 2 bits     | 5          | 42 bits             | 6 bytes         |\n| 1111110 x | 0x01 | 1 bit      | 6          | 49 bits             | 7 bytes         |\n| 11111110  | 0x00 | 0 bit      | 7          | 56 bits             | 8 bytes         |\n| 11111111  | 0x00 | 0 bit      | 8          | 64 bits             | 9 bytes         |\n\n专门用于最多只需要36位的组成部分。\n\n| header    | mask | spare bits | extra byte | total bits as value | serialized size |\n|-----------|------|------------|------------|---------------------|-----------------|\n| 0 xxxxxxx | 0x7f | 7 bits     | 0          | 7 bits              | 1 byte          |\n| 10 xxxxxx | 0x3f | 6 bits     | 1          | 14 bits             | 2 bytes         |\n| 110 xxxxx | 0x1f | 5 bits     | 2          | 21 bits             | 3 bytes         |\n| 1110 xxxx | 0x0f | 4 bits     | 3          | 27 bits             | 4 bytes         |\n| 1111 xxxx | 0x0f | 4 bits     | 4          | 36 bits             | 5 bytes         |\n\n而浮动部分则需要20位来表示，编码值从0到999999：\n\n| header    | mask | spare bits | extra byte | total bits as value | serialized size |\n|-----------|------|------------|------------|---------------------|-----------------|\n| 0 xxxxxx  | 0x7f | 7 bits     | 0          | 7 bits              | 1 byte          |\n| 10 xxxxxx | 0x3f | 6 bits     | 1          | 14 bits             | 2 bytes         |\n| 110 xxxxx | 0x3f | 5 bits     | 2          | 21 bits             | 3 bytes         |\n\n注意：考虑的编码的结束，我们可以在3字节方案中保存一位，但我们不需要，不需要改变方案，我们可以重新使用以前的方案。\n\n有关实现的细节请看[这个模块](https://github.com/input-output-hk/cardano-sl/blob/1239a6a876fbbb970e836c8bc6bb72d781ba2fa9/core/Pos/Binary/Core/Coin.hs)。\n\n例子:\n\n    ghci> hexEncode (mkCoin 0)\n    \"0000\"\n    ghci> hexEncode (mkCoin 1)\n    \"00c186a0\"\n    ghci> hexEncode (mkCoin 2)\n    \"00c30d40\"\n    ghci> hexEncode (mkCoin 31)\n    \"00c1fbd0\"\n    ghci> hexEncode (mkCoin 128)\n    \"00cc8708\"\n    ghci> hexEncode (mkCoin 129)\n    \"00ce0da8\"\n    ghci> hexEncode (mkCoin 1000)\n    \"0064\"\n    ghci> hexEncode (mkCoin 10000)\n    \"000a\"\n    ghci> hexEncode (mkCoin 1000000)\n    \"0100\"\n    ghci> hexEncode (mkCoin 1000999)\n    \"01cf3e58\"\n\n### Hash\n\n``` haskell\n-- | Hash wrapper with phantom type for more type-safety.\n-- Made abstract in order to support different algorithms in\n-- different situations\nnewtype AbstractHash algo a = AbstractHash (Digest algo)\n    deriving (Show, Eq, Ord, ByteArray.ByteArrayAccess, Generic, NFData)\n\n-- | Type alias for commonly used hash\ntype Hash = AbstractHash Blake2b_256\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/652411b9b8777f08e948ee144a60779c55f363b3/core/Pos/Crypto/Hashing.hs#L118)。\n\n| 字段大小 | 类型        | 描述             |\n|------------|-------------|-------------------------|\n| 32         | Word8\\[32\\] | 256 bits of hash digest |\n\n消息大小限制：32。\n\n所以每当你看到 `Hash SomeType` 代码，这个字段将占用32个字节。`Hash` 只在类型安全的代码中使用附加的类型参数，并且对序列化没有影响。\n\n例子:\n\n    ghci> hash $ mkCoin 3\n    AbstractHash 29bcdcff253cd2864a8b5e25992a6db86a7a41dc5e69c0599730f2c5716d9362\n    ghci> hexEncode $ hash $ mkCoin 3\n    \"29bcdcff253cd2864a8b5e25992a6db86a7a41dc5e69c0599730f2c5716d9362\"\n\n### 公钥\n\n``` haskell\n-- | Wrapper around 'CC.XPub'.\nnewtype PublicKey = PublicKey CC.XPub\n    deriving (Eq, Ord, Show, Generic, NFData, Hashable, Typeable)\n\ndata XPub = XPub !Edwards25519.PointCompressed !ChainCode\n    deriving (Eq, Ord, Show, Generic)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Crypto/Signing.hs#L70)。\n\n| 字段大小 | 类型       | 描述             |\n|------------|------------|-------------------------|\n| 32         | ByteString | 32-byte PointCompressed |\n| 32         | ByteString | 32-byte ChainCode       |\n\n\n消息大小限制：64。\n\n### 签名\n\n``` haskell\n-- | Wrapper around 'CC.XSignature'.\nnewtype Signature a = Signature CC.XSignature\n    deriving (Eq, Ord, Show, Generic, NFData, Hashable, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Crypto/Signing.hs#L149)。\n\n| 字段大小 | 类型        | 描述                  |\n|------------|-------------|------------------------------|\n| 64         | Word8\\[64\\] | 64 bytes of signature string |\n\n消息大小限制：64。\n\n### Epoch 索引\n\n``` haskell\n-- | Index of epoch.\nnewtype EpochIndex = EpochIndex\n    { getEpochIndex :: Word64\n    } deriving (Show, Eq, Ord, Num, Enum, Ix, Integral, Real, Generic, Hashable, Bounded, Typeable, NFData)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L342)。\n\n| 字段大小 | 类型           | 描述 |\n|------------|----------------|-------------|\n| 1-10       | UVarInt Word64 | epoch index |\n\n消息大小限制：10。\n\n例子:\n\n    ghci> hexEncode (EpochIndex 128)\n    \"8001\"\n\n### 本地 Slot 索引\n\n``` haskell\n-- | Index of slot inside a concrete epoch.\nnewtype LocalSlotIndex = LocalSlotIndex\n    { getSlotIndex :: Word16\n    } deriving (Show, Eq, Ord, Ix, Generic, Hashable, Buildable, Typeable, NFData)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L353)。\n\n| 字段大小 | 类型           | 描述         |\n|------------|----------------|---------------------|\n| 1-3        | UVarInt Word16 | index of local slot |\n\n例子:\n\n    ghci> hexEncode (LocalSlotIndex 15)\n    \"0f\"\n\n### SlotId\n\n``` haskell\n-- | Slot is identified by index of epoch and local index of slot in\n-- this epoch. This is a global index\ndata SlotId = SlotId\n    { siEpoch :: !EpochIndex\n    , siSlot  :: !LocalSlotIndex\n    } deriving (Show, Eq, Ord, Generic, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L377)。\n\n| 字段大小 | 类型           | 描述                        |\n|------------|----------------|------------------------------------|\n| 1-10       | UVarInt Word64 | Epoch index                        |\n| 1-3        | UVarInt Word16 | Slot index inside a concrete epoch |\n\n例子:\n\n    ghci> hexEncode (SlotId 128 15)\n    \"80010f\"\n\n### Attributes\n\n``` haskell\n-- | Convenient wrapper for the datatype to represent it (in binary\n-- format) as k-v map.\ndata Attributes h = Attributes\n    { -- | Data, containing known keys (deserialized)\n      attrData   :: h\n      -- | Remaining, unparsed fields\n    , attrRemain :: UnparsedFields\n    }\n  deriving (Eq, Ord, Generic, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Data/Attributes.hs#L60)。\n\n``` haskell\n-- | Representation of unparsed fields in Attributes. Newtype wrapper is used\n-- for clear backward compatibility between previous representation (which was\n-- just a single ByteString) during transition from Store to CBOR.\nnewtype UnparsedFields = UnparsedFields (Map Word8 ByteString)\n    deriving (Eq, Ord, Show, Generic, Typeable, NFData)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Data/Attributes.hs#L34)。\n\n消息大小限制：每个 `Attributes` 类型定义它们自己的限制。\n\n#### 一般情况序列化\n\n存储为 `totalLen + (k, v) pairs + 一些剩余的部分`。`attrData` 存储为 `(Word8, v)` 对列表，其中 `key` 有 `Word8` 类型，你应该指定如何以这种方式编码 `h`。\n\n| 字段大小             | 类型           | 值 | 描述                           |\n|------------------------|----------------|-------|---------------------------------------|\n| 1-9                    | UVarInt Int64  | m + n | Size of attributes in bytes           |\n| m = t \\* (1 + size(v)) | <Word8,v>\\[t\\] |       | Array of pairs. Given without length. |\n| n                      | ByteString     |       | Remaining byte array                  |\n\n例子：\n\n    ghci> toLazyByteString\n          $ lazyByteStringHex\n          $ runPut\n          $ putAttributes (\\h -> [(1, put h), (0, put h)])\n          $ Attributes (9 :: Word32) \"abc\"\n    \"0d0000000009010000000961626\"\n\n其中 `h = 9 :: Word32`，我们将 `h` 编码为两个键值对：值为4字节`9`，键是`0`和`1`。\n\n#### Attributes ()\n\n在这种特殊情况下，没有 `(key, value)` 存储 - 只能是任意长度的字节数组。\n\n| 字段大小 | 类型          | 值 | 描述                                      |\n|------------|---------------|-------|--------------------------------------------------|\n| 1-4        | UVarInt Int64 | n     | Size of attributes in bytes. Should be &lt; 2^28 |\n| n          | Word8\\[n\\]    |       | `n` bytes of data                                |\n\n例子：\n\n    ghci> hexEncode $ Attributes () (BSS.pack [])\n    \"00\"\n    ghci> hexEncode $ Attributes () (BSS.pack [1,31])\n    \"02011f\"\n    ghci> hexEncode $ Attributes () \"abc\"\n    \"03616263\"\n\n### 脚本\n\n``` haskell\n-- | Version of script\ntype ScriptVersion = Word16\n\n-- | A script for inclusion into a transaction.\ndata Script = Script {\n    scrVersion :: ScriptVersion,    -- ^ Version\n    scrScript  :: LByteString}      -- ^ Serialized script\n  deriving (Eq, Show, Generic, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L424)。\n\n| 字段大小 | 类型           | 值 | 描述        |\n|------------|----------------|-------|--------------------|\n| 1-3        | UVarInt Word16 |       | Script version     |\n| 1-9        | UVarInt Int64  | n     | Size of byte array |\n| n          | Word8\\[n\\]     |       | n bytes of script  |\n\n例子:\n\n    ghci> hexEncode $ Script 0 \"a\"\n    \"000161\"\n\n### 地址属性\n\n``` haskell\n-- | Additional information stored along with address. It's intended\n-- to be put into 'Attributes' data type to make it extensible with\n-- softfork.\ndata AddrAttributes = AddrAttributes\n    { aaPkDerivationPath  :: !(Maybe HDAddressPayload)\n    , aaStakeDistribution :: !AddrStakeDistribution\n    } deriving (Eq, Ord, Show, Generic, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L199)。\n\n地址属性包含关于地址的附加信息：\n\n- HD钱包树根（`aaPkDerivationPath`）的加密导出路径。\n- 与此地址相关的股权分配（`aaStakeDistribution`）\n\n请注意，地址可能不包含加密派生路径。包含在属性中的不包含派生路径的地址通常从级别 0（钱包）公共密钥导出，并用做钱包的 ID。这样的地址并不意味着要包含任何资金。\n\n#### 地址有效载荷\n\n``` haskell\ndata HDAddressPayload = HDAddressPayload !ByteString\n    deriving (Eq, Ord, Show, Generic)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Crypto/HD.hs#L50)。\n\n`HDAddressPayload` 数据类型表示派生路径(`[Word32]`)，通过 `ChaChaPoly1305` 算法对称算法加密。加密密钥可以是 `ByteString` 32个字节中的任何一个，只有该地址的所有者才知道。\n\n在目前的 Cardano 实现中，加密密钥是使用 PBKDF2 派生算法和 HMAC-SHA512 伪随机算法，进行500次迭代，将 `address-hashing` 字符串作为盐，从钱包的根公钥获得的32字节密钥。[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Crypto/HD.hs#L58)。\n\n地址属性使用加密标签进行加密，从而可以检查属性是否被成功解密。因此，通过使用从钱包的根公共密钥导出的加密密钥来解密该地址的属性，可以确定给定的地址是否属于给定的钱包。这是实现属性解密和加密的[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Crypto/HD.hs#L113)。\n\n#### 地址分配\n\n``` haskell\n-- | Stake distribution associated with an address.\ndata AddrStakeDistribution\n    = BootstrapEraDistr\n    -- ^ Stake distribution for bootstrap era.\n    | SingleKeyDistr !StakeholderId\n    -- ^ Stake distribution stating that all stake should go to the given stakeholder.\n    | UnsafeMultiKeyDistr !(Map StakeholderId CoinPortion)\n    -- ^ Stake distribution which gives stake to multiple\n    -- stakeholders. 'CoinPortion' is a portion of an output (output\n    -- has a value, portion of this value is stake). The constructor\n    -- is unsafe because there are some predicates which must hold:\n    --\n    -- • the sum of portions must be @maxBound@ (basically 1);\n    -- • all portions must be positive;\n    -- • there must be at least 2 items, because if there is only one item,\n    -- 'SingleKeyDistr' can be used instead (which is smaller).\n    deriving (Eq, Ord, Show, Generic, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L137)。\n\n在 Byron 时代，所有的地址应该以 `BootstrapEraDistr` 作为股权分配 - 这意味着所有的股权都被自动委派给引导权益所有人。\n\n在 Shelley 时代，地址使用 `SingleKeyDistr` 或 `UnsafeMultiKeyDistr` 将股权委派给代表他们的权益所有人 ID。\n\n<!-- | Size | Type                      | Value | Description                                             | -->\n<!-- |------|---------------------------|-------|---------------------------------------------------------| -->\n<!-- | 1-2  | TinyVarInt                | n + m | sise of `PubKeyAddress` content                         | -->\n<!-- | n    | Maybe (Word8, \\[Word32\\]) |       | Empty for nothing and list of Word32 preceded with zero | -->\n<!-- | m    | ByteString                |       | Remaining bytes                                         | -->\n\n<!-- See examples in the next section. -->\n\n### 地址\n\n``` haskell\n-- | Hash used to identify address.\ntype AddressHash = AbstractHash Blake2b_224\n\n-- | Stakeholder identifier (stakeholders are identified by their public keys)\ntype StakeholderId = AddressHash PublicKey\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L123)。\n\n卡尔达诺地址使用 `blake2b-224` 作为地址结构的散列。\n\n``` haskell\n-- | Data which is bound to an address and must be revealed in order\n-- to spend coins belonging to this address.\ndata AddrSpendingData\n    = PubKeyASD !PublicKey\n    -- ^ Funds can be spent by revealing a 'PublicKey' and providing a\n    -- valid signature.\n    | ScriptASD !Script\n    -- ^ Funds can be spent by revealing a 'Script' and providing a\n    -- redeemer 'Script'.\n    | RedeemASD !RedeemPublicKey\n    -- ^ Funds can be spent by revealing a 'RedeemScript' and providing a\n    -- valid signature.\n    | UnknownASD !Word8 !ByteString\n    -- ^ Unknown type of spending data. It consists of a tag and\n    -- arbitrary 'ByteString'. It allows us to introduce a new type of\n    -- spending data via softfork.\n    deriving (Eq, Generic, Typeable, Show)\n\n-- | Type of an address. It corresponds to constructors of\n-- 'AddrSpendingData'. It's separated, because 'Address' doesn't store\n-- 'AddrSpendingData', but we want to know its type.\ndata AddrType\n    = ATPubKey\n    | ATScript\n    | ATRedeem\n    | ATUnknown !Word8\n    deriving (Eq, Ord, Generic, Typeable, Show)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L137) \n\n卡尔达诺支持不同的地址类型。地址类型根据资金的可用性不同而有所不同。每个地址类型都有相应的支出数据类型。消费数据是为了生成地址的散列数据的一部分。要从地址中花费资金，应该为消费数据，同验证数据（例如签名）提供 `TxInWitness`。\n\n目前 Cardano 提供3种地址类型：\n\n- 公钥地址（`ATPublicKey`）：扩展了 Ed25519 公钥作为支出数据，对应的 Ed25519 签名作为验证数据。\n- 脚本地址（`ATScript`）：作为支出数据的 Plutus 验证脚本，Plutus 赎回脚本作为验证数据\n- 兑现地址（`ATRedeem`）：Ed25519 公钥作为支出数据，Ed25519 签名作为验证数据。仅用于为持有人预售 ADA。\n\n还有为向前兼容而添加的特殊地址类型 `ATUnknown`。\n\n``` haskell\n-- | Hash of this data is stored in 'Address'. This type exists mostly\n-- for internal usage.\nnewtype Address' = Address'\n    { unAddress' :: (AddrType, AddrSpendingData, Attributes AddrAttributes)\n    } deriving (Eq, Show, Generic, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L206)。\n\n内部类型 `Address` 表示一个一个元组，作为 `Address` 的部分哈希存储。不仅 `AddrSpendingData` 会被哈希，`AddrType` 和 `AddrAttributes` 也会被哈希。\n\n``` haskell\n-- | 'Address' is where you can send coins.\ndata Address = Address\n    { addrRoot       :: !(AddressHash Address')\n    -- ^ Root of imaginary pseudo Merkle tree stored in this address.\n    , addrAttributes :: !(Attributes AddrAttributes)\n    -- ^ Attributes associated with this address.\n    , addrType       :: !AddrType\n    -- ^ The type of this address. Should correspond to\n    -- 'AddrSpendingData', but it can't be checked statically, because\n    -- spending data is hashed.\n    } deriving (Eq, Ord, Generic, Typeable, Show)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/524bb4d6d6620bec7e269e33de1154d2b1be5183/core/Pos/Core/Types.hs#L211)。\n\n一个 `Address` 数据类型由 `Address` 元组，类型标签，属性组成。\n\n#### 公钥地址\n\n[`addrPkAttributes`](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L107) 是 HD 钱包必须的字段。\n\n| 大小 | 类型                    | 值  | 描述                                 |\n|------|-------------------------|--------|---------------------------------------------|\n| 1    | Word8                   | 0x00   | `PubKeyAddress` tag                         |\n| 1-2  | TinyVarInt              | 28 + m | Size of `PubKeyAddress` content             |\n| 28   | Word8\\[28\\]             |        | `addKeyHash`: 28 bytes of Blake2b\\_224 hash |\n| m    | PubKeyAddressAttributes |        | `addrPkAttributes`                          |\n| 4    | Word32                  |        | CRC32 of all previous data                  |\n\n例子：\n\n    ghci> abstractHash somPk :: AddressHash PublicKey\n    AbstractHash 380dea393a631ad563154a13bc5ee49fa4b62a60218358b5dcb875e0\n    ghci> hexEncode $ PubKeyAddress (abstractHash somePk) (Attributes (AddrPkAttrs Nothing) \"a\")\n    \"001e380dea393a631ad563154a13bc5ee49fa4b62a60218358b5dcb875e00161cf52c5ec\"\n    ghci> hexEncode $ PubKeyAddress (abstractHash somePk) (Attributes (AddrPkAttrs $ Just [3,9]) \"a\")\n    \"0028380dea393a631ad563154a13bc5ee49fa4b62a60218358b5dcb875e00b0002000000030000000961f1d810f7\"\n\n你可以注意到第一个例子，`0xCF52C5EC` 是 `001e380dea393a631ad563154a13bc5ee49fa4b62a60218358b5dcb875e00161` 的 CRC32。\n \n#### 脚本地址\n\n| 大小 | 类型        | 值 | 描述                         |\n|------|-------------|-------|-------------------------------------|\n| 1    | Word8       | 0x01  | `ScriptAddress` tag                 |\n| 1    | Word8       | 0x1C  | Size of `addrScriptHash`: always 28 |\n| 28   | Word8\\[28\\] |       | 28 bytes of Blake2b\\_224 hash       |\n| 4    | Word32      |       | CRC32 of all previous data          |\n\n例子：\n\n    ghci> hexEncode $ ScriptAddress (abstractHash $ Script 0 \"a\")\n    \"011c7ec20301993e369571c6225e1e563812198433801820a2d7328756dc61c5be8e\"\n\n您可以注意到，4字节的 `0x61c5be8e` 前缀是 `011c7ec20301993e369571c6225e1e563812198433801820a2d7328756dc` 的 CRC32 的前缀。\n\n#### 未知地址\n\n| 大小 | 类型       | 值 | 描述                |\n|------|------------|-------|----------------------------|\n| 1    |            | t     | `UnknownAddress` tag       |\n| 1-2  | TinyVarInt | n     | Size of unknown address    |\n| n    | Word8\\[n\\] |       | Unknown address itself     |\n| 4    | Word32     |       | CRC32 of all previous data |\n\n例子：\n\n让我们对 `UnknownAddressType 3 \"a\"` 编码。没有 CRC32，它会被编码为 `0x030161`，`0x030161` 的 CRC32 是 `0xDEA907C4`。因此我们有：\n\n    ghci> hexEncode $ UnknownAddressType 3 \"a\"\n    \"030161dea907c4\"\n\n### MerkleRoot\n\n``` haskell\n-- | Data type for root of merkle tree.\nnewtype MerkleRoot a = MerkleRoot\n    { getMerkleRoot :: Hash Raw  -- ^ returns root 'Hash' of Merkle Tree\n    } deriving (Show, Eq, Ord, Generic, ByteArrayAccess, Typeable, NFData)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/214e7ac54fbb57007e18fdab4d274340371f2d19/core/Pos/Merkle.hs#L28)。\n\n| 字段大小 | 类型 | 描述              |\n|------------|------|--------------------------|\n| size(Hash) | Hash | Root hash of Merkle tree |\n\n### 链难度\n\n``` haskell\n-- | Chain difficulty represents necessary effort to generate a\n-- chain. In the simplest case it can be number of blocks in chain.\nnewtype ChainDifficulty = ChainDifficulty\n    { getChainDifficulty :: Word64\n    } deriving (Show, Eq, Ord, Num, Enum, Real, Integral, Generic, Buildable, Typeable, NFData)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L135)。\n\n| 大小 | 类型           | 描述      |\n|------|----------------|------------------|\n| 1-10 | UVarInt Word64 | Chain difficulty |\n\n### SlotLeaders\n\n    -- | 'NonEmpty' list of slot leaders.\n    type SlotLeaders = NonEmpty StakeholderId\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L264)。\n\n| 字段大小               | 类型               | 值 | 描述                    |\n|--------------------------|--------------------|-------|--------------------------------|\n| 1-9                      | UVarInt Int        | n     | Size of slot leaders list      |\n| n \\* size(StakeholderId) | StakeholderId\\[n\\] |       | List of slot leaders of size n |\n\n## GodTossing\n\n### Crypto.PVSS\n\nPvss 的类型前缀在 [Crypto.PVSS](https://hackage.haskell.org/package/pvss-0.1/docs/Crypto-PVSS.html) 模块定义。本节介绍这些类型的二进制格式。\n\n#### Point\n\n``` haskell\nnewtype Point = Point { unPoint :: SSL.EcPoint }\n    deriving (Generic)\n```\n\n[源代码链接](https://github.com/input-output-hk/pvss-haskell/blob/31bc53aa861bd4cae8f6741247e849299eae3983/src/Crypto/PVSS/ECC.hs#L92)。\n\n| 字段大小 | 类型       | 描述                                                           |\n|------------|------------|-----------------------------------------------------------------------|\n|         33 | ByteString | Binary represented elliptic curve point (see ecPointFromOct function) |\n\n#### Secret\n\n``` haskell\n-- | Secret\nnewtype Secret = Secret Point\n    deriving (Show,Eq,NFData,Binary)\n```\n\n[源代码链接](https://github.com/input-output-hk/pvss-haskell/blob/670ce35d0f4a11aeb9617de4df2992c23f30573d/src/Crypto/SCRAPE.hs#L78)。\n\n| 字段大小  | 类型  | 描述 |\n|-------------|-------|-------------|\n| size(Point) | Point | Secret      |\n\n#### Proof\n\n``` haskell\nnewtype Scalar = Scalar { unScalar :: Integer }\n    deriving (Show,Eq,Generic,NFData)\n\nnewtype Challenge = Challenge ByteString\n    deriving (Show,Eq,NFData)\n\n-- | The generated proof\ndata Proof = Proof\n    { proof_c :: !Challenge\n    , proof_z :: !Scalar\n    } deriving (Show,Eq,Generic)\n```\n\n[源代码链接](https://github.com/input-output-hk/pvss-haskell/blob/31bc53aa861bd4cae8f6741247e849299eae3983/src/Crypto/PVSS/DLEQ.hs#L39)。\n\n`Scalar` [源代码链接](https://github.com/input-output-hk/pvss-haskell/blob/31bc53aa861bd4cae8f6741247e849299eae3983/src/Crypto/PVSS/ECC.hs#L110)。\n\n| 字段大小 | 类型       | 描述              |\n|------------|------------|--------------------------|\n| 32         | ByteString | 32-byte string challenge |\n| 32         | Integer    | 32-byte integer scalar   |\n\n#### DecryptedShare\n\n``` haskell\n-- | An decrypted share decrypted by a party's key and\ndata DecryptedShare = DecryptedShare\n    { decryptedShareID    :: !ShareId\n    , shareDecryptedVal   :: !Point      -- ^ decrypted share\n    , decryptedValidProof :: !DLEQ.Proof -- ^ proof the decryption is valid\n    } deriving (Show,Eq,Generic)\n```\n\n| 字段大小  | 类型    | 描述                    |\n|-------------|---------|--------------------------------|\n| 32          | Integer | Share id                       |\n| size(Point) | Point   | Decrypted share                |\n| size(Proof) | Proof   | Proof the description is valid |\n\n#### ExtraGen\n\n``` haskell\n-- | Extra generator\nnewtype ExtraGen = ExtraGen Point\n    deriving (Show,Eq,NFData,Binary)\n```\n\n[源代码链接](https://github.com/input-output-hk/pvss-haskell/blob/670ce35d0f4a11aeb9617de4df2992c23f30573d/src/Crypto/PVSS.hs#L82)。\n\n| 字段大小  | 类型  | 描述     |\n|-------------|-------|-----------------|\n| size(Point) | Point | Extra generator |\n\n消息大小限制：33。\n\n#### Commitment\n\n``` haskell\nnewtype Commitment = Commitment { unCommitment :: Point }\n    deriving (Show,Eq,NFData,Binary)\n```\n\n[源代码链接](https://github.com/input-output-hk/pvss-haskell/blob/670ce35d0f4a11aeb9617de4df2992c23f30573d/src/Crypto/PVSS.hs#L69)。\n\n| 字段大小  | 类型  | 描述 |\n|-------------|-------|-------------|\n| size(Point) | Point | Commitment  |\n\n#### PublicKey\n\n``` haskell\n-- | Public Key\nnewtype PublicKey = PublicKey Point\n    deriving (Show,Eq,NFData,Binary)\n```\n\n[源代码链接](https://github.com/input-output-hk/pvss-haskell/blob/31bc53aa861bd4cae8f6741247e849299eae3983/src/Crypto/PVSS/ECC.hs#L84)。\n\n| 字段大小  | 类型  | 描述 |\n|-------------|-------|-------------|\n| size(Point) | Point | Public key  |\n\n### 密钥共享\n\n一下大多数类型是 PVSS 类型的别名，所以它们以相同的方式被序列化。\n\n``` haskell\n-- | Secret can be generated by `genSharedSecret` function along with shares.\nnewtype Secret = Secret\n    { getSecret :: Pvss.Secret\n    } deriving (Show, Eq)\n\n-- | Shares can be used to reconstruct Secret.\nnewtype Share = Share\n    { getShare :: Pvss.DecryptedShare\n    } deriving (Show, Eq)\n\n-- | Encrypted share which needs to be decrypted using VssKeyPair first.\nnewtype EncShare = EncShare\n    { getEncShare :: Pvss.EncryptedShare\n    } deriving (Show, Eq)\n\n-- | This extra data may be used to verify encrypted share.\ndata SecretSharingExtra =\n    SecretSharingExtra !Pvss.ExtraGen\n                       ![Pvss.Commitment]\n    deriving (Show, Eq, Generic)\n\n-- | SecretProof may be used to commit Secret without revealing it.\nnewtype SecretProof =\n    SecretProof Pvss.Proof\n    deriving (Show, Eq, Generic)\n\n-- | This key is used as public key in VSS.\nnewtype VssPublicKey = VssPublicKey\n    { getVssPublicKey :: Pvss.PublicKey\n    } deriving (Show, Eq)\n```\n\nSecretSharingExtra 的格式：\n\n| 字段大小                 | 类型                | 值 | 描述                |\n|----------------------------|---------------------|-------|----------------------------|\n| size(ExtraGen)             | Pvss.ExtraGen       |       | Extra generator            |\n| 1-9                        | UVarInt Int         | n     | Length of commitments list |\n| n \\* size(Pvss.Commitment) | \\[Pvss.Commitment\\] |       | Commitments                |\n\n消息大小限制：32：\n\n-   `Share` - 101.\n-   `EncShare` - 101.\n-   `SecretProof` - 64.\n-   `VssPublicKey` - 33.\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/69dd4b2d0c56474db1059393336557fb649dba9a/core/Pos/Crypto/SecretSharing.hs)。\n\n### Commitments, Openings and Shares\n\n#### Commitment\n\n``` haskell\n-- | Commitment is a message generated during the first stage of\n-- GodTossing. It contains encrypted shares and proof of secret.\n-- Invariant which must be ensured: commShares is not empty.\ndata Commitment = Commitment\n    { commExtra  :: !(AsBinary SecretSharingExtra)\n    , commProof  :: !(AsBinary SecretProof)\n    , commShares :: !(HashMap (AsBinary VssPublicKey) (NonEmpty (AsBinary EncShare)))\n    } deriving (Show, Eq, Generic)\n```\n\n| 字段大小                                     | 类型                        | 值 | 描述 |\n|------------------------------------------------|-----------------------------|-------|-------------|\n| 1-9                                            | UVarInt Int                 | n     |             |\n| n \\* (sizeof(VssPublicKey) + sizeof(EncShare)) | HashMapCommShares           |       | commShares  |\n| sizeof(SecretSharingExtra)                     | AsBinary SecretSharingExtra |       | commExtra   |\n| sizeof(SecretProof)                            | AsBinary SecretProof        |       | commProof   |\n\n其中 `HashMapCommShares` =\n`HashMap (AsBinary VssPublicKey) (NonEmpty (AsBinary EncShare))`\n\n消息大小限制：33。\n\n#### CommitmentSignature\n\n``` haskell\n-- | Signature which ensures that commitment was generated by node\n-- with given public key for given epoch.\ntype CommitmentSignature = Signature (EpochIndex, Commitment)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/1bab05d8a199ed6e9af066d4994ef13abdb95da7/godtossing/Pos/Ssc/GodTossing/Core/Types.hs#L73)。\n\n| 字段大小      | 类型                               | 描述                                                                                         |\n|-----------------|------------------------------------|-----------------------------------------------------------------------------------------------------|\n| size(Signature) | Signature (EpochIndex, Commitment) | Signature which ensures that commitment was generated by node with given public key for given epoch |\n\n#### SignedCommitment\n\n``` haskell\ntype SignedCommitment = (PublicKey, Commitment, CommitmentSignature)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/1bab05d8a199ed6e9af066d4994ef13abdb95da7/godtossing/Pos/Ssc/GodTossing/Core/Types.hs#L75)。\n\n| 字段大小                | 类型                | 描述                                       |\n|---------------------------|---------------------|---------------------------------------------------|\n| size(PublicKey)           | PublicKey           | Public key of node that generated this commitment |\n| size(Commitment)          | Commitment          | Commitment                                        |\n| size(CommitmentSignature) | CommitmentSignature | Commitment signature                              |\n\n#### CommitmentsMap\n\n``` haskell\n-- | 'CommitmentsMap' is a wrapper for 'HashMap StakeholderId SignedCommitment'\n-- which ensures that keys are consistent with values, i. e. 'PublicKey'\n-- from 'SignedCommitment' corresponds to key which is 'StakeholderId'.\nnewtype CommitmentsMap = CommitmentsMap\n    { getCommitmentsMap :: HashMap StakeholderId SignedCommitment\n    } deriving (Semigroup, Monoid, Show, Eq, Container, NFData)\n```\n\n| 字段大小                                         | 类型                                   | 值 | 描述                      |\n|----------------------------------------------------|----------------------------------------|-------|----------------------------------|\n| 1-9                                                | UVarInt Int                            | n     | Number of commitments in map     |\n| n * (size(StakeholderId) + size(SignedCommitment)) | HashMap StakeholderId SignedCommitment |       | Commitments map as list of pairs |\n\n#### Opening\n\n``` haskell\n-- | Opening reveals secret.\nnewtype Opening = Opening\n    { getOpening :: (AsBinary Secret)\n    } deriving (Show, Eq, Generic, Buildable, NFData)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/1bab05d8a199ed6e9af066d4994ef13abdb95da7/godtossing/Pos/Ssc/GodTossing/Core/Types.hs#L102)。\n\n| 字段大小   | 类型            | 描述     |\n|--------------|-----------------|-----------------|\n| size(Secret) | AsBinary Secret | Revealed secret |\n\n消息大小限制：33。\n\n#### OpeningsMap\n\n``` haskell\ntype OpeningsMap = HashMap StakeholderId Opening\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/1bab05d8a199ed6e9af066d4994ef13abdb95da7/godtossing/Pos/Ssc/GodTossing/Core/Types.hs#L106)。\n\n| 字段大小                                | 类型                          | 值 | 描述                   |\n|-------------------------------------------|-------------------------------|-------|-------------------------------|\n| 1-9                                       | UVarInt Int                   | n     | Number of openings in map     |\n| n * (size(StakeholderId) + size(Opening)) | HashMap StakeholderId Opening |       | Openings map as list of pairs |\n\n#### VssCertificate\n\n``` haskell\n-- | VssCertificate allows VssPublicKey to participate in MPC.\n-- Each stakeholder should create a Vss keypair, sign VSS public key with signing\n-- key and send it into blockchain.\n--\n-- A public key of node is included in certificate in order to\n-- enable validation of it using only node's P2PKH address.\n-- Expiry epoch is last epoch when certificate is valid, expiry epoch is included\n-- in certificate and signature.\n--\n-- Other nodes accept this certificate if it is valid and if node has\n-- enough stake.\n--\n-- Invariant: 'checkSig vcSigningKey (vcVssKey, vcExpiryEpoch) vcSignature'.\ndata VssCertificate = VssCertificate\n    { vcVssKey      :: !(AsBinary VssPublicKey)\n    , vcExpiryEpoch :: !EpochIndex\n    -- ^ Epoch up to which certificates is valid.\n    , vcSignature   :: !(Signature (AsBinary VssPublicKey, EpochIndex))\n    , vcSigningKey  :: !PublicKey\n    } deriving (Show, Eq, Generic)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/3a6ac3c5aa8d3ca87d8b409d5923e21b744b1e6b/godtossing/Pos/Ssc/GodTossing/Core/Types.hs#L149)。\n\n\n| 字段大小         | 类型                                          | 描述                                                   |\n|--------------------|-----------------------------------------------|---------------------------------------------------------------|\n| size(VssPublicKey) | AsBinary VssPublicKey                         | Public key of stakeholder which is allowed to participate in MPC |\n| size(EpochIndex)   | EpochIndex                                    | Last epoch when certificate is valid                          |\n| size(Signature)    | Signature (AsBinary VssPublicKey, EpochIndex) | Signature                                                     |\n| size(PublicKey)    | PublicKey                                     | Signing key      \n\n消息大小限制：171。\n\n#### VssCertificatesMap\n\n``` haskell\n-- | VssCertificatesMap contains all valid certificates collected\n-- during some period of time.\ntype VssCertificatesMap = HashMap StakeholderId VssCertificate\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/3a6ac3c5aa8d3ca87d8b409d5923e21b744b1e6b/godtossing/Pos/Ssc/GodTossing/Core/Types.hs#L211)。\n\n| 字段大小                                       | 类型                                 | 值 | 描述                           |\n|--------------------------------------------------|--------------------------------------|-------|---------------------------------------|\n| 1-9                                              | UVarInt Int                          | n     | Number of certificates in map         |\n| n * (size(StakeholderId) + size(VssCertificate)) | HashMap StakeholderId VssCertificate |       | Vss certificates map as list of pairs |\n\n### TxProof\n\n``` haskell\ndata TxProof = TxProof\n    { txpNumber            :: !Word32\n    , txpRoot              :: !(MerkleRoot Tx)\n    , txpWitnessesHash     :: !(Hash [TxWitness])\n    , txpDistributionsHash :: !(Hash [TxDistribution])\n    } deriving (Show, Eq, Generic)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/895619d7056fe397e9c2a56d88994f167263c397/txp/Pos/Txp/Core/Types.hs#L262)。\n\n| 字段大小       | 类型          | 描述                          |\n|------------------|---------------|--------------------------------------|\n| 4                | Word32        | Tx proof number                      |\n| size(MerkleRoot) | MerkleRoot Tx | MerkleRoot                           |\n| size(Hash)       | Hash          | Hash of the list of `TxWitness`      |\n| size(Hash)       | Hash          | Hash of the list of `TxDistribution` |\n\n### GtProof\n\n``` haskell\n-- | Proof of MpcData.\n-- We can use ADS for commitments, openings, shares as well,\n-- if we find it necessary.\ndata GtProof\n    = CommitmentsProof !(Hash CommitmentsMap) !(Hash VssCertificatesMap)\n    | OpeningsProof !(Hash OpeningsMap) !(Hash VssCertificatesMap)\n    | SharesProof !(Hash SharesMap) !(Hash VssCertificatesMap)\n    | CertificatesProof !(Hash VssCertificatesMap)\n    deriving (Show, Eq, Generic)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/1bab05d8a199ed6e9af066d4994ef13abdb95da7/godtossing/Pos/Ssc/GodTossing/Core/Types.hs#L232)。\n\n| 标签大小 | 标签类型 | 标签值 | 描述               | 字段大小 | 字段 类型 |\n|----------|----------|-----------|---------------------------|------------|------------|\n| 1        | Word8    | 0x00      | Tag for CommitmentsProof  |            |            |\n|          |          |           |                           | size(Hash) | Hash       |\n|          |          |           |                           | size(Hash) | Hash       |\n|          |          | 0x01      | Tag for OpeningsProof     |            |            |\n|          |          |           |                           | size(Hash) | Hash       |\n|          |          |           |                           | size(Hash) | Hash       |\n|          |          | 0x02      | Tag for SharesProof       |            |            |\n|          |          |           |                           | size(Hash) | Hash       |\n|          |          |           |                           | size(Hash) | Hash       |\n|          |          | 0x03      | Tag for CertificatesProof |            |            |\n|          |          |           |                           | size(Hash) | Hash       |\n\n## 区块头部\n\n### 区块版本\n\n``` haskell\n-- | Communication protocol version.\ndata BlockVersion = BlockVersion\n    { bvMajor :: !Word16\n    , bvMinor :: !Word16\n    , bvAlt   :: !Word8\n    } deriving (Eq, Generic, Ord, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L144)。\n\n| 字段大小 | 类型   | 描述                      |\n|------------|--------|----------------------------------|\n| 2          | Word16 | Major version                    |\n| 2          | Word16 | Minor version                    |\n| 1          | Word8  | Alt version from initial US spec |\n\n### 软件版本\n\n``` haskell\nnewtype ApplicationName = ApplicationName\n    { getApplicationName :: Text\n    } deriving (Eq, Ord, Show, Generic, Typeable, ToString, Hashable, Buildable, NFData)\n\n-- | Numeric software version associated with ApplicationName.\ntype NumSoftwareVersion = Word32\n\n-- | Software version.\ndata SoftwareVersion = SoftwareVersion\n    { svAppName :: !ApplicationName\n    , svNumber  :: !NumSoftwareVersion\n    } deriving (Eq, Generic, Ord, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L170)。\n\n| 字段大小 | 类型        | 值 | 描述                                     |\n|------------|-------------|-------|-------------------------------------------------|\n| 1          | UVarInt Int | n     | Length of application name (should be &lt;= 10) |\n| n          | Word8\\[n\\]  |       | `svAppName`: UTF8 encoded application name      |\n| 4          | Word32      |       | `svNumber`                                      |\n\n### 主区块头部\n\n<!-- TODO: Replace all Main* and Genesis* by type (*Blockchain) -->\n\n| 字段大小                | 类型                | 描述         |\n|---------------------------|---------------------|---------------------|\n| 4                         | Word32              | Protocol magic      |\n| size(HeaderHash)          | HeaderHash          | Previous block hash |\n| size(MainProof)           | MainProof           | Body proof          |\n| size(MainConsensusData)   | MainConsensusData   | Consensus data      |\n| size(MainExtraHeaderData) | MainExtraHeaderData | MainExtraHeaderData |\n\n#### MainProof\n\n``` haskell\ntype SscProof SscGodTossing = GtProof\n\n-- | Proof that body of update message contains 'UpdatePayload'.\ntype UpdateProof = Hash UpdatePayload\n\n-- | Proof of everything contained in the payload.\ndata BodyProof (MainBlockchain ssc) = MainProof\n    { mpTxProof       :: !TxProof\n    , mpMpcProof      :: !(SscProof ssc)\n    , mpProxySKsProof :: !(Hash DlgPayload)\n    , mpUpdateProof   :: !UpdateProof\n    } deriving (Generic)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/2198551433ec666f2df400d49b87ced13f3bcbee/src/Pos/Block/Core/Main/Chain.hs#L42)。\n\n| 字段大小    | 类型         | 描述     |\n|---------------|--------------|-----------------|\n| size(TxProof) | TxProof      | mpTxProof       |\n| size(GtProof) | SscProof ssc | mpMpcProof      |\n| size(Hash)    | Hash         | mpProxySKsProof |\n| size(Hash)    | Hash         | mpUpdateProof   |\n\n#### MainConsensusData\n\n``` haskell\ndata ConsensusData (MainBlockchain ssc) = MainConsensusData\n    { -- | Id of the slot for which this block was generated.\n      _mcdSlot       :: !SlotId\n    , -- | Public key of the slot leader. It's essential to have it here,\n      -- because FTS gives us only hash of public key (aka 'StakeholderId').\n      _mcdLeaderKey  :: !PublicKey\n    , -- | Difficulty of chain ending in this block.\n      _mcdDifficulty :: !ChainDifficulty\n    , -- | Signature given by slot leader.\n      _mcdSignature  :: !(BlockSignature ssc)\n    } deriving (Generic, Show, Eq)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/2198551433ec666f2df400d49b87ced13f3bcbee/src/Pos/Block/Core/Main/Chain.hs#L48)。\n\n| 字段大小            | 类型            | 描述   |\n|-----------------------|-----------------|---------------|\n| size(SlotId)          | SlotId          | mcdSlot       |\n| size(PublicKey)       | PublicKey       | mcdLeaderKey  |\n| size(ChainDifficulty) | ChainDifficulty | mcdDifficulty |\n| 64                    | BlockSignature  | mcdSignature  |\n\n#### MainExtraHeaderData\n\n``` haskell\n-- | Represents main block header attributes: map from 1-byte integer to\n-- arbitrary-type value. To be used for extending header with new\n-- fields via softfork.\ntype BlockHeaderAttributes = Attributes ()\n\n-- | Represents main block header extra data\ndata MainExtraHeaderData = MainExtraHeaderData\n    { -- | Version of block.\n      _mehBlockVersion    :: !BlockVersion\n    , -- | Software version.\n      _mehSoftwareVersion :: !SoftwareVersion\n    , -- | Header attributes\n      _mehAttributes      :: !BlockHeaderAttributes\n    } deriving (Eq, Show, Generic)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/3a6ac3c5aa8d3ca87d8b409d5923e21b744b1e6b/src/Pos/Block/Core/Main/Types.hs#L73)。\n\n| 字段大小                  | 类型                  | 描述                                                                |\n|-----------------------------|-----------------------|----------------------------------------------------------------------------|\n| size(BlockVersion)          | BlockVersion          | Version of block                                                           |\n| size(SoftwareVersion)       | SoftwareVersion       | Software version                                                           |\n| size(BlockHeaderAttributes) | BlockHeaderAttributes | Header attributes (used for extending header with new fields via softfork) |\n\n### GenesisBlockHeader\n\n``` haskell\n-- | Header of block contains some kind of summary. There are various\n-- benefits which people get by separating header from other data.\n--\n-- The constructor has `Unsafe' prefix in its name, because there in\n-- general there may be some invariants which must hold for the\n-- contents of header.\ndata GenericBlockHeader b = UnsafeGenericBlockHeader\n    { -- | Pointer to the header of the previous block.\n      _gbhPrevBlock :: !(BHeaderHash b)\n    , -- | Proof of body.\n      _gbhBodyProof :: !(BodyProof b)\n    , -- | Consensus data to verify consensus algorithm.\n      _gbhConsensus :: !(ConsensusData b)\n    , -- | Any extra data.\n      _gbhExtra     :: !(ExtraHeaderData b)\n    } deriving (Generic)\n\n-- | Header of Genesis block.\ntype GenesisBlockHeader ssc = GenericBlockHeader (GenesisBlockchain ssc)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/b4b2c282b0e2a2e4415163e70dcb559396a2237c/src/Pos/Block/Core/Genesis/Types.hs#L63)。\n\n| 字段大小                 | 类型              | 描述                                  |\n|----------------------------|-------------------|----------------------------------------------|\n| 4                          | BHeaderHash b     | Pointer to the header of the previous block  |\n| 32                         | BodyProof b       | Proof of body                                |\n| size(GenesisProof)         | ConsensusData b   | Consensus data to verify consensus algorithm |\n| size(GenesisConsensusData) | ExtraHeaderData b | Any extra data                               |\n\n其中 `b` = `GenesisBlockchain ssc`。\n\n#### GenesisProof\n\n``` haskell\n-- | Proof of GenesisBody is just a hash of slot leaders list.\ndata BodyProof (GenesisBlockchain ssc) = GenesisProof\n    !(Hash SlotLeaders)\n    deriving (Eq, Generic, Show)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/b4b2c282b0e2a2e4415163e70dcb559396a2237c/src/Pos/Block/Core/Genesis/Chain.hs#L28)。\n\n| 字段大小 | 类型 | 描述               |\n|------------|------|---------------------------|\n| size(Hash) | Hash | Hash of slot leaders list |\n\n#### GenesisConsensusData\n\n``` haskell\ndata ConsensusData (GenesisBlockchain ssc) = GenesisConsensusData\n    { -- | Index of the slot for which this genesis block is relevant.\n      _gcdEpoch :: !EpochIndex\n    , -- | Difficulty of the chain ending in this genesis block.\n      _gcdDifficulty :: !ChainDifficulty\n    } deriving (Generic, Show, Eq)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/b4b2c282b0e2a2e4415163e70dcb559396a2237c/src/Pos/Block/Core/Genesis/Chain.hs#L31)。\n\n| 字段大小            | 类型            | 描述                                             |\n|-----------------------|-----------------|---------------------------------------------------------|\n| size(EpochIndex)      | EpochIndex      | Index of epoch for which this genesis block is relevant |\n| size(ChainDifficulty) | ChainDifficulty | Difficulty of the chain ending in this genesis block.   |\n\n### BlockHeader\n\n``` haskell\n-- | Either header of ordinary main block or genesis block.\ntype BlockHeader ssc = Either (GenesisBlockHeader ssc) (MainBlockHeader ssc)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/f571087e5b5af339767198141981c850227ca99c/src/Pos/Block/Core/Union/Types.hs#L39)。\n\n| 标签大小 | 标签类型 | 标签值 | 描述                  | 字段大小               |\n|----------|----------|-----------|------------------------------|--------------------------|\n| 1        | Word8    | 0x00      | Tag for `GenesisBlockHeader` |                          |\n|          |          |           |                              | size(GenesisBlockHeader) |\n|          |          | 0x01      | Tag for `MainBlockHeader`    |                          |\n|          |          |           |                              | size(MainBlockHeader)    |\n\n### 区块\n\n``` haskell\n-- | Either genesis block or main block.\ntype Block ssc = Either (GenesisBlock ssc) (MainBlock ssc)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/f571087e5b5af339767198141981c850227ca99c/src/Pos/Block/Core/Union/Types.hs#L42)。\n\n| 标签大小 | 标签类型 | 标签值 | 描述            | 字段大小         |\n|----------|----------|-----------|------------------------|--------------------|\n| 1        | Word8    | 0x00      | Tag for `GenesisBlock` |                    |\n|          |          |           |                        | size(GenesisBlock) |\n|          |          | 0x01      | Tag for `MainBlock`    |                    |\n|          |          |           |                        | size(MainBlock)    |\n\n## 区块交换信息\n\n### HeaderHash\n\n``` haskell\n-- | 'Hash' of block header. This should be @Hash (BlockHeader ssc)@\n-- but we don't want to have @ssc@ in 'HeaderHash' type.\ntype HeaderHash = Hash BlockHeaderStub\ndata BlockHeaderStub\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/2198551433ec666f2df400d49b87ced13f3bcbee/core/Pos/Core/Types.hs#L223)。\n\n### GetHeaders\n\n``` haskell\n-- | 'GetHeaders' message. Behaviour of the response depends on\n-- particular combination of 'mghFrom' and 'mghTo'.\n--\n-- * 'mghTo' resolves to some header (let's call it @top@ for\n-- convenience) -- node's tip if it's @Nothing@, header with hash in\n-- @Just@ if it's @Just@.\n--\n-- * If 'mghFrom' is empty, then semantics is \"request to return\n-- header of block @top@\".\n--\n-- * Otherwise (if 'mghFrom' isn't empty) it represents the set of\n-- checkpoints. Responding node will try to iterate headers from @top@\n-- to older until it reaches any checkpoint. If it finds checkpoint\n-- @c@, it returns all headers in range @[c.next..top]@. If it doesn't\n-- find any checkpoint or depth of searching exceeds\n-- 'recoveryHeadersMessage', it will try to find the newest checkpoint\n-- @cc@ from 'mghFrom' that's in main chain of responding node and\n-- then return at most 'recoveryHeadersMessage' headers starting with\n-- @cc@ as the oldest one, returning headers in range @l2 =\n-- [cc.next..x]@ where @x@ is either @top@ (in case @length l2 <\n-- recoveryHeadersMessage@) or some arbitrary header (and length is\n-- precisely 'recoveryHeadersMessage').\ndata MsgGetHeaders = MsgGetHeaders\n    { -- not guaranteed to be in any particular order\n      mghFrom :: ![HeaderHash]\n    , mghTo   :: !(Maybe HeaderHash)\n    } deriving (Generic, Show, Eq)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/c8620af754252ebb71b1f5bc369b4f672f46d537/src/Pos/Block/Network/Types.hs#L42)。\n\n| 字段大小        | 类型        | 值              | 描述                                  |\n|-------------------|-------------|--------------------|----------------------------------------------|\n| 1-9               | UVarInt Int | n                  | Number of checkpoints                        |\n| n \\* size(Hash)   | Hash\\[n\\]   |                    | List of length `n` with hashes               |\n| 1                 | Word8       | tag = 0x00 or 0x01 | Tag for optional `to` hash                   |\n| tag \\* size(Hash) | Hash        |                    | If tag is not `0x00` then hash of `to` block |\n\n### GetBlocks\n\n``` haskell\n-- | 'GetBlocks' message (see protocol specification).\ndata MsgGetBlocks = MsgGetBlocks\n    { mgbFrom :: !HeaderHash\n    , mgbTo   :: !HeaderHash\n    } deriving (Generic, Show, Eq)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/c8620af754252ebb71b1f5bc369b4f672f46d537/src/Pos/Block/Network/Types.hs#L54)。\n\n| 字段大小 | 类型 | 字段     |\n|------------|------|-----------|\n| size(Hash) | Hash | `mgbFrom` |\n| size(Hash) | Hash | `mgbTo`   |\n\n### Headers\n\n``` haskell\n-- | 'Headers' message (see protocol specification).\nnewtype MsgHeaders ssc =\n    MsgHeaders (NewestFirst NE (BlockHeader ssc))\n    deriving (Generic, Show, Eq)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/c8620af754252ebb71b1f5bc369b4f672f46d537/src/Pos/Block/Network/Types.hs#L65)。\n\n| 字段大小             | 类型             | 值 | 描述             |\n|------------------------|------------------|-------|-------------------------|\n| 1-9                    | UVarInt Int      | n     | Number of block headers |\n| n \\* size(BlockHeader) | BlockHeader\\[n\\] |       | `n` block headers       |\n\n### Block\n\n``` haskell\n-- | 'Block' message (see protocol specification).\nnewtype MsgBlock ssc =\n    MsgBlock (Block ssc)\n    deriving (Generic, Show)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/c8620af754252ebb71b1f5bc369b4f672f46d537/src/Pos/Block/Network/Types.hs#L70)。\n\n| 字段大小  | 类型          | 值 | 描述                    |\n|-------------|---------------|-------|--------------------------------|\n| 1-9         | UVarInt Int64 | n     | Size of `Block` in bytes       |\n| size(Block) | Block         |       | `Block` with size of `n` bytes |\n\n包含一个 `Block`。我们对区块大小进行编码，然后对区块进行编码，以便在不消耗整个区块的情况下，如果大小错误，我们可以拒绝区块。\n\n## Transaction sending\n\n要发送转账，您需要创建 `TxAux` 数据类型并将其发送到节点。本节介绍了成功执行发送所需的所有数据类型。\n\n### Transaction input\n\n``` haskell\n-- | Represents transaction identifier as 'Hash' of 'Tx'.\ntype TxId = Hash Tx\n\n-- | Transaction input.\ndata TxIn = TxIn\n    { -- | Which transaction's output is used\n      txInHash  :: !TxId\n      -- | Index of the output in transaction's outputs\n    , txInIndex :: !Word32\n    } deriving (Eq, Ord, Show, Generic, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/895619d7056fe397e9c2a56d88994f167263c397/txp/Pos/Txp/Core/Types.hs#L147)。\n\n| 字段大小 | 类型   | 字段 name |\n|------------|--------|------------|\n| size(Hash) | Hash   | txInHash   |\n| 4          | Word32 | txInIndex  |\n\n### 转账输出\n\n``` haskell\n-- | Transaction output.\ndata TxOut = TxOut\n    { txOutAddress :: !Address\n    , txOutValue   :: !Coin\n    } deriving (Eq, Ord, Generic, Show, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/895619d7056fe397e9c2a56d88994f167263c397/txp/Pos/Txp/Core/Types.hs#L160)。\n\n| 字段大小    | 类型    | 字段 name   |\n|---------------|---------|--------------|\n| size(Address) | Address | txOutAddress |\n| size(Coin)    | Coin    | txOutValue   |\n\n例子：\n\n    ghci> let addr = PubKeyAddress (abstractHash somePk) (Attributes (AddrPkAttrs Nothing) \"a\")\n    ghci> hexEncode addr\n    \"001e380dea393a631ad563154a13bc5ee49fa4b62a60218358b5dcb875e00161cf52c5ec\"\n    ghci> hexEncode $ TxOut addr (mkCoin 1000)\n    \"001e380dea393a631ad563154a13bc5ee49fa4b62a60218358b5dcb875e00161cf52c5ec0064\"\n\n### 转账输出分配\n\n``` haskell\ntype TxOutDistribution = [(StakeholderId, Coin)]\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/src/Pos/Txp/Core/Types.hs#L129)。\n\n定义 `distr_size(n) = n * (size(Hash) + size(Coin))`。\n\n| 字段大小     | 类型             | 描述                               |\n|----------------|------------------|-------------------------------------------|\n| distr\\_size(n) | <Hash,Coin>\\[n\\] | Array of pairs for StakeholderId and Coin |\n\n### 转账输出辅助词\n\n``` haskell\n-- | Transaction output and auxilary data corresponding to it.\ndata TxOutAux = TxOutAux\n    { toaOut   :: !TxOut             -- ^ Tx output\n    , toaDistr :: !TxOutDistribution -- ^ Stake distribution\n                                     -- associated with output\n    } deriving (Show, Eq)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/src/Pos/Txp/Core/Types.hs#L173)。\n\n| 字段大小              | 类型              | 字段 name |\n|-------------------------|-------------------|------------|\n| size(TxOut)             | TxOut             | toaOut     |\n| size(TxOutDistribution) | TxOutDistribution | toaDistr   |\n\n### 转账签名数据\n\n``` haskell\n-- | Data that is being signed when creating a TxSig.\ndata TxSigData = TxSigData\n    { -- | Input that we're signing (i.e. our signature certifies that we own\n      -- funds referenced by this input)\n      txSigInput     :: !TxIn\n      -- | Outputs of the transaction (i.e. our signature certifies that we\n      -- actually want the funds to go to these particular outputs)\n    , txSigOutsHash  :: !(Hash (NonEmpty TxOut))\n      -- | Distribution of the transaction\n    , txSigDistrHash :: !(Hash TxDistribution)\n    }\n    deriving (Eq, Show, Generic, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/src/Pos/Txp/Core/Types.hs#L80)。\n\n| 字段大小 | 类型 | 描述    |\n|------------|------|----------------|\n| size(TxIn) | TxIn | txSigInput     |\n| size(Hash) | Hash | txSigOutsHash  |\n| size(Hash) | Hash | txSigDistrHash |\n\n### 转账见证\n\n``` haskell\n-- | 'Signature' of addrId.\ntype TxSig = Signature TxSigData\n\n-- | A witness for a single input.\ndata TxInWitness\n    = PkWitness { twKey :: !PublicKey\n                , twSig :: !TxSig }\n    | ScriptWitness { twValidator :: !Script\n                    , twRedeemer  :: !Script }\n    | RedeemWitness { twRedeemKey :: !RedeemPublicKey\n                    , twRedeemSig :: !(RedeemSignature TxSigData) }\n    | UnknownWitnessType !Word8 !ByteString\n    deriving (Eq, Show, Generic, Typeable)\n\n-- | A witness is a proof that a transaction is allowed to spend the funds it\n-- spends (by providing signatures, redeeming scripts, etc). A separate proof\n-- is provided for each input.\ntype TxWitness = Vector TxInWitness\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/src/Pos/Txp/Core/Types.hs#L96)。\n\n| 标签大小 | 标签类型 | 标签值 | 描述                | 字段大小            | 字段 类型                | 字段 name  |\n|----------|----------|-----------|----------------------------|-----------------------|---------------------------|-------------|\n| 1        | Word8    | 0x00      | Tag for PkWitness          |                       |                           |             |\n|          |          |           |                            | size(PublicKey)       | PublicKey                 | twKey       |\n|          |          |           |                            | 64                    | TxSig                     | twSig       |\n|          |          | 0x01      | Tag for ScriptWitness      |                       |                           |             |\n|          |          |           |                            | size(Script)          | Script                    | twValidator |\n|          |          |           |                            | size(Script)          | Script                    | twRedeemer  |\n|          |          | 0x02      | Tag for RedeemWitness      |                       |                           |             |\n|          |          |           |                            | size(RedeemPublicKey) | RedeemPublicKey           | twRedeemKey |\n|          |          |           |                            | size(RedeemSignature) | RedeemSignature TxSigData | twRedeemSig |\n|          |          | 0x03      | Tag for UnknownWitnessType |                       |                           |             |\n|          |          |           |                            | 1                     | Word8                     |             |\n|          |          |           |                            |                       | ByteString                |             |\n\n### 转账\n\n``` haskell\n-- | Transaction.\ndata Tx = UnsafeTx\n    { _txInputs     :: !(NonEmpty TxIn)  -- ^ Inputs of transaction.\n    , _txOutputs    :: !(NonEmpty TxOut) -- ^ Outputs of transaction.\n    , _txAttributes :: !TxAttributes     -- ^ Attributes of transaction\n    } deriving (Eq, Ord, Generic, Show, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/src/Pos/Txp/Core/Types.hs#L196)。\n\n| 字段大小         | 类型         | 值 | 描述                   |\n|--------------------|--------------|-------|-------------------------------|\n| 1-9                | UVarInt Int  | n     | Number of transaction inputs  |\n| n \\* size(TxIn)    | TxIn\\[n\\]    |       | Array of transaction inputs   |\n| 1-9                | UVarInt Int  | m     | Number of transaction outputs |\n| m \\* size(TxOut)   | TxOut\\[m\\]   |       | Array of transaction outputs  |\n| size(TxAttributes) | TxAttributes |       | Attributes of transaction     |\n\n### 转账分发\n\n``` haskell\n-- | Distribution of “fake” stake that follow-the-satoshi would use\n-- for a particular transaction.  Length of stored list must be same\n-- as length of '_txOutputs' of corresponding transaction.\nnewtype TxDistribution = TxDistribution\n    { getTxDistribution :: NonEmpty TxOutDistribution\n    } deriving (Eq, Show, Generic, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/src/Pos/Txp/Core/Types.hs#L134)。\n\n虽然转账分发可以使用前面的序列化策略来作为列表的列表存储，但经常发生我们通过了空列表的列表的情况。在这种情况下，我们应该更有效地存储这些列表。\n\n| 标签大小 | 标签类型 | 标签值 | 描述              | 字段大小     | 字段 类型       | 值 |\n|----------|----------|-----------|--------------------------|----------------|------------------|-------|\n| 1        | Word8    | 0x00      | List of empty lists      |                |                  |       |\n|          |          |           |                          | 1-9            | UVarInt Int      |       |\n|          |          | 0x01      | Some lists are not empty |                |                  |       |\n|          |          |           |                          | 1-9            | UVarInt Int      | n     |\n|          |          |           |                          | distr\\_size(n) | <Hash,Coin>\\[n\\] |       |\n\n### 转账分配\n\n``` haskell\n-- | Transaction + auxiliary data\ndata TxAux = TxAux\n    { taTx           :: !Tx\n    , taWitness      :: !TxWitness\n    , taDistribution :: !TxDistribution\n    } deriving (Generic, Show, Eq)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/ab543154d3ff34d3432620ac2557187d124b7d4f/txp/Pos/Txp/Core/Types.hs#L205)。\n\n| 字段大小           | 类型           | 描述              |\n|----------------------|----------------|--------------------------|\n| size(Tx)             | Tx             | Transaction itself       |\n| size(TxWitness)      | TxWitness      | Witness for transaction  |\n| size(TxDistribution) | TxDistribution | Transaction distribution |\n\n<!-- TODO: describe full creation of transaction by bytes -->\n\n## 委派\n\n请阅读[委派信息](/technical/protocols/csl-application-level/#delegation-messages)机制的解释，在这里你只能找到消息格式的描述。\n\n### 代理证书\n\n类似于 `Signature`\n\n``` haskell\n-- | Proxy certificate, made of ω + public key of delegate.\nnewtype ProxyCert w = ProxyCert { unProxyCert :: CC.XSignature }\n    deriving (Eq, Ord, Show, Generic, NFData, Hashable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Crypto/Signing.hs#L209)。\n\n| 字段大小 | 类型        | 描述                                 |\n|------------|-------------|---------------------------------------------|\n| 64         | Word8\\[64\\] | `unProxyCert`: 64 bytes of signature string |\n\n消息大小限制：64。\n\n例子：\n\n    ghci> (issuerPk, issuerSk) <- keyGen\n    ghci> hexEncode issuerPk\n    \"0659c8e27599dc4709dab3bb58ce50d0729150fc238010fd3a68dcf07c621bdc\"\n    ghci> (delegatePk, delegateSk) <- keyGen\n    ghci> hexEncode delegatePk\n    \"5eaf0944733da8386c427656a876b20ae411fa686ea4bb165b53a311c868c287\"\n    ghci> let cert = createProxyCert issuerSk delegatePk (0, 10) :: ProxyCert (EpochIndex, EpochIndex)\n    ghci> hexEncode cert\n    \"8db543c5fff7dd5dab609d04a834cda77958faf48cabee351def8985a2ec7dae71c7b2f0390caa54c61c9d41f5228e1a0b5da1c08638b99d03a1c02c81cb1607\"\n    ghci> verifyProxyCert issuerPk delegatePk (0, 10) cert\n    True\n\n### 代理密钥\n\n``` haskell\n-- | Convenient wrapper for secret key, that's basically ω + certificate.\ndata ProxySecretKey w = ProxySecretKey\n    { pskOmega      :: w\n    , pskIssuerPk   :: PublicKey\n    , pskDelegatePk :: PublicKey\n    , pskCert       :: ProxyCert w\n    } deriving (Eq, Ord, Show, Generic)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Crypto/Signing.hs#L224)。\n\n| 字段大小      | 类型        | 描述   |\n|-----------------|-------------|---------------|\n| size(w)         | w           | pskOmega      |\n| size(PublicKey) | PublicKey   | pskIssuerPk   |\n| size(PublicKey) | PublicKey   | pskDelegatePk |\n| size(ProxyCert) | ProxyCert w | pskCert       |\n\n### 代理签名\n\n``` haskell\n-- | Delegate signature made with certificate-based permission. @w@\n-- stays for message type used in proxy (ω in the implementation\n-- notes), @a@ for type of message signed.\ndata ProxySignature w a = ProxySignature\n    { psigPsk :: ProxySecretKey w\n    , psigSig :: CC.XSignature\n    } deriving (Eq, Ord, Show, Generic)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Crypto/Signing.hs#L256)。\n\n| 字段大小     | 类型           | 描述 |\n|----------------|----------------|-------------|\n| size(PproxySK) | ProxySecretKey | psigPsk     |\n| 64             | XSignature     | psigSig     |\n\n### 代理密钥和轻量级委派的签名\n\n**警告：目前，轻量级委派被禁用，并在 [Shelley 版本](https://cardanoroadmap.com/)进行了重新编写，因此一下信息可能已过时。**\n\n#### 密钥\n\n``` haskell\n-- | Same alias for the proxy secret key (see 'ProxySigLight').\ntype ProxySKLight = ProxySecretKey (EpochIndex, EpochIndex)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L238)。\n\n| 字段大小      | 类型                               | 描述   |\n|-----------------|------------------------------------|---------------|\n| 1-10            | UVarInt Word64                     | from epoch    |\n| 1-10            | UVarInt Word64                     | to epoch      |\n| size(PublicKey) | PublicKey                          | pskIssuerPk   |\n| size(PublicKey) | PublicKey                          | pskDelegatePk |\n| 64              | ProxyCert (EpochIndex, EpochIndex) | pskCert       |\n\n例子：\n\n    ghci> let proxySk = createProxySecretKey issuerSk delegatePk (0, 10) :: ProxySKLight\n    ghci> hexEncode proxySk\n    \"000a0659c8e27599dc4709dab3bb58ce50d0729150fc238010fd3a68dcf07c621bdc5eaf0944733da8386\n    c427656a876b20ae411fa686ea4bb165b53a311c868c2878db543c5fff7dd5dab609d04a834cda77958faf\n    48cabee351def8985a2ec7dae71c7b2f0390caa54c61c9d41f5228e1a0b5da1c08638b99d03a1c02c81cb1607\"\n    ghci> verifyProxySecretKey proxySk\n    True\n\n#### 签名\n\n``` haskell\n-- | Proxy signature used in csl -- holds a pair of epoch\n-- indices. Block is valid if it's epoch index is inside this range.\ntype ProxySigLight a = ProxySignature (EpochIndex, EpochIndex) a\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L235)。\n\n| 字段大小      | 类型                               | 描述  |\n|-----------------|------------------------------------|--------------|\n| 1-10            | UVarInt Word64                     | from epoch   |\n| 1-10            | UVarInt Word64                     | to epoch     |\n| size(PublicKey) | PublicKey                          | pdDelegatePk |\n| 64              | ProxyCert (EpochIndex, EpochIndex) | pdCert       |\n| 64              | Signature                          | pdSig        |\n\n例子\n\n    ghci> let proxyLightSig = proxySign delegateSk proxySk proxySk :: ProxySigLight ProxySKLight\n    ghci> hexEncode proxyLightSig\n    \"000a5eaf0944733da8386c427656a876b20ae411fa686ea4bb165b53a311c868c2878db543c5fff7dd5dab609d04a\n    834cda77958faf48cabee351def8985a2ec7dae71c7b2f0390caa54c61c9d41f5228e1a0b5da1c08638b99d03a1c02\n    c81cb1607e764468529599312ebe4dd5587383e5ccd3c2755401b22c8ff08827ecabd1afc8c634e17085ec83179193\n    afad2868e6aabce3e3e46e3170d077ee4e8613aa700\"\n    ghci> proxyVerify issuerPk proxyLightSig (== (0, 10)) proxySk\n    True\n\n### 代理密钥和重量级代理签名\n\n#### 密钥\n\n``` haskell\n-- | Correspondent SK for no-ttl proxy signature scheme.\ntype ProxySKHeavy = ProxySecretKey EpochIndex\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L247)。\n\n| 字段大小      | 类型                 | 描述   |\n|-----------------|----------------------|---------------|\n| 1-10            | UVarInt Word64       | epoch         |\n| size(PublicKey) | PublicKey            | pskIssuerPk   |\n| size(PublicKey) | PublicKey            | pskDelegatePk |\n| 64              | ProxyCert EpochIndex | pskCert       |\n\n#### 签名\n\n``` haskell\n-- | Simple proxy signature without ttl/epoch index\n-- constraints. 'EpochIndex' inside is needed for replay attack\n-- prevention.\ntype ProxySigHeavy a = ProxySignature EpochIndex a\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L244)。\n\n| 字段大小      | 类型                 | 描述  |\n|-----------------|----------------------|--------------|\n| 1-10            | UVarInt Word64       | epoch        |\n| size(PublicKey) | PublicKey            | pdDelegatePk |\n| 64              | ProxyCert EpochIndex | pdCert       |\n| 64              | Signature            | pdSig        |\n\n### 轻量级委派确认\n\n**警告：目前，轻量级委派被禁用，并在 [Shelley 版本](https://cardanoroadmap.com/)进行了重新编写，因此一下信息可能已过时。**\n\n#### ProxySKLightConfirmation\n\n``` haskell\n-- | Confirmation of light cert type.\ntype ProxySKLightConfirmation = (ProxySKLight, ProxySigLight ProxySKLight)\n```\n\n| 字段大小          | 描述           |\n|---------------------|-----------------------|\n| size(ProxySKLight)  | Certificate           |\n| size(ProxySigLight) | Proof for certificate |\n\n## 更新系统\n\n### 更新投票\n\n``` haskell\n-- | ID of software update proposal\ntype UpId = Hash UpdateProposal\n\n-- | Vote for update proposal\ndata UpdateVote = UpdateVote\n    { -- | Public key of stakeholder, who votes\n      uvKey        :: !PublicKey\n    , -- | Proposal to which this vote applies\n      uvProposalId :: !UpId\n    , -- | Approval/rejection bit\n      uvDecision   :: !Bool\n    , -- | Signature of (Update proposal, Approval/rejection bit)\n      --   by stakeholder\n      uvSignature  :: !(Signature (UpId, Bool))\n    } deriving (Eq, Show, Generic, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/fbe9760bd50ea136203e54d578d62ed3070b5513/update/Pos/Update/Core/Types.hs#L255)。\n\n| 字段大小      | 类型      | 字段        |\n|-----------------|-----------|--------------|\n| size(PublicKey) | PublicKey | uvKey        |\n| size(Hash)      | Hash      | uvProposalId |\n| 1               | Bool      | uvDecision   |\n| 64              | Signature | uvSignature  |\n\n### 投票标识符\n\n``` haskell\ntype VoteId = (UpId, PublicKey, Bool)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/fbe9760bd50ea136203e54d578d62ed3070b5513/update/Pos/Update/Core/Types.hs#L252)。\n\n| 字段大小      | 类型      | 描述             |\n|-----------------|-----------|-------------------------|\n| size(Hash)      | Hash      | Hash of update proposal |\n| size(PublicKey) | PublicKey | Public key              |\n| 1               | Bool      | Vote result             |\n\n有关字段的更多描述，请参阅 *UpdateVote* 消息描述。`VoteId` 是 `(uvProposalId, uvKey, uvDecision)`。\n\n### 区块版本数据\n\n``` haskell\n-- | Data which is associated with 'BlockVersion'.\ndata BlockVersionData = BlockVersionData\n    { bvdScriptVersion     :: !ScriptVersion\n    , bvdSlotDuration      :: !Millisecond\n    , bvdMaxBlockSize      :: !Byte\n    , bvdMaxHeaderSize     :: !Byte\n    , bvdMaxTxSize         :: !Byte\n    , bvdMaxProposalSize   :: !Byte\n    , bvdMpcThd            :: !CoinPortion\n    , bvdHeavyDelThd       :: !CoinPortion\n    , bvdUpdateVoteThd     :: !CoinPortion\n    , bvdUpdateProposalThd :: !CoinPortion\n    , bvdUpdateImplicit    :: !FlatSlotId\n    , bvdUpdateSoftforkThd :: !CoinPortion\n    } deriving (Show, Eq, Generic, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/64bc3ade3555dd4035da3f4bcb15223c9c22f518/core/Pos/Core/Types.hs#L201)。\n\n| 字段大小    | 类型           | 字段                |\n|---------------|----------------|----------------------|\n| 1-3           | UVarInt Word16 | bvdScriptVersion     |\n| size(Integer) | Integer        | bvdSlotDuration      |\n| size(Integer) | Integer        | bvdMaxBlockSize      |\n| size(Integer) | Integer        | bvdMaxHeaderSize     |\n| size(Integer) | Integer        | bvdMaxTxSize         |\n| size(Integer) | Integer        | bvdMaxProposalSize   |\n| 8             | Word64         | bvdMpcThd            |\n| 8             | Word64         | bvdHeavyDelThd       |\n| 8             | Word64         | bvdUpdateVoteThd     |\n| 8             | Word64         | bvdUpdateProposalThd |\n| 8             | Word64         | bvdUpdateImplicit    |\n| 8             | Word64         | bvdUpdateSoftforkThd |\n\n### 更新数据\n\n``` haskell\n-- | Data which describes update. It is specific for each system.\ndata UpdateData = UpdateData\n    { udAppDiffHash  :: !(Hash Raw)\n    -- ^ Hash of binary diff between two applications. This diff can\n    -- be passed to updater to create new application.\n    , udPkgHash      :: !(Hash Raw)\n    -- ^ Hash of package to install new application. This package can\n    -- be used to install new application from scratch instead of\n    -- updating existing application.\n    , udUpdaterHash  :: !(Hash Raw)\n    -- ^ Hash if update application which can be used to install this\n    -- update (relevant only when updater is used, not package).\n    , udMetadataHash :: !(Hash Raw)\n    -- ^ Hash of metadata relevant to this update.  It is raw hash,\n    -- because metadata can include image or something\n    -- (maybe). Anyway, we can always use `unsafeHash`.\n    } deriving (Eq, Show, Generic, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/update/Pos/Update/Core/Types.hs#L224)。\n\n| 字段大小 | 类型 | 字段          |\n|------------|------|----------------|\n| size(Hash) | Hash | udAppDiffHash  |\n| size(Hash) | Hash | udPkgHash      |\n| size(Hash) | Hash | udUpdaterHash  |\n| size(Hash) | Hash | udMetadataHash |\n\n### 系统标签\n\n``` haskell\n-- | Tag of system for which update data is purposed, e.g. win64, mac32\nnewtype SystemTag = SystemTag { getSystemTag :: Text }\n  deriving (Eq, Ord, Show, Generic, Buildable, Hashable, Lift, Typeable)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/732a2c765a417ba0a5010df81061c4473f80a0dc/update/Pos/Update/Core/Types.hs#L81)。\n\n`SystemTag` 按 UTF-8 编码为 `ByteString`。\n\n| 字段大小 | 类型          | 值 | 字段                           |\n|------------|---------------|-------|---------------------------------|\n| 1-9        | UVarInt Int64 | n     | Size of text in bytes           |\n| n          | Word8\\[n\\]    |       | `n` bytes of UTF-8 encoded text |\n\n### 更新协议\n\n``` haskell\ntype UpAttributes = Attributes ()\n\n-- | Proposal for software update\ndata UpdateProposal = UnsafeUpdateProposal\n    { upBlockVersion     :: !BlockVersion\n    , upBlockVersionData :: !BlockVersionData\n    , upSoftwareVersion  :: !SoftwareVersion\n    , upData             :: !(HM.HashMap SystemTag UpdateData)\n    -- ^ UpdateData for each system which this update affects.\n    -- It must be non-empty.\n    , upAttributes       :: !UpAttributes\n    -- ^ Attributes which are currently empty, but provide\n    -- extensibility.\n    , upFrom             :: !PublicKey\n    -- ^ Who proposed this UP.\n    , upSignature        :: !(Signature UpdateProposalToSign)\n    } deriving (Eq, Show, Generic, Typeable)\n```\n\n| 字段大小                                | 类型                           | 值 | 字段              |\n|-------------------------------------------|--------------------------------|-------|--------------------|\n| 5                                         | BlockVersion                   |       | upBlockVersion     |\n| size(BlockVersionData)                    | BlockVersionData               |       | upBlockVersionData |\n| size(SoftwareVersion)                     | SoftwareVersion                |       | upSoftwareVersion  |\n| 1-9                                       | UVarInt Int                    | n     |                    |\n| n \\* (size(SystemTag) + size(UpdateData)) | <SystemTag, UpdateData>\\[n\\]   |       | upData             |\n| size(Attributes ())                       | Attributes ()                  |       | upAttributes       |\n| size(PublicKey)                           | PublicKey                      |       | upFrom             |\n| size(Signature)                           | Signature UpdateProposalToSign |       | upSignature        |\n\n## 对等点数据\n\n### HandlerSpec\n\n``` haskell\ndata HandlerSpec\n    = ConvHandler { hsReplyType :: MessageName}\n    | UnknownHandler Word8 ByteString\n    deriving (Show, Generic, Eq)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/414817a6f8c8de405553c8ba1325e1366dc7b60e/infra/Pos/Communication/Types/Protocol.hs#L80)。\n\n| 类型                                           | 大小           | 值     | Following data |\n|------------------------------------------------|----------------|-----------|----------------|\n| ConvHandler m where m : UnsignedVarInt &lt; 64 | Word8          | 01xx xxxx | none           |\n| ConvHandler m where m : Unknown                | Word8 + TinyBS | 0000 0001 | ByteString     |\n| UnknownHandler w8 bs                           | Word8 + TinyBS | w8        | bs             |\n\n例子：\n\n    ghci> hexEncode (ConvHandler (messageName (Proxy :: Proxy MsgGetHeaders)))\n    \"44\"\n    ghci> hexEncode (UnknownHandler 10 \"aba\")\n    \"0a03616261\"\n\n### VerInfo\n\n``` haskell\ntype HandlerSpecs = HashMap MessageName HandlerSpec\n\nnewtype InSpecs = InSpecs HandlerSpecs\n    deriving (Eq, Show, Generic)\n\nnewtype OutSpecs = OutSpecs HandlerSpecs\n    deriving (Eq, Show, Generic)\n\ndata VerInfo = VerInfo\n    { vIMagic        :: Int32\n    , vIBlockVersion :: BlockVersion\n    , vIInHandlers   :: HandlerSpecs\n    , vIOutHandlers  :: HandlerSpecs\n    } deriving (Eq, Generic, Show)\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/414817a6f8c8de405553c8ba1325e1366dc7b60e/infra/Pos/Communication/Types/Protocol.hs#L102)。\n\n| 字段大小         | 类型         | 字段            |\n|--------------------|--------------|------------------|\n| 4                  | Int32        | `vIMagic`        |\n| 5                  | BlockVersion | `vIBlockVersion` |\n| size(HandlerSpecs) | HandlerSpecs | `vIInHandlers`   |\n| size(HandlerSpecs) | HandlerSpecs | `vIOutHandlers`  |\n\n`HandlerSpec` 只是在消息名称和这些消息的处理方式之间进行映射：通过单消息风格或对话风格+消息标签。这个映射被编码为其他 `Map` - 列表对。\n\n`InSpecs` 和 `OutSpecs` 只是 `HandlerSpecs` 的封装。这些封装只用于保证类型安全，以区分传入和传出消息的规范。\n\n<!-- TODO: didn't find examples of inSpecs :( -->\n\n### PeerData\n\n``` haskell\ntype PeerData = VerInfo\n```\n\n[源代码链接](https://github.com/input-output-hk/cardano-sl/blob/414817a6f8c8de405553c8ba1325e1366dc7b60e/infra/Pos/Communication/Types/Protocol.hs#L47)。\n\n| 字段大小    | 类型    | 描述       |\n|---------------|---------|-------------------|\n| size(VerInfo) | VerInfo | MessageName table |\n\n我们发送的 `VerInfo` 在[这里](https://github.com/input-output-hk/cardano-sl/blob/81b40e54bb5dda2e94850ccc9a835b46e5c445b5/src/Pos/Launcher/Runner.hs#L286)创建。\n\n例子：\n\n``` haskell\nghci> let ourVerInfo = VerInfo protocolMagic lastKnownBlockVersion mempty outSpecs\nghci> let peerIdExample = PeerId \"0123456789ABCD\"\nghci> hexEncode ourVerInfo\n\"0000000000000000000004030800000103020900030801010103020901030802\n020103020902030803030103020903\"\nghci> hexEncode ((peerIdExample, ourVerInfo) :: PeerData)\n\"3031323334353637383941424344000000000000000000000403080000010302\n0900030801010103020901030802020103020902030803030103020903\"\n```\n",
      "fileAbsolutePath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-13-binary.cn.md"
    },
    "SitePage /cn/welcome-text/": {
      "layout": "index",
      "jsonName": "cn-welcome-text.json",
      "internalComponentName": "ComponentCnWelcomeText",
      "path": "/cn/welcome-text/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/welcome-text/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "e33300c8db0d3293130d9d5478355afe",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/welcome-text/": {
      "layout": "index",
      "jsonName": "en-welcome-text.json",
      "internalComponentName": "ComponentEnWelcomeText",
      "path": "/en/welcome-text/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/welcome-text/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "e64854796306dc291dd67ec395365580",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/introduction/": {
      "layout": "index",
      "jsonName": "en-introduction.json",
      "internalComponentName": "ComponentEnIntroduction",
      "path": "/en/introduction/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/introduction/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "7fc5035f18a0688c6f06c003b75f02d3",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/installation/": {
      "layout": "index",
      "jsonName": "en-installation.json",
      "internalComponentName": "ComponentEnInstallation",
      "path": "/en/installation/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/installation/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "bb25e39ce34b8afe395ce855cbb9617b",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/for-contributors/": {
      "layout": "index",
      "jsonName": "en-for-contributors.json",
      "internalComponentName": "ComponentEnForContributors",
      "path": "/en/for-contributors/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/for-contributors/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "4fb8f4ca217f92d472f488597bec37f0",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/intro-text/": {
      "layout": "index",
      "jsonName": "cn-intro-text.json",
      "internalComponentName": "ComponentCnIntroText",
      "path": "/cn/intro-text/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/intro-text/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "100eb224b7d15375cab46909d912172b",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/glossary/": {
      "layout": "index",
      "jsonName": "en-glossary.json",
      "internalComponentName": "ComponentEnGlossary",
      "path": "/en/glossary/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/glossary/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "5cc7028abd6a463ec324288497c0085a",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/post-1": {
      "layout": "index",
      "jsonName": "en-post-1.json",
      "internalComponentName": "ComponentEnPost1",
      "path": "/en/post-1",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/post-1",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "4d3e722e4a3e9e1729efd6ad4ee639d0",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/introduction/": {
      "layout": "index",
      "jsonName": "cn-introduction.json",
      "internalComponentName": "ComponentCnIntroduction",
      "path": "/cn/introduction/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/introduction/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "c65329c749218c53df4a5147031c4510",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/installation": {
      "layout": "index",
      "jsonName": "cn-installation.json",
      "internalComponentName": "ComponentCnInstallation",
      "path": "/cn/installation",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/installation",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "cde353d39bf5f3751f222dda4c21ff19",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/intro-text/": {
      "layout": "index",
      "jsonName": "en-intro-text.json",
      "internalComponentName": "ComponentEnIntroText",
      "path": "/en/intro-text/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/intro-text/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "b90188c9310d4a55d5258dc6005c89b3",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/for-contributors/": {
      "layout": "index",
      "jsonName": "cn-for-contributors.json",
      "internalComponentName": "ComponentCnForContributors",
      "path": "/cn/for-contributors/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/for-contributors/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "4f47988c35c1646c3a8d720501fb1a15",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/glossary": {
      "layout": "index",
      "jsonName": "cn-glossary.json",
      "internalComponentName": "ComponentCnGlossary",
      "path": "/cn/glossary",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/glossary",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "dc0947f8e16b4b398835f265a5bb73e6",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/cardano/differences-between-paper-and-the-implementation/": {
      "layout": "index",
      "jsonName": "en-cardano-differences-between-paper-and-the-implementation.json",
      "internalComponentName": "ComponentEnCardanoDifferencesBetweenPaperAndTheImplementation",
      "path": "/en/cardano/differences-between-paper-and-the-implementation/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/cardano/differences-between-paper-and-the-implementation/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "712358d8f52998baed49d272deba9ae5",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/cardano/addresses/": {
      "layout": "index",
      "jsonName": "en-cardano-addresses.json",
      "internalComponentName": "ComponentEnCardanoAddresses",
      "path": "/en/cardano/addresses/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/cardano/addresses/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "42ae8232a7fdd63affccafa242633263",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/cardano/balance-and-stake/": {
      "layout": "index",
      "jsonName": "en-cardano-balance-and-stake.json",
      "internalComponentName": "ComponentEnCardanoBalanceAndStake",
      "path": "/en/cardano/balance-and-stake/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/cardano/balance-and-stake/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "60413a2073c81f5026aa6e72df76e9c9",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/cardano/topology/": {
      "layout": "index",
      "jsonName": "en-cardano-topology.json",
      "internalComponentName": "ComponentEnCardanoTopology",
      "path": "/en/cardano/topology/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/cardano/topology/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "5a4ed41ade3ab2931a469217f904e2e6",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/cardano/monetary-policy/": {
      "layout": "index",
      "jsonName": "en-cardano-monetary-policy.json",
      "internalComponentName": "ComponentEnCardanoMonetaryPolicy",
      "path": "/en/cardano/monetary-policy/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/cardano/monetary-policy/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "411a1b4acbc8258e9a5adca768f0b681",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/cardano/transaction-fees/": {
      "layout": "index",
      "jsonName": "en-cardano-transaction-fees.json",
      "internalComponentName": "ComponentEnCardanoTransactionFees",
      "path": "/en/cardano/transaction-fees/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/cardano/transaction-fees/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "df80057ac86a99302396b96e56b61a6b",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/cardano/explorer/": {
      "layout": "index",
      "jsonName": "en-cardano-explorer.json",
      "internalComponentName": "ComponentEnCardanoExplorer",
      "path": "/en/cardano/explorer/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/cardano/explorer/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "76930f7546eab8201d02e691154646e7",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/for-contributors/building-cardano-sl-from-source-code/": {
      "layout": "index",
      "jsonName": "en-for-contributors-building-cardano-sl-from-source-code.json",
      "internalComponentName": "ComponentEnForContributorsBuildingCardanoSlFromSourceCode",
      "path": "/en/for-contributors/building-cardano-sl-from-source-code/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/for-contributors/building-cardano-sl-from-source-code/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "4a97f6cb7e5f794e6557de00422d2d49",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/technical/cardano-sl-launcher/": {
      "layout": "index",
      "jsonName": "en-technical-cardano-sl-launcher.json",
      "internalComponentName": "ComponentEnTechnicalCardanoSlLauncher",
      "path": "/en/technical/cardano-sl-launcher/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/technical/cardano-sl-launcher/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "b83efa5cf901158b59d5e7287cfcc8a3",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/for-contributors/haddock-documentation/": {
      "layout": "index",
      "jsonName": "en-for-contributors-haddock-documentation.json",
      "internalComponentName": "ComponentEnForContributorsHaddockDocumentation",
      "path": "/en/for-contributors/haddock-documentation/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/for-contributors/haddock-documentation/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "f29b6a1c0d799cce48e0ca5cb9d1bdb1",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/technical/cardano-sl-explorer/": {
      "layout": "index",
      "jsonName": "en-technical-cardano-sl-explorer.json",
      "internalComponentName": "ComponentEnTechnicalCardanoSlExplorer",
      "path": "/en/technical/cardano-sl-explorer/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/technical/cardano-sl-explorer/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "cecc6c56367248bf7776119901a0791b",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/technical/leader-selection-in-cardano-sl/": {
      "layout": "index",
      "jsonName": "en-technical-leader-selection-in-cardano-sl.json",
      "internalComponentName": "ComponentEnTechnicalLeaderSelectionInCardanoSl",
      "path": "/en/technical/leader-selection-in-cardano-sl/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/technical/leader-selection-in-cardano-sl/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "1957744e87f7cf9cbdf93c12c83fae51",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/technical/formal-specification-for-a-cardano-wallet/": {
      "layout": "index",
      "jsonName": "en-technical-formal-specification-for-a-cardano-wallet.json",
      "internalComponentName": "ComponentEnTechnicalFormalSpecificationForACardanoWallet",
      "path": "/en/technical/formal-specification-for-a-cardano-wallet/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/technical/formal-specification-for-a-cardano-wallet/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "199b529ddc6fc95ac3fe621165a68e01",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/timeline/testnet-era/": {
      "layout": "index",
      "jsonName": "en-timeline-testnet-era.json",
      "internalComponentName": "ComponentEnTimelineTestnetEra",
      "path": "/en/timeline/testnet-era/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/timeline/testnet-era/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "7a6b64e3d80c867cb06c661c9e5a5e4f",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/timeline/bootstrap-era/": {
      "layout": "index",
      "jsonName": "en-timeline-bootstrap-era.json",
      "internalComponentName": "ComponentEnTimelineBootstrapEra",
      "path": "/en/timeline/bootstrap-era/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/timeline/bootstrap-era/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "0a9bfbb8e664e6700b0ff263781810c1",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/technical/cardano-sl-wallet-backend/": {
      "layout": "index",
      "jsonName": "en-technical-cardano-sl-wallet-backend.json",
      "internalComponentName": "ComponentEnTechnicalCardanoSlWalletBackend",
      "path": "/en/technical/cardano-sl-wallet-backend/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/technical/cardano-sl-wallet-backend/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "7ed4f7c5c686cc06afd93fd6e77d2c19",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/technical/hd-wallets/": {
      "layout": "index",
      "jsonName": "en-technical-hd-wallets.json",
      "internalComponentName": "ComponentEnTechnicalHdWallets",
      "path": "/en/technical/hd-wallets/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/technical/hd-wallets/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "63c727313571ab160be4d8be44e90663",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/cardano/differences/": {
      "layout": "index",
      "jsonName": "cn-cardano-differences.json",
      "internalComponentName": "ComponentCnCardanoDifferences",
      "path": "/cn/cardano/differences/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/cardano/differences/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "d8f8d7b38ecb2a9c1dfcec0c8343cc02",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/cardano/addresses/": {
      "layout": "index",
      "jsonName": "cn-cardano-addresses.json",
      "internalComponentName": "ComponentCnCardanoAddresses",
      "path": "/cn/cardano/addresses/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/cardano/addresses/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "f8acd09c5258d3c7e42a1df7606314cc",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/cardano/balance-and-stake/": {
      "layout": "index",
      "jsonName": "cn-cardano-balance-and-stake.json",
      "internalComponentName": "ComponentCnCardanoBalanceAndStake",
      "path": "/cn/cardano/balance-and-stake/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/cardano/balance-and-stake/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "4910ac13a45433916cd9a71faeea549d",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/cardano/topology/": {
      "layout": "index",
      "jsonName": "cn-cardano-topology.json",
      "internalComponentName": "ComponentCnCardanoTopology",
      "path": "/cn/cardano/topology/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/cardano/topology/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "7d44357f21549de843e59258930c6e58",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/cardano/monetary-policy/": {
      "layout": "index",
      "jsonName": "cn-cardano-monetary-policy.json",
      "internalComponentName": "ComponentCnCardanoMonetaryPolicy",
      "path": "/cn/cardano/monetary-policy/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/cardano/monetary-policy/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "5b55238b439605d033175ab1255e030c",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/cardano/transaction-fees/": {
      "layout": "index",
      "jsonName": "cn-cardano-transaction-fees.json",
      "internalComponentName": "ComponentCnCardanoTransactionFees",
      "path": "/cn/cardano/transaction-fees/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/cardano/transaction-fees/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "419d98a9f3bf48b6236bb8df7d2a73ea",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/technical/cardano-sl-wallet-frontend/": {
      "layout": "index",
      "jsonName": "en-technical-cardano-sl-wallet-frontend.json",
      "internalComponentName": "ComponentEnTechnicalCardanoSlWalletFrontend",
      "path": "/en/technical/cardano-sl-wallet-frontend/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/technical/cardano-sl-wallet-frontend/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "80633c52bc21f2052b5c28acf23cdadf",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/cardano/explorer/": {
      "layout": "index",
      "jsonName": "cn-cardano-explorer.json",
      "internalComponentName": "ComponentCnCardanoExplorer",
      "path": "/cn/cardano/explorer/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/cardano/explorer/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "994c4709b14b86543288b8d5ccc337f8",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/timeline/reward-era/": {
      "layout": "index",
      "jsonName": "en-timeline-reward-era.json",
      "internalComponentName": "ComponentEnTimelineRewardEra",
      "path": "/en/timeline/reward-era/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/timeline/reward-era/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "1245bba479920db06d4fdb72c8b23618",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/cardano/proof-of-stake/": {
      "layout": "index",
      "jsonName": "cn-cardano-proof-of-stake.json",
      "internalComponentName": "ComponentCnCardanoProofOfStake",
      "path": "/cn/cardano/proof-of-stake/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/cardano/proof-of-stake/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "26302371bc152c2191bbbc01e0d70f8f",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/technical/launcher/": {
      "layout": "index",
      "jsonName": "cn-technical-launcher.json",
      "internalComponentName": "ComponentCnTechnicalLauncher",
      "path": "/cn/technical/launcher/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/technical/launcher/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "ab1615a5ac286575c668cc4b6f359f9f",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/technical/explorer/": {
      "layout": "index",
      "jsonName": "cn-technical-explorer.json",
      "internalComponentName": "ComponentCnTechnicalExplorer",
      "path": "/cn/technical/explorer/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/technical/explorer/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "725f1519f6d2b549a35304bb86d77b02",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/technical/leader-selection/": {
      "layout": "index",
      "jsonName": "cn-technical-leader-selection.json",
      "internalComponentName": "ComponentCnTechnicalLeaderSelection",
      "path": "/cn/technical/leader-selection/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/technical/leader-selection/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "885922a57573865fb0a39f9f5f47b200",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/technical/delegation/": {
      "layout": "index",
      "jsonName": "cn-technical-delegation.json",
      "internalComponentName": "ComponentCnTechnicalDelegation",
      "path": "/cn/technical/delegation/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/technical/delegation/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "46b4bdb2774186ee1aed8bac1dd67083",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/for-contributors/haddock/": {
      "layout": "index",
      "jsonName": "cn-for-contributors-haddock.json",
      "internalComponentName": "ComponentCnForContributorsHaddock",
      "path": "/cn/for-contributors/haddock/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/for-contributors/haddock/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "54ea92b4c1570e08963312c2480acde9",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/technical/hd-wallets/": {
      "layout": "index",
      "jsonName": "cn-technical-hd-wallets.json",
      "internalComponentName": "ComponentCnTechnicalHdWallets",
      "path": "/cn/technical/hd-wallets/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/technical/hd-wallets/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "d7a99d9ef5e70299336b70abf5b78da4",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/technical/wallet-frontend/": {
      "layout": "index",
      "jsonName": "cn-technical-wallet-frontend.json",
      "internalComponentName": "ComponentCnTechnicalWalletFrontend",
      "path": "/cn/technical/wallet-frontend/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/technical/wallet-frontend/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "1eeab0874bdaa23d823773669410b60a",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/technical/wallet-backend/": {
      "layout": "index",
      "jsonName": "cn-technical-wallet-backend.json",
      "internalComponentName": "ComponentCnTechnicalWalletBackend",
      "path": "/cn/technical/wallet-backend/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/technical/wallet-backend/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "a33c6da07b3680ab8b96d86fb5db8294",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/for-contributors/building-from-source/": {
      "layout": "index",
      "jsonName": "cn-for-contributors-building-from-source.json",
      "internalComponentName": "ComponentCnForContributorsBuildingFromSource",
      "path": "/cn/for-contributors/building-from-source/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/for-contributors/building-from-source/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "a6b1d12881a61ab1c6c5a2d76d91cab5",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/timeline/testnet/": {
      "layout": "index",
      "jsonName": "cn-timeline-testnet.json",
      "internalComponentName": "ComponentCnTimelineTestnet",
      "path": "/cn/timeline/testnet/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/timeline/testnet/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "23104e5fe196f73bc2425b5ced088031",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/timeline/bootstrap/": {
      "layout": "index",
      "jsonName": "cn-timeline-bootstrap.json",
      "internalComponentName": "ComponentCnTimelineBootstrap",
      "path": "/cn/timeline/bootstrap/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/timeline/bootstrap/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "9127ac1a1fe181d6fa32cbba7a1c4994",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/timeline/reward/": {
      "layout": "index",
      "jsonName": "cn-timeline-reward.json",
      "internalComponentName": "ComponentCnTimelineReward",
      "path": "/cn/timeline/reward/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/timeline/reward/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "1933dfaa2075731bcdcf391167440014",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/technical/plutus/introduction/": {
      "layout": "index",
      "jsonName": "en-technical-plutus-introduction.json",
      "internalComponentName": "ComponentEnTechnicalPlutusIntroduction",
      "path": "/en/technical/plutus/introduction/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/technical/plutus/introduction/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "55dd4da3c4f08c10f6ae0d0faf51bd60",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/technical/plutus/types/": {
      "layout": "index",
      "jsonName": "en-technical-plutus-types.json",
      "internalComponentName": "ComponentEnTechnicalPlutusTypes",
      "path": "/en/technical/plutus/types/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/technical/plutus/types/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "5af3663fadd2b61cbe6ff1c471c8301b",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/technical/plutus/examples/": {
      "layout": "index",
      "jsonName": "en-technical-plutus-examples.json",
      "internalComponentName": "ComponentEnTechnicalPlutusExamples",
      "path": "/en/technical/plutus/examples/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/technical/plutus/examples/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "2d12490e3152962a3b7813b972e0b55f",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/technical/wallet/api/": {
      "layout": "index",
      "jsonName": "en-technical-wallet-api.json",
      "internalComponentName": "ComponentEnTechnicalWalletApi",
      "path": "/en/technical/wallet/api/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/technical/wallet/api/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "fa7e2c37249f8919c9b76818f21f3a1d",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/technical/plutus/types/": {
      "layout": "index",
      "jsonName": "cn-technical-plutus-types.json",
      "internalComponentName": "ComponentCnTechnicalPlutusTypes",
      "path": "/cn/technical/plutus/types/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/technical/plutus/types/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "201544532c9de4b859cca84586e10b0b",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/technical/plutus/introduction/": {
      "layout": "index",
      "jsonName": "cn-technical-plutus-introduction.json",
      "internalComponentName": "ComponentCnTechnicalPlutusIntroduction",
      "path": "/cn/technical/plutus/introduction/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/technical/plutus/introduction/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "ae84c800a73efca4b648bfe6c75f1008",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/technical/plutus/examples/": {
      "layout": "index",
      "jsonName": "cn-technical-plutus-examples.json",
      "internalComponentName": "ComponentCnTechnicalPlutusExamples",
      "path": "/cn/technical/plutus/examples/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/technical/plutus/examples/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "6f75b021dbf17447879b508c1f4e9818",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/technical-details/": {
      "layout": "index",
      "jsonName": "en-technical-details.json",
      "internalComponentName": "ComponentEnTechnicalDetails",
      "path": "/en/technical-details/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/technical-details/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "950215304ae612f3d6295ada5080122a",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/technical": {
      "layout": "index",
      "jsonName": "cn-technical.json",
      "internalComponentName": "ComponentCnTechnical",
      "path": "/cn/technical",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/technical",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "2ccabb15528adf943e3a4ad52b3490df",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/cardano/ouroboros-proof-of-stake-algorithm/": {
      "layout": "index",
      "jsonName": "en-cardano-ouroboros-proof-of-stake-algorithm.json",
      "internalComponentName": "ComponentEnCardanoOuroborosProofOfStakeAlgorithm",
      "path": "/en/cardano/ouroboros-proof-of-stake-algorithm/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/cardano/ouroboros-proof-of-stake-algorithm/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "f49f8301d0afec3c425672dc75f41db3",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/cardano/transactions/": {
      "layout": "index",
      "jsonName": "en-cardano-transactions.json",
      "internalComponentName": "ComponentEnCardanoTransactions",
      "path": "/en/cardano/transactions/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/cardano/transactions/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "14c68df929ffb70afdbfa6e1dfc4239a",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/cardano/update-mechanism/": {
      "layout": "index",
      "jsonName": "en-cardano-update-mechanism.json",
      "internalComponentName": "ComponentEnCardanoUpdateMechanism",
      "path": "/en/cardano/update-mechanism/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/cardano/update-mechanism/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "2431e6001403334a501f6b12ed75460c",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/cardano/transaction-assurance-level/": {
      "layout": "index",
      "jsonName": "en-cardano-transaction-assurance-level.json",
      "internalComponentName": "ComponentEnCardanoTransactionAssuranceLevel",
      "path": "/en/cardano/transaction-assurance-level/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/cardano/transaction-assurance-level/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "455c1db592de5bbb2da8443026169945",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/technical/cardano-sl-updater/": {
      "layout": "index",
      "jsonName": "en-technical-cardano-sl-updater.json",
      "internalComponentName": "ComponentEnTechnicalCardanoSlUpdater",
      "path": "/en/technical/cardano-sl-updater/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/technical/cardano-sl-updater/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "fc06269d223a12281da27317540167b7",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/technical/blocks-in-cardano-sl/": {
      "layout": "index",
      "jsonName": "en-technical-blocks-in-cardano-sl.json",
      "internalComponentName": "ComponentEnTechnicalBlocksInCardanoSl",
      "path": "/en/technical/blocks-in-cardano-sl/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/technical/blocks-in-cardano-sl/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "6b0a35b0ce5628f636aade6ce63aedef",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/technical/stake-delegation-in-cardano-sl/": {
      "layout": "index",
      "jsonName": "en-technical-stake-delegation-in-cardano-sl.json",
      "internalComponentName": "ComponentEnTechnicalStakeDelegationInCardanoSl",
      "path": "/en/technical/stake-delegation-in-cardano-sl/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/technical/stake-delegation-in-cardano-sl/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "f1b225141cdef4a13e7900d4a1447d6e",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/technical/cardano-sl-pvss/": {
      "layout": "index",
      "jsonName": "en-technical-cardano-sl-pvss.json",
      "internalComponentName": "ComponentEnTechnicalCardanoSlPvss",
      "path": "/en/technical/cardano-sl-pvss/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/technical/cardano-sl-pvss/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "0ba30ec901e598ee1c748903b95e1519",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/cardano/transactions/": {
      "layout": "index",
      "jsonName": "cn-cardano-transactions.json",
      "internalComponentName": "ComponentCnCardanoTransactions",
      "path": "/cn/cardano/transactions/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/cardano/transactions/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "106bc564cd99e1154df9221b7a998219",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/cardano/update-mechanism/": {
      "layout": "index",
      "jsonName": "cn-cardano-update-mechanism.json",
      "internalComponentName": "ComponentCnCardanoUpdateMechanism",
      "path": "/cn/cardano/update-mechanism/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/cardano/update-mechanism/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "f9fbdd61671a1d892f1685017d2f8268",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/cardano/transaction-assurance/": {
      "layout": "index",
      "jsonName": "cn-cardano-transaction-assurance.json",
      "internalComponentName": "ComponentCnCardanoTransactionAssurance",
      "path": "/cn/cardano/transaction-assurance/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/cardano/transaction-assurance/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "d10abefe9ff83b98f02fdb556f585f35",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/technical/updater/": {
      "layout": "index",
      "jsonName": "cn-technical-updater.json",
      "internalComponentName": "ComponentCnTechnicalUpdater",
      "path": "/cn/technical/updater/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/technical/updater/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "0a8e2f2d4c45ff8b975a53904d7e6f79",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/technical/blocks/": {
      "layout": "index",
      "jsonName": "cn-technical-blocks.json",
      "internalComponentName": "ComponentCnTechnicalBlocks",
      "path": "/cn/technical/blocks/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/technical/blocks/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "5207172bab604b8b39340de2e994243b",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/technical/pvss/": {
      "layout": "index",
      "jsonName": "cn-technical-pvss.json",
      "internalComponentName": "ComponentCnTechnicalPvss",
      "path": "/cn/technical/pvss/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/technical/pvss/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "1f311ce717f4eaae21a8877df689cd00",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/technical/protocols/time-warp-nt/": {
      "layout": "index",
      "jsonName": "en-technical-protocols-time-warp-nt.json",
      "internalComponentName": "ComponentEnTechnicalProtocolsTimeWarpNt",
      "path": "/en/technical/protocols/time-warp-nt/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/technical/protocols/time-warp-nt/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "6d4ca41db5a415916f84582ed4fffbfe",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/technical/protocols/p2p/": {
      "layout": "index",
      "jsonName": "cn-technical-protocols-p-2-p.json",
      "internalComponentName": "ComponentCnTechnicalProtocolsP2P",
      "path": "/cn/technical/protocols/p2p/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/technical/protocols/p2p/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "5975df2dcbb3283f55cd960d97341d60",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/technical/protocols/network-transport/": {
      "layout": "index",
      "jsonName": "cn-technical-protocols-network-transport.json",
      "internalComponentName": "ComponentCnTechnicalProtocolsNetworkTransport",
      "path": "/cn/technical/protocols/network-transport/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/technical/protocols/network-transport/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "49ad8f091d481798563f32838d980daf",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/technical/protocols/time-warp-nt/": {
      "layout": "index",
      "jsonName": "cn-technical-protocols-time-warp-nt.json",
      "internalComponentName": "ComponentCnTechnicalProtocolsTimeWarpNt",
      "path": "/cn/technical/protocols/time-warp-nt/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/technical/protocols/time-warp-nt/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "9bf73f9b75c24167ca3662c1d60243da",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/technical/protocols/csl-application-level/": {
      "layout": "index",
      "jsonName": "en-technical-protocols-csl-application-level.json",
      "internalComponentName": "ComponentEnTechnicalProtocolsCslApplicationLevel",
      "path": "/en/technical/protocols/csl-application-level/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/technical/protocols/csl-application-level/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "bb54b9907e13f8767483349c688711cf",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/technical/protocols/csl-application-level/": {
      "layout": "index",
      "jsonName": "cn-technical-protocols-csl-application-level.json",
      "internalComponentName": "ComponentCnTechnicalProtocolsCslApplicationLevel",
      "path": "/cn/technical/protocols/csl-application-level/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/technical/protocols/csl-application-level/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "d5ea188410440b7f1188a04430a8d569",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/technical/protocols/p2p/": {
      "layout": "index",
      "jsonName": "en-technical-protocols-p-2-p.json",
      "internalComponentName": "ComponentEnTechnicalProtocolsP2P",
      "path": "/en/technical/protocols/p2p/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/technical/protocols/p2p/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "f658d27ad83adefb418758450c00085c",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/technical/protocols/network-transport/": {
      "layout": "index",
      "jsonName": "en-technical-protocols-network-transport.json",
      "internalComponentName": "ComponentEnTechnicalProtocolsNetworkTransport",
      "path": "/en/technical/protocols/network-transport/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/technical/protocols/network-transport/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "222b7b0c83a51722464f05e2676dd99d",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/technical/cardano-sl-cli-options/": {
      "layout": "index",
      "jsonName": "en-technical-cardano-sl-cli-options.json",
      "internalComponentName": "ComponentEnTechnicalCardanoSlCliOptions",
      "path": "/en/technical/cardano-sl-cli-options/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/technical/cardano-sl-cli-options/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "c818fc4f7c551ee728d556ffd1de06d6",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/technical/cli-options/": {
      "layout": "index",
      "jsonName": "cn-technical-cli-options.json",
      "internalComponentName": "ComponentCnTechnicalCliOptions",
      "path": "/cn/technical/cli-options/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/technical/cli-options/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "6ec75e309f460709aa9da04e18d7a124",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/technical/protocols/binary-protocols/": {
      "layout": "index",
      "jsonName": "en-technical-protocols-binary-protocols.json",
      "internalComponentName": "ComponentEnTechnicalProtocolsBinaryProtocols",
      "path": "/en/technical/protocols/binary-protocols/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /en/technical/protocols/binary-protocols/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "a45c5541a4a62203757788937a39ff84",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/technical/protocols/binary-protocols/": {
      "layout": "index",
      "jsonName": "cn-technical-protocols-binary-protocols.json",
      "internalComponentName": "ComponentCnTechnicalProtocolsBinaryProtocols",
      "path": "/cn/technical/protocols/binary-protocols/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /cn/technical/protocols/binary-protocols/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "30157e5e78f2ac8bf48e3b64b6701edc",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/404/": {
      "layout": "index",
      "jsonName": "cn-404.json",
      "internalComponentName": "ComponentCn404",
      "path": "/cn/404/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/404.js",
      "componentChunkName": "component---src-pages-cn-404-js",
      "context": {},
      "pluginCreator___NODE": "Plugin gatsby-plugin-page-creator",
      "pluginCreatorId": "Plugin gatsby-plugin-page-creator",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/404.js",
      "id": "SitePage /cn/404/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "06e75d332f633e6c5e3d99eda9e25bfc",
        "description": "Plugin gatsby-plugin-page-creator",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /cn/": {
      "layout": "index",
      "jsonName": "cn.json",
      "internalComponentName": "ComponentCn",
      "path": "/cn/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/index.js",
      "componentChunkName": "component---src-pages-cn-index-js",
      "context": {},
      "pluginCreator___NODE": "Plugin gatsby-plugin-page-creator",
      "pluginCreatorId": "Plugin gatsby-plugin-page-creator",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/index.js",
      "id": "SitePage /cn/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "4901355c4070dc7ac44713cacc31fe2f",
        "description": "Plugin gatsby-plugin-page-creator",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /Document/": {
      "layout": "index",
      "jsonName": "document.json",
      "internalComponentName": "ComponentDocument",
      "path": "/Document/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "componentChunkName": "component---src-pages-document-js",
      "context": {},
      "pluginCreator___NODE": "Plugin gatsby-plugin-page-creator",
      "pluginCreatorId": "Plugin gatsby-plugin-page-creator",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/Document.js",
      "id": "SitePage /Document/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "77705a5482a4f77e49af86f61b29e241",
        "description": "Plugin gatsby-plugin-page-creator",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/404/": {
      "layout": "index",
      "jsonName": "en-404.json",
      "internalComponentName": "ComponentEn404",
      "path": "/en/404/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/404.js",
      "componentChunkName": "component---src-pages-en-404-js",
      "context": {},
      "pluginCreator___NODE": "Plugin gatsby-plugin-page-creator",
      "pluginCreatorId": "Plugin gatsby-plugin-page-creator",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/404.js",
      "id": "SitePage /en/404/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "f9e891e63a967b1c7170691b968b4fff",
        "description": "Plugin gatsby-plugin-page-creator",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /en/": {
      "layout": "index",
      "jsonName": "en.json",
      "internalComponentName": "ComponentEn",
      "path": "/en/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/index.js",
      "componentChunkName": "component---src-pages-en-index-js",
      "context": {},
      "pluginCreator___NODE": "Plugin gatsby-plugin-page-creator",
      "pluginCreatorId": "Plugin gatsby-plugin-page-creator",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/index.js",
      "id": "SitePage /en/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "e037de3c2ad08290e1ef23c659621612",
        "description": "Plugin gatsby-plugin-page-creator",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /": {
      "layout": "index",
      "jsonName": "index.json",
      "internalComponentName": "ComponentIndex",
      "path": "/",
      "component": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/index.js",
      "componentChunkName": "component---src-pages-index-js",
      "context": {},
      "pluginCreator___NODE": "Plugin gatsby-plugin-page-creator",
      "pluginCreatorId": "Plugin gatsby-plugin-page-creator",
      "componentPath": "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/index.js",
      "id": "SitePage /",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "38244749f7d0bb33410d63bf4e4e9709",
        "description": "Plugin gatsby-plugin-page-creator",
        "owner": "internal-data-bridge"
      }
    }
  },
  "status": {
    "plugins": {},
    "PLUGINS_HASH": "d8f8ba82f3a2900faa1730e2d8b6ed24"
  },
  "componentDataDependencies": {
    "nodes": {
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/content/welcome-text.en.md absPath of file >>> MarkdownRemark": [
        "/cn/welcome-text/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/content/welcome-text.cn.md absPath of file >>> MarkdownRemark": [
        "/en/welcome-text/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-01-index.en.md absPath of file >>> MarkdownRemark": [
        "/en/introduction/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-04-installation.en.md absPath of file >>> MarkdownRemark": [
        "/en/installation/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-13-for-contributors.en.md absPath of file >>> MarkdownRemark": [
        "/en/for-contributors/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/content/intro.en.md absPath of file >>> MarkdownRemark": [
        "/cn/intro-text/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-19-glossary.en.md absPath of file >>> MarkdownRemark": [
        "/en/glossary/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/AAA.en.md absPath of file >>> MarkdownRemark": [
        "/en/post-1"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-01-index.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/introduction/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-04-installation.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/installation"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/content/intro.cn.md absPath of file >>> MarkdownRemark": [
        "/en/intro-text/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-13-for-contributors.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/for-contributors/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-19-glossary.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/glossary"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-04-differences.en.md absPath of file >>> MarkdownRemark": [
        "/en/cardano/differences-between-paper-and-the-implementation/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-07-addresses.en.md absPath of file >>> MarkdownRemark": [
        "/en/cardano/addresses/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-13-balance-and-stake.en.md absPath of file >>> MarkdownRemark": [
        "/en/cardano/balance-and-stake/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-19-topology.en.md absPath of file >>> MarkdownRemark": [
        "/en/cardano/topology/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-01-monetary-policy.en.md absPath of file >>> MarkdownRemark": [
        "/en/cardano/monetary-policy/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-02-transaction-fees.en.md absPath of file >>> MarkdownRemark": [
        "/en/cardano/transaction-fees/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-05-explorer.en.md absPath of file >>> MarkdownRemark": [
        "/en/cardano/explorer/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/for-contributors/2017-01-01-building-from-source.md absPath of file >>> MarkdownRemark": [
        "/en/for-contributors/building-cardano-sl-from-source-code/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-02-launcher.md absPath of file >>> MarkdownRemark": [
        "/en/technical/cardano-sl-launcher/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/for-contributors/2017-01-03-haddock.md absPath of file >>> MarkdownRemark": [
        "/en/for-contributors/haddock-documentation/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-06-explorer.md absPath of file >>> MarkdownRemark": [
        "/en/technical/cardano-sl-explorer/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-14-leader-selection.md absPath of file >>> MarkdownRemark": [
        "/en/technical/leader-selection-in-cardano-sl/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-16-specification-wallet-backend.md absPath of file >>> MarkdownRemark": [
        "/en/technical/formal-specification-for-a-cardano-wallet/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-01-testnet.md absPath of file >>> MarkdownRemark": [
        "/en/timeline/testnet-era/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-02-bootstrap.md absPath of file >>> MarkdownRemark": [
        "/en/timeline/bootstrap-era/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-15-wallet-backend.md absPath of file >>> MarkdownRemark": [
        "/en/technical/cardano-sl-wallet-backend/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-14-hd-wallets.md absPath of file >>> MarkdownRemark": [
        "/en/technical/hd-wallets/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-04-differences.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/cardano/differences/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-07-addresses.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/cardano/addresses/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-13-balance-and-stake.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/cardano/balance-and-stake/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-19-topology.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/cardano/topology/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-01-monetary-policy.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/cardano/monetary-policy/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-02-transaction-fees.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/cardano/transaction-fees/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-05-16-wallet-frontend.md absPath of file >>> MarkdownRemark": [
        "/en/technical/cardano-sl-wallet-frontend/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-05-explorer.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/cardano/explorer/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/timeline/2017-01-03-reward.md absPath of file >>> MarkdownRemark": [
        "/en/timeline/reward-era/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-01-proof-of-stake.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/cardano/proof-of-stake/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-02-launcher.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/technical/launcher/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-06-explorer.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/technical/explorer/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-14-leader-selection.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/technical/leader-selection/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-16-delegation.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/technical/delegation/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/contributors/2017-01-03-haddock.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/for-contributors/haddock/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-14-hd-wallets.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/technical/hd-wallets/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-16-wallet-frontend.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/technical/wallet-frontend/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-05-15-wallet-backend.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/technical/wallet-backend/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/contributors/2017-01-01-building-from-source.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/for-contributors/building-from-source/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-01-testnet.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/timeline/testnet/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-02-bootstrap.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/timeline/bootstrap/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/timeline/2017-01-03-reward.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/timeline/reward/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-01-introduction.md absPath of file >>> MarkdownRemark": [
        "/en/technical/plutus/introduction/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-02-types.md absPath of file >>> MarkdownRemark": [
        "/en/technical/plutus/types/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/plutus/2017-01-03-examples.md absPath of file >>> MarkdownRemark": [
        "/en/technical/plutus/examples/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/wallet/2018-03-14-api-docs.md absPath of file >>> MarkdownRemark": [
        "/en/technical/wallet/api/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-02-types.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/technical/plutus/types/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-01-introduction.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/technical/plutus/introduction/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/plutus/2017-01-03-examples.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/technical/plutus/examples/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/2017-01-10-technical.en.md absPath of file >>> MarkdownRemark": [
        "/en/technical-details/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/2017-01-10-technical.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/technical"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-01-proof-of-stake.en.md absPath of file >>> MarkdownRemark": [
        "/en/cardano/ouroboros-proof-of-stake-algorithm/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-10-transactions.en.md absPath of file >>> MarkdownRemark": [
        "/en/cardano/transactions/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-01-16-updating.en.md absPath of file >>> MarkdownRemark": [
        "/en/cardano/update-mechanism/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/cardano/2017-02-03-transaction-assurance.en.md absPath of file >>> MarkdownRemark": [
        "/en/cardano/transaction-assurance-level/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-04-updater.md absPath of file >>> MarkdownRemark": [
        "/en/technical/cardano-sl-updater/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-07-blocks.md absPath of file >>> MarkdownRemark": [
        "/en/technical/blocks-in-cardano-sl/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-16-delegation.md absPath of file >>> MarkdownRemark": [
        "/en/technical/stake-delegation-in-cardano-sl/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-02-15-pvss.md absPath of file >>> MarkdownRemark": [
        "/en/technical/cardano-sl-pvss/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-10-transactions.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/cardano/transactions/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-01-16-updating.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/cardano/update-mechanism/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/cardano/2017-02-03-transaction-assurance.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/cardano/transaction-assurance/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-04-updater.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/technical/updater/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-07-blocks.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/technical/blocks/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-02-15-pvss.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/technical/pvss/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-07-time-warp-nt.md absPath of file >>> MarkdownRemark": [
        "/en/technical/protocols/time-warp-nt/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-04-p2p.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/technical/protocols/p2p/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-10-network-transport.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/technical/protocols/network-transport/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-07-time-warp-nt.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/technical/protocols/time-warp-nt/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-01-application-level.md absPath of file >>> MarkdownRemark": [
        "/en/technical/protocols/csl-application-level/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-01-application-level.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/technical/protocols/csl-application-level/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-04-p2p.md absPath of file >>> MarkdownRemark": [
        "/en/technical/protocols/p2p/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-10-network-transport.md absPath of file >>> MarkdownRemark": [
        "/en/technical/protocols/network-transport/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/2017-01-01-cli-options.md absPath of file >>> MarkdownRemark": [
        "/en/technical/cardano-sl-cli-options/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/2017-01-01-cli-options.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/technical/cli-options/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/en/docs/technical/protocols/2017-01-13-binary.md absPath of file >>> MarkdownRemark": [
        "/en/technical/protocols/binary-protocols/"
      ],
      "/Users/robinclark/iohk-sites/cardanodocs.com/src/pages/cn/docs/technical/protocols/2017-01-13-binary.cn.md absPath of file >>> MarkdownRemark": [
        "/cn/technical/protocols/binary-protocols/"
      ],
      "Site": [
        "LAYOUT___index"
      ],
      "SearchIndex < Site": [
        "LAYOUT___index"
      ]
    },
    "connections": {
      "MarkdownRemark": [
        "/cn/welcome-text/",
        "/en/welcome-text/",
        "/en/introduction/",
        "/en/installation/",
        "/en/for-contributors/",
        "/cn/intro-text/",
        "/en/glossary/",
        "/en/post-1",
        "/cn/introduction/",
        "/cn/installation",
        "/en/intro-text/",
        "/cn/for-contributors/",
        "/cn/glossary",
        "/en/cardano/differences-between-paper-and-the-implementation/",
        "/en/cardano/addresses/",
        "/en/cardano/balance-and-stake/",
        "/en/cardano/topology/",
        "/en/cardano/monetary-policy/",
        "/en/cardano/transaction-fees/",
        "/en/cardano/explorer/",
        "/en/for-contributors/building-cardano-sl-from-source-code/",
        "/en/technical/cardano-sl-launcher/",
        "/en/for-contributors/haddock-documentation/",
        "/en/technical/cardano-sl-explorer/",
        "/en/technical/leader-selection-in-cardano-sl/",
        "/en/technical/formal-specification-for-a-cardano-wallet/",
        "/en/timeline/testnet-era/",
        "/en/timeline/bootstrap-era/",
        "/en/technical/cardano-sl-wallet-backend/",
        "/en/technical/hd-wallets/",
        "/cn/cardano/differences/",
        "/cn/cardano/addresses/",
        "/cn/cardano/balance-and-stake/",
        "/cn/cardano/topology/",
        "/cn/cardano/monetary-policy/",
        "/cn/cardano/transaction-fees/",
        "/en/technical/cardano-sl-wallet-frontend/",
        "/cn/cardano/explorer/",
        "/en/timeline/reward-era/",
        "/cn/cardano/proof-of-stake/",
        "/cn/technical/launcher/",
        "/cn/technical/explorer/",
        "/cn/technical/leader-selection/",
        "/cn/technical/delegation/",
        "/cn/for-contributors/haddock/",
        "/cn/technical/hd-wallets/",
        "/cn/technical/wallet-frontend/",
        "/cn/technical/wallet-backend/",
        "/cn/for-contributors/building-from-source/",
        "/cn/timeline/testnet/",
        "/cn/timeline/bootstrap/",
        "/cn/timeline/reward/",
        "/en/technical/plutus/introduction/",
        "/en/technical/plutus/types/",
        "/en/technical/plutus/examples/",
        "/en/technical/wallet/api/",
        "/cn/technical/plutus/types/",
        "/cn/technical/plutus/introduction/",
        "/cn/technical/plutus/examples/",
        "/en/technical-details/",
        "/cn/technical",
        "/en/cardano/ouroboros-proof-of-stake-algorithm/",
        "/en/cardano/transactions/",
        "/en/cardano/update-mechanism/",
        "/en/cardano/transaction-assurance-level/",
        "/en/technical/cardano-sl-updater/",
        "/en/technical/blocks-in-cardano-sl/",
        "/en/technical/stake-delegation-in-cardano-sl/",
        "/en/technical/cardano-sl-pvss/",
        "/cn/cardano/transactions/",
        "/cn/cardano/update-mechanism/",
        "/cn/cardano/transaction-assurance/",
        "/cn/technical/updater/",
        "/cn/technical/blocks/",
        "/cn/technical/pvss/",
        "/en/technical/protocols/time-warp-nt/",
        "/cn/technical/protocols/p2p/",
        "/cn/technical/protocols/network-transport/",
        "/cn/technical/protocols/time-warp-nt/",
        "/en/technical/protocols/csl-application-level/",
        "/cn/technical/protocols/csl-application-level/",
        "/en/technical/protocols/p2p/",
        "/en/technical/protocols/network-transport/",
        "/en/technical/cardano-sl-cli-options/",
        "/cn/technical/cli-options/",
        "/en/technical/protocols/binary-protocols/",
        "/cn/technical/protocols/binary-protocols/",
        "/cn/",
        "/Document/",
        "/en/",
        "LAYOUT___index"
      ],
      "SitePage": [
        "/dev-404-page/"
      ]
    }
  }
}